
DL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b8  08009650  08009650  00019650  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009c08  08009c08  000201e8  2**0
                  CONTENTS
  4 .ARM          00000008  08009c08  08009c08  00019c08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009c10  08009c10  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009c10  08009c10  00019c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009c14  08009c14  00019c14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009c18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  200001e8  08009e00  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000052c  08009e00  0002052c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e1c7  00000000  00000000  0002025b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022ac  00000000  00000000  0002e422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c78  00000000  00000000  000306d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000981  00000000  00000000  00031348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000213d6  00000000  00000000  00031cc9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f2a2  00000000  00000000  0005309f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3403  00000000  00000000  00062341  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000048a0  00000000  00000000  00125744  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  00129fe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009638 	.word	0x08009638

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08009638 	.word	0x08009638

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a6 	b.w	8000fec <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9e08      	ldr	r6, [sp, #32]
 8000d2a:	460d      	mov	r5, r1
 8000d2c:	4604      	mov	r4, r0
 8000d2e:	460f      	mov	r7, r1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	d14a      	bne.n	8000dca <__udivmoddi4+0xa6>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4694      	mov	ip, r2
 8000d38:	d965      	bls.n	8000e06 <__udivmoddi4+0xe2>
 8000d3a:	fab2 f382 	clz	r3, r2
 8000d3e:	b143      	cbz	r3, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d44:	f1c3 0220 	rsb	r2, r3, #32
 8000d48:	409f      	lsls	r7, r3
 8000d4a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d4e:	4317      	orrs	r7, r2
 8000d50:	409c      	lsls	r4, r3
 8000d52:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d56:	fa1f f58c 	uxth.w	r5, ip
 8000d5a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d5e:	0c22      	lsrs	r2, r4, #16
 8000d60:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d64:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d68:	fb01 f005 	mul.w	r0, r1, r5
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d90a      	bls.n	8000d86 <__udivmoddi4+0x62>
 8000d70:	eb1c 0202 	adds.w	r2, ip, r2
 8000d74:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d78:	f080 811c 	bcs.w	8000fb4 <__udivmoddi4+0x290>
 8000d7c:	4290      	cmp	r0, r2
 8000d7e:	f240 8119 	bls.w	8000fb4 <__udivmoddi4+0x290>
 8000d82:	3902      	subs	r1, #2
 8000d84:	4462      	add	r2, ip
 8000d86:	1a12      	subs	r2, r2, r0
 8000d88:	b2a4      	uxth	r4, r4
 8000d8a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d8e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d92:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d96:	fb00 f505 	mul.w	r5, r0, r5
 8000d9a:	42a5      	cmp	r5, r4
 8000d9c:	d90a      	bls.n	8000db4 <__udivmoddi4+0x90>
 8000d9e:	eb1c 0404 	adds.w	r4, ip, r4
 8000da2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000da6:	f080 8107 	bcs.w	8000fb8 <__udivmoddi4+0x294>
 8000daa:	42a5      	cmp	r5, r4
 8000dac:	f240 8104 	bls.w	8000fb8 <__udivmoddi4+0x294>
 8000db0:	4464      	add	r4, ip
 8000db2:	3802      	subs	r0, #2
 8000db4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000db8:	1b64      	subs	r4, r4, r5
 8000dba:	2100      	movs	r1, #0
 8000dbc:	b11e      	cbz	r6, 8000dc6 <__udivmoddi4+0xa2>
 8000dbe:	40dc      	lsrs	r4, r3
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	e9c6 4300 	strd	r4, r3, [r6]
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d908      	bls.n	8000de0 <__udivmoddi4+0xbc>
 8000dce:	2e00      	cmp	r6, #0
 8000dd0:	f000 80ed 	beq.w	8000fae <__udivmoddi4+0x28a>
 8000dd4:	2100      	movs	r1, #0
 8000dd6:	e9c6 0500 	strd	r0, r5, [r6]
 8000dda:	4608      	mov	r0, r1
 8000ddc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de0:	fab3 f183 	clz	r1, r3
 8000de4:	2900      	cmp	r1, #0
 8000de6:	d149      	bne.n	8000e7c <__udivmoddi4+0x158>
 8000de8:	42ab      	cmp	r3, r5
 8000dea:	d302      	bcc.n	8000df2 <__udivmoddi4+0xce>
 8000dec:	4282      	cmp	r2, r0
 8000dee:	f200 80f8 	bhi.w	8000fe2 <__udivmoddi4+0x2be>
 8000df2:	1a84      	subs	r4, r0, r2
 8000df4:	eb65 0203 	sbc.w	r2, r5, r3
 8000df8:	2001      	movs	r0, #1
 8000dfa:	4617      	mov	r7, r2
 8000dfc:	2e00      	cmp	r6, #0
 8000dfe:	d0e2      	beq.n	8000dc6 <__udivmoddi4+0xa2>
 8000e00:	e9c6 4700 	strd	r4, r7, [r6]
 8000e04:	e7df      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000e06:	b902      	cbnz	r2, 8000e0a <__udivmoddi4+0xe6>
 8000e08:	deff      	udf	#255	; 0xff
 8000e0a:	fab2 f382 	clz	r3, r2
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	f040 8090 	bne.w	8000f34 <__udivmoddi4+0x210>
 8000e14:	1a8a      	subs	r2, r1, r2
 8000e16:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e1a:	fa1f fe8c 	uxth.w	lr, ip
 8000e1e:	2101      	movs	r1, #1
 8000e20:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e24:	fb07 2015 	mls	r0, r7, r5, r2
 8000e28:	0c22      	lsrs	r2, r4, #16
 8000e2a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e2e:	fb0e f005 	mul.w	r0, lr, r5
 8000e32:	4290      	cmp	r0, r2
 8000e34:	d908      	bls.n	8000e48 <__udivmoddi4+0x124>
 8000e36:	eb1c 0202 	adds.w	r2, ip, r2
 8000e3a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0x122>
 8000e40:	4290      	cmp	r0, r2
 8000e42:	f200 80cb 	bhi.w	8000fdc <__udivmoddi4+0x2b8>
 8000e46:	4645      	mov	r5, r8
 8000e48:	1a12      	subs	r2, r2, r0
 8000e4a:	b2a4      	uxth	r4, r4
 8000e4c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e50:	fb07 2210 	mls	r2, r7, r0, r2
 8000e54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e58:	fb0e fe00 	mul.w	lr, lr, r0
 8000e5c:	45a6      	cmp	lr, r4
 8000e5e:	d908      	bls.n	8000e72 <__udivmoddi4+0x14e>
 8000e60:	eb1c 0404 	adds.w	r4, ip, r4
 8000e64:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e68:	d202      	bcs.n	8000e70 <__udivmoddi4+0x14c>
 8000e6a:	45a6      	cmp	lr, r4
 8000e6c:	f200 80bb 	bhi.w	8000fe6 <__udivmoddi4+0x2c2>
 8000e70:	4610      	mov	r0, r2
 8000e72:	eba4 040e 	sub.w	r4, r4, lr
 8000e76:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e7a:	e79f      	b.n	8000dbc <__udivmoddi4+0x98>
 8000e7c:	f1c1 0720 	rsb	r7, r1, #32
 8000e80:	408b      	lsls	r3, r1
 8000e82:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e86:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e8a:	fa05 f401 	lsl.w	r4, r5, r1
 8000e8e:	fa20 f307 	lsr.w	r3, r0, r7
 8000e92:	40fd      	lsrs	r5, r7
 8000e94:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e98:	4323      	orrs	r3, r4
 8000e9a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e9e:	fa1f fe8c 	uxth.w	lr, ip
 8000ea2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ea6:	0c1c      	lsrs	r4, r3, #16
 8000ea8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eac:	fb08 f50e 	mul.w	r5, r8, lr
 8000eb0:	42a5      	cmp	r5, r4
 8000eb2:	fa02 f201 	lsl.w	r2, r2, r1
 8000eb6:	fa00 f001 	lsl.w	r0, r0, r1
 8000eba:	d90b      	bls.n	8000ed4 <__udivmoddi4+0x1b0>
 8000ebc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ec4:	f080 8088 	bcs.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ec8:	42a5      	cmp	r5, r4
 8000eca:	f240 8085 	bls.w	8000fd8 <__udivmoddi4+0x2b4>
 8000ece:	f1a8 0802 	sub.w	r8, r8, #2
 8000ed2:	4464      	add	r4, ip
 8000ed4:	1b64      	subs	r4, r4, r5
 8000ed6:	b29d      	uxth	r5, r3
 8000ed8:	fbb4 f3f9 	udiv	r3, r4, r9
 8000edc:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ee4:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ee8:	45a6      	cmp	lr, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x1da>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ef4:	d26c      	bcs.n	8000fd0 <__udivmoddi4+0x2ac>
 8000ef6:	45a6      	cmp	lr, r4
 8000ef8:	d96a      	bls.n	8000fd0 <__udivmoddi4+0x2ac>
 8000efa:	3b02      	subs	r3, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f02:	fba3 9502 	umull	r9, r5, r3, r2
 8000f06:	eba4 040e 	sub.w	r4, r4, lr
 8000f0a:	42ac      	cmp	r4, r5
 8000f0c:	46c8      	mov	r8, r9
 8000f0e:	46ae      	mov	lr, r5
 8000f10:	d356      	bcc.n	8000fc0 <__udivmoddi4+0x29c>
 8000f12:	d053      	beq.n	8000fbc <__udivmoddi4+0x298>
 8000f14:	b156      	cbz	r6, 8000f2c <__udivmoddi4+0x208>
 8000f16:	ebb0 0208 	subs.w	r2, r0, r8
 8000f1a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f1e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f22:	40ca      	lsrs	r2, r1
 8000f24:	40cc      	lsrs	r4, r1
 8000f26:	4317      	orrs	r7, r2
 8000f28:	e9c6 7400 	strd	r7, r4, [r6]
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	2100      	movs	r1, #0
 8000f30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f34:	f1c3 0120 	rsb	r1, r3, #32
 8000f38:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f3c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f40:	fa25 f101 	lsr.w	r1, r5, r1
 8000f44:	409d      	lsls	r5, r3
 8000f46:	432a      	orrs	r2, r5
 8000f48:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f4c:	fa1f fe8c 	uxth.w	lr, ip
 8000f50:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f54:	fb07 1510 	mls	r5, r7, r0, r1
 8000f58:	0c11      	lsrs	r1, r2, #16
 8000f5a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f5e:	fb00 f50e 	mul.w	r5, r0, lr
 8000f62:	428d      	cmp	r5, r1
 8000f64:	fa04 f403 	lsl.w	r4, r4, r3
 8000f68:	d908      	bls.n	8000f7c <__udivmoddi4+0x258>
 8000f6a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f6e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f72:	d22f      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f74:	428d      	cmp	r5, r1
 8000f76:	d92d      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000f78:	3802      	subs	r0, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	1b49      	subs	r1, r1, r5
 8000f7e:	b292      	uxth	r2, r2
 8000f80:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f84:	fb07 1115 	mls	r1, r7, r5, r1
 8000f88:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f8c:	fb05 f10e 	mul.w	r1, r5, lr
 8000f90:	4291      	cmp	r1, r2
 8000f92:	d908      	bls.n	8000fa6 <__udivmoddi4+0x282>
 8000f94:	eb1c 0202 	adds.w	r2, ip, r2
 8000f98:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f9c:	d216      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f9e:	4291      	cmp	r1, r2
 8000fa0:	d914      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000fa2:	3d02      	subs	r5, #2
 8000fa4:	4462      	add	r2, ip
 8000fa6:	1a52      	subs	r2, r2, r1
 8000fa8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fac:	e738      	b.n	8000e20 <__udivmoddi4+0xfc>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	4630      	mov	r0, r6
 8000fb2:	e708      	b.n	8000dc6 <__udivmoddi4+0xa2>
 8000fb4:	4639      	mov	r1, r7
 8000fb6:	e6e6      	b.n	8000d86 <__udivmoddi4+0x62>
 8000fb8:	4610      	mov	r0, r2
 8000fba:	e6fb      	b.n	8000db4 <__udivmoddi4+0x90>
 8000fbc:	4548      	cmp	r0, r9
 8000fbe:	d2a9      	bcs.n	8000f14 <__udivmoddi4+0x1f0>
 8000fc0:	ebb9 0802 	subs.w	r8, r9, r2
 8000fc4:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000fc8:	3b01      	subs	r3, #1
 8000fca:	e7a3      	b.n	8000f14 <__udivmoddi4+0x1f0>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	e7ea      	b.n	8000fa6 <__udivmoddi4+0x282>
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	e794      	b.n	8000efe <__udivmoddi4+0x1da>
 8000fd4:	4640      	mov	r0, r8
 8000fd6:	e7d1      	b.n	8000f7c <__udivmoddi4+0x258>
 8000fd8:	46d0      	mov	r8, sl
 8000fda:	e77b      	b.n	8000ed4 <__udivmoddi4+0x1b0>
 8000fdc:	3d02      	subs	r5, #2
 8000fde:	4462      	add	r2, ip
 8000fe0:	e732      	b.n	8000e48 <__udivmoddi4+0x124>
 8000fe2:	4608      	mov	r0, r1
 8000fe4:	e70a      	b.n	8000dfc <__udivmoddi4+0xd8>
 8000fe6:	4464      	add	r4, ip
 8000fe8:	3802      	subs	r0, #2
 8000fea:	e742      	b.n	8000e72 <__udivmoddi4+0x14e>

08000fec <__aeabi_idiv0>:
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop

08000ff0 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b082      	sub	sp, #8
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8000ff8:	1d39      	adds	r1, r7, #4
 8000ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffe:	2201      	movs	r2, #1
 8001000:	4803      	ldr	r0, [pc, #12]	; (8001010 <__io_putchar+0x20>)
 8001002:	f002 ffeb 	bl	8003fdc <HAL_UART_Transmit>
  return ch;
 8001006:	687b      	ldr	r3, [r7, #4]
}
 8001008:	4618      	mov	r0, r3
 800100a:	3708      	adds	r7, #8
 800100c:	46bd      	mov	sp, r7
 800100e:	bd80      	pop	{r7, pc}
 8001010:	200002f0 	.word	0x200002f0

08001014 <send_message>:

    int len = strlen(buffer);
    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
}

void send_message(uint8_t sensor_type, uint8_t sensor_id, uint8_t *payload, uint8_t length) {
 8001014:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001018:	b087      	sub	sp, #28
 800101a:	af00      	add	r7, sp, #0
 800101c:	603a      	str	r2, [r7, #0]
 800101e:	461a      	mov	r2, r3
 8001020:	4603      	mov	r3, r0
 8001022:	71fb      	strb	r3, [r7, #7]
 8001024:	460b      	mov	r3, r1
 8001026:	71bb      	strb	r3, [r7, #6]
 8001028:	4613      	mov	r3, r2
 800102a:	717b      	strb	r3, [r7, #5]
 800102c:	466b      	mov	r3, sp
 800102e:	461e      	mov	r6, r3
    uint8_t message[length + 5];
 8001030:	797b      	ldrb	r3, [r7, #5]
 8001032:	1d59      	adds	r1, r3, #5
 8001034:	1e4b      	subs	r3, r1, #1
 8001036:	613b      	str	r3, [r7, #16]
 8001038:	460a      	mov	r2, r1
 800103a:	2300      	movs	r3, #0
 800103c:	4690      	mov	r8, r2
 800103e:	4699      	mov	r9, r3
 8001040:	f04f 0200 	mov.w	r2, #0
 8001044:	f04f 0300 	mov.w	r3, #0
 8001048:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800104c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001050:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001054:	460a      	mov	r2, r1
 8001056:	2300      	movs	r3, #0
 8001058:	4614      	mov	r4, r2
 800105a:	461d      	mov	r5, r3
 800105c:	f04f 0200 	mov.w	r2, #0
 8001060:	f04f 0300 	mov.w	r3, #0
 8001064:	00eb      	lsls	r3, r5, #3
 8001066:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800106a:	00e2      	lsls	r2, r4, #3
 800106c:	460b      	mov	r3, r1
 800106e:	3307      	adds	r3, #7
 8001070:	08db      	lsrs	r3, r3, #3
 8001072:	00db      	lsls	r3, r3, #3
 8001074:	ebad 0d03 	sub.w	sp, sp, r3
 8001078:	466b      	mov	r3, sp
 800107a:	3300      	adds	r3, #0
 800107c:	60fb      	str	r3, [r7, #12]
    uint8_t checksum = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	75fb      	strb	r3, [r7, #23]

    message[0] = START_MARKER;
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	227e      	movs	r2, #126	; 0x7e
 8001086:	701a      	strb	r2, [r3, #0]
    message[1] = length;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	797a      	ldrb	r2, [r7, #5]
 800108c:	705a      	strb	r2, [r3, #1]
    message[2] = sensor_type;
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	79fa      	ldrb	r2, [r7, #7]
 8001092:	709a      	strb	r2, [r3, #2]
    message[3] = sensor_id;
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	79ba      	ldrb	r2, [r7, #6]
 8001098:	70da      	strb	r2, [r3, #3]

    for (uint8_t i = 0; i < length; i++) {
 800109a:	2300      	movs	r3, #0
 800109c:	75bb      	strb	r3, [r7, #22]
 800109e:	e011      	b.n	80010c4 <send_message+0xb0>
        message[4 + i] = payload[i];
 80010a0:	7dbb      	ldrb	r3, [r7, #22]
 80010a2:	683a      	ldr	r2, [r7, #0]
 80010a4:	441a      	add	r2, r3
 80010a6:	7dbb      	ldrb	r3, [r7, #22]
 80010a8:	3304      	adds	r3, #4
 80010aa:	7811      	ldrb	r1, [r2, #0]
 80010ac:	68fa      	ldr	r2, [r7, #12]
 80010ae:	54d1      	strb	r1, [r2, r3]
        checksum ^= payload[i];
 80010b0:	7dbb      	ldrb	r3, [r7, #22]
 80010b2:	683a      	ldr	r2, [r7, #0]
 80010b4:	4413      	add	r3, r2
 80010b6:	781a      	ldrb	r2, [r3, #0]
 80010b8:	7dfb      	ldrb	r3, [r7, #23]
 80010ba:	4053      	eors	r3, r2
 80010bc:	75fb      	strb	r3, [r7, #23]
    for (uint8_t i = 0; i < length; i++) {
 80010be:	7dbb      	ldrb	r3, [r7, #22]
 80010c0:	3301      	adds	r3, #1
 80010c2:	75bb      	strb	r3, [r7, #22]
 80010c4:	7dba      	ldrb	r2, [r7, #22]
 80010c6:	797b      	ldrb	r3, [r7, #5]
 80010c8:	429a      	cmp	r2, r3
 80010ca:	d3e9      	bcc.n	80010a0 <send_message+0x8c>
    }

    message[length + 4] = checksum;
 80010cc:	797b      	ldrb	r3, [r7, #5]
 80010ce:	3304      	adds	r3, #4
 80010d0:	68fa      	ldr	r2, [r7, #12]
 80010d2:	7df9      	ldrb	r1, [r7, #23]
 80010d4:	54d1      	strb	r1, [r2, r3]

    HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_SET);
 80010d6:	2201      	movs	r2, #1
 80010d8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80010e0:	f000 ffbc 	bl	800205c <HAL_GPIO_WritePin>
    HAL_UART_Transmit(&huart1, message, length + 5, HAL_MAX_DELAY);
 80010e4:	797b      	ldrb	r3, [r7, #5]
 80010e6:	b29b      	uxth	r3, r3
 80010e8:	3305      	adds	r3, #5
 80010ea:	b29a      	uxth	r2, r3
 80010ec:	f04f 33ff 	mov.w	r3, #4294967295
 80010f0:	68f9      	ldr	r1, [r7, #12]
 80010f2:	4808      	ldr	r0, [pc, #32]	; (8001114 <send_message+0x100>)
 80010f4:	f002 ff72 	bl	8003fdc <HAL_UART_Transmit>
    HAL_GPIO_WritePin(TX_EN_GPIO_Port, TX_EN_Pin, GPIO_PIN_RESET);
 80010f8:	2200      	movs	r2, #0
 80010fa:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80010fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001102:	f000 ffab 	bl	800205c <HAL_GPIO_WritePin>
 8001106:	46b5      	mov	sp, r6
}
 8001108:	bf00      	nop
 800110a:	371c      	adds	r7, #28
 800110c:	46bd      	mov	sp, r7
 800110e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001112:	bf00      	nop
 8001114:	20000268 	.word	0x20000268

08001118 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001118:	b5b0      	push	{r4, r5, r7, lr}
 800111a:	b08a      	sub	sp, #40	; 0x28
 800111c:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800111e:	f000 fcd8 	bl	8001ad2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001122:	f000 f933 	bl	800138c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001126:	f000 fa31 	bl	800158c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800112a:	f000 f9ff 	bl	800152c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800112e:	f000 f98f 	bl	8001450 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8001132:	f000 f9cb 	bl	80014cc <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  MAX31855_Init(&MAX31855_Handle, &hspi1,GPIOB, GPIO_PIN_0);
 8001136:	2301      	movs	r3, #1
 8001138:	4a7c      	ldr	r2, [pc, #496]	; (800132c <main+0x214>)
 800113a:	497d      	ldr	r1, [pc, #500]	; (8001330 <main+0x218>)
 800113c:	487d      	ldr	r0, [pc, #500]	; (8001334 <main+0x21c>)
 800113e:	f003 fc1e 	bl	800497e <MAX31855_Init>
  printf("\r\n~ I am Joe The DataLogger I am Alive~\r\n");
 8001142:	487d      	ldr	r0, [pc, #500]	; (8001338 <main+0x220>)
 8001144:	f004 fd9e 	bl	8005c84 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("\r\n~heartbeat~\r\n");
 8001148:	487c      	ldr	r0, [pc, #496]	; (800133c <main+0x224>)
 800114a:	f004 fd9b 	bl	8005c84 <puts>
	  float temp = 0;
 800114e:	f04f 0300 	mov.w	r3, #0
 8001152:	617b      	str	r3, [r7, #20]
	  float internal_temp = 0;
 8001154:	f04f 0300 	mov.w	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
	  float adc_value = 0;
 800115a:	f04f 0300 	mov.w	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
	  //printf("%d", g);
	  //if ((HAL_GetTick() - Timer) > 1000) {


	  //TC code
	  if (tc_en_bool == 1) {
 8001160:	4b77      	ldr	r3, [pc, #476]	; (8001340 <main+0x228>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d162      	bne.n	800122e <main+0x116>
		  	  	printf("\r\nTC Enabled\r\n");
 8001168:	4876      	ldr	r0, [pc, #472]	; (8001344 <main+0x22c>)
 800116a:	f004 fd8b 	bl	8005c84 <puts>
	  			MAX31855_ReadData(&MAX31855_Handle);
 800116e:	4871      	ldr	r0, [pc, #452]	; (8001334 <main+0x21c>)
 8001170:	f003 fc76 	bl	8004a60 <MAX31855_ReadData>
	  			//printf("Temperature: %f\r\nInternal temperature: %f\r\n", MAX31855_GetTemperature(&MAX31855_Handle),MAX31855_GeInternalTemperature(&MAX31855_Handle));
	  			if(MAX31855_GetFault(&MAX31855_Handle)){
 8001174:	486f      	ldr	r0, [pc, #444]	; (8001334 <main+0x21c>)
 8001176:	f003 fc1a 	bl	80049ae <MAX31855_GetFault>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d025      	beq.n	80011cc <main+0xb4>
	  				tc_status = 2;
 8001180:	4b71      	ldr	r3, [pc, #452]	; (8001348 <main+0x230>)
 8001182:	2202      	movs	r2, #2
 8001184:	601a      	str	r2, [r3, #0]
	  				printf("TC Check Fault: %d\r\n", MAX31855_GetFault(&MAX31855_Handle));
 8001186:	486b      	ldr	r0, [pc, #428]	; (8001334 <main+0x21c>)
 8001188:	f003 fc11 	bl	80049ae <MAX31855_GetFault>
 800118c:	4603      	mov	r3, r0
 800118e:	4619      	mov	r1, r3
 8001190:	486e      	ldr	r0, [pc, #440]	; (800134c <main+0x234>)
 8001192:	f004 fd11 	bl	8005bb8 <iprintf>
	  				printf("TC Temperature: %f\r\nTC Internal temperature: %f\r\n", MAX31855_GetTemperature(&MAX31855_Handle),MAX31855_GeInternalTemperature(&MAX31855_Handle));
 8001196:	4867      	ldr	r0, [pc, #412]	; (8001334 <main+0x21c>)
 8001198:	f003 fc26 	bl	80049e8 <MAX31855_GetTemperature>
 800119c:	ee10 3a10 	vmov	r3, s0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f7ff f9d1 	bl	8000548 <__aeabi_f2d>
 80011a6:	4604      	mov	r4, r0
 80011a8:	460d      	mov	r5, r1
 80011aa:	4862      	ldr	r0, [pc, #392]	; (8001334 <main+0x21c>)
 80011ac:	f003 fc3a 	bl	8004a24 <MAX31855_GeInternalTemperature>
 80011b0:	ee10 3a10 	vmov	r3, s0
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff f9c7 	bl	8000548 <__aeabi_f2d>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
 80011be:	e9cd 2300 	strd	r2, r3, [sp]
 80011c2:	4622      	mov	r2, r4
 80011c4:	462b      	mov	r3, r5
 80011c6:	4862      	ldr	r0, [pc, #392]	; (8001350 <main+0x238>)
 80011c8:	f004 fcf6 	bl	8005bb8 <iprintf>
	  			}

	  			if(!MAX31855_GetFault(&MAX31855_Handle))
 80011cc:	4859      	ldr	r0, [pc, #356]	; (8001334 <main+0x21c>)
 80011ce:	f003 fbee 	bl	80049ae <MAX31855_GetFault>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d12a      	bne.n	800122e <main+0x116>
	  			{
	  			tc_status = 1;
 80011d8:	4b5b      	ldr	r3, [pc, #364]	; (8001348 <main+0x230>)
 80011da:	2201      	movs	r2, #1
 80011dc:	601a      	str	r2, [r3, #0]
	  			printf("TC_OK\r\n");
 80011de:	485d      	ldr	r0, [pc, #372]	; (8001354 <main+0x23c>)
 80011e0:	f004 fd50 	bl	8005c84 <puts>
	            temp = MAX31855_GetTemperature(&MAX31855_Handle);
 80011e4:	4853      	ldr	r0, [pc, #332]	; (8001334 <main+0x21c>)
 80011e6:	f003 fbff 	bl	80049e8 <MAX31855_GetTemperature>
 80011ea:	ed87 0a05 	vstr	s0, [r7, #20]
	            internal_temp = MAX31855_GeInternalTemperature(&MAX31855_Handle);
 80011ee:	4851      	ldr	r0, [pc, #324]	; (8001334 <main+0x21c>)
 80011f0:	f003 fc18 	bl	8004a24 <MAX31855_GeInternalTemperature>
 80011f4:	ed87 0a03 	vstr	s0, [r7, #12]
	  			printf("TC Temperature: %f\r\nTC Internal temperature: %f\r\n", MAX31855_GetTemperature(&MAX31855_Handle),MAX31855_GeInternalTemperature(&MAX31855_Handle));
 80011f8:	484e      	ldr	r0, [pc, #312]	; (8001334 <main+0x21c>)
 80011fa:	f003 fbf5 	bl	80049e8 <MAX31855_GetTemperature>
 80011fe:	ee10 3a10 	vmov	r3, s0
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f9a0 	bl	8000548 <__aeabi_f2d>
 8001208:	4604      	mov	r4, r0
 800120a:	460d      	mov	r5, r1
 800120c:	4849      	ldr	r0, [pc, #292]	; (8001334 <main+0x21c>)
 800120e:	f003 fc09 	bl	8004a24 <MAX31855_GeInternalTemperature>
 8001212:	ee10 3a10 	vmov	r3, s0
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff f996 	bl	8000548 <__aeabi_f2d>
 800121c:	4602      	mov	r2, r0
 800121e:	460b      	mov	r3, r1
 8001220:	e9cd 2300 	strd	r2, r3, [sp]
 8001224:	4622      	mov	r2, r4
 8001226:	462b      	mov	r3, r5
 8001228:	4849      	ldr	r0, [pc, #292]	; (8001350 <main+0x238>)
 800122a:	f004 fcc5 	bl	8005bb8 <iprintf>
	  			//Timer = HAL_GetTick();
	  		}


	  //ADC code
	  if (adc_en_bool == 1) {
 800122e:	4b4a      	ldr	r3, [pc, #296]	; (8001358 <main+0x240>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b01      	cmp	r3, #1
 8001234:	d132      	bne.n	800129c <main+0x184>
		  	  printf("\r\nADC Enabled\r\n");
 8001236:	4849      	ldr	r0, [pc, #292]	; (800135c <main+0x244>)
 8001238:	f004 fd24 	bl	8005c84 <puts>
		      static char msg[55];
		      if (MCP3204_convert(&hspi1, GPIOA, GPIO_PIN_12, singleEnded, CH0, &ad_MCP3204, msg)) {
 800123c:	4b48      	ldr	r3, [pc, #288]	; (8001360 <main+0x248>)
 800123e:	9302      	str	r3, [sp, #8]
 8001240:	4b48      	ldr	r3, [pc, #288]	; (8001364 <main+0x24c>)
 8001242:	9301      	str	r3, [sp, #4]
 8001244:	2300      	movs	r3, #0
 8001246:	9300      	str	r3, [sp, #0]
 8001248:	2300      	movs	r3, #0
 800124a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800124e:	f04f 4190 	mov.w	r1, #1207959552	; 0x48000000
 8001252:	4837      	ldr	r0, [pc, #220]	; (8001330 <main+0x218>)
 8001254:	f003 fcb4 	bl	8004bc0 <MCP3204_convert>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d009      	beq.n	8001272 <main+0x15a>
		    	  adc_status = 2;
 800125e:	4b42      	ldr	r3, [pc, #264]	; (8001368 <main+0x250>)
 8001260:	2202      	movs	r2, #2
 8001262:	601a      	str	r2, [r3, #0]
		    	  printf("ADC Check Fault: Error during conversion.\n");
 8001264:	4841      	ldr	r0, [pc, #260]	; (800136c <main+0x254>)
 8001266:	f004 fd0d 	bl	8005c84 <puts>
		          printf("%s\n", msg);
 800126a:	483d      	ldr	r0, [pc, #244]	; (8001360 <main+0x248>)
 800126c:	f004 fd0a 	bl	8005c84 <puts>
 8001270:	e014      	b.n	800129c <main+0x184>
		      }

		      else{
		    	  adc_status = 1;
 8001272:	4b3d      	ldr	r3, [pc, #244]	; (8001368 <main+0x250>)
 8001274:	2201      	movs	r2, #1
 8001276:	601a      	str	r2, [r3, #0]
		    	  printf("ADC_OK\r\n");
 8001278:	483d      	ldr	r0, [pc, #244]	; (8001370 <main+0x258>)
 800127a:	f004 fd03 	bl	8005c84 <puts>
		    	  adc_value = MCP3204_analogValue(ad_MCP3204);
 800127e:	4b39      	ldr	r3, [pc, #228]	; (8001364 <main+0x24c>)
 8001280:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001284:	f003 fd42 	bl	8004d0c <MCP3204_analogValue>
 8001288:	ed87 0a04 	vstr	s0, [r7, #16]
		    	  printf("ADC CH0 Value: %.3lf\n\r", adc_value);
 800128c:	6938      	ldr	r0, [r7, #16]
 800128e:	f7ff f95b 	bl	8000548 <__aeabi_f2d>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4837      	ldr	r0, [pc, #220]	; (8001374 <main+0x25c>)
 8001298:	f004 fc8e 	bl	8005bb8 <iprintf>

	  			//Timer = HAL_GetTick();
	  		}

	  //rs code
	  if (rs_en_bool == 1) {
 800129c:	4b36      	ldr	r3, [pc, #216]	; (8001378 <main+0x260>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	2b01      	cmp	r3, #1
 80012a2:	f47f af51 	bne.w	8001148 <main+0x30>
		  	  printf("\r\nRS Comms Enabled\r\n");
 80012a6:	4835      	ldr	r0, [pc, #212]	; (800137c <main+0x264>)
 80012a8:	f004 fcec 	bl	8005c84 <puts>

		  	  //tc


	          // Prepare and send the temperature data via RS485
	          snprintf(payload, sizeof(payload), "%.2f", temp);
 80012ac:	6978      	ldr	r0, [r7, #20]
 80012ae:	f7ff f94b 	bl	8000548 <__aeabi_f2d>
 80012b2:	4602      	mov	r2, r0
 80012b4:	460b      	mov	r3, r1
 80012b6:	4638      	mov	r0, r7
 80012b8:	e9cd 2300 	strd	r2, r3, [sp]
 80012bc:	4a30      	ldr	r2, [pc, #192]	; (8001380 <main+0x268>)
 80012be:	210a      	movs	r1, #10
 80012c0:	f004 fce8 	bl	8005c94 <sniprintf>
	          send_message('T', 2, (uint8_t*)payload, strlen(payload));
 80012c4:	463b      	mov	r3, r7
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7fe ffd2 	bl	8000270 <strlen>
 80012cc:	4603      	mov	r3, r0
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	463a      	mov	r2, r7
 80012d2:	2102      	movs	r1, #2
 80012d4:	2054      	movs	r0, #84	; 0x54
 80012d6:	f7ff fe9d 	bl	8001014 <send_message>
	          printf("\r\nRS Sent: %f\r\n", temp);
 80012da:	6978      	ldr	r0, [r7, #20]
 80012dc:	f7ff f934 	bl	8000548 <__aeabi_f2d>
 80012e0:	4602      	mov	r2, r0
 80012e2:	460b      	mov	r3, r1
 80012e4:	4827      	ldr	r0, [pc, #156]	; (8001384 <main+0x26c>)
 80012e6:	f004 fc67 	bl	8005bb8 <iprintf>

	          //adc

	          // Prepare and send the message via RS485
	          snprintf(payload, sizeof(payload), "%.3lf", adc_value);
 80012ea:	6938      	ldr	r0, [r7, #16]
 80012ec:	f7ff f92c 	bl	8000548 <__aeabi_f2d>
 80012f0:	4602      	mov	r2, r0
 80012f2:	460b      	mov	r3, r1
 80012f4:	4638      	mov	r0, r7
 80012f6:	e9cd 2300 	strd	r2, r3, [sp]
 80012fa:	4a23      	ldr	r2, [pc, #140]	; (8001388 <main+0x270>)
 80012fc:	210a      	movs	r1, #10
 80012fe:	f004 fcc9 	bl	8005c94 <sniprintf>
	          send_message('A', 1, (uint8_t*)payload, strlen(payload));
 8001302:	463b      	mov	r3, r7
 8001304:	4618      	mov	r0, r3
 8001306:	f7fe ffb3 	bl	8000270 <strlen>
 800130a:	4603      	mov	r3, r0
 800130c:	b2db      	uxtb	r3, r3
 800130e:	463a      	mov	r2, r7
 8001310:	2101      	movs	r1, #1
 8001312:	2041      	movs	r0, #65	; 0x41
 8001314:	f7ff fe7e 	bl	8001014 <send_message>
	          printf("\r\nRS Sent: %f\r\n", adc_value);
 8001318:	6938      	ldr	r0, [r7, #16]
 800131a:	f7ff f915 	bl	8000548 <__aeabi_f2d>
 800131e:	4602      	mov	r2, r0
 8001320:	460b      	mov	r3, r1
 8001322:	4818      	ldr	r0, [pc, #96]	; (8001384 <main+0x26c>)
 8001324:	f004 fc48 	bl	8005bb8 <iprintf>
  {
 8001328:	e70e      	b.n	8001148 <main+0x30>
 800132a:	bf00      	nop
 800132c:	48000400 	.word	0x48000400
 8001330:	20000204 	.word	0x20000204
 8001334:	20000380 	.word	0x20000380
 8001338:	08009650 	.word	0x08009650
 800133c:	0800967c 	.word	0x0800967c
 8001340:	20000000 	.word	0x20000000
 8001344:	0800968c 	.word	0x0800968c
 8001348:	20000378 	.word	0x20000378
 800134c:	0800969c 	.word	0x0800969c
 8001350:	080096b4 	.word	0x080096b4
 8001354:	080096e8 	.word	0x080096e8
 8001358:	20000004 	.word	0x20000004
 800135c:	080096f0 	.word	0x080096f0
 8001360:	200003a0 	.word	0x200003a0
 8001364:	2000000c 	.word	0x2000000c
 8001368:	2000037c 	.word	0x2000037c
 800136c:	08009700 	.word	0x08009700
 8001370:	0800972c 	.word	0x0800972c
 8001374:	08009734 	.word	0x08009734
 8001378:	20000008 	.word	0x20000008
 800137c:	0800974c 	.word	0x0800974c
 8001380:	08009760 	.word	0x08009760
 8001384:	08009768 	.word	0x08009768
 8001388:	08009778 	.word	0x08009778

0800138c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b096      	sub	sp, #88	; 0x58
 8001390:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001392:	f107 0314 	add.w	r3, r7, #20
 8001396:	2244      	movs	r2, #68	; 0x44
 8001398:	2100      	movs	r1, #0
 800139a:	4618      	mov	r0, r3
 800139c:	f004 fda6 	bl	8005eec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013a0:	463b      	mov	r3, r7
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]
 80013ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013ae:	f44f 7000 	mov.w	r0, #512	; 0x200
 80013b2:	f000 fe89 	bl	80020c8 <HAL_PWREx_ControlVoltageScaling>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013bc:	f000 f948 	bl	8001650 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80013c0:	f000 fe64 	bl	800208c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80013c4:	4b21      	ldr	r3, [pc, #132]	; (800144c <SystemClock_Config+0xc0>)
 80013c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80013ca:	4a20      	ldr	r2, [pc, #128]	; (800144c <SystemClock_Config+0xc0>)
 80013cc:	f023 0318 	bic.w	r3, r3, #24
 80013d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80013d4:	2314      	movs	r3, #20
 80013d6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80013d8:	2301      	movs	r3, #1
 80013da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013dc:	2301      	movs	r3, #1
 80013de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013e4:	2360      	movs	r3, #96	; 0x60
 80013e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013e8:	2302      	movs	r3, #2
 80013ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80013ec:	2301      	movs	r3, #1
 80013ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80013f0:	2301      	movs	r3, #1
 80013f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80013f4:	2310      	movs	r3, #16
 80013f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80013f8:	2307      	movs	r3, #7
 80013fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80013fc:	2302      	movs	r3, #2
 80013fe:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001400:	2302      	movs	r3, #2
 8001402:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001404:	f107 0314 	add.w	r3, r7, #20
 8001408:	4618      	mov	r0, r3
 800140a:	f000 feb3 	bl	8002174 <HAL_RCC_OscConfig>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001414:	f000 f91c 	bl	8001650 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001418:	230f      	movs	r3, #15
 800141a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800141c:	2303      	movs	r3, #3
 800141e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001420:	2300      	movs	r3, #0
 8001422:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001424:	2300      	movs	r3, #0
 8001426:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001428:	2300      	movs	r3, #0
 800142a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800142c:	463b      	mov	r3, r7
 800142e:	2101      	movs	r1, #1
 8001430:	4618      	mov	r0, r3
 8001432:	f001 fab3 	bl	800299c <HAL_RCC_ClockConfig>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d001      	beq.n	8001440 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800143c:	f000 f908 	bl	8001650 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8001440:	f001 fec6 	bl	80031d0 <HAL_RCCEx_EnableMSIPLLMode>
}
 8001444:	bf00      	nop
 8001446:	3758      	adds	r7, #88	; 0x58
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}
 800144c:	40021000 	.word	0x40021000

08001450 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001454:	4b1b      	ldr	r3, [pc, #108]	; (80014c4 <MX_SPI1_Init+0x74>)
 8001456:	4a1c      	ldr	r2, [pc, #112]	; (80014c8 <MX_SPI1_Init+0x78>)
 8001458:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800145a:	4b1a      	ldr	r3, [pc, #104]	; (80014c4 <MX_SPI1_Init+0x74>)
 800145c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001460:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001462:	4b18      	ldr	r3, [pc, #96]	; (80014c4 <MX_SPI1_Init+0x74>)
 8001464:	2200      	movs	r2, #0
 8001466:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001468:	4b16      	ldr	r3, [pc, #88]	; (80014c4 <MX_SPI1_Init+0x74>)
 800146a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800146e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001470:	4b14      	ldr	r3, [pc, #80]	; (80014c4 <MX_SPI1_Init+0x74>)
 8001472:	2200      	movs	r2, #0
 8001474:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001476:	4b13      	ldr	r3, [pc, #76]	; (80014c4 <MX_SPI1_Init+0x74>)
 8001478:	2200      	movs	r2, #0
 800147a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800147c:	4b11      	ldr	r3, [pc, #68]	; (80014c4 <MX_SPI1_Init+0x74>)
 800147e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001482:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001484:	4b0f      	ldr	r3, [pc, #60]	; (80014c4 <MX_SPI1_Init+0x74>)
 8001486:	2200      	movs	r2, #0
 8001488:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800148a:	4b0e      	ldr	r3, [pc, #56]	; (80014c4 <MX_SPI1_Init+0x74>)
 800148c:	2200      	movs	r2, #0
 800148e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001490:	4b0c      	ldr	r3, [pc, #48]	; (80014c4 <MX_SPI1_Init+0x74>)
 8001492:	2200      	movs	r2, #0
 8001494:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001496:	4b0b      	ldr	r3, [pc, #44]	; (80014c4 <MX_SPI1_Init+0x74>)
 8001498:	2200      	movs	r2, #0
 800149a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800149c:	4b09      	ldr	r3, [pc, #36]	; (80014c4 <MX_SPI1_Init+0x74>)
 800149e:	2207      	movs	r2, #7
 80014a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80014a2:	4b08      	ldr	r3, [pc, #32]	; (80014c4 <MX_SPI1_Init+0x74>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <MX_SPI1_Init+0x74>)
 80014aa:	2208      	movs	r2, #8
 80014ac:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80014ae:	4805      	ldr	r0, [pc, #20]	; (80014c4 <MX_SPI1_Init+0x74>)
 80014b0:	f001 ff90 	bl	80033d4 <HAL_SPI_Init>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80014ba:	f000 f8c9 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014be:	bf00      	nop
 80014c0:	bd80      	pop	{r7, pc}
 80014c2:	bf00      	nop
 80014c4:	20000204 	.word	0x20000204
 80014c8:	40013000 	.word	0x40013000

080014cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80014d0:	4b14      	ldr	r3, [pc, #80]	; (8001524 <MX_USART1_UART_Init+0x58>)
 80014d2:	4a15      	ldr	r2, [pc, #84]	; (8001528 <MX_USART1_UART_Init+0x5c>)
 80014d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80014d6:	4b13      	ldr	r3, [pc, #76]	; (8001524 <MX_USART1_UART_Init+0x58>)
 80014d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014de:	4b11      	ldr	r3, [pc, #68]	; (8001524 <MX_USART1_UART_Init+0x58>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014e4:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <MX_USART1_UART_Init+0x58>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014ea:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <MX_USART1_UART_Init+0x58>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <MX_USART1_UART_Init+0x58>)
 80014f2:	220c      	movs	r2, #12
 80014f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <MX_USART1_UART_Init+0x58>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014fc:	4b09      	ldr	r3, [pc, #36]	; (8001524 <MX_USART1_UART_Init+0x58>)
 80014fe:	2200      	movs	r2, #0
 8001500:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <MX_USART1_UART_Init+0x58>)
 8001504:	2200      	movs	r2, #0
 8001506:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <MX_USART1_UART_Init+0x58>)
 800150a:	2200      	movs	r2, #0
 800150c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800150e:	4805      	ldr	r0, [pc, #20]	; (8001524 <MX_USART1_UART_Init+0x58>)
 8001510:	f002 fd16 	bl	8003f40 <HAL_UART_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800151a:	f000 f899 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000268 	.word	0x20000268
 8001528:	40013800 	.word	0x40013800

0800152c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001530:	4b14      	ldr	r3, [pc, #80]	; (8001584 <MX_USART2_UART_Init+0x58>)
 8001532:	4a15      	ldr	r2, [pc, #84]	; (8001588 <MX_USART2_UART_Init+0x5c>)
 8001534:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001536:	4b13      	ldr	r3, [pc, #76]	; (8001584 <MX_USART2_UART_Init+0x58>)
 8001538:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800153c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800153e:	4b11      	ldr	r3, [pc, #68]	; (8001584 <MX_USART2_UART_Init+0x58>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <MX_USART2_UART_Init+0x58>)
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800154a:	4b0e      	ldr	r3, [pc, #56]	; (8001584 <MX_USART2_UART_Init+0x58>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <MX_USART2_UART_Init+0x58>)
 8001552:	220c      	movs	r2, #12
 8001554:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001556:	4b0b      	ldr	r3, [pc, #44]	; (8001584 <MX_USART2_UART_Init+0x58>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <MX_USART2_UART_Init+0x58>)
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <MX_USART2_UART_Init+0x58>)
 8001564:	2200      	movs	r2, #0
 8001566:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <MX_USART2_UART_Init+0x58>)
 800156a:	2200      	movs	r2, #0
 800156c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800156e:	4805      	ldr	r0, [pc, #20]	; (8001584 <MX_USART2_UART_Init+0x58>)
 8001570:	f002 fce6 	bl	8003f40 <HAL_UART_Init>
 8001574:	4603      	mov	r3, r0
 8001576:	2b00      	cmp	r3, #0
 8001578:	d001      	beq.n	800157e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800157a:	f000 f869 	bl	8001650 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	200002f0 	.word	0x200002f0
 8001588:	40004400 	.word	0x40004400

0800158c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001592:	f107 030c 	add.w	r3, r7, #12
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
 80015a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a2:	4b29      	ldr	r3, [pc, #164]	; (8001648 <MX_GPIO_Init+0xbc>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a6:	4a28      	ldr	r2, [pc, #160]	; (8001648 <MX_GPIO_Init+0xbc>)
 80015a8:	f043 0304 	orr.w	r3, r3, #4
 80015ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ae:	4b26      	ldr	r3, [pc, #152]	; (8001648 <MX_GPIO_Init+0xbc>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b2:	f003 0304 	and.w	r3, r3, #4
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ba:	4b23      	ldr	r3, [pc, #140]	; (8001648 <MX_GPIO_Init+0xbc>)
 80015bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015be:	4a22      	ldr	r2, [pc, #136]	; (8001648 <MX_GPIO_Init+0xbc>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015c6:	4b20      	ldr	r3, [pc, #128]	; (8001648 <MX_GPIO_Init+0xbc>)
 80015c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	607b      	str	r3, [r7, #4]
 80015d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015d2:	4b1d      	ldr	r3, [pc, #116]	; (8001648 <MX_GPIO_Init+0xbc>)
 80015d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015d6:	4a1c      	ldr	r2, [pc, #112]	; (8001648 <MX_GPIO_Init+0xbc>)
 80015d8:	f043 0302 	orr.w	r3, r3, #2
 80015dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015de:	4b1a      	ldr	r3, [pc, #104]	; (8001648 <MX_GPIO_Init+0xbc>)
 80015e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015e2:	f003 0302 	and.w	r3, r3, #2
 80015e6:	603b      	str	r3, [r7, #0]
 80015e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|TX_EN_Pin|ADC_CS_Pin, GPIO_PIN_RESET);
 80015ea:	2200      	movs	r2, #0
 80015ec:	f641 0102 	movw	r1, #6146	; 0x1802
 80015f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015f4:	f000 fd32 	bl	800205c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TC_CS_Pin|LD3_Pin, GPIO_PIN_RESET);
 80015f8:	2200      	movs	r2, #0
 80015fa:	2109      	movs	r1, #9
 80015fc:	4813      	ldr	r0, [pc, #76]	; (800164c <MX_GPIO_Init+0xc0>)
 80015fe:	f000 fd2d 	bl	800205c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 TX_EN_Pin ADC_CS_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|TX_EN_Pin|ADC_CS_Pin;
 8001602:	f641 0302 	movw	r3, #6146	; 0x1802
 8001606:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001608:	2301      	movs	r3, #1
 800160a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160c:	2300      	movs	r3, #0
 800160e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001610:	2300      	movs	r3, #0
 8001612:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001614:	f107 030c 	add.w	r3, r7, #12
 8001618:	4619      	mov	r1, r3
 800161a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800161e:	f000 fbb3 	bl	8001d88 <HAL_GPIO_Init>

  /*Configure GPIO pins : TC_CS_Pin LD3_Pin */
  GPIO_InitStruct.Pin = TC_CS_Pin|LD3_Pin;
 8001622:	2309      	movs	r3, #9
 8001624:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001626:	2301      	movs	r3, #1
 8001628:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800162e:	2300      	movs	r3, #0
 8001630:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001632:	f107 030c 	add.w	r3, r7, #12
 8001636:	4619      	mov	r1, r3
 8001638:	4804      	ldr	r0, [pc, #16]	; (800164c <MX_GPIO_Init+0xc0>)
 800163a:	f000 fba5 	bl	8001d88 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800163e:	bf00      	nop
 8001640:	3720      	adds	r7, #32
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	40021000 	.word	0x40021000
 800164c:	48000400 	.word	0x48000400

08001650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001654:	b672      	cpsid	i
}
 8001656:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001658:	e7fe      	b.n	8001658 <Error_Handler+0x8>
	...

0800165c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800165c:	b480      	push	{r7}
 800165e:	b083      	sub	sp, #12
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001662:	4b0f      	ldr	r3, [pc, #60]	; (80016a0 <HAL_MspInit+0x44>)
 8001664:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001666:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <HAL_MspInit+0x44>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	6613      	str	r3, [r2, #96]	; 0x60
 800166e:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <HAL_MspInit+0x44>)
 8001670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001672:	f003 0301 	and.w	r3, r3, #1
 8001676:	607b      	str	r3, [r7, #4]
 8001678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800167a:	4b09      	ldr	r3, [pc, #36]	; (80016a0 <HAL_MspInit+0x44>)
 800167c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800167e:	4a08      	ldr	r2, [pc, #32]	; (80016a0 <HAL_MspInit+0x44>)
 8001680:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001684:	6593      	str	r3, [r2, #88]	; 0x58
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <HAL_MspInit+0x44>)
 8001688:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800168e:	603b      	str	r3, [r7, #0]
 8001690:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40021000 	.word	0x40021000

080016a4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b08a      	sub	sp, #40	; 0x28
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4a17      	ldr	r2, [pc, #92]	; (8001720 <HAL_SPI_MspInit+0x7c>)
 80016c2:	4293      	cmp	r3, r2
 80016c4:	d128      	bne.n	8001718 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016c6:	4b17      	ldr	r3, [pc, #92]	; (8001724 <HAL_SPI_MspInit+0x80>)
 80016c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ca:	4a16      	ldr	r2, [pc, #88]	; (8001724 <HAL_SPI_MspInit+0x80>)
 80016cc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016d0:	6613      	str	r3, [r2, #96]	; 0x60
 80016d2:	4b14      	ldr	r3, [pc, #80]	; (8001724 <HAL_SPI_MspInit+0x80>)
 80016d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016d6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016da:	613b      	str	r3, [r7, #16]
 80016dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	4b11      	ldr	r3, [pc, #68]	; (8001724 <HAL_SPI_MspInit+0x80>)
 80016e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016e2:	4a10      	ldr	r2, [pc, #64]	; (8001724 <HAL_SPI_MspInit+0x80>)
 80016e4:	f043 0301 	orr.w	r3, r3, #1
 80016e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80016ea:	4b0e      	ldr	r3, [pc, #56]	; (8001724 <HAL_SPI_MspInit+0x80>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80016ee:	f003 0301 	and.w	r3, r3, #1
 80016f2:	60fb      	str	r3, [r7, #12]
 80016f4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80016f6:	23e0      	movs	r3, #224	; 0xe0
 80016f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001702:	2303      	movs	r3, #3
 8001704:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001706:	2305      	movs	r3, #5
 8001708:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170a:	f107 0314 	add.w	r3, r7, #20
 800170e:	4619      	mov	r1, r3
 8001710:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001714:	f000 fb38 	bl	8001d88 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001718:	bf00      	nop
 800171a:	3728      	adds	r7, #40	; 0x28
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40013000 	.word	0x40013000
 8001724:	40021000 	.word	0x40021000

08001728 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b0a0      	sub	sp, #128	; 0x80
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001730:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001734:	2200      	movs	r2, #0
 8001736:	601a      	str	r2, [r3, #0]
 8001738:	605a      	str	r2, [r3, #4]
 800173a:	609a      	str	r2, [r3, #8]
 800173c:	60da      	str	r2, [r3, #12]
 800173e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001740:	f107 0318 	add.w	r3, r7, #24
 8001744:	2254      	movs	r2, #84	; 0x54
 8001746:	2100      	movs	r1, #0
 8001748:	4618      	mov	r0, r3
 800174a:	f004 fbcf 	bl	8005eec <memset>
  if(huart->Instance==USART1)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	4a47      	ldr	r2, [pc, #284]	; (8001870 <HAL_UART_MspInit+0x148>)
 8001754:	4293      	cmp	r3, r2
 8001756:	d138      	bne.n	80017ca <HAL_UART_MspInit+0xa2>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001758:	2301      	movs	r3, #1
 800175a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800175c:	2300      	movs	r3, #0
 800175e:	63bb      	str	r3, [r7, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001760:	f107 0318 	add.w	r3, r7, #24
 8001764:	4618      	mov	r0, r3
 8001766:	f001 fb3d 	bl	8002de4 <HAL_RCCEx_PeriphCLKConfig>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d001      	beq.n	8001774 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001770:	f7ff ff6e 	bl	8001650 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001774:	4b3f      	ldr	r3, [pc, #252]	; (8001874 <HAL_UART_MspInit+0x14c>)
 8001776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001778:	4a3e      	ldr	r2, [pc, #248]	; (8001874 <HAL_UART_MspInit+0x14c>)
 800177a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800177e:	6613      	str	r3, [r2, #96]	; 0x60
 8001780:	4b3c      	ldr	r3, [pc, #240]	; (8001874 <HAL_UART_MspInit+0x14c>)
 8001782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001784:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800178c:	4b39      	ldr	r3, [pc, #228]	; (8001874 <HAL_UART_MspInit+0x14c>)
 800178e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001790:	4a38      	ldr	r2, [pc, #224]	; (8001874 <HAL_UART_MspInit+0x14c>)
 8001792:	f043 0301 	orr.w	r3, r3, #1
 8001796:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001798:	4b36      	ldr	r3, [pc, #216]	; (8001874 <HAL_UART_MspInit+0x14c>)
 800179a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179c:	f003 0301 	and.w	r3, r3, #1
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80017a4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80017a8:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017aa:	2302      	movs	r3, #2
 80017ac:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ae:	2300      	movs	r3, #0
 80017b0:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b2:	2303      	movs	r3, #3
 80017b4:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017b6:	2307      	movs	r3, #7
 80017b8:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ba:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80017be:	4619      	mov	r1, r3
 80017c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c4:	f000 fae0 	bl	8001d88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017c8:	e04d      	b.n	8001866 <HAL_UART_MspInit+0x13e>
  else if(huart->Instance==USART2)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a2a      	ldr	r2, [pc, #168]	; (8001878 <HAL_UART_MspInit+0x150>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d148      	bne.n	8001866 <HAL_UART_MspInit+0x13e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80017d4:	2302      	movs	r3, #2
 80017d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80017d8:	2300      	movs	r3, #0
 80017da:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017dc:	f107 0318 	add.w	r3, r7, #24
 80017e0:	4618      	mov	r0, r3
 80017e2:	f001 faff 	bl	8002de4 <HAL_RCCEx_PeriphCLKConfig>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d001      	beq.n	80017f0 <HAL_UART_MspInit+0xc8>
      Error_Handler();
 80017ec:	f7ff ff30 	bl	8001650 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 80017f0:	4b20      	ldr	r3, [pc, #128]	; (8001874 <HAL_UART_MspInit+0x14c>)
 80017f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f4:	4a1f      	ldr	r2, [pc, #124]	; (8001874 <HAL_UART_MspInit+0x14c>)
 80017f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017fa:	6593      	str	r3, [r2, #88]	; 0x58
 80017fc:	4b1d      	ldr	r3, [pc, #116]	; (8001874 <HAL_UART_MspInit+0x14c>)
 80017fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001808:	4b1a      	ldr	r3, [pc, #104]	; (8001874 <HAL_UART_MspInit+0x14c>)
 800180a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800180c:	4a19      	ldr	r2, [pc, #100]	; (8001874 <HAL_UART_MspInit+0x14c>)
 800180e:	f043 0301 	orr.w	r3, r3, #1
 8001812:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001814:	4b17      	ldr	r3, [pc, #92]	; (8001874 <HAL_UART_MspInit+0x14c>)
 8001816:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001818:	f003 0301 	and.w	r3, r3, #1
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001820:	2304      	movs	r3, #4
 8001822:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001824:	2302      	movs	r3, #2
 8001826:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001828:	2300      	movs	r3, #0
 800182a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800182c:	2303      	movs	r3, #3
 800182e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001830:	2307      	movs	r3, #7
 8001832:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001834:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001838:	4619      	mov	r1, r3
 800183a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800183e:	f000 faa3 	bl	8001d88 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001846:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001848:	2302      	movs	r3, #2
 800184a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184c:	2300      	movs	r3, #0
 800184e:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001850:	2303      	movs	r3, #3
 8001852:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001854:	2303      	movs	r3, #3
 8001856:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001858:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800185c:	4619      	mov	r1, r3
 800185e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001862:	f000 fa91 	bl	8001d88 <HAL_GPIO_Init>
}
 8001866:	bf00      	nop
 8001868:	3780      	adds	r7, #128	; 0x80
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40013800 	.word	0x40013800
 8001874:	40021000 	.word	0x40021000
 8001878:	40004400 	.word	0x40004400

0800187c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001880:	e7fe      	b.n	8001880 <NMI_Handler+0x4>

08001882 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001886:	e7fe      	b.n	8001886 <HardFault_Handler+0x4>

08001888 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800188c:	e7fe      	b.n	800188c <MemManage_Handler+0x4>

0800188e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800188e:	b480      	push	{r7}
 8001890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001892:	e7fe      	b.n	8001892 <BusFault_Handler+0x4>

08001894 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001898:	e7fe      	b.n	8001898 <UsageFault_Handler+0x4>

0800189a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr

080018b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018b6:	b480      	push	{r7}
 80018b8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ba:	bf00      	nop
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018c8:	f000 f958 	bl	8001b7c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018cc:	bf00      	nop
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018d0:	b480      	push	{r7}
 80018d2:	af00      	add	r7, sp, #0
  return 1;
 80018d4:	2301      	movs	r3, #1
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr

080018e0 <_kill>:

int _kill(int pid, int sig)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b082      	sub	sp, #8
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
 80018e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018ea:	f004 fb51 	bl	8005f90 <__errno>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2216      	movs	r2, #22
 80018f2:	601a      	str	r2, [r3, #0]
  return -1;
 80018f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018f8:	4618      	mov	r0, r3
 80018fa:	3708      	adds	r7, #8
 80018fc:	46bd      	mov	sp, r7
 80018fe:	bd80      	pop	{r7, pc}

08001900 <_exit>:

void _exit (int status)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001908:	f04f 31ff 	mov.w	r1, #4294967295
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f7ff ffe7 	bl	80018e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001912:	e7fe      	b.n	8001912 <_exit+0x12>

08001914 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	60b9      	str	r1, [r7, #8]
 800191e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]
 8001924:	e00a      	b.n	800193c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001926:	f3af 8000 	nop.w
 800192a:	4601      	mov	r1, r0
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	1c5a      	adds	r2, r3, #1
 8001930:	60ba      	str	r2, [r7, #8]
 8001932:	b2ca      	uxtb	r2, r1
 8001934:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	3301      	adds	r3, #1
 800193a:	617b      	str	r3, [r7, #20]
 800193c:	697a      	ldr	r2, [r7, #20]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	429a      	cmp	r2, r3
 8001942:	dbf0      	blt.n	8001926 <_read+0x12>
  }

  return len;
 8001944:	687b      	ldr	r3, [r7, #4]
}
 8001946:	4618      	mov	r0, r3
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b086      	sub	sp, #24
 8001952:	af00      	add	r7, sp, #0
 8001954:	60f8      	str	r0, [r7, #12]
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800195a:	2300      	movs	r3, #0
 800195c:	617b      	str	r3, [r7, #20]
 800195e:	e009      	b.n	8001974 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	1c5a      	adds	r2, r3, #1
 8001964:	60ba      	str	r2, [r7, #8]
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f7ff fb41 	bl	8000ff0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	3301      	adds	r3, #1
 8001972:	617b      	str	r3, [r7, #20]
 8001974:	697a      	ldr	r2, [r7, #20]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	429a      	cmp	r2, r3
 800197a:	dbf1      	blt.n	8001960 <_write+0x12>
  }
  return len;
 800197c:	687b      	ldr	r3, [r7, #4]
}
 800197e:	4618      	mov	r0, r3
 8001980:	3718      	adds	r7, #24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <_close>:

int _close(int file)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800198e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800199e:	b480      	push	{r7}
 80019a0:	b083      	sub	sp, #12
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	6078      	str	r0, [r7, #4]
 80019a6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80019ae:	605a      	str	r2, [r3, #4]
  return 0;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	370c      	adds	r7, #12
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr

080019be <_isatty>:

int _isatty(int file)
{
 80019be:	b480      	push	{r7}
 80019c0:	b083      	sub	sp, #12
 80019c2:	af00      	add	r7, sp, #0
 80019c4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019c6:	2301      	movs	r3, #1
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	60f8      	str	r0, [r7, #12]
 80019dc:	60b9      	str	r1, [r7, #8]
 80019de:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3714      	adds	r7, #20
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b086      	sub	sp, #24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019f8:	4a14      	ldr	r2, [pc, #80]	; (8001a4c <_sbrk+0x5c>)
 80019fa:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <_sbrk+0x60>)
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a04:	4b13      	ldr	r3, [pc, #76]	; (8001a54 <_sbrk+0x64>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d102      	bne.n	8001a12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a0c:	4b11      	ldr	r3, [pc, #68]	; (8001a54 <_sbrk+0x64>)
 8001a0e:	4a12      	ldr	r2, [pc, #72]	; (8001a58 <_sbrk+0x68>)
 8001a10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a12:	4b10      	ldr	r3, [pc, #64]	; (8001a54 <_sbrk+0x64>)
 8001a14:	681a      	ldr	r2, [r3, #0]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4413      	add	r3, r2
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d207      	bcs.n	8001a30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a20:	f004 fab6 	bl	8005f90 <__errno>
 8001a24:	4603      	mov	r3, r0
 8001a26:	220c      	movs	r2, #12
 8001a28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8001a2e:	e009      	b.n	8001a44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a30:	4b08      	ldr	r3, [pc, #32]	; (8001a54 <_sbrk+0x64>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a36:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <_sbrk+0x64>)
 8001a38:	681a      	ldr	r2, [r3, #0]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	4413      	add	r3, r2
 8001a3e:	4a05      	ldr	r2, [pc, #20]	; (8001a54 <_sbrk+0x64>)
 8001a40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a42:	68fb      	ldr	r3, [r7, #12]
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3718      	adds	r7, #24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	20010000 	.word	0x20010000
 8001a50:	00000400 	.word	0x00000400
 8001a54:	200003d8 	.word	0x200003d8
 8001a58:	20000530 	.word	0x20000530

08001a5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001a60:	4b06      	ldr	r3, [pc, #24]	; (8001a7c <SystemInit+0x20>)
 8001a62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a66:	4a05      	ldr	r2, [pc, #20]	; (8001a7c <SystemInit+0x20>)
 8001a68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001a70:	bf00      	nop
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	e000ed00 	.word	0xe000ed00

08001a80 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001a80:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ab8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001a84:	f7ff ffea 	bl	8001a5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a88:	480c      	ldr	r0, [pc, #48]	; (8001abc <LoopForever+0x6>)
  ldr r1, =_edata
 8001a8a:	490d      	ldr	r1, [pc, #52]	; (8001ac0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a8c:	4a0d      	ldr	r2, [pc, #52]	; (8001ac4 <LoopForever+0xe>)
  movs r3, #0
 8001a8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a90:	e002      	b.n	8001a98 <LoopCopyDataInit>

08001a92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a96:	3304      	adds	r3, #4

08001a98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a9c:	d3f9      	bcc.n	8001a92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a9e:	4a0a      	ldr	r2, [pc, #40]	; (8001ac8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001aa0:	4c0a      	ldr	r4, [pc, #40]	; (8001acc <LoopForever+0x16>)
  movs r3, #0
 8001aa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001aa4:	e001      	b.n	8001aaa <LoopFillZerobss>

08001aa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001aa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001aa8:	3204      	adds	r2, #4

08001aaa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aaa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aac:	d3fb      	bcc.n	8001aa6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001aae:	f004 fa75 	bl	8005f9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001ab2:	f7ff fb31 	bl	8001118 <main>

08001ab6 <LoopForever>:

LoopForever:
    b LoopForever
 8001ab6:	e7fe      	b.n	8001ab6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001ab8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001abc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ac0:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8001ac4:	08009c18 	.word	0x08009c18
  ldr r2, =_sbss
 8001ac8:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8001acc:	2000052c 	.word	0x2000052c

08001ad0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ad0:	e7fe      	b.n	8001ad0 <ADC1_IRQHandler>

08001ad2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001adc:	2003      	movs	r0, #3
 8001ade:	f000 f91f 	bl	8001d20 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001ae2:	2000      	movs	r0, #0
 8001ae4:	f000 f80e 	bl	8001b04 <HAL_InitTick>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d002      	beq.n	8001af4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001aee:	2301      	movs	r3, #1
 8001af0:	71fb      	strb	r3, [r7, #7]
 8001af2:	e001      	b.n	8001af8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001af4:	f7ff fdb2 	bl	800165c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001af8:	79fb      	ldrb	r3, [r7, #7]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}
	...

08001b04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001b10:	4b17      	ldr	r3, [pc, #92]	; (8001b70 <HAL_InitTick+0x6c>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d023      	beq.n	8001b60 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001b18:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <HAL_InitTick+0x70>)
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	4b14      	ldr	r3, [pc, #80]	; (8001b70 <HAL_InitTick+0x6c>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	4619      	mov	r1, r3
 8001b22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 f91d 	bl	8001d6e <HAL_SYSTICK_Config>
 8001b34:	4603      	mov	r3, r0
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10f      	bne.n	8001b5a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b0f      	cmp	r3, #15
 8001b3e:	d809      	bhi.n	8001b54 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b40:	2200      	movs	r2, #0
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	f04f 30ff 	mov.w	r0, #4294967295
 8001b48:	f000 f8f5 	bl	8001d36 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b4c:	4a0a      	ldr	r2, [pc, #40]	; (8001b78 <HAL_InitTick+0x74>)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6013      	str	r3, [r2, #0]
 8001b52:	e007      	b.n	8001b64 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	73fb      	strb	r3, [r7, #15]
 8001b58:	e004      	b.n	8001b64 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	73fb      	strb	r3, [r7, #15]
 8001b5e:	e001      	b.n	8001b64 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001b64:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	2000001c 	.word	0x2000001c
 8001b74:	20000014 	.word	0x20000014
 8001b78:	20000018 	.word	0x20000018

08001b7c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <HAL_IncTick+0x20>)
 8001b82:	781b      	ldrb	r3, [r3, #0]
 8001b84:	461a      	mov	r2, r3
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_IncTick+0x24>)
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	4413      	add	r3, r2
 8001b8c:	4a04      	ldr	r2, [pc, #16]	; (8001ba0 <HAL_IncTick+0x24>)
 8001b8e:	6013      	str	r3, [r2, #0]
}
 8001b90:	bf00      	nop
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	2000001c 	.word	0x2000001c
 8001ba0:	200003dc 	.word	0x200003dc

08001ba4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ba8:	4b03      	ldr	r3, [pc, #12]	; (8001bb8 <HAL_GetTick+0x14>)
 8001baa:	681b      	ldr	r3, [r3, #0]
}
 8001bac:	4618      	mov	r0, r3
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	200003dc 	.word	0x200003dc

08001bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <__NVIC_SetPriorityGrouping+0x44>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bee:	4a04      	ldr	r2, [pc, #16]	; (8001c00 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	60d3      	str	r3, [r2, #12]
}
 8001bf4:	bf00      	nop
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c08:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <__NVIC_GetPriorityGrouping+0x18>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	0a1b      	lsrs	r3, r3, #8
 8001c0e:	f003 0307 	and.w	r3, r3, #7
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	6039      	str	r1, [r7, #0]
 8001c2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	db0a      	blt.n	8001c4a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	490c      	ldr	r1, [pc, #48]	; (8001c6c <__NVIC_SetPriority+0x4c>)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	0112      	lsls	r2, r2, #4
 8001c40:	b2d2      	uxtb	r2, r2
 8001c42:	440b      	add	r3, r1
 8001c44:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c48:	e00a      	b.n	8001c60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	4908      	ldr	r1, [pc, #32]	; (8001c70 <__NVIC_SetPriority+0x50>)
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	f003 030f 	and.w	r3, r3, #15
 8001c56:	3b04      	subs	r3, #4
 8001c58:	0112      	lsls	r2, r2, #4
 8001c5a:	b2d2      	uxtb	r2, r2
 8001c5c:	440b      	add	r3, r1
 8001c5e:	761a      	strb	r2, [r3, #24]
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	e000e100 	.word	0xe000e100
 8001c70:	e000ed00 	.word	0xe000ed00

08001c74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b089      	sub	sp, #36	; 0x24
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	f003 0307 	and.w	r3, r3, #7
 8001c86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f1c3 0307 	rsb	r3, r3, #7
 8001c8e:	2b04      	cmp	r3, #4
 8001c90:	bf28      	it	cs
 8001c92:	2304      	movcs	r3, #4
 8001c94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	3304      	adds	r3, #4
 8001c9a:	2b06      	cmp	r3, #6
 8001c9c:	d902      	bls.n	8001ca4 <NVIC_EncodePriority+0x30>
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	3b03      	subs	r3, #3
 8001ca2:	e000      	b.n	8001ca6 <NVIC_EncodePriority+0x32>
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8001cac:	69bb      	ldr	r3, [r7, #24]
 8001cae:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb2:	43da      	mvns	r2, r3
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	401a      	ands	r2, r3
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cbc:	f04f 31ff 	mov.w	r1, #4294967295
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8001cc6:	43d9      	mvns	r1, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ccc:	4313      	orrs	r3, r2
         );
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3724      	adds	r7, #36	; 0x24
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
	...

08001cdc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	3b01      	subs	r3, #1
 8001ce8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001cec:	d301      	bcc.n	8001cf2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001cee:	2301      	movs	r3, #1
 8001cf0:	e00f      	b.n	8001d12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001cf2:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <SysTick_Config+0x40>)
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	3b01      	subs	r3, #1
 8001cf8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001cfa:	210f      	movs	r1, #15
 8001cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8001d00:	f7ff ff8e 	bl	8001c20 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d04:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <SysTick_Config+0x40>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d0a:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <SysTick_Config+0x40>)
 8001d0c:	2207      	movs	r2, #7
 8001d0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3708      	adds	r7, #8
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	e000e010 	.word	0xe000e010

08001d20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b082      	sub	sp, #8
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ff47 	bl	8001bbc <__NVIC_SetPriorityGrouping>
}
 8001d2e:	bf00      	nop
 8001d30:	3708      	adds	r7, #8
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b086      	sub	sp, #24
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	60b9      	str	r1, [r7, #8]
 8001d40:	607a      	str	r2, [r7, #4]
 8001d42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001d44:	2300      	movs	r3, #0
 8001d46:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001d48:	f7ff ff5c 	bl	8001c04 <__NVIC_GetPriorityGrouping>
 8001d4c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	6978      	ldr	r0, [r7, #20]
 8001d54:	f7ff ff8e 	bl	8001c74 <NVIC_EncodePriority>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d5e:	4611      	mov	r1, r2
 8001d60:	4618      	mov	r0, r3
 8001d62:	f7ff ff5d 	bl	8001c20 <__NVIC_SetPriority>
}
 8001d66:	bf00      	nop
 8001d68:	3718      	adds	r7, #24
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	bd80      	pop	{r7, pc}

08001d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f7ff ffb0 	bl	8001cdc <SysTick_Config>
 8001d7c:	4603      	mov	r3, r0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b087      	sub	sp, #28
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001d92:	2300      	movs	r3, #0
 8001d94:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d96:	e148      	b.n	800202a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	fa01 f303 	lsl.w	r3, r1, r3
 8001da4:	4013      	ands	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	f000 813a 	beq.w	8002024 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	685b      	ldr	r3, [r3, #4]
 8001db4:	f003 0303 	and.w	r3, r3, #3
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d005      	beq.n	8001dc8 <HAL_GPIO_Init+0x40>
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d130      	bne.n	8001e2a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
 8001dcc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	2203      	movs	r2, #3
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	693a      	ldr	r2, [r7, #16]
 8001df6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001dfe:	2201      	movs	r2, #1
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	43db      	mvns	r3, r3
 8001e08:	693a      	ldr	r2, [r7, #16]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	091b      	lsrs	r3, r3, #4
 8001e14:	f003 0201 	and.w	r2, r3, #1
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	4313      	orrs	r3, r2
 8001e22:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	693a      	ldr	r2, [r7, #16]
 8001e28:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 0303 	and.w	r3, r3, #3
 8001e32:	2b03      	cmp	r3, #3
 8001e34:	d017      	beq.n	8001e66 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001e3c:	697b      	ldr	r3, [r7, #20]
 8001e3e:	005b      	lsls	r3, r3, #1
 8001e40:	2203      	movs	r2, #3
 8001e42:	fa02 f303 	lsl.w	r3, r2, r3
 8001e46:	43db      	mvns	r3, r3
 8001e48:	693a      	ldr	r2, [r7, #16]
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	693a      	ldr	r2, [r7, #16]
 8001e5c:	4313      	orrs	r3, r2
 8001e5e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	693a      	ldr	r2, [r7, #16]
 8001e64:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	f003 0303 	and.w	r3, r3, #3
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d123      	bne.n	8001eba <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001e72:	697b      	ldr	r3, [r7, #20]
 8001e74:	08da      	lsrs	r2, r3, #3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	3208      	adds	r2, #8
 8001e7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e7e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	220f      	movs	r2, #15
 8001e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8e:	43db      	mvns	r3, r3
 8001e90:	693a      	ldr	r2, [r7, #16]
 8001e92:	4013      	ands	r3, r2
 8001e94:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	691a      	ldr	r2, [r3, #16]
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	f003 0307 	and.w	r3, r3, #7
 8001ea0:	009b      	lsls	r3, r3, #2
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	693a      	ldr	r2, [r7, #16]
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001eac:	697b      	ldr	r3, [r7, #20]
 8001eae:	08da      	lsrs	r2, r3, #3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	3208      	adds	r2, #8
 8001eb4:	6939      	ldr	r1, [r7, #16]
 8001eb6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	005b      	lsls	r3, r3, #1
 8001ec4:	2203      	movs	r2, #3
 8001ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eca:	43db      	mvns	r3, r3
 8001ecc:	693a      	ldr	r2, [r7, #16]
 8001ece:	4013      	ands	r3, r2
 8001ed0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f003 0203 	and.w	r2, r3, #3
 8001eda:	697b      	ldr	r3, [r7, #20]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	693a      	ldr	r2, [r7, #16]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	693a      	ldr	r2, [r7, #16]
 8001eec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001eee:	683b      	ldr	r3, [r7, #0]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	f000 8094 	beq.w	8002024 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001efc:	4b52      	ldr	r3, [pc, #328]	; (8002048 <HAL_GPIO_Init+0x2c0>)
 8001efe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f00:	4a51      	ldr	r2, [pc, #324]	; (8002048 <HAL_GPIO_Init+0x2c0>)
 8001f02:	f043 0301 	orr.w	r3, r3, #1
 8001f06:	6613      	str	r3, [r2, #96]	; 0x60
 8001f08:	4b4f      	ldr	r3, [pc, #316]	; (8002048 <HAL_GPIO_Init+0x2c0>)
 8001f0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f0c:	f003 0301 	and.w	r3, r3, #1
 8001f10:	60bb      	str	r3, [r7, #8]
 8001f12:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001f14:	4a4d      	ldr	r2, [pc, #308]	; (800204c <HAL_GPIO_Init+0x2c4>)
 8001f16:	697b      	ldr	r3, [r7, #20]
 8001f18:	089b      	lsrs	r3, r3, #2
 8001f1a:	3302      	adds	r3, #2
 8001f1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f20:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001f22:	697b      	ldr	r3, [r7, #20]
 8001f24:	f003 0303 	and.w	r3, r3, #3
 8001f28:	009b      	lsls	r3, r3, #2
 8001f2a:	220f      	movs	r2, #15
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	693a      	ldr	r2, [r7, #16]
 8001f34:	4013      	ands	r3, r2
 8001f36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001f3e:	d00d      	beq.n	8001f5c <HAL_GPIO_Init+0x1d4>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	4a43      	ldr	r2, [pc, #268]	; (8002050 <HAL_GPIO_Init+0x2c8>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	d007      	beq.n	8001f58 <HAL_GPIO_Init+0x1d0>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4a42      	ldr	r2, [pc, #264]	; (8002054 <HAL_GPIO_Init+0x2cc>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d101      	bne.n	8001f54 <HAL_GPIO_Init+0x1cc>
 8001f50:	2302      	movs	r3, #2
 8001f52:	e004      	b.n	8001f5e <HAL_GPIO_Init+0x1d6>
 8001f54:	2307      	movs	r3, #7
 8001f56:	e002      	b.n	8001f5e <HAL_GPIO_Init+0x1d6>
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e000      	b.n	8001f5e <HAL_GPIO_Init+0x1d6>
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	f002 0203 	and.w	r2, r2, #3
 8001f64:	0092      	lsls	r2, r2, #2
 8001f66:	4093      	lsls	r3, r2
 8001f68:	693a      	ldr	r2, [r7, #16]
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001f6e:	4937      	ldr	r1, [pc, #220]	; (800204c <HAL_GPIO_Init+0x2c4>)
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	089b      	lsrs	r3, r3, #2
 8001f74:	3302      	adds	r3, #2
 8001f76:	693a      	ldr	r2, [r7, #16]
 8001f78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f7c:	4b36      	ldr	r3, [pc, #216]	; (8002058 <HAL_GPIO_Init+0x2d0>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	4013      	ands	r3, r2
 8001f8a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d003      	beq.n	8001fa0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4313      	orrs	r3, r2
 8001f9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001fa0:	4a2d      	ldr	r2, [pc, #180]	; (8002058 <HAL_GPIO_Init+0x2d0>)
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001fa6:	4b2c      	ldr	r3, [pc, #176]	; (8002058 <HAL_GPIO_Init+0x2d0>)
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	693a      	ldr	r2, [r7, #16]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4313      	orrs	r3, r2
 8001fc8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001fca:	4a23      	ldr	r2, [pc, #140]	; (8002058 <HAL_GPIO_Init+0x2d0>)
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001fd0:	4b21      	ldr	r3, [pc, #132]	; (8002058 <HAL_GPIO_Init+0x2d0>)
 8001fd2:	685b      	ldr	r3, [r3, #4]
 8001fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	43db      	mvns	r3, r3
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	4013      	ands	r3, r2
 8001fde:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d003      	beq.n	8001ff4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001fec:	693a      	ldr	r2, [r7, #16]
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	4313      	orrs	r3, r2
 8001ff2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ff4:	4a18      	ldr	r2, [pc, #96]	; (8002058 <HAL_GPIO_Init+0x2d0>)
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ffa:	4b17      	ldr	r3, [pc, #92]	; (8002058 <HAL_GPIO_Init+0x2d0>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	43db      	mvns	r3, r3
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	4013      	ands	r3, r2
 8002008:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d003      	beq.n	800201e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8002016:	693a      	ldr	r2, [r7, #16]
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	4313      	orrs	r3, r2
 800201c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800201e:	4a0e      	ldr	r2, [pc, #56]	; (8002058 <HAL_GPIO_Init+0x2d0>)
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	3301      	adds	r3, #1
 8002028:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	697b      	ldr	r3, [r7, #20]
 8002030:	fa22 f303 	lsr.w	r3, r2, r3
 8002034:	2b00      	cmp	r3, #0
 8002036:	f47f aeaf 	bne.w	8001d98 <HAL_GPIO_Init+0x10>
  }
}
 800203a:	bf00      	nop
 800203c:	bf00      	nop
 800203e:	371c      	adds	r7, #28
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr
 8002048:	40021000 	.word	0x40021000
 800204c:	40010000 	.word	0x40010000
 8002050:	48000400 	.word	0x48000400
 8002054:	48000800 	.word	0x48000800
 8002058:	40010400 	.word	0x40010400

0800205c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
 8002064:	460b      	mov	r3, r1
 8002066:	807b      	strh	r3, [r7, #2]
 8002068:	4613      	mov	r3, r2
 800206a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800206c:	787b      	ldrb	r3, [r7, #1]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d003      	beq.n	800207a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002072:	887a      	ldrh	r2, [r7, #2]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002078:	e002      	b.n	8002080 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800207a:	887a      	ldrh	r2, [r7, #2]
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002080:	bf00      	nop
 8002082:	370c      	adds	r7, #12
 8002084:	46bd      	mov	sp, r7
 8002086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208a:	4770      	bx	lr

0800208c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002090:	4b05      	ldr	r3, [pc, #20]	; (80020a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a04      	ldr	r2, [pc, #16]	; (80020a8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800209a:	6013      	str	r3, [r2, #0]
}
 800209c:	bf00      	nop
 800209e:	46bd      	mov	sp, r7
 80020a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a4:	4770      	bx	lr
 80020a6:	bf00      	nop
 80020a8:	40007000 	.word	0x40007000

080020ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80020b0:	4b04      	ldr	r3, [pc, #16]	; (80020c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
 80020c2:	bf00      	nop
 80020c4:	40007000 	.word	0x40007000

080020c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020d6:	d130      	bne.n	800213a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80020d8:	4b23      	ldr	r3, [pc, #140]	; (8002168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80020e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020e4:	d038      	beq.n	8002158 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80020e6:	4b20      	ldr	r3, [pc, #128]	; (8002168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80020ee:	4a1e      	ldr	r2, [pc, #120]	; (8002168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80020f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80020f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80020f6:	4b1d      	ldr	r3, [pc, #116]	; (800216c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	2232      	movs	r2, #50	; 0x32
 80020fc:	fb02 f303 	mul.w	r3, r2, r3
 8002100:	4a1b      	ldr	r2, [pc, #108]	; (8002170 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8002102:	fba2 2303 	umull	r2, r3, r2, r3
 8002106:	0c9b      	lsrs	r3, r3, #18
 8002108:	3301      	adds	r3, #1
 800210a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800210c:	e002      	b.n	8002114 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	3b01      	subs	r3, #1
 8002112:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002114:	4b14      	ldr	r3, [pc, #80]	; (8002168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002116:	695b      	ldr	r3, [r3, #20]
 8002118:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800211c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002120:	d102      	bne.n	8002128 <HAL_PWREx_ControlVoltageScaling+0x60>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d1f2      	bne.n	800210e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002128:	4b0f      	ldr	r3, [pc, #60]	; (8002168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800212a:	695b      	ldr	r3, [r3, #20]
 800212c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002134:	d110      	bne.n	8002158 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e00f      	b.n	800215a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800213a:	4b0b      	ldr	r3, [pc, #44]	; (8002168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8002142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002146:	d007      	beq.n	8002158 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002148:	4b07      	ldr	r3, [pc, #28]	; (8002168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002150:	4a05      	ldr	r2, [pc, #20]	; (8002168 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002152:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002156:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002158:	2300      	movs	r3, #0
}
 800215a:	4618      	mov	r0, r3
 800215c:	3714      	adds	r7, #20
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	40007000 	.word	0x40007000
 800216c:	20000014 	.word	0x20000014
 8002170:	431bde83 	.word	0x431bde83

08002174 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b088      	sub	sp, #32
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d102      	bne.n	8002188 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002182:	2301      	movs	r3, #1
 8002184:	f000 bc02 	b.w	800298c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002188:	4b96      	ldr	r3, [pc, #600]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 030c 	and.w	r3, r3, #12
 8002190:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002192:	4b94      	ldr	r3, [pc, #592]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	f003 0303 	and.w	r3, r3, #3
 800219a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	f000 80e4 	beq.w	8002372 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80021aa:	69bb      	ldr	r3, [r7, #24]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d007      	beq.n	80021c0 <HAL_RCC_OscConfig+0x4c>
 80021b0:	69bb      	ldr	r3, [r7, #24]
 80021b2:	2b0c      	cmp	r3, #12
 80021b4:	f040 808b 	bne.w	80022ce <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	f040 8087 	bne.w	80022ce <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80021c0:	4b88      	ldr	r3, [pc, #544]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0302 	and.w	r3, r3, #2
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d005      	beq.n	80021d8 <HAL_RCC_OscConfig+0x64>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	699b      	ldr	r3, [r3, #24]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d101      	bne.n	80021d8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e3d9      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6a1a      	ldr	r2, [r3, #32]
 80021dc:	4b81      	ldr	r3, [pc, #516]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0308 	and.w	r3, r3, #8
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d004      	beq.n	80021f2 <HAL_RCC_OscConfig+0x7e>
 80021e8:	4b7e      	ldr	r3, [pc, #504]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021f0:	e005      	b.n	80021fe <HAL_RCC_OscConfig+0x8a>
 80021f2:	4b7c      	ldr	r3, [pc, #496]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 80021f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021f8:	091b      	lsrs	r3, r3, #4
 80021fa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021fe:	4293      	cmp	r3, r2
 8002200:	d223      	bcs.n	800224a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6a1b      	ldr	r3, [r3, #32]
 8002206:	4618      	mov	r0, r3
 8002208:	f000 fd8c 	bl	8002d24 <RCC_SetFlashLatencyFromMSIRange>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e3ba      	b.n	800298c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002216:	4b73      	ldr	r3, [pc, #460]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a72      	ldr	r2, [pc, #456]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 800221c:	f043 0308 	orr.w	r3, r3, #8
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	4b70      	ldr	r3, [pc, #448]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6a1b      	ldr	r3, [r3, #32]
 800222e:	496d      	ldr	r1, [pc, #436]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002230:	4313      	orrs	r3, r2
 8002232:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002234:	4b6b      	ldr	r3, [pc, #428]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	69db      	ldr	r3, [r3, #28]
 8002240:	021b      	lsls	r3, r3, #8
 8002242:	4968      	ldr	r1, [pc, #416]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002244:	4313      	orrs	r3, r2
 8002246:	604b      	str	r3, [r1, #4]
 8002248:	e025      	b.n	8002296 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800224a:	4b66      	ldr	r3, [pc, #408]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a65      	ldr	r2, [pc, #404]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002250:	f043 0308 	orr.w	r3, r3, #8
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	4b63      	ldr	r3, [pc, #396]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6a1b      	ldr	r3, [r3, #32]
 8002262:	4960      	ldr	r1, [pc, #384]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002264:	4313      	orrs	r3, r2
 8002266:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002268:	4b5e      	ldr	r3, [pc, #376]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	69db      	ldr	r3, [r3, #28]
 8002274:	021b      	lsls	r3, r3, #8
 8002276:	495b      	ldr	r1, [pc, #364]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002278:	4313      	orrs	r3, r2
 800227a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800227c:	69bb      	ldr	r3, [r7, #24]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d109      	bne.n	8002296 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a1b      	ldr	r3, [r3, #32]
 8002286:	4618      	mov	r0, r3
 8002288:	f000 fd4c 	bl	8002d24 <RCC_SetFlashLatencyFromMSIRange>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e37a      	b.n	800298c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002296:	f000 fc81 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 800229a:	4602      	mov	r2, r0
 800229c:	4b51      	ldr	r3, [pc, #324]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	091b      	lsrs	r3, r3, #4
 80022a2:	f003 030f 	and.w	r3, r3, #15
 80022a6:	4950      	ldr	r1, [pc, #320]	; (80023e8 <HAL_RCC_OscConfig+0x274>)
 80022a8:	5ccb      	ldrb	r3, [r1, r3]
 80022aa:	f003 031f 	and.w	r3, r3, #31
 80022ae:	fa22 f303 	lsr.w	r3, r2, r3
 80022b2:	4a4e      	ldr	r2, [pc, #312]	; (80023ec <HAL_RCC_OscConfig+0x278>)
 80022b4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80022b6:	4b4e      	ldr	r3, [pc, #312]	; (80023f0 <HAL_RCC_OscConfig+0x27c>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7ff fc22 	bl	8001b04 <HAL_InitTick>
 80022c0:	4603      	mov	r3, r0
 80022c2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80022c4:	7bfb      	ldrb	r3, [r7, #15]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d052      	beq.n	8002370 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80022ca:	7bfb      	ldrb	r3, [r7, #15]
 80022cc:	e35e      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d032      	beq.n	800233c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80022d6:	4b43      	ldr	r3, [pc, #268]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a42      	ldr	r2, [pc, #264]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80022e2:	f7ff fc5f 	bl	8001ba4 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022e8:	e008      	b.n	80022fc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80022ea:	f7ff fc5b 	bl	8001ba4 <HAL_GetTick>
 80022ee:	4602      	mov	r2, r0
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	1ad3      	subs	r3, r2, r3
 80022f4:	2b02      	cmp	r3, #2
 80022f6:	d901      	bls.n	80022fc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80022f8:	2303      	movs	r3, #3
 80022fa:	e347      	b.n	800298c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80022fc:	4b39      	ldr	r3, [pc, #228]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f003 0302 	and.w	r3, r3, #2
 8002304:	2b00      	cmp	r3, #0
 8002306:	d0f0      	beq.n	80022ea <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002308:	4b36      	ldr	r3, [pc, #216]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a35      	ldr	r2, [pc, #212]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 800230e:	f043 0308 	orr.w	r3, r3, #8
 8002312:	6013      	str	r3, [r2, #0]
 8002314:	4b33      	ldr	r3, [pc, #204]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	6a1b      	ldr	r3, [r3, #32]
 8002320:	4930      	ldr	r1, [pc, #192]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002322:	4313      	orrs	r3, r2
 8002324:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002326:	4b2f      	ldr	r3, [pc, #188]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002328:	685b      	ldr	r3, [r3, #4]
 800232a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	69db      	ldr	r3, [r3, #28]
 8002332:	021b      	lsls	r3, r3, #8
 8002334:	492b      	ldr	r1, [pc, #172]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002336:	4313      	orrs	r3, r2
 8002338:	604b      	str	r3, [r1, #4]
 800233a:	e01a      	b.n	8002372 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800233c:	4b29      	ldr	r3, [pc, #164]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a28      	ldr	r2, [pc, #160]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002342:	f023 0301 	bic.w	r3, r3, #1
 8002346:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002348:	f7ff fc2c 	bl	8001ba4 <HAL_GetTick>
 800234c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800234e:	e008      	b.n	8002362 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002350:	f7ff fc28 	bl	8001ba4 <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	1ad3      	subs	r3, r2, r3
 800235a:	2b02      	cmp	r3, #2
 800235c:	d901      	bls.n	8002362 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800235e:	2303      	movs	r3, #3
 8002360:	e314      	b.n	800298c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002362:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f003 0302 	and.w	r3, r3, #2
 800236a:	2b00      	cmp	r3, #0
 800236c:	d1f0      	bne.n	8002350 <HAL_RCC_OscConfig+0x1dc>
 800236e:	e000      	b.n	8002372 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002370:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f003 0301 	and.w	r3, r3, #1
 800237a:	2b00      	cmp	r3, #0
 800237c:	d073      	beq.n	8002466 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800237e:	69bb      	ldr	r3, [r7, #24]
 8002380:	2b08      	cmp	r3, #8
 8002382:	d005      	beq.n	8002390 <HAL_RCC_OscConfig+0x21c>
 8002384:	69bb      	ldr	r3, [r7, #24]
 8002386:	2b0c      	cmp	r3, #12
 8002388:	d10e      	bne.n	80023a8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800238a:	697b      	ldr	r3, [r7, #20]
 800238c:	2b03      	cmp	r3, #3
 800238e:	d10b      	bne.n	80023a8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002390:	4b14      	ldr	r3, [pc, #80]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d063      	beq.n	8002464 <HAL_RCC_OscConfig+0x2f0>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d15f      	bne.n	8002464 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e2f1      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b0:	d106      	bne.n	80023c0 <HAL_RCC_OscConfig+0x24c>
 80023b2:	4b0c      	ldr	r3, [pc, #48]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a0b      	ldr	r2, [pc, #44]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 80023b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023bc:	6013      	str	r3, [r2, #0]
 80023be:	e025      	b.n	800240c <HAL_RCC_OscConfig+0x298>
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80023c8:	d114      	bne.n	80023f4 <HAL_RCC_OscConfig+0x280>
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4a05      	ldr	r2, [pc, #20]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 80023d0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80023d4:	6013      	str	r3, [r2, #0]
 80023d6:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a02      	ldr	r2, [pc, #8]	; (80023e4 <HAL_RCC_OscConfig+0x270>)
 80023dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023e0:	6013      	str	r3, [r2, #0]
 80023e2:	e013      	b.n	800240c <HAL_RCC_OscConfig+0x298>
 80023e4:	40021000 	.word	0x40021000
 80023e8:	08009798 	.word	0x08009798
 80023ec:	20000014 	.word	0x20000014
 80023f0:	20000018 	.word	0x20000018
 80023f4:	4ba0      	ldr	r3, [pc, #640]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	4a9f      	ldr	r2, [pc, #636]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 80023fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023fe:	6013      	str	r3, [r2, #0]
 8002400:	4b9d      	ldr	r3, [pc, #628]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a9c      	ldr	r2, [pc, #624]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 8002406:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800240a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d013      	beq.n	800243c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002414:	f7ff fbc6 	bl	8001ba4 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800241a:	e008      	b.n	800242e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800241c:	f7ff fbc2 	bl	8001ba4 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b64      	cmp	r3, #100	; 0x64
 8002428:	d901      	bls.n	800242e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e2ae      	b.n	800298c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800242e:	4b92      	ldr	r3, [pc, #584]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d0f0      	beq.n	800241c <HAL_RCC_OscConfig+0x2a8>
 800243a:	e014      	b.n	8002466 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243c:	f7ff fbb2 	bl	8001ba4 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002444:	f7ff fbae 	bl	8001ba4 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b64      	cmp	r3, #100	; 0x64
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e29a      	b.n	800298c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002456:	4b88      	ldr	r3, [pc, #544]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x2d0>
 8002462:	e000      	b.n	8002466 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002464:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f003 0302 	and.w	r3, r3, #2
 800246e:	2b00      	cmp	r3, #0
 8002470:	d060      	beq.n	8002534 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	2b04      	cmp	r3, #4
 8002476:	d005      	beq.n	8002484 <HAL_RCC_OscConfig+0x310>
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	2b0c      	cmp	r3, #12
 800247c:	d119      	bne.n	80024b2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2b02      	cmp	r3, #2
 8002482:	d116      	bne.n	80024b2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002484:	4b7c      	ldr	r3, [pc, #496]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800248c:	2b00      	cmp	r3, #0
 800248e:	d005      	beq.n	800249c <HAL_RCC_OscConfig+0x328>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	68db      	ldr	r3, [r3, #12]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d101      	bne.n	800249c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e277      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800249c:	4b76      	ldr	r3, [pc, #472]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	691b      	ldr	r3, [r3, #16]
 80024a8:	061b      	lsls	r3, r3, #24
 80024aa:	4973      	ldr	r1, [pc, #460]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80024b0:	e040      	b.n	8002534 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	68db      	ldr	r3, [r3, #12]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d023      	beq.n	8002502 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80024ba:	4b6f      	ldr	r3, [pc, #444]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	4a6e      	ldr	r2, [pc, #440]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 80024c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c6:	f7ff fb6d 	bl	8001ba4 <HAL_GetTick>
 80024ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024cc:	e008      	b.n	80024e0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024ce:	f7ff fb69 	bl	8001ba4 <HAL_GetTick>
 80024d2:	4602      	mov	r2, r0
 80024d4:	693b      	ldr	r3, [r7, #16]
 80024d6:	1ad3      	subs	r3, r2, r3
 80024d8:	2b02      	cmp	r3, #2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e255      	b.n	800298c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80024e0:	4b65      	ldr	r3, [pc, #404]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d0f0      	beq.n	80024ce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024ec:	4b62      	ldr	r3, [pc, #392]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	691b      	ldr	r3, [r3, #16]
 80024f8:	061b      	lsls	r3, r3, #24
 80024fa:	495f      	ldr	r1, [pc, #380]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	604b      	str	r3, [r1, #4]
 8002500:	e018      	b.n	8002534 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002502:	4b5d      	ldr	r3, [pc, #372]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a5c      	ldr	r2, [pc, #368]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 8002508:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800250c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800250e:	f7ff fb49 	bl	8001ba4 <HAL_GetTick>
 8002512:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002514:	e008      	b.n	8002528 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002516:	f7ff fb45 	bl	8001ba4 <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	693b      	ldr	r3, [r7, #16]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d901      	bls.n	8002528 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e231      	b.n	800298c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002528:	4b53      	ldr	r3, [pc, #332]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1f0      	bne.n	8002516 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0308 	and.w	r3, r3, #8
 800253c:	2b00      	cmp	r3, #0
 800253e:	d03c      	beq.n	80025ba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	695b      	ldr	r3, [r3, #20]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d01c      	beq.n	8002582 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002548:	4b4b      	ldr	r3, [pc, #300]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 800254a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800254e:	4a4a      	ldr	r2, [pc, #296]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 8002550:	f043 0301 	orr.w	r3, r3, #1
 8002554:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002558:	f7ff fb24 	bl	8001ba4 <HAL_GetTick>
 800255c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800255e:	e008      	b.n	8002572 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002560:	f7ff fb20 	bl	8001ba4 <HAL_GetTick>
 8002564:	4602      	mov	r2, r0
 8002566:	693b      	ldr	r3, [r7, #16]
 8002568:	1ad3      	subs	r3, r2, r3
 800256a:	2b02      	cmp	r3, #2
 800256c:	d901      	bls.n	8002572 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800256e:	2303      	movs	r3, #3
 8002570:	e20c      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002572:	4b41      	ldr	r3, [pc, #260]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 8002574:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0ef      	beq.n	8002560 <HAL_RCC_OscConfig+0x3ec>
 8002580:	e01b      	b.n	80025ba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002582:	4b3d      	ldr	r3, [pc, #244]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 8002584:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002588:	4a3b      	ldr	r2, [pc, #236]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 800258a:	f023 0301 	bic.w	r3, r3, #1
 800258e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002592:	f7ff fb07 	bl	8001ba4 <HAL_GetTick>
 8002596:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800259a:	f7ff fb03 	bl	8001ba4 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b02      	cmp	r3, #2
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e1ef      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80025ac:	4b32      	ldr	r3, [pc, #200]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 80025ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80025b2:	f003 0302 	and.w	r3, r3, #2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d1ef      	bne.n	800259a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0304 	and.w	r3, r3, #4
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	f000 80a6 	beq.w	8002714 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025c8:	2300      	movs	r3, #0
 80025ca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80025cc:	4b2a      	ldr	r3, [pc, #168]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 80025ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d10d      	bne.n	80025f4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025d8:	4b27      	ldr	r3, [pc, #156]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 80025da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025dc:	4a26      	ldr	r2, [pc, #152]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 80025de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025e2:	6593      	str	r3, [r2, #88]	; 0x58
 80025e4:	4b24      	ldr	r3, [pc, #144]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 80025e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025ec:	60bb      	str	r3, [r7, #8]
 80025ee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025f0:	2301      	movs	r3, #1
 80025f2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80025f4:	4b21      	ldr	r3, [pc, #132]	; (800267c <HAL_RCC_OscConfig+0x508>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d118      	bne.n	8002632 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002600:	4b1e      	ldr	r3, [pc, #120]	; (800267c <HAL_RCC_OscConfig+0x508>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	4a1d      	ldr	r2, [pc, #116]	; (800267c <HAL_RCC_OscConfig+0x508>)
 8002606:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800260a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800260c:	f7ff faca 	bl	8001ba4 <HAL_GetTick>
 8002610:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002612:	e008      	b.n	8002626 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002614:	f7ff fac6 	bl	8001ba4 <HAL_GetTick>
 8002618:	4602      	mov	r2, r0
 800261a:	693b      	ldr	r3, [r7, #16]
 800261c:	1ad3      	subs	r3, r2, r3
 800261e:	2b02      	cmp	r3, #2
 8002620:	d901      	bls.n	8002626 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e1b2      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002626:	4b15      	ldr	r3, [pc, #84]	; (800267c <HAL_RCC_OscConfig+0x508>)
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800262e:	2b00      	cmp	r3, #0
 8002630:	d0f0      	beq.n	8002614 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	2b01      	cmp	r3, #1
 8002638:	d108      	bne.n	800264c <HAL_RCC_OscConfig+0x4d8>
 800263a:	4b0f      	ldr	r3, [pc, #60]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 800263c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002640:	4a0d      	ldr	r2, [pc, #52]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 8002642:	f043 0301 	orr.w	r3, r3, #1
 8002646:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800264a:	e029      	b.n	80026a0 <HAL_RCC_OscConfig+0x52c>
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	689b      	ldr	r3, [r3, #8]
 8002650:	2b05      	cmp	r3, #5
 8002652:	d115      	bne.n	8002680 <HAL_RCC_OscConfig+0x50c>
 8002654:	4b08      	ldr	r3, [pc, #32]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 8002656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265a:	4a07      	ldr	r2, [pc, #28]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 800265c:	f043 0304 	orr.w	r3, r3, #4
 8002660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002664:	4b04      	ldr	r3, [pc, #16]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 8002666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800266a:	4a03      	ldr	r2, [pc, #12]	; (8002678 <HAL_RCC_OscConfig+0x504>)
 800266c:	f043 0301 	orr.w	r3, r3, #1
 8002670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002674:	e014      	b.n	80026a0 <HAL_RCC_OscConfig+0x52c>
 8002676:	bf00      	nop
 8002678:	40021000 	.word	0x40021000
 800267c:	40007000 	.word	0x40007000
 8002680:	4b9a      	ldr	r3, [pc, #616]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 8002682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002686:	4a99      	ldr	r2, [pc, #612]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 8002688:	f023 0301 	bic.w	r3, r3, #1
 800268c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002690:	4b96      	ldr	r3, [pc, #600]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 8002692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002696:	4a95      	ldr	r2, [pc, #596]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 8002698:	f023 0304 	bic.w	r3, r3, #4
 800269c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d016      	beq.n	80026d6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a8:	f7ff fa7c 	bl	8001ba4 <HAL_GetTick>
 80026ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026ae:	e00a      	b.n	80026c6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b0:	f7ff fa78 	bl	8001ba4 <HAL_GetTick>
 80026b4:	4602      	mov	r2, r0
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	1ad3      	subs	r3, r2, r3
 80026ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80026be:	4293      	cmp	r3, r2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e162      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026c6:	4b89      	ldr	r3, [pc, #548]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 80026c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026cc:	f003 0302 	and.w	r3, r3, #2
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d0ed      	beq.n	80026b0 <HAL_RCC_OscConfig+0x53c>
 80026d4:	e015      	b.n	8002702 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026d6:	f7ff fa65 	bl	8001ba4 <HAL_GetTick>
 80026da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026dc:	e00a      	b.n	80026f4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026de:	f7ff fa61 	bl	8001ba4 <HAL_GetTick>
 80026e2:	4602      	mov	r2, r0
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e14b      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80026f4:	4b7d      	ldr	r3, [pc, #500]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 80026f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1ed      	bne.n	80026de <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002702:	7ffb      	ldrb	r3, [r7, #31]
 8002704:	2b01      	cmp	r3, #1
 8002706:	d105      	bne.n	8002714 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002708:	4b78      	ldr	r3, [pc, #480]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 800270a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270c:	4a77      	ldr	r2, [pc, #476]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 800270e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002712:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 0320 	and.w	r3, r3, #32
 800271c:	2b00      	cmp	r3, #0
 800271e:	d03c      	beq.n	800279a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002724:	2b00      	cmp	r3, #0
 8002726:	d01c      	beq.n	8002762 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002728:	4b70      	ldr	r3, [pc, #448]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 800272a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800272e:	4a6f      	ldr	r2, [pc, #444]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 8002730:	f043 0301 	orr.w	r3, r3, #1
 8002734:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002738:	f7ff fa34 	bl	8001ba4 <HAL_GetTick>
 800273c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800273e:	e008      	b.n	8002752 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002740:	f7ff fa30 	bl	8001ba4 <HAL_GetTick>
 8002744:	4602      	mov	r2, r0
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	1ad3      	subs	r3, r2, r3
 800274a:	2b02      	cmp	r3, #2
 800274c:	d901      	bls.n	8002752 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800274e:	2303      	movs	r3, #3
 8002750:	e11c      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002752:	4b66      	ldr	r3, [pc, #408]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 8002754:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002758:	f003 0302 	and.w	r3, r3, #2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d0ef      	beq.n	8002740 <HAL_RCC_OscConfig+0x5cc>
 8002760:	e01b      	b.n	800279a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002762:	4b62      	ldr	r3, [pc, #392]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 8002764:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002768:	4a60      	ldr	r2, [pc, #384]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 800276a:	f023 0301 	bic.w	r3, r3, #1
 800276e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002772:	f7ff fa17 	bl	8001ba4 <HAL_GetTick>
 8002776:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002778:	e008      	b.n	800278c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800277a:	f7ff fa13 	bl	8001ba4 <HAL_GetTick>
 800277e:	4602      	mov	r2, r0
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	2b02      	cmp	r3, #2
 8002786:	d901      	bls.n	800278c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002788:	2303      	movs	r3, #3
 800278a:	e0ff      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800278c:	4b57      	ldr	r3, [pc, #348]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 800278e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002792:	f003 0302 	and.w	r3, r3, #2
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1ef      	bne.n	800277a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f000 80f3 	beq.w	800298a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027a8:	2b02      	cmp	r3, #2
 80027aa:	f040 80c9 	bne.w	8002940 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80027ae:	4b4f      	ldr	r3, [pc, #316]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027b4:	697b      	ldr	r3, [r7, #20]
 80027b6:	f003 0203 	and.w	r2, r3, #3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027be:	429a      	cmp	r2, r3
 80027c0:	d12c      	bne.n	800281c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027cc:	3b01      	subs	r3, #1
 80027ce:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80027d0:	429a      	cmp	r2, r3
 80027d2:	d123      	bne.n	800281c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027de:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d11b      	bne.n	800281c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027ee:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d113      	bne.n	800281c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027fe:	085b      	lsrs	r3, r3, #1
 8002800:	3b01      	subs	r3, #1
 8002802:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002804:	429a      	cmp	r2, r3
 8002806:	d109      	bne.n	800281c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	085b      	lsrs	r3, r3, #1
 8002814:	3b01      	subs	r3, #1
 8002816:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002818:	429a      	cmp	r2, r3
 800281a:	d06b      	beq.n	80028f4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	2b0c      	cmp	r3, #12
 8002820:	d062      	beq.n	80028e8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002822:	4b32      	ldr	r3, [pc, #200]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d001      	beq.n	8002832 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e0ac      	b.n	800298c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002832:	4b2e      	ldr	r3, [pc, #184]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4a2d      	ldr	r2, [pc, #180]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 8002838:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800283c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800283e:	f7ff f9b1 	bl	8001ba4 <HAL_GetTick>
 8002842:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002844:	e008      	b.n	8002858 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002846:	f7ff f9ad 	bl	8001ba4 <HAL_GetTick>
 800284a:	4602      	mov	r2, r0
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	1ad3      	subs	r3, r2, r3
 8002850:	2b02      	cmp	r3, #2
 8002852:	d901      	bls.n	8002858 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e099      	b.n	800298c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002858:	4b24      	ldr	r3, [pc, #144]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002860:	2b00      	cmp	r3, #0
 8002862:	d1f0      	bne.n	8002846 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002864:	4b21      	ldr	r3, [pc, #132]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 8002866:	68da      	ldr	r2, [r3, #12]
 8002868:	4b21      	ldr	r3, [pc, #132]	; (80028f0 <HAL_RCC_OscConfig+0x77c>)
 800286a:	4013      	ands	r3, r2
 800286c:	687a      	ldr	r2, [r7, #4]
 800286e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002874:	3a01      	subs	r2, #1
 8002876:	0112      	lsls	r2, r2, #4
 8002878:	4311      	orrs	r1, r2
 800287a:	687a      	ldr	r2, [r7, #4]
 800287c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800287e:	0212      	lsls	r2, r2, #8
 8002880:	4311      	orrs	r1, r2
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002886:	0852      	lsrs	r2, r2, #1
 8002888:	3a01      	subs	r2, #1
 800288a:	0552      	lsls	r2, r2, #21
 800288c:	4311      	orrs	r1, r2
 800288e:	687a      	ldr	r2, [r7, #4]
 8002890:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002892:	0852      	lsrs	r2, r2, #1
 8002894:	3a01      	subs	r2, #1
 8002896:	0652      	lsls	r2, r2, #25
 8002898:	4311      	orrs	r1, r2
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800289e:	06d2      	lsls	r2, r2, #27
 80028a0:	430a      	orrs	r2, r1
 80028a2:	4912      	ldr	r1, [pc, #72]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80028a8:	4b10      	ldr	r3, [pc, #64]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a0f      	ldr	r2, [pc, #60]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 80028ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028b2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80028b4:	4b0d      	ldr	r3, [pc, #52]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	4a0c      	ldr	r2, [pc, #48]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 80028ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80028be:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80028c0:	f7ff f970 	bl	8001ba4 <HAL_GetTick>
 80028c4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028c8:	f7ff f96c 	bl	8001ba4 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e058      	b.n	800298c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028da:	4b04      	ldr	r3, [pc, #16]	; (80028ec <HAL_RCC_OscConfig+0x778>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80028e6:	e050      	b.n	800298a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80028e8:	2301      	movs	r3, #1
 80028ea:	e04f      	b.n	800298c <HAL_RCC_OscConfig+0x818>
 80028ec:	40021000 	.word	0x40021000
 80028f0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028f4:	4b27      	ldr	r3, [pc, #156]	; (8002994 <HAL_RCC_OscConfig+0x820>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d144      	bne.n	800298a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002900:	4b24      	ldr	r3, [pc, #144]	; (8002994 <HAL_RCC_OscConfig+0x820>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a23      	ldr	r2, [pc, #140]	; (8002994 <HAL_RCC_OscConfig+0x820>)
 8002906:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800290a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800290c:	4b21      	ldr	r3, [pc, #132]	; (8002994 <HAL_RCC_OscConfig+0x820>)
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	4a20      	ldr	r2, [pc, #128]	; (8002994 <HAL_RCC_OscConfig+0x820>)
 8002912:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002916:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002918:	f7ff f944 	bl	8001ba4 <HAL_GetTick>
 800291c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800291e:	e008      	b.n	8002932 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002920:	f7ff f940 	bl	8001ba4 <HAL_GetTick>
 8002924:	4602      	mov	r2, r0
 8002926:	693b      	ldr	r3, [r7, #16]
 8002928:	1ad3      	subs	r3, r2, r3
 800292a:	2b02      	cmp	r3, #2
 800292c:	d901      	bls.n	8002932 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800292e:	2303      	movs	r3, #3
 8002930:	e02c      	b.n	800298c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002932:	4b18      	ldr	r3, [pc, #96]	; (8002994 <HAL_RCC_OscConfig+0x820>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800293a:	2b00      	cmp	r3, #0
 800293c:	d0f0      	beq.n	8002920 <HAL_RCC_OscConfig+0x7ac>
 800293e:	e024      	b.n	800298a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	2b0c      	cmp	r3, #12
 8002944:	d01f      	beq.n	8002986 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002946:	4b13      	ldr	r3, [pc, #76]	; (8002994 <HAL_RCC_OscConfig+0x820>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	4a12      	ldr	r2, [pc, #72]	; (8002994 <HAL_RCC_OscConfig+0x820>)
 800294c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002950:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002952:	f7ff f927 	bl	8001ba4 <HAL_GetTick>
 8002956:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002958:	e008      	b.n	800296c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800295a:	f7ff f923 	bl	8001ba4 <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	693b      	ldr	r3, [r7, #16]
 8002962:	1ad3      	subs	r3, r2, r3
 8002964:	2b02      	cmp	r3, #2
 8002966:	d901      	bls.n	800296c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002968:	2303      	movs	r3, #3
 800296a:	e00f      	b.n	800298c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800296c:	4b09      	ldr	r3, [pc, #36]	; (8002994 <HAL_RCC_OscConfig+0x820>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002974:	2b00      	cmp	r3, #0
 8002976:	d1f0      	bne.n	800295a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002978:	4b06      	ldr	r3, [pc, #24]	; (8002994 <HAL_RCC_OscConfig+0x820>)
 800297a:	68da      	ldr	r2, [r3, #12]
 800297c:	4905      	ldr	r1, [pc, #20]	; (8002994 <HAL_RCC_OscConfig+0x820>)
 800297e:	4b06      	ldr	r3, [pc, #24]	; (8002998 <HAL_RCC_OscConfig+0x824>)
 8002980:	4013      	ands	r3, r2
 8002982:	60cb      	str	r3, [r1, #12]
 8002984:	e001      	b.n	800298a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	e000      	b.n	800298c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	3720      	adds	r7, #32
 8002990:	46bd      	mov	sp, r7
 8002992:	bd80      	pop	{r7, pc}
 8002994:	40021000 	.word	0x40021000
 8002998:	feeefffc 	.word	0xfeeefffc

0800299c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b084      	sub	sp, #16
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e0e7      	b.n	8002b80 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80029b0:	4b75      	ldr	r3, [pc, #468]	; (8002b88 <HAL_RCC_ClockConfig+0x1ec>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f003 0307 	and.w	r3, r3, #7
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	429a      	cmp	r2, r3
 80029bc:	d910      	bls.n	80029e0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029be:	4b72      	ldr	r3, [pc, #456]	; (8002b88 <HAL_RCC_ClockConfig+0x1ec>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f023 0207 	bic.w	r2, r3, #7
 80029c6:	4970      	ldr	r1, [pc, #448]	; (8002b88 <HAL_RCC_ClockConfig+0x1ec>)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029ce:	4b6e      	ldr	r3, [pc, #440]	; (8002b88 <HAL_RCC_ClockConfig+0x1ec>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	683a      	ldr	r2, [r7, #0]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d001      	beq.n	80029e0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80029dc:	2301      	movs	r3, #1
 80029de:	e0cf      	b.n	8002b80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d010      	beq.n	8002a0e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	4b66      	ldr	r3, [pc, #408]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 80029f2:	689b      	ldr	r3, [r3, #8]
 80029f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d908      	bls.n	8002a0e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029fc:	4b63      	ldr	r3, [pc, #396]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 80029fe:	689b      	ldr	r3, [r3, #8]
 8002a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	4960      	ldr	r1, [pc, #384]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d04c      	beq.n	8002ab4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	2b03      	cmp	r3, #3
 8002a20:	d107      	bne.n	8002a32 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a22:	4b5a      	ldr	r3, [pc, #360]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d121      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	e0a6      	b.n	8002b80 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	685b      	ldr	r3, [r3, #4]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d107      	bne.n	8002a4a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002a3a:	4b54      	ldr	r3, [pc, #336]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d115      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e09a      	b.n	8002b80 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	685b      	ldr	r3, [r3, #4]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d107      	bne.n	8002a62 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002a52:	4b4e      	ldr	r3, [pc, #312]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d109      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e08e      	b.n	8002b80 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002a62:	4b4a      	ldr	r3, [pc, #296]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e086      	b.n	8002b80 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002a72:	4b46      	ldr	r3, [pc, #280]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f023 0203 	bic.w	r2, r3, #3
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	4943      	ldr	r1, [pc, #268]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a84:	f7ff f88e 	bl	8001ba4 <HAL_GetTick>
 8002a88:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a8a:	e00a      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a8c:	f7ff f88a 	bl	8001ba4 <HAL_GetTick>
 8002a90:	4602      	mov	r2, r0
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	1ad3      	subs	r3, r2, r3
 8002a96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d901      	bls.n	8002aa2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e06e      	b.n	8002b80 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aa2:	4b3a      	ldr	r3, [pc, #232]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	f003 020c 	and.w	r2, r3, #12
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	685b      	ldr	r3, [r3, #4]
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	d1eb      	bne.n	8002a8c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f003 0302 	and.w	r3, r3, #2
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d010      	beq.n	8002ae2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689a      	ldr	r2, [r3, #8]
 8002ac4:	4b31      	ldr	r3, [pc, #196]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002acc:	429a      	cmp	r2, r3
 8002ace:	d208      	bcs.n	8002ae2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ad0:	4b2e      	ldr	r3, [pc, #184]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	492b      	ldr	r1, [pc, #172]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002ade:	4313      	orrs	r3, r2
 8002ae0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ae2:	4b29      	ldr	r3, [pc, #164]	; (8002b88 <HAL_RCC_ClockConfig+0x1ec>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f003 0307 	and.w	r3, r3, #7
 8002aea:	683a      	ldr	r2, [r7, #0]
 8002aec:	429a      	cmp	r2, r3
 8002aee:	d210      	bcs.n	8002b12 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af0:	4b25      	ldr	r3, [pc, #148]	; (8002b88 <HAL_RCC_ClockConfig+0x1ec>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f023 0207 	bic.w	r2, r3, #7
 8002af8:	4923      	ldr	r1, [pc, #140]	; (8002b88 <HAL_RCC_ClockConfig+0x1ec>)
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b00:	4b21      	ldr	r3, [pc, #132]	; (8002b88 <HAL_RCC_ClockConfig+0x1ec>)
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f003 0307 	and.w	r3, r3, #7
 8002b08:	683a      	ldr	r2, [r7, #0]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d001      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002b0e:	2301      	movs	r3, #1
 8002b10:	e036      	b.n	8002b80 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0304 	and.w	r3, r3, #4
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d008      	beq.n	8002b30 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b1e:	4b1b      	ldr	r3, [pc, #108]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	68db      	ldr	r3, [r3, #12]
 8002b2a:	4918      	ldr	r1, [pc, #96]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 0308 	and.w	r3, r3, #8
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d009      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b3c:	4b13      	ldr	r3, [pc, #76]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	691b      	ldr	r3, [r3, #16]
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	4910      	ldr	r1, [pc, #64]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002b50:	f000 f824 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 8002b54:	4602      	mov	r2, r0
 8002b56:	4b0d      	ldr	r3, [pc, #52]	; (8002b8c <HAL_RCC_ClockConfig+0x1f0>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	091b      	lsrs	r3, r3, #4
 8002b5c:	f003 030f 	and.w	r3, r3, #15
 8002b60:	490b      	ldr	r1, [pc, #44]	; (8002b90 <HAL_RCC_ClockConfig+0x1f4>)
 8002b62:	5ccb      	ldrb	r3, [r1, r3]
 8002b64:	f003 031f 	and.w	r3, r3, #31
 8002b68:	fa22 f303 	lsr.w	r3, r2, r3
 8002b6c:	4a09      	ldr	r2, [pc, #36]	; (8002b94 <HAL_RCC_ClockConfig+0x1f8>)
 8002b6e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002b70:	4b09      	ldr	r3, [pc, #36]	; (8002b98 <HAL_RCC_ClockConfig+0x1fc>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	4618      	mov	r0, r3
 8002b76:	f7fe ffc5 	bl	8001b04 <HAL_InitTick>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	72fb      	strb	r3, [r7, #11]

  return status;
 8002b7e:	7afb      	ldrb	r3, [r7, #11]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3710      	adds	r7, #16
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40022000 	.word	0x40022000
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	08009798 	.word	0x08009798
 8002b94:	20000014 	.word	0x20000014
 8002b98:	20000018 	.word	0x20000018

08002b9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b089      	sub	sp, #36	; 0x24
 8002ba0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002baa:	4b3e      	ldr	r3, [pc, #248]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 030c 	and.w	r3, r3, #12
 8002bb2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002bb4:	4b3b      	ldr	r3, [pc, #236]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bb6:	68db      	ldr	r3, [r3, #12]
 8002bb8:	f003 0303 	and.w	r3, r3, #3
 8002bbc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d005      	beq.n	8002bd0 <HAL_RCC_GetSysClockFreq+0x34>
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	2b0c      	cmp	r3, #12
 8002bc8:	d121      	bne.n	8002c0e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d11e      	bne.n	8002c0e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002bd0:	4b34      	ldr	r3, [pc, #208]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0308 	and.w	r3, r3, #8
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d107      	bne.n	8002bec <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002bdc:	4b31      	ldr	r3, [pc, #196]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002be2:	0a1b      	lsrs	r3, r3, #8
 8002be4:	f003 030f 	and.w	r3, r3, #15
 8002be8:	61fb      	str	r3, [r7, #28]
 8002bea:	e005      	b.n	8002bf8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002bec:	4b2d      	ldr	r3, [pc, #180]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	091b      	lsrs	r3, r3, #4
 8002bf2:	f003 030f 	and.w	r3, r3, #15
 8002bf6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002bf8:	4a2b      	ldr	r2, [pc, #172]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c00:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d10d      	bne.n	8002c24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002c0c:	e00a      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	2b04      	cmp	r3, #4
 8002c12:	d102      	bne.n	8002c1a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002c14:	4b25      	ldr	r3, [pc, #148]	; (8002cac <HAL_RCC_GetSysClockFreq+0x110>)
 8002c16:	61bb      	str	r3, [r7, #24]
 8002c18:	e004      	b.n	8002c24 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	2b08      	cmp	r3, #8
 8002c1e:	d101      	bne.n	8002c24 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002c20:	4b23      	ldr	r3, [pc, #140]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c22:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	2b0c      	cmp	r3, #12
 8002c28:	d134      	bne.n	8002c94 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002c2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f003 0303 	and.w	r3, r3, #3
 8002c32:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	2b02      	cmp	r3, #2
 8002c38:	d003      	beq.n	8002c42 <HAL_RCC_GetSysClockFreq+0xa6>
 8002c3a:	68bb      	ldr	r3, [r7, #8]
 8002c3c:	2b03      	cmp	r3, #3
 8002c3e:	d003      	beq.n	8002c48 <HAL_RCC_GetSysClockFreq+0xac>
 8002c40:	e005      	b.n	8002c4e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002c42:	4b1a      	ldr	r3, [pc, #104]	; (8002cac <HAL_RCC_GetSysClockFreq+0x110>)
 8002c44:	617b      	str	r3, [r7, #20]
      break;
 8002c46:	e005      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002c48:	4b19      	ldr	r3, [pc, #100]	; (8002cb0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002c4a:	617b      	str	r3, [r7, #20]
      break;
 8002c4c:	e002      	b.n	8002c54 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	617b      	str	r3, [r7, #20]
      break;
 8002c52:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002c54:	4b13      	ldr	r3, [pc, #76]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	091b      	lsrs	r3, r3, #4
 8002c5a:	f003 0307 	and.w	r3, r3, #7
 8002c5e:	3301      	adds	r3, #1
 8002c60:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002c62:	4b10      	ldr	r3, [pc, #64]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	0a1b      	lsrs	r3, r3, #8
 8002c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	fb03 f202 	mul.w	r2, r3, r2
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c78:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002c7a:	4b0a      	ldr	r3, [pc, #40]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002c7c:	68db      	ldr	r3, [r3, #12]
 8002c7e:	0e5b      	lsrs	r3, r3, #25
 8002c80:	f003 0303 	and.w	r3, r3, #3
 8002c84:	3301      	adds	r3, #1
 8002c86:	005b      	lsls	r3, r3, #1
 8002c88:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c92:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002c94:	69bb      	ldr	r3, [r7, #24]
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3724      	adds	r7, #36	; 0x24
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca0:	4770      	bx	lr
 8002ca2:	bf00      	nop
 8002ca4:	40021000 	.word	0x40021000
 8002ca8:	080097b0 	.word	0x080097b0
 8002cac:	00f42400 	.word	0x00f42400
 8002cb0:	007a1200 	.word	0x007a1200

08002cb4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cb8:	4b03      	ldr	r3, [pc, #12]	; (8002cc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cba:	681b      	ldr	r3, [r3, #0]
}
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
 8002cc6:	bf00      	nop
 8002cc8:	20000014 	.word	0x20000014

08002ccc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002cd0:	f7ff fff0 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	4b06      	ldr	r3, [pc, #24]	; (8002cf0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cd8:	689b      	ldr	r3, [r3, #8]
 8002cda:	0a1b      	lsrs	r3, r3, #8
 8002cdc:	f003 0307 	and.w	r3, r3, #7
 8002ce0:	4904      	ldr	r1, [pc, #16]	; (8002cf4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ce2:	5ccb      	ldrb	r3, [r1, r3]
 8002ce4:	f003 031f 	and.w	r3, r3, #31
 8002ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	40021000 	.word	0x40021000
 8002cf4:	080097a8 	.word	0x080097a8

08002cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002cfc:	f7ff ffda 	bl	8002cb4 <HAL_RCC_GetHCLKFreq>
 8002d00:	4602      	mov	r2, r0
 8002d02:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	0adb      	lsrs	r3, r3, #11
 8002d08:	f003 0307 	and.w	r3, r3, #7
 8002d0c:	4904      	ldr	r1, [pc, #16]	; (8002d20 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002d0e:	5ccb      	ldrb	r3, [r1, r3]
 8002d10:	f003 031f 	and.w	r3, r3, #31
 8002d14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	bd80      	pop	{r7, pc}
 8002d1c:	40021000 	.word	0x40021000
 8002d20:	080097a8 	.word	0x080097a8

08002d24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	b086      	sub	sp, #24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002d30:	4b2a      	ldr	r3, [pc, #168]	; (8002ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d003      	beq.n	8002d44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002d3c:	f7ff f9b6 	bl	80020ac <HAL_PWREx_GetVoltageRange>
 8002d40:	6178      	str	r0, [r7, #20]
 8002d42:	e014      	b.n	8002d6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002d44:	4b25      	ldr	r3, [pc, #148]	; (8002ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d48:	4a24      	ldr	r2, [pc, #144]	; (8002ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d4e:	6593      	str	r3, [r2, #88]	; 0x58
 8002d50:	4b22      	ldr	r3, [pc, #136]	; (8002ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d58:	60fb      	str	r3, [r7, #12]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002d5c:	f7ff f9a6 	bl	80020ac <HAL_PWREx_GetVoltageRange>
 8002d60:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002d62:	4b1e      	ldr	r3, [pc, #120]	; (8002ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d66:	4a1d      	ldr	r2, [pc, #116]	; (8002ddc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002d68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d6c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d74:	d10b      	bne.n	8002d8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2b80      	cmp	r3, #128	; 0x80
 8002d7a:	d919      	bls.n	8002db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2ba0      	cmp	r3, #160	; 0xa0
 8002d80:	d902      	bls.n	8002d88 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002d82:	2302      	movs	r3, #2
 8002d84:	613b      	str	r3, [r7, #16]
 8002d86:	e013      	b.n	8002db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002d88:	2301      	movs	r3, #1
 8002d8a:	613b      	str	r3, [r7, #16]
 8002d8c:	e010      	b.n	8002db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2b80      	cmp	r3, #128	; 0x80
 8002d92:	d902      	bls.n	8002d9a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002d94:	2303      	movs	r3, #3
 8002d96:	613b      	str	r3, [r7, #16]
 8002d98:	e00a      	b.n	8002db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	2b80      	cmp	r3, #128	; 0x80
 8002d9e:	d102      	bne.n	8002da6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002da0:	2302      	movs	r3, #2
 8002da2:	613b      	str	r3, [r7, #16]
 8002da4:	e004      	b.n	8002db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2b70      	cmp	r3, #112	; 0x70
 8002daa:	d101      	bne.n	8002db0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002dac:	2301      	movs	r3, #1
 8002dae:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002db0:	4b0b      	ldr	r3, [pc, #44]	; (8002de0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f023 0207 	bic.w	r2, r3, #7
 8002db8:	4909      	ldr	r1, [pc, #36]	; (8002de0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002dc0:	4b07      	ldr	r3, [pc, #28]	; (8002de0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0307 	and.w	r3, r3, #7
 8002dc8:	693a      	ldr	r2, [r7, #16]
 8002dca:	429a      	cmp	r2, r3
 8002dcc:	d001      	beq.n	8002dd2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e000      	b.n	8002dd4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002dd2:	2300      	movs	r3, #0
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3718      	adds	r7, #24
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	40021000 	.word	0x40021000
 8002de0:	40022000 	.word	0x40022000

08002de4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002de4:	b580      	push	{r7, lr}
 8002de6:	b086      	sub	sp, #24
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002dec:	2300      	movs	r3, #0
 8002dee:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002df0:	2300      	movs	r3, #0
 8002df2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d031      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e04:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e08:	d01a      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002e0a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002e0e:	d814      	bhi.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d009      	beq.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002e14:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002e18:	d10f      	bne.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002e1a:	4b5d      	ldr	r3, [pc, #372]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	4a5c      	ldr	r2, [pc, #368]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e24:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e26:	e00c      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	3304      	adds	r3, #4
 8002e2c:	2100      	movs	r1, #0
 8002e2e:	4618      	mov	r0, r3
 8002e30:	f000 f9de 	bl	80031f0 <RCCEx_PLLSAI1_Config>
 8002e34:	4603      	mov	r3, r0
 8002e36:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002e38:	e003      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	74fb      	strb	r3, [r7, #19]
      break;
 8002e3e:	e000      	b.n	8002e42 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002e40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002e42:	7cfb      	ldrb	r3, [r7, #19]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d10b      	bne.n	8002e60 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e48:	4b51      	ldr	r3, [pc, #324]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e4e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e56:	494e      	ldr	r1, [pc, #312]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002e5e:	e001      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e60:	7cfb      	ldrb	r3, [r7, #19]
 8002e62:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 809e 	beq.w	8002fae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e72:	2300      	movs	r3, #0
 8002e74:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002e76:	4b46      	ldr	r3, [pc, #280]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002e82:	2301      	movs	r3, #1
 8002e84:	e000      	b.n	8002e88 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002e86:	2300      	movs	r3, #0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d00d      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e8c:	4b40      	ldr	r3, [pc, #256]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e90:	4a3f      	ldr	r2, [pc, #252]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e96:	6593      	str	r3, [r2, #88]	; 0x58
 8002e98:	4b3d      	ldr	r3, [pc, #244]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea0:	60bb      	str	r3, [r7, #8]
 8002ea2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002ea4:	2301      	movs	r3, #1
 8002ea6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002ea8:	4b3a      	ldr	r3, [pc, #232]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	4a39      	ldr	r2, [pc, #228]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002eae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eb2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002eb4:	f7fe fe76 	bl	8001ba4 <HAL_GetTick>
 8002eb8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002eba:	e009      	b.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ebc:	f7fe fe72 	bl	8001ba4 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d902      	bls.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	74fb      	strb	r3, [r7, #19]
        break;
 8002ece:	e005      	b.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ed0:	4b30      	ldr	r3, [pc, #192]	; (8002f94 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d0ef      	beq.n	8002ebc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002edc:	7cfb      	ldrb	r3, [r7, #19]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d15a      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002ee2:	4b2b      	ldr	r3, [pc, #172]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ee8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eec:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d01e      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002ef8:	697a      	ldr	r2, [r7, #20]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d019      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002efe:	4b24      	ldr	r3, [pc, #144]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f08:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f0a:	4b21      	ldr	r3, [pc, #132]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f10:	4a1f      	ldr	r2, [pc, #124]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f1a:	4b1d      	ldr	r3, [pc, #116]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f20:	4a1b      	ldr	r2, [pc, #108]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002f2a:	4a19      	ldr	r2, [pc, #100]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	f003 0301 	and.w	r3, r3, #1
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	d016      	beq.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3c:	f7fe fe32 	bl	8001ba4 <HAL_GetTick>
 8002f40:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f42:	e00b      	b.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f44:	f7fe fe2e 	bl	8001ba4 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d902      	bls.n	8002f5c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002f56:	2303      	movs	r3, #3
 8002f58:	74fb      	strb	r3, [r7, #19]
            break;
 8002f5a:	e006      	b.n	8002f6a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002f5c:	4b0c      	ldr	r3, [pc, #48]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d0ec      	beq.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002f6a:	7cfb      	ldrb	r3, [r7, #19]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d10b      	bne.n	8002f88 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f70:	4b07      	ldr	r3, [pc, #28]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f76:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002f7e:	4904      	ldr	r1, [pc, #16]	; (8002f90 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002f86:	e009      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f88:	7cfb      	ldrb	r3, [r7, #19]
 8002f8a:	74bb      	strb	r3, [r7, #18]
 8002f8c:	e006      	b.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002f8e:	bf00      	nop
 8002f90:	40021000 	.word	0x40021000
 8002f94:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f98:	7cfb      	ldrb	r3, [r7, #19]
 8002f9a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002f9c:	7c7b      	ldrb	r3, [r7, #17]
 8002f9e:	2b01      	cmp	r3, #1
 8002fa0:	d105      	bne.n	8002fae <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002fa2:	4b8a      	ldr	r3, [pc, #552]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002fa6:	4a89      	ldr	r2, [pc, #548]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fa8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002fac:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0301 	and.w	r3, r3, #1
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d00a      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002fba:	4b84      	ldr	r3, [pc, #528]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fbc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fc0:	f023 0203 	bic.w	r2, r3, #3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	4980      	ldr	r1, [pc, #512]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00a      	beq.n	8002ff2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002fdc:	4b7b      	ldr	r3, [pc, #492]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fe2:	f023 020c 	bic.w	r2, r3, #12
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fea:	4978      	ldr	r1, [pc, #480]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0320 	and.w	r3, r3, #32
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002ffe:	4b73      	ldr	r3, [pc, #460]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003004:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300c:	496f      	ldr	r1, [pc, #444]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800300e:	4313      	orrs	r3, r2
 8003010:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800301c:	2b00      	cmp	r3, #0
 800301e:	d00a      	beq.n	8003036 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003020:	4b6a      	ldr	r3, [pc, #424]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003022:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003026:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302e:	4967      	ldr	r1, [pc, #412]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003030:	4313      	orrs	r3, r2
 8003032:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800303e:	2b00      	cmp	r3, #0
 8003040:	d00a      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003042:	4b62      	ldr	r3, [pc, #392]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003048:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003050:	495e      	ldr	r1, [pc, #376]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003052:	4313      	orrs	r3, r2
 8003054:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003060:	2b00      	cmp	r3, #0
 8003062:	d00a      	beq.n	800307a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003064:	4b59      	ldr	r3, [pc, #356]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003066:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800306a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003072:	4956      	ldr	r1, [pc, #344]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003074:	4313      	orrs	r3, r2
 8003076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00a      	beq.n	800309c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003086:	4b51      	ldr	r3, [pc, #324]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003094:	494d      	ldr	r1, [pc, #308]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003096:	4313      	orrs	r3, r2
 8003098:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d028      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030a8:	4b48      	ldr	r3, [pc, #288]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	4945      	ldr	r1, [pc, #276]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80030c6:	d106      	bne.n	80030d6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030c8:	4b40      	ldr	r3, [pc, #256]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030ca:	68db      	ldr	r3, [r3, #12]
 80030cc:	4a3f      	ldr	r2, [pc, #252]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030ce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030d2:	60d3      	str	r3, [r2, #12]
 80030d4:	e011      	b.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80030de:	d10c      	bne.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	3304      	adds	r3, #4
 80030e4:	2101      	movs	r1, #1
 80030e6:	4618      	mov	r0, r3
 80030e8:	f000 f882 	bl	80031f0 <RCCEx_PLLSAI1_Config>
 80030ec:	4603      	mov	r3, r0
 80030ee:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80030f0:	7cfb      	ldrb	r3, [r7, #19]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80030f6:	7cfb      	ldrb	r3, [r7, #19]
 80030f8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d028      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003106:	4b31      	ldr	r3, [pc, #196]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003108:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800310c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003114:	492d      	ldr	r1, [pc, #180]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003116:	4313      	orrs	r3, r2
 8003118:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003120:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003124:	d106      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003126:	4b29      	ldr	r3, [pc, #164]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003128:	68db      	ldr	r3, [r3, #12]
 800312a:	4a28      	ldr	r2, [pc, #160]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800312c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003130:	60d3      	str	r3, [r2, #12]
 8003132:	e011      	b.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003138:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800313c:	d10c      	bne.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	3304      	adds	r3, #4
 8003142:	2101      	movs	r1, #1
 8003144:	4618      	mov	r0, r3
 8003146:	f000 f853 	bl	80031f0 <RCCEx_PLLSAI1_Config>
 800314a:	4603      	mov	r3, r0
 800314c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800314e:	7cfb      	ldrb	r3, [r7, #19]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d001      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003154:	7cfb      	ldrb	r3, [r7, #19]
 8003156:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d01c      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003164:	4b19      	ldr	r3, [pc, #100]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800316a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003172:	4916      	ldr	r1, [pc, #88]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003174:	4313      	orrs	r3, r2
 8003176:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800317e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003182:	d10c      	bne.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	3304      	adds	r3, #4
 8003188:	2102      	movs	r1, #2
 800318a:	4618      	mov	r0, r3
 800318c:	f000 f830 	bl	80031f0 <RCCEx_PLLSAI1_Config>
 8003190:	4603      	mov	r3, r0
 8003192:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003194:	7cfb      	ldrb	r3, [r7, #19]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800319a:	7cfb      	ldrb	r3, [r7, #19]
 800319c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00a      	beq.n	80031c0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80031aa:	4b08      	ldr	r3, [pc, #32]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80031b8:	4904      	ldr	r1, [pc, #16]	; (80031cc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80031c0:	7cbb      	ldrb	r3, [r7, #18]
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3718      	adds	r7, #24
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40021000 	.word	0x40021000

080031d0 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80031d4:	4b05      	ldr	r3, [pc, #20]	; (80031ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a04      	ldr	r2, [pc, #16]	; (80031ec <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80031da:	f043 0304 	orr.w	r3, r3, #4
 80031de:	6013      	str	r3, [r2, #0]
}
 80031e0:	bf00      	nop
 80031e2:	46bd      	mov	sp, r7
 80031e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e8:	4770      	bx	lr
 80031ea:	bf00      	nop
 80031ec:	40021000 	.word	0x40021000

080031f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80031fa:	2300      	movs	r3, #0
 80031fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80031fe:	4b74      	ldr	r3, [pc, #464]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	f003 0303 	and.w	r3, r3, #3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d018      	beq.n	800323c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800320a:	4b71      	ldr	r3, [pc, #452]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f003 0203 	and.w	r2, r3, #3
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	429a      	cmp	r2, r3
 8003218:	d10d      	bne.n	8003236 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
       ||
 800321e:	2b00      	cmp	r3, #0
 8003220:	d009      	beq.n	8003236 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8003222:	4b6b      	ldr	r3, [pc, #428]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	091b      	lsrs	r3, r3, #4
 8003228:	f003 0307 	and.w	r3, r3, #7
 800322c:	1c5a      	adds	r2, r3, #1
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
       ||
 8003232:	429a      	cmp	r2, r3
 8003234:	d047      	beq.n	80032c6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003236:	2301      	movs	r3, #1
 8003238:	73fb      	strb	r3, [r7, #15]
 800323a:	e044      	b.n	80032c6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	2b03      	cmp	r3, #3
 8003242:	d018      	beq.n	8003276 <RCCEx_PLLSAI1_Config+0x86>
 8003244:	2b03      	cmp	r3, #3
 8003246:	d825      	bhi.n	8003294 <RCCEx_PLLSAI1_Config+0xa4>
 8003248:	2b01      	cmp	r3, #1
 800324a:	d002      	beq.n	8003252 <RCCEx_PLLSAI1_Config+0x62>
 800324c:	2b02      	cmp	r3, #2
 800324e:	d009      	beq.n	8003264 <RCCEx_PLLSAI1_Config+0x74>
 8003250:	e020      	b.n	8003294 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003252:	4b5f      	ldr	r3, [pc, #380]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f003 0302 	and.w	r3, r3, #2
 800325a:	2b00      	cmp	r3, #0
 800325c:	d11d      	bne.n	800329a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003262:	e01a      	b.n	800329a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003264:	4b5a      	ldr	r3, [pc, #360]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800326c:	2b00      	cmp	r3, #0
 800326e:	d116      	bne.n	800329e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003274:	e013      	b.n	800329e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003276:	4b56      	ldr	r3, [pc, #344]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d10f      	bne.n	80032a2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003282:	4b53      	ldr	r3, [pc, #332]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800328a:	2b00      	cmp	r3, #0
 800328c:	d109      	bne.n	80032a2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003292:	e006      	b.n	80032a2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003294:	2301      	movs	r3, #1
 8003296:	73fb      	strb	r3, [r7, #15]
      break;
 8003298:	e004      	b.n	80032a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800329a:	bf00      	nop
 800329c:	e002      	b.n	80032a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800329e:	bf00      	nop
 80032a0:	e000      	b.n	80032a4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80032a2:	bf00      	nop
    }

    if(status == HAL_OK)
 80032a4:	7bfb      	ldrb	r3, [r7, #15]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10d      	bne.n	80032c6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80032aa:	4b49      	ldr	r3, [pc, #292]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ac:	68db      	ldr	r3, [r3, #12]
 80032ae:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6819      	ldr	r1, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	3b01      	subs	r3, #1
 80032bc:	011b      	lsls	r3, r3, #4
 80032be:	430b      	orrs	r3, r1
 80032c0:	4943      	ldr	r1, [pc, #268]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032c2:	4313      	orrs	r3, r2
 80032c4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80032c6:	7bfb      	ldrb	r3, [r7, #15]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d17c      	bne.n	80033c6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80032cc:	4b40      	ldr	r3, [pc, #256]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a3f      	ldr	r2, [pc, #252]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032d2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80032d6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032d8:	f7fe fc64 	bl	8001ba4 <HAL_GetTick>
 80032dc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032de:	e009      	b.n	80032f4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80032e0:	f7fe fc60 	bl	8001ba4 <HAL_GetTick>
 80032e4:	4602      	mov	r2, r0
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	2b02      	cmp	r3, #2
 80032ec:	d902      	bls.n	80032f4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80032ee:	2303      	movs	r3, #3
 80032f0:	73fb      	strb	r3, [r7, #15]
        break;
 80032f2:	e005      	b.n	8003300 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80032f4:	4b36      	ldr	r3, [pc, #216]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1ef      	bne.n	80032e0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003300:	7bfb      	ldrb	r3, [r7, #15]
 8003302:	2b00      	cmp	r3, #0
 8003304:	d15f      	bne.n	80033c6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d110      	bne.n	800332e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800330c:	4b30      	ldr	r3, [pc, #192]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800330e:	691b      	ldr	r3, [r3, #16]
 8003310:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003314:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6892      	ldr	r2, [r2, #8]
 800331c:	0211      	lsls	r1, r2, #8
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	68d2      	ldr	r2, [r2, #12]
 8003322:	06d2      	lsls	r2, r2, #27
 8003324:	430a      	orrs	r2, r1
 8003326:	492a      	ldr	r1, [pc, #168]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003328:	4313      	orrs	r3, r2
 800332a:	610b      	str	r3, [r1, #16]
 800332c:	e027      	b.n	800337e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	2b01      	cmp	r3, #1
 8003332:	d112      	bne.n	800335a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003334:	4b26      	ldr	r3, [pc, #152]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003336:	691b      	ldr	r3, [r3, #16]
 8003338:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800333c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003340:	687a      	ldr	r2, [r7, #4]
 8003342:	6892      	ldr	r2, [r2, #8]
 8003344:	0211      	lsls	r1, r2, #8
 8003346:	687a      	ldr	r2, [r7, #4]
 8003348:	6912      	ldr	r2, [r2, #16]
 800334a:	0852      	lsrs	r2, r2, #1
 800334c:	3a01      	subs	r2, #1
 800334e:	0552      	lsls	r2, r2, #21
 8003350:	430a      	orrs	r2, r1
 8003352:	491f      	ldr	r1, [pc, #124]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003354:	4313      	orrs	r3, r2
 8003356:	610b      	str	r3, [r1, #16]
 8003358:	e011      	b.n	800337e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800335a:	4b1d      	ldr	r3, [pc, #116]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8003362:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	6892      	ldr	r2, [r2, #8]
 800336a:	0211      	lsls	r1, r2, #8
 800336c:	687a      	ldr	r2, [r7, #4]
 800336e:	6952      	ldr	r2, [r2, #20]
 8003370:	0852      	lsrs	r2, r2, #1
 8003372:	3a01      	subs	r2, #1
 8003374:	0652      	lsls	r2, r2, #25
 8003376:	430a      	orrs	r2, r1
 8003378:	4915      	ldr	r1, [pc, #84]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800337a:	4313      	orrs	r3, r2
 800337c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800337e:	4b14      	ldr	r3, [pc, #80]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a13      	ldr	r2, [pc, #76]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003384:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003388:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338a:	f7fe fc0b 	bl	8001ba4 <HAL_GetTick>
 800338e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003390:	e009      	b.n	80033a6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003392:	f7fe fc07 	bl	8001ba4 <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	2b02      	cmp	r3, #2
 800339e:	d902      	bls.n	80033a6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80033a0:	2303      	movs	r3, #3
 80033a2:	73fb      	strb	r3, [r7, #15]
          break;
 80033a4:	e005      	b.n	80033b2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80033a6:	4b0a      	ldr	r3, [pc, #40]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d0ef      	beq.n	8003392 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80033b2:	7bfb      	ldrb	r3, [r7, #15]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d106      	bne.n	80033c6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80033b8:	4b05      	ldr	r3, [pc, #20]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033ba:	691a      	ldr	r2, [r3, #16]
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	699b      	ldr	r3, [r3, #24]
 80033c0:	4903      	ldr	r1, [pc, #12]	; (80033d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80033c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3710      	adds	r7, #16
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40021000 	.word	0x40021000

080033d4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b084      	sub	sp, #16
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033e2:	2301      	movs	r3, #1
 80033e4:	e095      	b.n	8003512 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d108      	bne.n	8003400 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80033f6:	d009      	beq.n	800340c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	61da      	str	r2, [r3, #28]
 80033fe:	e005      	b.n	800340c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2200      	movs	r2, #0
 8003410:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003418:	b2db      	uxtb	r3, r3
 800341a:	2b00      	cmp	r3, #0
 800341c:	d106      	bne.n	800342c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	f7fe f93c 	bl	80016a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2202      	movs	r2, #2
 8003430:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003442:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800344c:	d902      	bls.n	8003454 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800344e:	2300      	movs	r3, #0
 8003450:	60fb      	str	r3, [r7, #12]
 8003452:	e002      	b.n	800345a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003454:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003458:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	68db      	ldr	r3, [r3, #12]
 800345e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8003462:	d007      	beq.n	8003474 <HAL_SPI_Init+0xa0>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800346c:	d002      	beq.n	8003474 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	689b      	ldr	r3, [r3, #8]
 8003480:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003484:	431a      	orrs	r2, r3
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	691b      	ldr	r3, [r3, #16]
 800348a:	f003 0302 	and.w	r3, r3, #2
 800348e:	431a      	orrs	r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	431a      	orrs	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034a2:	431a      	orrs	r2, r3
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	69db      	ldr	r3, [r3, #28]
 80034a8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80034ac:	431a      	orrs	r2, r3
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a1b      	ldr	r3, [r3, #32]
 80034b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034b6:	ea42 0103 	orr.w	r1, r2, r3
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034be:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	699b      	ldr	r3, [r3, #24]
 80034ce:	0c1b      	lsrs	r3, r3, #16
 80034d0:	f003 0204 	and.w	r2, r3, #4
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d8:	f003 0310 	and.w	r3, r3, #16
 80034dc:	431a      	orrs	r2, r3
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034e2:	f003 0308 	and.w	r3, r3, #8
 80034e6:	431a      	orrs	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	68db      	ldr	r3, [r3, #12]
 80034ec:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80034f0:	ea42 0103 	orr.w	r1, r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}

0800351a <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b088      	sub	sp, #32
 800351e:	af02      	add	r7, sp, #8
 8003520:	60f8      	str	r0, [r7, #12]
 8003522:	60b9      	str	r1, [r7, #8]
 8003524:	603b      	str	r3, [r7, #0]
 8003526:	4613      	mov	r3, r2
 8003528:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b01      	cmp	r3, #1
 8003534:	d001      	beq.n	800353a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003536:	2302      	movs	r3, #2
 8003538:	e123      	b.n	8003782 <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003542:	d112      	bne.n	800356a <HAL_SPI_Receive+0x50>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d10e      	bne.n	800356a <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2204      	movs	r2, #4
 8003550:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003554:	88fa      	ldrh	r2, [r7, #6]
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	9300      	str	r3, [sp, #0]
 800355a:	4613      	mov	r3, r2
 800355c:	68ba      	ldr	r2, [r7, #8]
 800355e:	68b9      	ldr	r1, [r7, #8]
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f000 f912 	bl	800378a <HAL_SPI_TransmitReceive>
 8003566:	4603      	mov	r3, r0
 8003568:	e10b      	b.n	8003782 <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800356a:	f7fe fb1b 	bl	8001ba4 <HAL_GetTick>
 800356e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <HAL_SPI_Receive+0x62>
 8003576:	88fb      	ldrh	r3, [r7, #6]
 8003578:	2b00      	cmp	r3, #0
 800357a:	d101      	bne.n	8003580 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 800357c:	2301      	movs	r3, #1
 800357e:	e100      	b.n	8003782 <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003586:	2b01      	cmp	r3, #1
 8003588:	d101      	bne.n	800358e <HAL_SPI_Receive+0x74>
 800358a:	2302      	movs	r3, #2
 800358c:	e0f9      	b.n	8003782 <HAL_SPI_Receive+0x268>
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2201      	movs	r2, #1
 8003592:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2204      	movs	r2, #4
 800359a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2200      	movs	r2, #0
 80035a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	68ba      	ldr	r2, [r7, #8]
 80035a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	88fa      	ldrh	r2, [r7, #6]
 80035ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	88fa      	ldrh	r2, [r7, #6]
 80035b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2200      	movs	r2, #0
 80035d6:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80035e0:	d908      	bls.n	80035f4 <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80035f0:	605a      	str	r2, [r3, #4]
 80035f2:	e007      	b.n	8003604 <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003602:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800360c:	d10f      	bne.n	800362e <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800361c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800362c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003638:	2b40      	cmp	r3, #64	; 0x40
 800363a:	d007      	beq.n	800364c <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800364a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8003654:	d875      	bhi.n	8003742 <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003656:	e037      	b.n	80036c8 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f003 0301 	and.w	r3, r3, #1
 8003662:	2b01      	cmp	r3, #1
 8003664:	d117      	bne.n	8003696 <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f103 020c 	add.w	r2, r3, #12
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003672:	7812      	ldrb	r2, [r2, #0]
 8003674:	b2d2      	uxtb	r2, r2
 8003676:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367c:	1c5a      	adds	r2, r3, #1
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003688:	b29b      	uxth	r3, r3
 800368a:	3b01      	subs	r3, #1
 800368c:	b29a      	uxth	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003694:	e018      	b.n	80036c8 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003696:	f7fe fa85 	bl	8001ba4 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	697b      	ldr	r3, [r7, #20]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d803      	bhi.n	80036ae <HAL_SPI_Receive+0x194>
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ac:	d102      	bne.n	80036b4 <HAL_SPI_Receive+0x19a>
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d109      	bne.n	80036c8 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          __HAL_UNLOCK(hspi);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e05c      	b.n	8003782 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d1c1      	bne.n	8003658 <HAL_SPI_Receive+0x13e>
 80036d4:	e03b      	b.n	800374e <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f003 0301 	and.w	r3, r3, #1
 80036e0:	2b01      	cmp	r3, #1
 80036e2:	d115      	bne.n	8003710 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	68da      	ldr	r2, [r3, #12]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ee:	b292      	uxth	r2, r2
 80036f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036f6:	1c9a      	adds	r2, r3, #2
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003702:	b29b      	uxth	r3, r3
 8003704:	3b01      	subs	r3, #1
 8003706:	b29a      	uxth	r2, r3
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800370e:	e018      	b.n	8003742 <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003710:	f7fe fa48 	bl	8001ba4 <HAL_GetTick>
 8003714:	4602      	mov	r2, r0
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	1ad3      	subs	r3, r2, r3
 800371a:	683a      	ldr	r2, [r7, #0]
 800371c:	429a      	cmp	r2, r3
 800371e:	d803      	bhi.n	8003728 <HAL_SPI_Receive+0x20e>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003726:	d102      	bne.n	800372e <HAL_SPI_Receive+0x214>
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d109      	bne.n	8003742 <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          __HAL_UNLOCK(hspi);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	2200      	movs	r2, #0
 800373a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
          return HAL_TIMEOUT;
 800373e:	2303      	movs	r3, #3
 8003740:	e01f      	b.n	8003782 <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003748:	b29b      	uxth	r3, r3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1c3      	bne.n	80036d6 <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800374e:	697a      	ldr	r2, [r7, #20]
 8003750:	6839      	ldr	r1, [r7, #0]
 8003752:	68f8      	ldr	r0, [r7, #12]
 8003754:	f000 fb56 	bl	8003e04 <SPI_EndRxTransaction>
 8003758:	4603      	mov	r3, r0
 800375a:	2b00      	cmp	r3, #0
 800375c:	d002      	beq.n	8003764 <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	2220      	movs	r2, #32
 8003762:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003778:	2b00      	cmp	r3, #0
 800377a:	d001      	beq.n	8003780 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 800377c:	2301      	movs	r3, #1
 800377e:	e000      	b.n	8003782 <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8003780:	2300      	movs	r3, #0
  }
}
 8003782:	4618      	mov	r0, r3
 8003784:	3718      	adds	r7, #24
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}

0800378a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800378a:	b580      	push	{r7, lr}
 800378c:	b08a      	sub	sp, #40	; 0x28
 800378e:	af00      	add	r7, sp, #0
 8003790:	60f8      	str	r0, [r7, #12]
 8003792:	60b9      	str	r1, [r7, #8]
 8003794:	607a      	str	r2, [r7, #4]
 8003796:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003798:	2301      	movs	r3, #1
 800379a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800379c:	f7fe fa02 	bl	8001ba4 <HAL_GetTick>
 80037a0:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80037a8:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80037b0:	887b      	ldrh	r3, [r7, #2]
 80037b2:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80037b4:	887b      	ldrh	r3, [r7, #2]
 80037b6:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80037b8:	7ffb      	ldrb	r3, [r7, #31]
 80037ba:	2b01      	cmp	r3, #1
 80037bc:	d00c      	beq.n	80037d8 <HAL_SPI_TransmitReceive+0x4e>
 80037be:	69bb      	ldr	r3, [r7, #24]
 80037c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037c4:	d106      	bne.n	80037d4 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d102      	bne.n	80037d4 <HAL_SPI_TransmitReceive+0x4a>
 80037ce:	7ffb      	ldrb	r3, [r7, #31]
 80037d0:	2b04      	cmp	r3, #4
 80037d2:	d001      	beq.n	80037d8 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80037d4:	2302      	movs	r3, #2
 80037d6:	e1f3      	b.n	8003bc0 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d005      	beq.n	80037ea <HAL_SPI_TransmitReceive+0x60>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d002      	beq.n	80037ea <HAL_SPI_TransmitReceive+0x60>
 80037e4:	887b      	ldrh	r3, [r7, #2]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d101      	bne.n	80037ee <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80037ea:	2301      	movs	r3, #1
 80037ec:	e1e8      	b.n	8003bc0 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d101      	bne.n	80037fc <HAL_SPI_TransmitReceive+0x72>
 80037f8:	2302      	movs	r3, #2
 80037fa:	e1e1      	b.n	8003bc0 <HAL_SPI_TransmitReceive+0x436>
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800380a:	b2db      	uxtb	r3, r3
 800380c:	2b04      	cmp	r3, #4
 800380e:	d003      	beq.n	8003818 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2205      	movs	r2, #5
 8003814:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	687a      	ldr	r2, [r7, #4]
 8003822:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	887a      	ldrh	r2, [r7, #2]
 8003828:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	887a      	ldrh	r2, [r7, #2]
 8003830:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	68ba      	ldr	r2, [r7, #8]
 8003838:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	887a      	ldrh	r2, [r7, #2]
 800383e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	887a      	ldrh	r2, [r7, #2]
 8003844:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2200      	movs	r2, #0
 8003850:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	68db      	ldr	r3, [r3, #12]
 8003856:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800385a:	d802      	bhi.n	8003862 <HAL_SPI_TransmitReceive+0xd8>
 800385c:	8abb      	ldrh	r3, [r7, #20]
 800385e:	2b01      	cmp	r3, #1
 8003860:	d908      	bls.n	8003874 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003870:	605a      	str	r2, [r3, #4]
 8003872:	e007      	b.n	8003884 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	685a      	ldr	r2, [r3, #4]
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003882:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800388e:	2b40      	cmp	r3, #64	; 0x40
 8003890:	d007      	beq.n	80038a2 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038a0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	68db      	ldr	r3, [r3, #12]
 80038a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80038aa:	f240 8083 	bls.w	80039b4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d002      	beq.n	80038bc <HAL_SPI_TransmitReceive+0x132>
 80038b6:	8afb      	ldrh	r3, [r7, #22]
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d16f      	bne.n	800399c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038c0:	881a      	ldrh	r2, [r3, #0]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038cc:	1c9a      	adds	r2, r3, #2
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038d6:	b29b      	uxth	r3, r3
 80038d8:	3b01      	subs	r3, #1
 80038da:	b29a      	uxth	r2, r3
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80038e0:	e05c      	b.n	800399c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f003 0302 	and.w	r3, r3, #2
 80038ec:	2b02      	cmp	r3, #2
 80038ee:	d11b      	bne.n	8003928 <HAL_SPI_TransmitReceive+0x19e>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d016      	beq.n	8003928 <HAL_SPI_TransmitReceive+0x19e>
 80038fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d113      	bne.n	8003928 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003904:	881a      	ldrh	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003910:	1c9a      	adds	r2, r3, #2
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800391a:	b29b      	uxth	r3, r3
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003924:	2300      	movs	r3, #0
 8003926:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	689b      	ldr	r3, [r3, #8]
 800392e:	f003 0301 	and.w	r3, r3, #1
 8003932:	2b01      	cmp	r3, #1
 8003934:	d11c      	bne.n	8003970 <HAL_SPI_TransmitReceive+0x1e6>
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800393c:	b29b      	uxth	r3, r3
 800393e:	2b00      	cmp	r3, #0
 8003940:	d016      	beq.n	8003970 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	68da      	ldr	r2, [r3, #12]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394c:	b292      	uxth	r2, r2
 800394e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003954:	1c9a      	adds	r2, r3, #2
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003960:	b29b      	uxth	r3, r3
 8003962:	3b01      	subs	r3, #1
 8003964:	b29a      	uxth	r2, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800396c:	2301      	movs	r3, #1
 800396e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003970:	f7fe f918 	bl	8001ba4 <HAL_GetTick>
 8003974:	4602      	mov	r2, r0
 8003976:	6a3b      	ldr	r3, [r7, #32]
 8003978:	1ad3      	subs	r3, r2, r3
 800397a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800397c:	429a      	cmp	r2, r3
 800397e:	d80d      	bhi.n	800399c <HAL_SPI_TransmitReceive+0x212>
 8003980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003982:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003986:	d009      	beq.n	800399c <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2201      	movs	r2, #1
 800398c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2200      	movs	r2, #0
 8003994:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        return HAL_TIMEOUT;
 8003998:	2303      	movs	r3, #3
 800399a:	e111      	b.n	8003bc0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d19d      	bne.n	80038e2 <HAL_SPI_TransmitReceive+0x158>
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80039ac:	b29b      	uxth	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d197      	bne.n	80038e2 <HAL_SPI_TransmitReceive+0x158>
 80039b2:	e0e5      	b.n	8003b80 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	685b      	ldr	r3, [r3, #4]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d003      	beq.n	80039c4 <HAL_SPI_TransmitReceive+0x23a>
 80039bc:	8afb      	ldrh	r3, [r7, #22]
 80039be:	2b01      	cmp	r3, #1
 80039c0:	f040 80d1 	bne.w	8003b66 <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039c8:	b29b      	uxth	r3, r3
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d912      	bls.n	80039f4 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039d2:	881a      	ldrh	r2, [r3, #0]
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039de:	1c9a      	adds	r2, r3, #2
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80039e8:	b29b      	uxth	r3, r3
 80039ea:	3b02      	subs	r3, #2
 80039ec:	b29a      	uxth	r2, r3
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80039f2:	e0b8      	b.n	8003b66 <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	330c      	adds	r3, #12
 80039fe:	7812      	ldrb	r2, [r2, #0]
 8003a00:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a06:	1c5a      	adds	r2, r3, #1
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	3b01      	subs	r3, #1
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a1a:	e0a4      	b.n	8003b66 <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 0302 	and.w	r3, r3, #2
 8003a26:	2b02      	cmp	r3, #2
 8003a28:	d134      	bne.n	8003a94 <HAL_SPI_TransmitReceive+0x30a>
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a2e:	b29b      	uxth	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d02f      	beq.n	8003a94 <HAL_SPI_TransmitReceive+0x30a>
 8003a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a36:	2b01      	cmp	r3, #1
 8003a38:	d12c      	bne.n	8003a94 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a3e:	b29b      	uxth	r3, r3
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d912      	bls.n	8003a6a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a48:	881a      	ldrh	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a54:	1c9a      	adds	r2, r3, #2
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	3b02      	subs	r3, #2
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003a68:	e012      	b.n	8003a90 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	330c      	adds	r3, #12
 8003a74:	7812      	ldrb	r2, [r2, #0]
 8003a76:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7c:	1c5a      	adds	r2, r3, #1
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a90:	2300      	movs	r3, #0
 8003a92:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d148      	bne.n	8003b34 <HAL_SPI_TransmitReceive+0x3aa>
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d042      	beq.n	8003b34 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d923      	bls.n	8003b02 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68da      	ldr	r2, [r3, #12]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ac4:	b292      	uxth	r2, r2
 8003ac6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003acc:	1c9a      	adds	r2, r3, #2
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003ad8:	b29b      	uxth	r3, r3
 8003ada:	3b02      	subs	r3, #2
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d81f      	bhi.n	8003b30 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003afe:	605a      	str	r2, [r3, #4]
 8003b00:	e016      	b.n	8003b30 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f103 020c 	add.w	r2, r3, #12
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0e:	7812      	ldrb	r2, [r2, #0]
 8003b10:	b2d2      	uxtb	r2, r2
 8003b12:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b18:	1c5a      	adds	r2, r3, #1
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b30:	2301      	movs	r3, #1
 8003b32:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b34:	f7fe f836 	bl	8001ba4 <HAL_GetTick>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	6a3b      	ldr	r3, [r7, #32]
 8003b3c:	1ad3      	subs	r3, r2, r3
 8003b3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b40:	429a      	cmp	r2, r3
 8003b42:	d803      	bhi.n	8003b4c <HAL_SPI_TransmitReceive+0x3c2>
 8003b44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b4a:	d102      	bne.n	8003b52 <HAL_SPI_TransmitReceive+0x3c8>
 8003b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d109      	bne.n	8003b66 <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	2201      	movs	r2, #1
 8003b56:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e02c      	b.n	8003bc0 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	f47f af55 	bne.w	8003a1c <HAL_SPI_TransmitReceive+0x292>
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003b78:	b29b      	uxth	r3, r3
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	f47f af4e 	bne.w	8003a1c <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b80:	6a3a      	ldr	r2, [r7, #32]
 8003b82:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003b84:	68f8      	ldr	r0, [r7, #12]
 8003b86:	f000 f995 	bl	8003eb4 <SPI_EndRxTxTransaction>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d008      	beq.n	8003ba2 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	2220      	movs	r2, #32
 8003b94:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_UNLOCK(hspi);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e00e      	b.n	8003bc0 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	2200      	movs	r2, #0
 8003bae:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d001      	beq.n	8003bbe <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e000      	b.n	8003bc0 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003bbe:	2300      	movs	r3, #0
  }
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	3728      	adds	r7, #40	; 0x28
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	bd80      	pop	{r7, pc}

08003bc8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b088      	sub	sp, #32
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	603b      	str	r3, [r7, #0]
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003bd8:	f7fd ffe4 	bl	8001ba4 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003be0:	1a9b      	subs	r3, r3, r2
 8003be2:	683a      	ldr	r2, [r7, #0]
 8003be4:	4413      	add	r3, r2
 8003be6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003be8:	f7fd ffdc 	bl	8001ba4 <HAL_GetTick>
 8003bec:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003bee:	4b39      	ldr	r3, [pc, #228]	; (8003cd4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	015b      	lsls	r3, r3, #5
 8003bf4:	0d1b      	lsrs	r3, r3, #20
 8003bf6:	69fa      	ldr	r2, [r7, #28]
 8003bf8:	fb02 f303 	mul.w	r3, r2, r3
 8003bfc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bfe:	e054      	b.n	8003caa <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c06:	d050      	beq.n	8003caa <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c08:	f7fd ffcc 	bl	8001ba4 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	69fa      	ldr	r2, [r7, #28]
 8003c14:	429a      	cmp	r2, r3
 8003c16:	d902      	bls.n	8003c1e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d13d      	bne.n	8003c9a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	685a      	ldr	r2, [r3, #4]
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c2c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c36:	d111      	bne.n	8003c5c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	689b      	ldr	r3, [r3, #8]
 8003c3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c40:	d004      	beq.n	8003c4c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c4a:	d107      	bne.n	8003c5c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c5a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c64:	d10f      	bne.n	8003c86 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c74:	601a      	str	r2, [r3, #0]
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c84:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	2201      	movs	r2, #1
 8003c8a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2200      	movs	r2, #0
 8003c92:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e017      	b.n	8003cca <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d101      	bne.n	8003ca4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	3b01      	subs	r3, #1
 8003ca8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	689a      	ldr	r2, [r3, #8]
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	4013      	ands	r3, r2
 8003cb4:	68ba      	ldr	r2, [r7, #8]
 8003cb6:	429a      	cmp	r2, r3
 8003cb8:	bf0c      	ite	eq
 8003cba:	2301      	moveq	r3, #1
 8003cbc:	2300      	movne	r3, #0
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	79fb      	ldrb	r3, [r7, #7]
 8003cc4:	429a      	cmp	r2, r3
 8003cc6:	d19b      	bne.n	8003c00 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3720      	adds	r7, #32
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	20000014 	.word	0x20000014

08003cd8 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b08a      	sub	sp, #40	; 0x28
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	60f8      	str	r0, [r7, #12]
 8003ce0:	60b9      	str	r1, [r7, #8]
 8003ce2:	607a      	str	r2, [r7, #4]
 8003ce4:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003ce6:	2300      	movs	r3, #0
 8003ce8:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003cea:	f7fd ff5b 	bl	8001ba4 <HAL_GetTick>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cf2:	1a9b      	subs	r3, r3, r2
 8003cf4:	683a      	ldr	r2, [r7, #0]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003cfa:	f7fd ff53 	bl	8001ba4 <HAL_GetTick>
 8003cfe:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	330c      	adds	r3, #12
 8003d06:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003d08:	4b3d      	ldr	r3, [pc, #244]	; (8003e00 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	009b      	lsls	r3, r3, #2
 8003d10:	4413      	add	r3, r2
 8003d12:	00da      	lsls	r2, r3, #3
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	0d1b      	lsrs	r3, r3, #20
 8003d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d1a:	fb02 f303 	mul.w	r3, r2, r3
 8003d1e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003d20:	e060      	b.n	8003de4 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003d28:	d107      	bne.n	8003d3a <SPI_WaitFifoStateUntilTimeout+0x62>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d104      	bne.n	8003d3a <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	b2db      	uxtb	r3, r3
 8003d36:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003d38:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d40:	d050      	beq.n	8003de4 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003d42:	f7fd ff2f 	bl	8001ba4 <HAL_GetTick>
 8003d46:	4602      	mov	r2, r0
 8003d48:	6a3b      	ldr	r3, [r7, #32]
 8003d4a:	1ad3      	subs	r3, r2, r3
 8003d4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d4e:	429a      	cmp	r2, r3
 8003d50:	d902      	bls.n	8003d58 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d13d      	bne.n	8003dd4 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	685a      	ldr	r2, [r3, #4]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003d66:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003d70:	d111      	bne.n	8003d96 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d7a:	d004      	beq.n	8003d86 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d84:	d107      	bne.n	8003d96 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d94:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d9e:	d10f      	bne.n	8003dc0 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dbe:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	2200      	movs	r2, #0
 8003dcc:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8003dd0:	2303      	movs	r3, #3
 8003dd2:	e010      	b.n	8003df6 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	3b01      	subs	r3, #1
 8003de2:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	689a      	ldr	r2, [r3, #8]
 8003dea:	68bb      	ldr	r3, [r7, #8]
 8003dec:	4013      	ands	r3, r2
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d196      	bne.n	8003d22 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003df4:	2300      	movs	r3, #0
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	3728      	adds	r7, #40	; 0x28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	20000014 	.word	0x20000014

08003e04 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af02      	add	r7, sp, #8
 8003e0a:	60f8      	str	r0, [r7, #12]
 8003e0c:	60b9      	str	r1, [r7, #8]
 8003e0e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e18:	d111      	bne.n	8003e3e <SPI_EndRxTransaction+0x3a>
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e22:	d004      	beq.n	8003e2e <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e2c:	d107      	bne.n	8003e3e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	681a      	ldr	r2, [r3, #0]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e3c:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	2200      	movs	r2, #0
 8003e46:	2180      	movs	r1, #128	; 0x80
 8003e48:	68f8      	ldr	r0, [r7, #12]
 8003e4a:	f7ff febd 	bl	8003bc8 <SPI_WaitFlagStateUntilTimeout>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d007      	beq.n	8003e64 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e58:	f043 0220 	orr.w	r2, r3, #32
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003e60:	2303      	movs	r3, #3
 8003e62:	e023      	b.n	8003eac <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	685b      	ldr	r3, [r3, #4]
 8003e68:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e6c:	d11d      	bne.n	8003eaa <SPI_EndRxTransaction+0xa6>
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e76:	d004      	beq.n	8003e82 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	689b      	ldr	r3, [r3, #8]
 8003e7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003e80:	d113      	bne.n	8003eaa <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	9300      	str	r3, [sp, #0]
 8003e86:	68bb      	ldr	r3, [r7, #8]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f7ff ff22 	bl	8003cd8 <SPI_WaitFifoStateUntilTimeout>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d007      	beq.n	8003eaa <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e9e:	f043 0220 	orr.w	r2, r3, #32
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003ea6:	2303      	movs	r3, #3
 8003ea8:	e000      	b.n	8003eac <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003eaa:	2300      	movs	r3, #0
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3710      	adds	r7, #16
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}

08003eb4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b086      	sub	sp, #24
 8003eb8:	af02      	add	r7, sp, #8
 8003eba:	60f8      	str	r0, [r7, #12]
 8003ebc:	60b9      	str	r1, [r7, #8]
 8003ebe:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f7ff ff03 	bl	8003cd8 <SPI_WaitFifoStateUntilTimeout>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d007      	beq.n	8003ee8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003edc:	f043 0220 	orr.w	r2, r3, #32
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ee4:	2303      	movs	r3, #3
 8003ee6:	e027      	b.n	8003f38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	2180      	movs	r1, #128	; 0x80
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f7ff fe68 	bl	8003bc8 <SPI_WaitFlagStateUntilTimeout>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d007      	beq.n	8003f0e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f02:	f043 0220 	orr.w	r2, r3, #32
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f0a:	2303      	movs	r3, #3
 8003f0c:	e014      	b.n	8003f38 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	2200      	movs	r2, #0
 8003f16:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f7ff fedc 	bl	8003cd8 <SPI_WaitFifoStateUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d007      	beq.n	8003f36 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f2a:	f043 0220 	orr.w	r2, r3, #32
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003f32:	2303      	movs	r3, #3
 8003f34:	e000      	b.n	8003f38 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003f36:	2300      	movs	r3, #0
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	3710      	adds	r7, #16
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bd80      	pop	{r7, pc}

08003f40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d101      	bne.n	8003f52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e040      	b.n	8003fd4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d106      	bne.n	8003f68 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f7fd fbe0 	bl	8001728 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	2224      	movs	r2, #36	; 0x24
 8003f6c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f022 0201 	bic.w	r2, r2, #1
 8003f7c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d002      	beq.n	8003f8c <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fade 	bl	8004548 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 f8af 	bl	80040f0 <UART_SetConfig>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b01      	cmp	r3, #1
 8003f96:	d101      	bne.n	8003f9c <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e01b      	b.n	8003fd4 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	685a      	ldr	r2, [r3, #4]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003faa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	689a      	ldr	r2, [r3, #8]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003fba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	681a      	ldr	r2, [r3, #0]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f042 0201 	orr.w	r2, r2, #1
 8003fca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 fb5d 	bl	800468c <UART_CheckIdleState>
 8003fd2:	4603      	mov	r3, r0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3708      	adds	r7, #8
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b08a      	sub	sp, #40	; 0x28
 8003fe0:	af02      	add	r7, sp, #8
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	603b      	str	r3, [r7, #0]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ff0:	2b20      	cmp	r3, #32
 8003ff2:	d178      	bne.n	80040e6 <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <HAL_UART_Transmit+0x24>
 8003ffa:	88fb      	ldrh	r3, [r7, #6]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d101      	bne.n	8004004 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e071      	b.n	80040e8 <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	2200      	movs	r2, #0
 8004008:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	2221      	movs	r2, #33	; 0x21
 8004010:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004012:	f7fd fdc7 	bl	8001ba4 <HAL_GetTick>
 8004016:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	88fa      	ldrh	r2, [r7, #6]
 800401c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	88fa      	ldrh	r2, [r7, #6]
 8004024:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	689b      	ldr	r3, [r3, #8]
 800402c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004030:	d108      	bne.n	8004044 <HAL_UART_Transmit+0x68>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d104      	bne.n	8004044 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800403a:	2300      	movs	r3, #0
 800403c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	61bb      	str	r3, [r7, #24]
 8004042:	e003      	b.n	800404c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004048:	2300      	movs	r3, #0
 800404a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800404c:	e030      	b.n	80040b0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	9300      	str	r3, [sp, #0]
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	2200      	movs	r2, #0
 8004056:	2180      	movs	r1, #128	; 0x80
 8004058:	68f8      	ldr	r0, [r7, #12]
 800405a:	f000 fbbf 	bl	80047dc <UART_WaitOnFlagUntilTimeout>
 800405e:	4603      	mov	r3, r0
 8004060:	2b00      	cmp	r3, #0
 8004062:	d004      	beq.n	800406e <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2220      	movs	r2, #32
 8004068:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e03c      	b.n	80040e8 <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 800406e:	69fb      	ldr	r3, [r7, #28]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d10b      	bne.n	800408c <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004074:	69bb      	ldr	r3, [r7, #24]
 8004076:	881a      	ldrh	r2, [r3, #0]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004080:	b292      	uxth	r2, r2
 8004082:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004084:	69bb      	ldr	r3, [r7, #24]
 8004086:	3302      	adds	r3, #2
 8004088:	61bb      	str	r3, [r7, #24]
 800408a:	e008      	b.n	800409e <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800408c:	69fb      	ldr	r3, [r7, #28]
 800408e:	781a      	ldrb	r2, [r3, #0]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	b292      	uxth	r2, r2
 8004096:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004098:	69fb      	ldr	r3, [r7, #28]
 800409a:	3301      	adds	r3, #1
 800409c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	3b01      	subs	r3, #1
 80040a8:	b29a      	uxth	r2, r3
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1c8      	bne.n	800404e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	9300      	str	r3, [sp, #0]
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	2200      	movs	r2, #0
 80040c4:	2140      	movs	r1, #64	; 0x40
 80040c6:	68f8      	ldr	r0, [r7, #12]
 80040c8:	f000 fb88 	bl	80047dc <UART_WaitOnFlagUntilTimeout>
 80040cc:	4603      	mov	r3, r0
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d004      	beq.n	80040dc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2220      	movs	r2, #32
 80040d6:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 80040d8:	2303      	movs	r3, #3
 80040da:	e005      	b.n	80040e8 <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2220      	movs	r2, #32
 80040e0:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 80040e2:	2300      	movs	r3, #0
 80040e4:	e000      	b.n	80040e8 <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 80040e6:	2302      	movs	r3, #2
  }
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3720      	adds	r7, #32
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}

080040f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040f4:	b08a      	sub	sp, #40	; 0x28
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	689a      	ldr	r2, [r3, #8]
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	691b      	ldr	r3, [r3, #16]
 8004108:	431a      	orrs	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	431a      	orrs	r2, r3
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	69db      	ldr	r3, [r3, #28]
 8004114:	4313      	orrs	r3, r2
 8004116:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	681a      	ldr	r2, [r3, #0]
 800411e:	4bb4      	ldr	r3, [pc, #720]	; (80043f0 <UART_SetConfig+0x300>)
 8004120:	4013      	ands	r3, r2
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	6812      	ldr	r2, [r2, #0]
 8004126:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004128:	430b      	orrs	r3, r1
 800412a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	68da      	ldr	r2, [r3, #12]
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	430a      	orrs	r2, r1
 8004140:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	699b      	ldr	r3, [r3, #24]
 8004146:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	4aa9      	ldr	r2, [pc, #676]	; (80043f4 <UART_SetConfig+0x304>)
 800414e:	4293      	cmp	r3, r2
 8004150:	d004      	beq.n	800415c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	6a1b      	ldr	r3, [r3, #32]
 8004156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004158:	4313      	orrs	r3, r2
 800415a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800416c:	430a      	orrs	r2, r1
 800416e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4aa0      	ldr	r2, [pc, #640]	; (80043f8 <UART_SetConfig+0x308>)
 8004176:	4293      	cmp	r3, r2
 8004178:	d126      	bne.n	80041c8 <UART_SetConfig+0xd8>
 800417a:	4ba0      	ldr	r3, [pc, #640]	; (80043fc <UART_SetConfig+0x30c>)
 800417c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004180:	f003 0303 	and.w	r3, r3, #3
 8004184:	2b03      	cmp	r3, #3
 8004186:	d81b      	bhi.n	80041c0 <UART_SetConfig+0xd0>
 8004188:	a201      	add	r2, pc, #4	; (adr r2, 8004190 <UART_SetConfig+0xa0>)
 800418a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800418e:	bf00      	nop
 8004190:	080041a1 	.word	0x080041a1
 8004194:	080041b1 	.word	0x080041b1
 8004198:	080041a9 	.word	0x080041a9
 800419c:	080041b9 	.word	0x080041b9
 80041a0:	2301      	movs	r3, #1
 80041a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041a6:	e080      	b.n	80042aa <UART_SetConfig+0x1ba>
 80041a8:	2302      	movs	r3, #2
 80041aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ae:	e07c      	b.n	80042aa <UART_SetConfig+0x1ba>
 80041b0:	2304      	movs	r3, #4
 80041b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041b6:	e078      	b.n	80042aa <UART_SetConfig+0x1ba>
 80041b8:	2308      	movs	r3, #8
 80041ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041be:	e074      	b.n	80042aa <UART_SetConfig+0x1ba>
 80041c0:	2310      	movs	r3, #16
 80041c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041c6:	e070      	b.n	80042aa <UART_SetConfig+0x1ba>
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4a8c      	ldr	r2, [pc, #560]	; (8004400 <UART_SetConfig+0x310>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d138      	bne.n	8004244 <UART_SetConfig+0x154>
 80041d2:	4b8a      	ldr	r3, [pc, #552]	; (80043fc <UART_SetConfig+0x30c>)
 80041d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d8:	f003 030c 	and.w	r3, r3, #12
 80041dc:	2b0c      	cmp	r3, #12
 80041de:	d82d      	bhi.n	800423c <UART_SetConfig+0x14c>
 80041e0:	a201      	add	r2, pc, #4	; (adr r2, 80041e8 <UART_SetConfig+0xf8>)
 80041e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041e6:	bf00      	nop
 80041e8:	0800421d 	.word	0x0800421d
 80041ec:	0800423d 	.word	0x0800423d
 80041f0:	0800423d 	.word	0x0800423d
 80041f4:	0800423d 	.word	0x0800423d
 80041f8:	0800422d 	.word	0x0800422d
 80041fc:	0800423d 	.word	0x0800423d
 8004200:	0800423d 	.word	0x0800423d
 8004204:	0800423d 	.word	0x0800423d
 8004208:	08004225 	.word	0x08004225
 800420c:	0800423d 	.word	0x0800423d
 8004210:	0800423d 	.word	0x0800423d
 8004214:	0800423d 	.word	0x0800423d
 8004218:	08004235 	.word	0x08004235
 800421c:	2300      	movs	r3, #0
 800421e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004222:	e042      	b.n	80042aa <UART_SetConfig+0x1ba>
 8004224:	2302      	movs	r3, #2
 8004226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800422a:	e03e      	b.n	80042aa <UART_SetConfig+0x1ba>
 800422c:	2304      	movs	r3, #4
 800422e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004232:	e03a      	b.n	80042aa <UART_SetConfig+0x1ba>
 8004234:	2308      	movs	r3, #8
 8004236:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800423a:	e036      	b.n	80042aa <UART_SetConfig+0x1ba>
 800423c:	2310      	movs	r3, #16
 800423e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004242:	e032      	b.n	80042aa <UART_SetConfig+0x1ba>
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a6a      	ldr	r2, [pc, #424]	; (80043f4 <UART_SetConfig+0x304>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d12a      	bne.n	80042a4 <UART_SetConfig+0x1b4>
 800424e:	4b6b      	ldr	r3, [pc, #428]	; (80043fc <UART_SetConfig+0x30c>)
 8004250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004254:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004258:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800425c:	d01a      	beq.n	8004294 <UART_SetConfig+0x1a4>
 800425e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004262:	d81b      	bhi.n	800429c <UART_SetConfig+0x1ac>
 8004264:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004268:	d00c      	beq.n	8004284 <UART_SetConfig+0x194>
 800426a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800426e:	d815      	bhi.n	800429c <UART_SetConfig+0x1ac>
 8004270:	2b00      	cmp	r3, #0
 8004272:	d003      	beq.n	800427c <UART_SetConfig+0x18c>
 8004274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004278:	d008      	beq.n	800428c <UART_SetConfig+0x19c>
 800427a:	e00f      	b.n	800429c <UART_SetConfig+0x1ac>
 800427c:	2300      	movs	r3, #0
 800427e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004282:	e012      	b.n	80042aa <UART_SetConfig+0x1ba>
 8004284:	2302      	movs	r3, #2
 8004286:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800428a:	e00e      	b.n	80042aa <UART_SetConfig+0x1ba>
 800428c:	2304      	movs	r3, #4
 800428e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004292:	e00a      	b.n	80042aa <UART_SetConfig+0x1ba>
 8004294:	2308      	movs	r3, #8
 8004296:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800429a:	e006      	b.n	80042aa <UART_SetConfig+0x1ba>
 800429c:	2310      	movs	r3, #16
 800429e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80042a2:	e002      	b.n	80042aa <UART_SetConfig+0x1ba>
 80042a4:	2310      	movs	r3, #16
 80042a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a51      	ldr	r2, [pc, #324]	; (80043f4 <UART_SetConfig+0x304>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d17a      	bne.n	80043aa <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80042b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d824      	bhi.n	8004306 <UART_SetConfig+0x216>
 80042bc:	a201      	add	r2, pc, #4	; (adr r2, 80042c4 <UART_SetConfig+0x1d4>)
 80042be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042c2:	bf00      	nop
 80042c4:	080042e9 	.word	0x080042e9
 80042c8:	08004307 	.word	0x08004307
 80042cc:	080042f1 	.word	0x080042f1
 80042d0:	08004307 	.word	0x08004307
 80042d4:	080042f7 	.word	0x080042f7
 80042d8:	08004307 	.word	0x08004307
 80042dc:	08004307 	.word	0x08004307
 80042e0:	08004307 	.word	0x08004307
 80042e4:	080042ff 	.word	0x080042ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042e8:	f7fe fcf0 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 80042ec:	61f8      	str	r0, [r7, #28]
        break;
 80042ee:	e010      	b.n	8004312 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80042f0:	4b44      	ldr	r3, [pc, #272]	; (8004404 <UART_SetConfig+0x314>)
 80042f2:	61fb      	str	r3, [r7, #28]
        break;
 80042f4:	e00d      	b.n	8004312 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80042f6:	f7fe fc51 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 80042fa:	61f8      	str	r0, [r7, #28]
        break;
 80042fc:	e009      	b.n	8004312 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80042fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004302:	61fb      	str	r3, [r7, #28]
        break;
 8004304:	e005      	b.n	8004312 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8004306:	2300      	movs	r3, #0
 8004308:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004310:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	2b00      	cmp	r3, #0
 8004316:	f000 8107 	beq.w	8004528 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	685a      	ldr	r2, [r3, #4]
 800431e:	4613      	mov	r3, r2
 8004320:	005b      	lsls	r3, r3, #1
 8004322:	4413      	add	r3, r2
 8004324:	69fa      	ldr	r2, [r7, #28]
 8004326:	429a      	cmp	r2, r3
 8004328:	d305      	bcc.n	8004336 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004330:	69fa      	ldr	r2, [r7, #28]
 8004332:	429a      	cmp	r2, r3
 8004334:	d903      	bls.n	800433e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8004336:	2301      	movs	r3, #1
 8004338:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800433c:	e0f4      	b.n	8004528 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	2200      	movs	r2, #0
 8004342:	461c      	mov	r4, r3
 8004344:	4615      	mov	r5, r2
 8004346:	f04f 0200 	mov.w	r2, #0
 800434a:	f04f 0300 	mov.w	r3, #0
 800434e:	022b      	lsls	r3, r5, #8
 8004350:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8004354:	0222      	lsls	r2, r4, #8
 8004356:	68f9      	ldr	r1, [r7, #12]
 8004358:	6849      	ldr	r1, [r1, #4]
 800435a:	0849      	lsrs	r1, r1, #1
 800435c:	2000      	movs	r0, #0
 800435e:	4688      	mov	r8, r1
 8004360:	4681      	mov	r9, r0
 8004362:	eb12 0a08 	adds.w	sl, r2, r8
 8004366:	eb43 0b09 	adc.w	fp, r3, r9
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	2200      	movs	r2, #0
 8004370:	603b      	str	r3, [r7, #0]
 8004372:	607a      	str	r2, [r7, #4]
 8004374:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004378:	4650      	mov	r0, sl
 800437a:	4659      	mov	r1, fp
 800437c:	f7fc fc84 	bl	8000c88 <__aeabi_uldivmod>
 8004380:	4602      	mov	r2, r0
 8004382:	460b      	mov	r3, r1
 8004384:	4613      	mov	r3, r2
 8004386:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800438e:	d308      	bcc.n	80043a2 <UART_SetConfig+0x2b2>
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004396:	d204      	bcs.n	80043a2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	69ba      	ldr	r2, [r7, #24]
 800439e:	60da      	str	r2, [r3, #12]
 80043a0:	e0c2      	b.n	8004528 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80043a8:	e0be      	b.n	8004528 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	69db      	ldr	r3, [r3, #28]
 80043ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043b2:	d16a      	bne.n	800448a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80043b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80043b8:	2b08      	cmp	r3, #8
 80043ba:	d834      	bhi.n	8004426 <UART_SetConfig+0x336>
 80043bc:	a201      	add	r2, pc, #4	; (adr r2, 80043c4 <UART_SetConfig+0x2d4>)
 80043be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c2:	bf00      	nop
 80043c4:	080043e9 	.word	0x080043e9
 80043c8:	08004409 	.word	0x08004409
 80043cc:	08004411 	.word	0x08004411
 80043d0:	08004427 	.word	0x08004427
 80043d4:	08004417 	.word	0x08004417
 80043d8:	08004427 	.word	0x08004427
 80043dc:	08004427 	.word	0x08004427
 80043e0:	08004427 	.word	0x08004427
 80043e4:	0800441f 	.word	0x0800441f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043e8:	f7fe fc70 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 80043ec:	61f8      	str	r0, [r7, #28]
        break;
 80043ee:	e020      	b.n	8004432 <UART_SetConfig+0x342>
 80043f0:	efff69f3 	.word	0xefff69f3
 80043f4:	40008000 	.word	0x40008000
 80043f8:	40013800 	.word	0x40013800
 80043fc:	40021000 	.word	0x40021000
 8004400:	40004400 	.word	0x40004400
 8004404:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004408:	f7fe fc76 	bl	8002cf8 <HAL_RCC_GetPCLK2Freq>
 800440c:	61f8      	str	r0, [r7, #28]
        break;
 800440e:	e010      	b.n	8004432 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004410:	4b4c      	ldr	r3, [pc, #304]	; (8004544 <UART_SetConfig+0x454>)
 8004412:	61fb      	str	r3, [r7, #28]
        break;
 8004414:	e00d      	b.n	8004432 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004416:	f7fe fbc1 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 800441a:	61f8      	str	r0, [r7, #28]
        break;
 800441c:	e009      	b.n	8004432 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800441e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004422:	61fb      	str	r3, [r7, #28]
        break;
 8004424:	e005      	b.n	8004432 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8004426:	2300      	movs	r3, #0
 8004428:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004430:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d077      	beq.n	8004528 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	005a      	lsls	r2, r3, #1
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	685b      	ldr	r3, [r3, #4]
 8004440:	085b      	lsrs	r3, r3, #1
 8004442:	441a      	add	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	685b      	ldr	r3, [r3, #4]
 8004448:	fbb2 f3f3 	udiv	r3, r2, r3
 800444c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800444e:	69bb      	ldr	r3, [r7, #24]
 8004450:	2b0f      	cmp	r3, #15
 8004452:	d916      	bls.n	8004482 <UART_SetConfig+0x392>
 8004454:	69bb      	ldr	r3, [r7, #24]
 8004456:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800445a:	d212      	bcs.n	8004482 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	b29b      	uxth	r3, r3
 8004460:	f023 030f 	bic.w	r3, r3, #15
 8004464:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	085b      	lsrs	r3, r3, #1
 800446a:	b29b      	uxth	r3, r3
 800446c:	f003 0307 	and.w	r3, r3, #7
 8004470:	b29a      	uxth	r2, r3
 8004472:	8afb      	ldrh	r3, [r7, #22]
 8004474:	4313      	orrs	r3, r2
 8004476:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	8afa      	ldrh	r2, [r7, #22]
 800447e:	60da      	str	r2, [r3, #12]
 8004480:	e052      	b.n	8004528 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8004488:	e04e      	b.n	8004528 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800448a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800448e:	2b08      	cmp	r3, #8
 8004490:	d827      	bhi.n	80044e2 <UART_SetConfig+0x3f2>
 8004492:	a201      	add	r2, pc, #4	; (adr r2, 8004498 <UART_SetConfig+0x3a8>)
 8004494:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004498:	080044bd 	.word	0x080044bd
 800449c:	080044c5 	.word	0x080044c5
 80044a0:	080044cd 	.word	0x080044cd
 80044a4:	080044e3 	.word	0x080044e3
 80044a8:	080044d3 	.word	0x080044d3
 80044ac:	080044e3 	.word	0x080044e3
 80044b0:	080044e3 	.word	0x080044e3
 80044b4:	080044e3 	.word	0x080044e3
 80044b8:	080044db 	.word	0x080044db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044bc:	f7fe fc06 	bl	8002ccc <HAL_RCC_GetPCLK1Freq>
 80044c0:	61f8      	str	r0, [r7, #28]
        break;
 80044c2:	e014      	b.n	80044ee <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80044c4:	f7fe fc18 	bl	8002cf8 <HAL_RCC_GetPCLK2Freq>
 80044c8:	61f8      	str	r0, [r7, #28]
        break;
 80044ca:	e010      	b.n	80044ee <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044cc:	4b1d      	ldr	r3, [pc, #116]	; (8004544 <UART_SetConfig+0x454>)
 80044ce:	61fb      	str	r3, [r7, #28]
        break;
 80044d0:	e00d      	b.n	80044ee <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044d2:	f7fe fb63 	bl	8002b9c <HAL_RCC_GetSysClockFreq>
 80044d6:	61f8      	str	r0, [r7, #28]
        break;
 80044d8:	e009      	b.n	80044ee <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044de:	61fb      	str	r3, [r7, #28]
        break;
 80044e0:	e005      	b.n	80044ee <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80044e2:	2300      	movs	r3, #0
 80044e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80044e6:	2301      	movs	r3, #1
 80044e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80044ec:	bf00      	nop
    }

    if (pclk != 0U)
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d019      	beq.n	8004528 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	085a      	lsrs	r2, r3, #1
 80044fa:	69fb      	ldr	r3, [r7, #28]
 80044fc:	441a      	add	r2, r3
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	fbb2 f3f3 	udiv	r3, r2, r3
 8004506:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004508:	69bb      	ldr	r3, [r7, #24]
 800450a:	2b0f      	cmp	r3, #15
 800450c:	d909      	bls.n	8004522 <UART_SetConfig+0x432>
 800450e:	69bb      	ldr	r3, [r7, #24]
 8004510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004514:	d205      	bcs.n	8004522 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004516:	69bb      	ldr	r3, [r7, #24]
 8004518:	b29a      	uxth	r2, r3
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	60da      	str	r2, [r3, #12]
 8004520:	e002      	b.n	8004528 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2200      	movs	r2, #0
 800452c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2200      	movs	r2, #0
 8004532:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004534:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8004538:	4618      	mov	r0, r3
 800453a:	3728      	adds	r7, #40	; 0x28
 800453c:	46bd      	mov	sp, r7
 800453e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004542:	bf00      	nop
 8004544:	00f42400 	.word	0x00f42400

08004548 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004548:	b480      	push	{r7}
 800454a:	b083      	sub	sp, #12
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004554:	f003 0308 	and.w	r3, r3, #8
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00a      	beq.n	8004572 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00a      	beq.n	8004594 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	430a      	orrs	r2, r1
 8004592:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004598:	f003 0302 	and.w	r3, r3, #2
 800459c:	2b00      	cmp	r3, #0
 800459e:	d00a      	beq.n	80045b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	685b      	ldr	r3, [r3, #4]
 80045a6:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	430a      	orrs	r2, r1
 80045b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ba:	f003 0304 	and.w	r3, r3, #4
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d00a      	beq.n	80045d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	685b      	ldr	r3, [r3, #4]
 80045c8:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	430a      	orrs	r2, r1
 80045d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	f003 0310 	and.w	r3, r3, #16
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d00a      	beq.n	80045fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	f003 0320 	and.w	r3, r3, #32
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00a      	beq.n	800461c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	430a      	orrs	r2, r1
 800461a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004624:	2b00      	cmp	r3, #0
 8004626:	d01a      	beq.n	800465e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	430a      	orrs	r2, r1
 800463c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004642:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004646:	d10a      	bne.n	800465e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	430a      	orrs	r2, r1
 800465c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00a      	beq.n	8004680 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	430a      	orrs	r2, r1
 800467e:	605a      	str	r2, [r3, #4]
  }
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b098      	sub	sp, #96	; 0x60
 8004690:	af02      	add	r7, sp, #8
 8004692:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2200      	movs	r2, #0
 8004698:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800469c:	f7fd fa82 	bl	8001ba4 <HAL_GetTick>
 80046a0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f003 0308 	and.w	r3, r3, #8
 80046ac:	2b08      	cmp	r3, #8
 80046ae:	d12e      	bne.n	800470e <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80046b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80046b4:	9300      	str	r3, [sp, #0]
 80046b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046b8:	2200      	movs	r2, #0
 80046ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80046be:	6878      	ldr	r0, [r7, #4]
 80046c0:	f000 f88c 	bl	80047dc <UART_WaitOnFlagUntilTimeout>
 80046c4:	4603      	mov	r3, r0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d021      	beq.n	800470e <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046d2:	e853 3f00 	ldrex	r3, [r3]
 80046d6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80046d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046da:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046de:	653b      	str	r3, [r7, #80]	; 0x50
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	461a      	mov	r2, r3
 80046e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046e8:	647b      	str	r3, [r7, #68]	; 0x44
 80046ea:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046ec:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80046ee:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80046f0:	e841 2300 	strex	r3, r2, [r1]
 80046f4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80046f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d1e6      	bne.n	80046ca <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2220      	movs	r2, #32
 8004700:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800470a:	2303      	movs	r3, #3
 800470c:	e062      	b.n	80047d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	2b04      	cmp	r3, #4
 800471a:	d149      	bne.n	80047b0 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800471c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004720:	9300      	str	r3, [sp, #0]
 8004722:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004724:	2200      	movs	r2, #0
 8004726:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f856 	bl	80047dc <UART_WaitOnFlagUntilTimeout>
 8004730:	4603      	mov	r3, r0
 8004732:	2b00      	cmp	r3, #0
 8004734:	d03c      	beq.n	80047b0 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800473c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473e:	e853 3f00 	ldrex	r3, [r3]
 8004742:	623b      	str	r3, [r7, #32]
   return(result);
 8004744:	6a3b      	ldr	r3, [r7, #32]
 8004746:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800474a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	461a      	mov	r2, r3
 8004752:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004754:	633b      	str	r3, [r7, #48]	; 0x30
 8004756:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004758:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800475a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800475c:	e841 2300 	strex	r3, r2, [r1]
 8004760:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004764:	2b00      	cmp	r3, #0
 8004766:	d1e6      	bne.n	8004736 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	3308      	adds	r3, #8
 800476e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004770:	693b      	ldr	r3, [r7, #16]
 8004772:	e853 3f00 	ldrex	r3, [r3]
 8004776:	60fb      	str	r3, [r7, #12]
   return(result);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f023 0301 	bic.w	r3, r3, #1
 800477e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	3308      	adds	r3, #8
 8004786:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004788:	61fa      	str	r2, [r7, #28]
 800478a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478c:	69b9      	ldr	r1, [r7, #24]
 800478e:	69fa      	ldr	r2, [r7, #28]
 8004790:	e841 2300 	strex	r3, r2, [r1]
 8004794:	617b      	str	r3, [r7, #20]
   return(result);
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d1e5      	bne.n	8004768 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2220      	movs	r2, #32
 80047a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80047ac:	2303      	movs	r3, #3
 80047ae:	e011      	b.n	80047d4 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2220      	movs	r2, #32
 80047b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2220      	movs	r2, #32
 80047ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2200      	movs	r2, #0
 80047ce:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3758      	adds	r7, #88	; 0x58
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b084      	sub	sp, #16
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	4613      	mov	r3, r2
 80047ea:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047ec:	e04f      	b.n	800488e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047ee:	69bb      	ldr	r3, [r7, #24]
 80047f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f4:	d04b      	beq.n	800488e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f6:	f7fd f9d5 	bl	8001ba4 <HAL_GetTick>
 80047fa:	4602      	mov	r2, r0
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	429a      	cmp	r2, r3
 8004804:	d302      	bcc.n	800480c <UART_WaitOnFlagUntilTimeout+0x30>
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d101      	bne.n	8004810 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800480c:	2303      	movs	r3, #3
 800480e:	e04e      	b.n	80048ae <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0304 	and.w	r3, r3, #4
 800481a:	2b00      	cmp	r3, #0
 800481c:	d037      	beq.n	800488e <UART_WaitOnFlagUntilTimeout+0xb2>
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	2b80      	cmp	r3, #128	; 0x80
 8004822:	d034      	beq.n	800488e <UART_WaitOnFlagUntilTimeout+0xb2>
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	2b40      	cmp	r3, #64	; 0x40
 8004828:	d031      	beq.n	800488e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	69db      	ldr	r3, [r3, #28]
 8004830:	f003 0308 	and.w	r3, r3, #8
 8004834:	2b08      	cmp	r3, #8
 8004836:	d110      	bne.n	800485a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2208      	movs	r2, #8
 800483e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004840:	68f8      	ldr	r0, [r7, #12]
 8004842:	f000 f838 	bl	80048b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	2208      	movs	r2, #8
 800484a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 8004856:	2301      	movs	r3, #1
 8004858:	e029      	b.n	80048ae <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	69db      	ldr	r3, [r3, #28]
 8004860:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004864:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004868:	d111      	bne.n	800488e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004872:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004874:	68f8      	ldr	r0, [r7, #12]
 8004876:	f000 f81e 	bl	80048b6 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	2220      	movs	r2, #32
 800487e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800488a:	2303      	movs	r3, #3
 800488c:	e00f      	b.n	80048ae <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	69da      	ldr	r2, [r3, #28]
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	4013      	ands	r3, r2
 8004898:	68ba      	ldr	r2, [r7, #8]
 800489a:	429a      	cmp	r2, r3
 800489c:	bf0c      	ite	eq
 800489e:	2301      	moveq	r3, #1
 80048a0:	2300      	movne	r3, #0
 80048a2:	b2db      	uxtb	r3, r3
 80048a4:	461a      	mov	r2, r3
 80048a6:	79fb      	ldrb	r3, [r7, #7]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d0a0      	beq.n	80047ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80048ac:	2300      	movs	r3, #0
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3710      	adds	r7, #16
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}

080048b6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b095      	sub	sp, #84	; 0x54
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048c6:	e853 3f00 	ldrex	r3, [r3]
 80048ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80048cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80048d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	461a      	mov	r2, r3
 80048da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048dc:	643b      	str	r3, [r7, #64]	; 0x40
 80048de:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048e4:	e841 2300 	strex	r3, r2, [r1]
 80048e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80048ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d1e6      	bne.n	80048be <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	3308      	adds	r3, #8
 80048f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	e853 3f00 	ldrex	r3, [r3]
 80048fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	f023 0301 	bic.w	r3, r3, #1
 8004906:	64bb      	str	r3, [r7, #72]	; 0x48
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	3308      	adds	r3, #8
 800490e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004910:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004912:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004914:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004916:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004918:	e841 2300 	strex	r3, r2, [r1]
 800491c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800491e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004920:	2b00      	cmp	r3, #0
 8004922:	d1e5      	bne.n	80048f0 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004928:	2b01      	cmp	r3, #1
 800492a:	d118      	bne.n	800495e <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	e853 3f00 	ldrex	r3, [r3]
 8004938:	60bb      	str	r3, [r7, #8]
   return(result);
 800493a:	68bb      	ldr	r3, [r7, #8]
 800493c:	f023 0310 	bic.w	r3, r3, #16
 8004940:	647b      	str	r3, [r7, #68]	; 0x44
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	461a      	mov	r2, r3
 8004948:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800494a:	61bb      	str	r3, [r7, #24]
 800494c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494e:	6979      	ldr	r1, [r7, #20]
 8004950:	69ba      	ldr	r2, [r7, #24]
 8004952:	e841 2300 	strex	r3, r2, [r1]
 8004956:	613b      	str	r3, [r7, #16]
   return(result);
 8004958:	693b      	ldr	r3, [r7, #16]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1e6      	bne.n	800492c <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2220      	movs	r2, #32
 8004962:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004972:	bf00      	nop
 8004974:	3754      	adds	r7, #84	; 0x54
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr

0800497e <MAX31855_Init>:

#include "MAX31855.h"


void MAX31855_Init(MAX31855_StateHandle *MAX31855, SPI_HandleTypeDef * hspi,GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800497e:	b580      	push	{r7, lr}
 8004980:	b084      	sub	sp, #16
 8004982:	af00      	add	r7, sp, #0
 8004984:	60f8      	str	r0, [r7, #12]
 8004986:	60b9      	str	r1, [r7, #8]
 8004988:	607a      	str	r2, [r7, #4]
 800498a:	807b      	strh	r3, [r7, #2]
	 MAX31855->hspi=hspi;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	68ba      	ldr	r2, [r7, #8]
 8004990:	609a      	str	r2, [r3, #8]
	 MAX31855->nss.pin=GPIO_Pin;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	887a      	ldrh	r2, [r7, #2]
 8004996:	801a      	strh	r2, [r3, #0]
	 MAX31855->nss.port=GPIOx;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	687a      	ldr	r2, [r7, #4]
 800499c:	605a      	str	r2, [r3, #4]
	 MAX31855_SetNSSState(MAX31855,GPIO_PIN_SET);
 800499e:	2101      	movs	r1, #1
 80049a0:	68f8      	ldr	r0, [r7, #12]
 80049a2:	f000 f8fa 	bl	8004b9a <MAX31855_SetNSSState>
}
 80049a6:	bf00      	nop
 80049a8:	3710      	adds	r7, #16
 80049aa:	46bd      	mov	sp, r7
 80049ac:	bd80      	pop	{r7, pc}

080049ae <MAX31855_GetFault>:
uint8_t MAX31855_GetFault(MAX31855_StateHandle *MAX31855)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b083      	sub	sp, #12
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	6078      	str	r0, [r7, #4]
	if(MAX31855->ocFault)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	7b5b      	ldrb	r3, [r3, #13]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d001      	beq.n	80049c2 <MAX31855_GetFault+0x14>
	{
		return 1;
 80049be:	2301      	movs	r3, #1
 80049c0:	e00c      	b.n	80049dc <MAX31855_GetFault+0x2e>
	}
	else if(MAX31855->scgFault)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	7b9b      	ldrb	r3, [r3, #14]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d001      	beq.n	80049ce <MAX31855_GetFault+0x20>
	{
		return 2;
 80049ca:	2302      	movs	r3, #2
 80049cc:	e006      	b.n	80049dc <MAX31855_GetFault+0x2e>
	}
	else if(MAX31855->scvFault)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	7bdb      	ldrb	r3, [r3, #15]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <MAX31855_GetFault+0x2c>
	{
		return 3;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e000      	b.n	80049dc <MAX31855_GetFault+0x2e>
	}
	else
	{
		return 0;
 80049da:	2300      	movs	r3, #0
	}

}
 80049dc:	4618      	mov	r0, r3
 80049de:	370c      	adds	r7, #12
 80049e0:	46bd      	mov	sp, r7
 80049e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e6:	4770      	bx	lr

080049e8 <MAX31855_GetTemperature>:
float MAX31855_GetTemperature(MAX31855_StateHandle *MAX31855)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
	 return MAX31855->extTemp*0.25;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	699b      	ldr	r3, [r3, #24]
 80049f4:	4618      	mov	r0, r3
 80049f6:	f7fb fd95 	bl	8000524 <__aeabi_i2d>
 80049fa:	f04f 0200 	mov.w	r2, #0
 80049fe:	4b08      	ldr	r3, [pc, #32]	; (8004a20 <MAX31855_GetTemperature+0x38>)
 8004a00:	f7fb fdfa 	bl	80005f8 <__aeabi_dmul>
 8004a04:	4602      	mov	r2, r0
 8004a06:	460b      	mov	r3, r1
 8004a08:	4610      	mov	r0, r2
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	f7fc f8ec 	bl	8000be8 <__aeabi_d2f>
 8004a10:	4603      	mov	r3, r0
 8004a12:	ee07 3a90 	vmov	s15, r3
}
 8004a16:	eeb0 0a67 	vmov.f32	s0, s15
 8004a1a:	3708      	adds	r7, #8
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}
 8004a20:	3fd00000 	.word	0x3fd00000

08004a24 <MAX31855_GeInternalTemperature>:
float MAX31855_GeInternalTemperature(MAX31855_StateHandle *MAX31855){
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b082      	sub	sp, #8
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
	 return MAX31855->intTemp*0.0625;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	4618      	mov	r0, r3
 8004a32:	f7fb fd77 	bl	8000524 <__aeabi_i2d>
 8004a36:	f04f 0200 	mov.w	r2, #0
 8004a3a:	4b08      	ldr	r3, [pc, #32]	; (8004a5c <MAX31855_GeInternalTemperature+0x38>)
 8004a3c:	f7fb fddc 	bl	80005f8 <__aeabi_dmul>
 8004a40:	4602      	mov	r2, r0
 8004a42:	460b      	mov	r3, r1
 8004a44:	4610      	mov	r0, r2
 8004a46:	4619      	mov	r1, r3
 8004a48:	f7fc f8ce 	bl	8000be8 <__aeabi_d2f>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	ee07 3a90 	vmov	s15, r3
}
 8004a52:	eeb0 0a67 	vmov.f32	s0, s15
 8004a56:	3708      	adds	r7, #8
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bd80      	pop	{r7, pc}
 8004a5c:	3fb00000 	.word	0x3fb00000

08004a60 <MAX31855_ReadData>:
	 temp += 32;
	 return temp;
}

void MAX31855_ReadData(MAX31855_StateHandle *MAX31855)
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b086      	sub	sp, #24
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
	uint8_t payload[4];
	int32_t frame;
	MAX31855_SetNSSState(MAX31855,GPIO_PIN_RESET);
 8004a68:	2100      	movs	r1, #0
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	f000 f895 	bl	8004b9a <MAX31855_SetNSSState>
	HAL_SPI_Receive(MAX31855->hspi, payload, 4, 1000);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6898      	ldr	r0, [r3, #8]
 8004a74:	f107 0108 	add.w	r1, r7, #8
 8004a78:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004a7c:	2204      	movs	r2, #4
 8004a7e:	f7fe fd4c 	bl	800351a <HAL_SPI_Receive>
	MAX31855_SetNSSState(MAX31855,GPIO_PIN_SET);
 8004a82:	2101      	movs	r1, #1
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f000 f888 	bl	8004b9a <MAX31855_SetNSSState>
	MAX31855->scvFault=0;
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	73da      	strb	r2, [r3, #15]
	MAX31855->scgFault=0;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	739a      	strb	r2, [r3, #14]
	MAX31855->ocFault=0;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	735a      	strb	r2, [r3, #13]
	MAX31855->fault=0;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	731a      	strb	r2, [r3, #12]
	MAX31855->extTemp=0;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	619a      	str	r2, [r3, #24]
	MAX31855->extTempSign=0;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	771a      	strb	r2, [r3, #28]
	MAX31855->intTemp=0;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	611a      	str	r2, [r3, #16]
	MAX31855->intTempSign=0;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	751a      	strb	r2, [r3, #20]

	frame = payload[0];
 8004aba:	7a3b      	ldrb	r3, [r7, #8]
 8004abc:	60fb      	str	r3, [r7, #12]
	frame = frame<<8;
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	021b      	lsls	r3, r3, #8
 8004ac2:	60fb      	str	r3, [r7, #12]
	frame = frame|payload[1];
 8004ac4:	7a7b      	ldrb	r3, [r7, #9]
 8004ac6:	461a      	mov	r2, r3
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	60fb      	str	r3, [r7, #12]
	frame = frame<<8;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	021b      	lsls	r3, r3, #8
 8004ad2:	60fb      	str	r3, [r7, #12]
	frame = frame|payload[2];
 8004ad4:	7abb      	ldrb	r3, [r7, #10]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	60fb      	str	r3, [r7, #12]
	frame = frame<<8;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	021b      	lsls	r3, r3, #8
 8004ae2:	60fb      	str	r3, [r7, #12]
	frame = frame|payload[3];
 8004ae4:	7afb      	ldrb	r3, [r7, #11]
 8004ae6:	461a      	mov	r2, r3
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	60fb      	str	r3, [r7, #12]
	int32_t extTemp=frame;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	617b      	str	r3, [r7, #20]
	int32_t intTemp=frame;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	613b      	str	r3, [r7, #16]

	if(frame& 0b00000000000000000000000000000100)
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f003 0304 	and.w	r3, r3, #4
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d002      	beq.n	8004b06 <MAX31855_ReadData+0xa6>
	{
		MAX31855->scvFault=1;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2201      	movs	r2, #1
 8004b04:	73da      	strb	r2, [r3, #15]
	}
	if(frame& 0b00000000000000000000000000000010)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f003 0302 	and.w	r3, r3, #2
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d002      	beq.n	8004b16 <MAX31855_ReadData+0xb6>
	{
		MAX31855->scgFault=1;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	739a      	strb	r2, [r3, #14]
	}
	if(frame& 0b00000000000000000000000000000001)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f003 0301 	and.w	r3, r3, #1
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d002      	beq.n	8004b26 <MAX31855_ReadData+0xc6>
	{
		MAX31855->ocFault=1;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	735a      	strb	r2, [r3, #13]
	}
	if(frame&0b00000000000000010000000000000000)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d002      	beq.n	8004b36 <MAX31855_ReadData+0xd6>
	{
		MAX31855->fault=1;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	731a      	strb	r2, [r3, #12]
	}
	if(frame&0b10000000000000000000000000000000)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	da02      	bge.n	8004b42 <MAX31855_ReadData+0xe2>
	{
		MAX31855->extTempSign=1;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2201      	movs	r2, #1
 8004b40:	771a      	strb	r2, [r3, #28]
	}
	if(frame&0b00000000000000010000000000000000)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d002      	beq.n	8004b52 <MAX31855_ReadData+0xf2>
	{
		MAX31855->intTempSign=1;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	751a      	strb	r2, [r3, #20]
	}

	extTemp>>=18;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	149b      	asrs	r3, r3, #18
 8004b56:	617b      	str	r3, [r7, #20]
	if (MAX31855->intTempSign) {
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	7d1b      	ldrb	r3, [r3, #20]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d004      	beq.n	8004b6a <MAX31855_ReadData+0x10a>
		extTemp = ~(extTemp & 0b11111111111111);
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8004b66:	43db      	mvns	r3, r3
 8004b68:	617b      	str	r3, [r7, #20]
	}
	MAX31855->extTemp=extTemp;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	697a      	ldr	r2, [r7, #20]
 8004b6e:	619a      	str	r2, [r3, #24]

	intTemp = ((intTemp>>4) & 0b11111111111);
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	111b      	asrs	r3, r3, #4
 8004b74:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b78:	613b      	str	r3, [r7, #16]
	if (MAX31855->intTempSign)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	7d1b      	ldrb	r3, [r3, #20]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d004      	beq.n	8004b8c <MAX31855_ReadData+0x12c>
	{
		intTemp=~(intTemp|0b1111100000000000); //Experimental code, not tested!
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	f443 4378 	orr.w	r3, r3, #63488	; 0xf800
 8004b88:	43db      	mvns	r3, r3
 8004b8a:	613b      	str	r3, [r7, #16]
	}
	MAX31855->intTemp=intTemp;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	611a      	str	r2, [r3, #16]
}
 8004b92:	bf00      	nop
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}

08004b9a <MAX31855_SetNSSState>:


void MAX31855_SetNSSState(MAX31855_StateHandle *MAX31855, GPIO_PinState state)
{
 8004b9a:	b580      	push	{r7, lr}
 8004b9c:	b082      	sub	sp, #8
 8004b9e:	af00      	add	r7, sp, #0
 8004ba0:	6078      	str	r0, [r7, #4]
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(MAX31855->nss.port,MAX31855->nss.pin,state);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6858      	ldr	r0, [r3, #4]
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	881b      	ldrh	r3, [r3, #0]
 8004bae:	78fa      	ldrb	r2, [r7, #3]
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	f7fd fa53 	bl	800205c <HAL_GPIO_WritePin>
}
 8004bb6:	bf00      	nop
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
	...

08004bc0 <MCP3204_convert>:
/*
 * Start the AD conversion process and read the digital value
 * of the analog signal from MCP3204.
 */
int MCP3204_convert(SPI_HandleTypeDef *hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, inputChannelMode channelMode, inputChannel channel, MCP3204 *ad,char *msg)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b08a      	sub	sp, #40	; 0x28
 8004bc4:	af02      	add	r7, sp, #8
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	4611      	mov	r1, r2
 8004bcc:	461a      	mov	r2, r3
 8004bce:	460b      	mov	r3, r1
 8004bd0:	80fb      	strh	r3, [r7, #6]
 8004bd2:	4613      	mov	r3, r2
 8004bd4:	717b      	strb	r3, [r7, #5]
	// Cycle ADC (recommended in datasheet)
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8004bd6:	88fb      	ldrh	r3, [r7, #6]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	4619      	mov	r1, r3
 8004bdc:	68b8      	ldr	r0, [r7, #8]
 8004bde:	f7fd fa3d 	bl	800205c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8004be2:	88fb      	ldrh	r3, [r7, #6]
 8004be4:	2200      	movs	r2, #0
 8004be6:	4619      	mov	r1, r3
 8004be8:	68b8      	ldr	r0, [r7, #8]
 8004bea:	f7fd fa37 	bl	800205c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8004bee:	88fb      	ldrh	r3, [r7, #6]
 8004bf0:	2201      	movs	r2, #1
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	68b8      	ldr	r0, [r7, #8]
 8004bf6:	f7fd fa31 	bl	800205c <HAL_GPIO_WritePin>

	unsigned char tx[3] = "";
 8004bfa:	4b42      	ldr	r3, [pc, #264]	; (8004d04 <MCP3204_convert+0x144>)
 8004bfc:	781b      	ldrb	r3, [r3, #0]
 8004bfe:	763b      	strb	r3, [r7, #24]
 8004c00:	f107 0319 	add.w	r3, r7, #25
 8004c04:	2200      	movs	r2, #0
 8004c06:	801a      	strh	r2, [r3, #0]
	unsigned char rx[3] = "";
 8004c08:	4b3e      	ldr	r3, [pc, #248]	; (8004d04 <MCP3204_convert+0x144>)
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	753b      	strb	r3, [r7, #20]
 8004c0e:	f107 0315 	add.w	r3, r7, #21
 8004c12:	2200      	movs	r2, #0
 8004c14:	801a      	strh	r2, [r3, #0]

	/* set the start bit */
	tx[0] |= START_BIT;
 8004c16:	7e3b      	ldrb	r3, [r7, #24]
 8004c18:	f043 0304 	orr.w	r3, r3, #4
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	763b      	strb	r3, [r7, #24]

	/* define the channel input mode */
	if (channelMode==singleEnded)
 8004c20:	797b      	ldrb	r3, [r7, #5]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d104      	bne.n	8004c30 <MCP3204_convert+0x70>
		tx[0] |= SINGLE_ENDED;
 8004c26:	7e3b      	ldrb	r3, [r7, #24]
 8004c28:	f043 0302 	orr.w	r3, r3, #2
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	763b      	strb	r3, [r7, #24]
	if (channelMode==differential)
 8004c30:	797b      	ldrb	r3, [r7, #5]
 8004c32:	2b01      	cmp	r3, #1
 8004c34:	d104      	bne.n	8004c40 <MCP3204_convert+0x80>
		tx[0] &= DIFFERENTIAL;
 8004c36:	7e3b      	ldrb	r3, [r7, #24]
 8004c38:	f023 0304 	bic.w	r3, r3, #4
 8004c3c:	b2db      	uxtb	r3, r3
 8004c3e:	763b      	strb	r3, [r7, #24]

	/* set the input channel/pair */
	// Remains unchanged from original library, may require changing
	switch(channel)
 8004c40:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004c44:	2b07      	cmp	r3, #7
 8004c46:	d828      	bhi.n	8004c9a <MCP3204_convert+0xda>
 8004c48:	a201      	add	r2, pc, #4	; (adr r2, 8004c50 <MCP3204_convert+0x90>)
 8004c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c4e:	bf00      	nop
 8004c50:	08004c71 	.word	0x08004c71
 8004c54:	08004c77 	.word	0x08004c77
 8004c58:	08004c83 	.word	0x08004c83
 8004c5c:	08004c8f 	.word	0x08004c8f
 8004c60:	08004c71 	.word	0x08004c71
 8004c64:	08004c77 	.word	0x08004c77
 8004c68:	08004c83 	.word	0x08004c83
 8004c6c:	08004c8f 	.word	0x08004c8f
	{
		case CH0:
		case CH01:
			tx[1] |= CH_0;
 8004c70:	7e7b      	ldrb	r3, [r7, #25]
 8004c72:	767b      	strb	r3, [r7, #25]
			break;
 8004c74:	e011      	b.n	8004c9a <MCP3204_convert+0xda>
		case CH1:
		case CH10:
			tx[1] |= CH_1;
 8004c76:	7e7b      	ldrb	r3, [r7, #25]
 8004c78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	767b      	strb	r3, [r7, #25]
			break;
 8004c80:	e00b      	b.n	8004c9a <MCP3204_convert+0xda>
		case CH2:
		case CH23:
			tx[1] |= CH_2;
 8004c82:	7e7b      	ldrb	r3, [r7, #25]
 8004c84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8004c88:	b2db      	uxtb	r3, r3
 8004c8a:	767b      	strb	r3, [r7, #25]
			break;
 8004c8c:	e005      	b.n	8004c9a <MCP3204_convert+0xda>
		case CH3:
		case CH32:
			tx[1] |= CH_3;
 8004c8e:	7e7b      	ldrb	r3, [r7, #25]
 8004c90:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8004c94:	b2db      	uxtb	r3, r3
 8004c96:	767b      	strb	r3, [r7, #25]
			break;
 8004c98:	bf00      	nop
	}

	// transmit and receive messages tx and rx respectively
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 8004c9a:	88fb      	ldrh	r3, [r7, #6]
 8004c9c:	2200      	movs	r2, #0
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	68b8      	ldr	r0, [r7, #8]
 8004ca2:	f7fd f9db 	bl	800205c <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi, tx, rx, 6, 100);
 8004ca6:	f107 0214 	add.w	r2, r7, #20
 8004caa:	f107 0118 	add.w	r1, r7, #24
 8004cae:	2364      	movs	r3, #100	; 0x64
 8004cb0:	9300      	str	r3, [sp, #0]
 8004cb2:	2306      	movs	r3, #6
 8004cb4:	68f8      	ldr	r0, [r7, #12]
 8004cb6:	f7fe fd68 	bl	800378a <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 8004cba:	88fb      	ldrh	r3, [r7, #6]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	4619      	mov	r1, r3
 8004cc0:	68b8      	ldr	r0, [r7, #8]
 8004cc2:	f7fd f9cb 	bl	800205c <HAL_GPIO_WritePin>

	// recorded bites of importance are 4 LSB of rx[1] and all of rx[2]
	// remove 4 msb from rx[1]
	rx[1] &= 0x0F;
 8004cc6:	7d7b      	ldrb	r3, [r7, #21]
 8004cc8:	f003 030f 	and.w	r3, r3, #15
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	757b      	strb	r3, [r7, #21]
	uint16_t data = rx[1];
 8004cd0:	7d7b      	ldrb	r3, [r7, #21]
 8004cd2:	83fb      	strh	r3, [r7, #30]
	data <<= 8;
 8004cd4:	8bfb      	ldrh	r3, [r7, #30]
 8004cd6:	021b      	lsls	r3, r3, #8
 8004cd8:	83fb      	strh	r3, [r7, #30]
	data |= rx[2];
 8004cda:	7dbb      	ldrb	r3, [r7, #22]
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	8bfb      	ldrh	r3, [r7, #30]
 8004ce0:	4313      	orrs	r3, r2
 8004ce2:	83fb      	strh	r3, [r7, #30]

	// record to adc struct
	ad->digitalValue = data;
 8004ce4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ce6:	8bfa      	ldrh	r2, [r7, #30]
 8004ce8:	801a      	strh	r2, [r3, #0]

	// bugfixing message
	sprintf(msg, "tx: %X, rx: %hX \n\r", tx[0], ad->digitalValue);
 8004cea:	7e3b      	ldrb	r3, [r7, #24]
 8004cec:	461a      	mov	r2, r3
 8004cee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf0:	881b      	ldrh	r3, [r3, #0]
 8004cf2:	4905      	ldr	r1, [pc, #20]	; (8004d08 <MCP3204_convert+0x148>)
 8004cf4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004cf6:	f001 f801 	bl	8005cfc <siprintf>

	return 0;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3720      	adds	r7, #32
 8004d00:	46bd      	mov	sp, r7
 8004d02:	bd80      	pop	{r7, pc}
 8004d04:	08009794 	.word	0x08009794
 8004d08:	08009780 	.word	0x08009780

08004d0c <MCP3204_analogValue>:

/*
 * The function calculates the value of the analog input.
 */
float MCP3204_analogValue(MCP3204 ad)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b083      	sub	sp, #12
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	463b      	mov	r3, r7
 8004d14:	e883 0003 	stmia.w	r3, {r0, r1}
	return (ad.digitalValue*ad.referenceVoltage)/4096;
 8004d18:	883b      	ldrh	r3, [r7, #0]
 8004d1a:	ee07 3a90 	vmov	s15, r3
 8004d1e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004d22:	edd7 7a01 	vldr	s15, [r7, #4]
 8004d26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004d2a:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8004d44 <MCP3204_analogValue+0x38>
 8004d2e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8004d32:	eef0 7a66 	vmov.f32	s15, s13
}
 8004d36:	eeb0 0a67 	vmov.f32	s0, s15
 8004d3a:	370c      	adds	r7, #12
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d42:	4770      	bx	lr
 8004d44:	45800000 	.word	0x45800000

08004d48 <__cvt>:
 8004d48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d4c:	ec55 4b10 	vmov	r4, r5, d0
 8004d50:	2d00      	cmp	r5, #0
 8004d52:	460e      	mov	r6, r1
 8004d54:	4619      	mov	r1, r3
 8004d56:	462b      	mov	r3, r5
 8004d58:	bfbb      	ittet	lt
 8004d5a:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004d5e:	461d      	movlt	r5, r3
 8004d60:	2300      	movge	r3, #0
 8004d62:	232d      	movlt	r3, #45	; 0x2d
 8004d64:	700b      	strb	r3, [r1, #0]
 8004d66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004d68:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004d6c:	4691      	mov	r9, r2
 8004d6e:	f023 0820 	bic.w	r8, r3, #32
 8004d72:	bfbc      	itt	lt
 8004d74:	4622      	movlt	r2, r4
 8004d76:	4614      	movlt	r4, r2
 8004d78:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004d7c:	d005      	beq.n	8004d8a <__cvt+0x42>
 8004d7e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004d82:	d100      	bne.n	8004d86 <__cvt+0x3e>
 8004d84:	3601      	adds	r6, #1
 8004d86:	2102      	movs	r1, #2
 8004d88:	e000      	b.n	8004d8c <__cvt+0x44>
 8004d8a:	2103      	movs	r1, #3
 8004d8c:	ab03      	add	r3, sp, #12
 8004d8e:	9301      	str	r3, [sp, #4]
 8004d90:	ab02      	add	r3, sp, #8
 8004d92:	9300      	str	r3, [sp, #0]
 8004d94:	ec45 4b10 	vmov	d0, r4, r5
 8004d98:	4653      	mov	r3, sl
 8004d9a:	4632      	mov	r2, r6
 8004d9c:	f001 f9b4 	bl	8006108 <_dtoa_r>
 8004da0:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004da4:	4607      	mov	r7, r0
 8004da6:	d102      	bne.n	8004dae <__cvt+0x66>
 8004da8:	f019 0f01 	tst.w	r9, #1
 8004dac:	d022      	beq.n	8004df4 <__cvt+0xac>
 8004dae:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004db2:	eb07 0906 	add.w	r9, r7, r6
 8004db6:	d110      	bne.n	8004dda <__cvt+0x92>
 8004db8:	783b      	ldrb	r3, [r7, #0]
 8004dba:	2b30      	cmp	r3, #48	; 0x30
 8004dbc:	d10a      	bne.n	8004dd4 <__cvt+0x8c>
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	2300      	movs	r3, #0
 8004dc2:	4620      	mov	r0, r4
 8004dc4:	4629      	mov	r1, r5
 8004dc6:	f7fb fe7f 	bl	8000ac8 <__aeabi_dcmpeq>
 8004dca:	b918      	cbnz	r0, 8004dd4 <__cvt+0x8c>
 8004dcc:	f1c6 0601 	rsb	r6, r6, #1
 8004dd0:	f8ca 6000 	str.w	r6, [sl]
 8004dd4:	f8da 3000 	ldr.w	r3, [sl]
 8004dd8:	4499      	add	r9, r3
 8004dda:	2200      	movs	r2, #0
 8004ddc:	2300      	movs	r3, #0
 8004dde:	4620      	mov	r0, r4
 8004de0:	4629      	mov	r1, r5
 8004de2:	f7fb fe71 	bl	8000ac8 <__aeabi_dcmpeq>
 8004de6:	b108      	cbz	r0, 8004dec <__cvt+0xa4>
 8004de8:	f8cd 900c 	str.w	r9, [sp, #12]
 8004dec:	2230      	movs	r2, #48	; 0x30
 8004dee:	9b03      	ldr	r3, [sp, #12]
 8004df0:	454b      	cmp	r3, r9
 8004df2:	d307      	bcc.n	8004e04 <__cvt+0xbc>
 8004df4:	9b03      	ldr	r3, [sp, #12]
 8004df6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004df8:	1bdb      	subs	r3, r3, r7
 8004dfa:	4638      	mov	r0, r7
 8004dfc:	6013      	str	r3, [r2, #0]
 8004dfe:	b004      	add	sp, #16
 8004e00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e04:	1c59      	adds	r1, r3, #1
 8004e06:	9103      	str	r1, [sp, #12]
 8004e08:	701a      	strb	r2, [r3, #0]
 8004e0a:	e7f0      	b.n	8004dee <__cvt+0xa6>

08004e0c <__exponent>:
 8004e0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2900      	cmp	r1, #0
 8004e12:	bfb8      	it	lt
 8004e14:	4249      	neglt	r1, r1
 8004e16:	f803 2b02 	strb.w	r2, [r3], #2
 8004e1a:	bfb4      	ite	lt
 8004e1c:	222d      	movlt	r2, #45	; 0x2d
 8004e1e:	222b      	movge	r2, #43	; 0x2b
 8004e20:	2909      	cmp	r1, #9
 8004e22:	7042      	strb	r2, [r0, #1]
 8004e24:	dd2a      	ble.n	8004e7c <__exponent+0x70>
 8004e26:	f10d 0207 	add.w	r2, sp, #7
 8004e2a:	4617      	mov	r7, r2
 8004e2c:	260a      	movs	r6, #10
 8004e2e:	4694      	mov	ip, r2
 8004e30:	fb91 f5f6 	sdiv	r5, r1, r6
 8004e34:	fb06 1415 	mls	r4, r6, r5, r1
 8004e38:	3430      	adds	r4, #48	; 0x30
 8004e3a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8004e3e:	460c      	mov	r4, r1
 8004e40:	2c63      	cmp	r4, #99	; 0x63
 8004e42:	f102 32ff 	add.w	r2, r2, #4294967295
 8004e46:	4629      	mov	r1, r5
 8004e48:	dcf1      	bgt.n	8004e2e <__exponent+0x22>
 8004e4a:	3130      	adds	r1, #48	; 0x30
 8004e4c:	f1ac 0402 	sub.w	r4, ip, #2
 8004e50:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004e54:	1c41      	adds	r1, r0, #1
 8004e56:	4622      	mov	r2, r4
 8004e58:	42ba      	cmp	r2, r7
 8004e5a:	d30a      	bcc.n	8004e72 <__exponent+0x66>
 8004e5c:	f10d 0209 	add.w	r2, sp, #9
 8004e60:	eba2 020c 	sub.w	r2, r2, ip
 8004e64:	42bc      	cmp	r4, r7
 8004e66:	bf88      	it	hi
 8004e68:	2200      	movhi	r2, #0
 8004e6a:	4413      	add	r3, r2
 8004e6c:	1a18      	subs	r0, r3, r0
 8004e6e:	b003      	add	sp, #12
 8004e70:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e72:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004e76:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004e7a:	e7ed      	b.n	8004e58 <__exponent+0x4c>
 8004e7c:	2330      	movs	r3, #48	; 0x30
 8004e7e:	3130      	adds	r1, #48	; 0x30
 8004e80:	7083      	strb	r3, [r0, #2]
 8004e82:	70c1      	strb	r1, [r0, #3]
 8004e84:	1d03      	adds	r3, r0, #4
 8004e86:	e7f1      	b.n	8004e6c <__exponent+0x60>

08004e88 <_printf_float>:
 8004e88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e8c:	ed2d 8b02 	vpush	{d8}
 8004e90:	b08d      	sub	sp, #52	; 0x34
 8004e92:	460c      	mov	r4, r1
 8004e94:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004e98:	4616      	mov	r6, r2
 8004e9a:	461f      	mov	r7, r3
 8004e9c:	4605      	mov	r5, r0
 8004e9e:	f001 f82d 	bl	8005efc <_localeconv_r>
 8004ea2:	f8d0 a000 	ldr.w	sl, [r0]
 8004ea6:	4650      	mov	r0, sl
 8004ea8:	f7fb f9e2 	bl	8000270 <strlen>
 8004eac:	2300      	movs	r3, #0
 8004eae:	930a      	str	r3, [sp, #40]	; 0x28
 8004eb0:	6823      	ldr	r3, [r4, #0]
 8004eb2:	9305      	str	r3, [sp, #20]
 8004eb4:	f8d8 3000 	ldr.w	r3, [r8]
 8004eb8:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004ebc:	3307      	adds	r3, #7
 8004ebe:	f023 0307 	bic.w	r3, r3, #7
 8004ec2:	f103 0208 	add.w	r2, r3, #8
 8004ec6:	f8c8 2000 	str.w	r2, [r8]
 8004eca:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004ece:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004ed2:	9307      	str	r3, [sp, #28]
 8004ed4:	f8cd 8018 	str.w	r8, [sp, #24]
 8004ed8:	ee08 0a10 	vmov	s16, r0
 8004edc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004ee0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ee4:	4b9e      	ldr	r3, [pc, #632]	; (8005160 <_printf_float+0x2d8>)
 8004ee6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eea:	f7fb fe1f 	bl	8000b2c <__aeabi_dcmpun>
 8004eee:	bb88      	cbnz	r0, 8004f54 <_printf_float+0xcc>
 8004ef0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ef4:	4b9a      	ldr	r3, [pc, #616]	; (8005160 <_printf_float+0x2d8>)
 8004ef6:	f04f 32ff 	mov.w	r2, #4294967295
 8004efa:	f7fb fdf9 	bl	8000af0 <__aeabi_dcmple>
 8004efe:	bb48      	cbnz	r0, 8004f54 <_printf_float+0xcc>
 8004f00:	2200      	movs	r2, #0
 8004f02:	2300      	movs	r3, #0
 8004f04:	4640      	mov	r0, r8
 8004f06:	4649      	mov	r1, r9
 8004f08:	f7fb fde8 	bl	8000adc <__aeabi_dcmplt>
 8004f0c:	b110      	cbz	r0, 8004f14 <_printf_float+0x8c>
 8004f0e:	232d      	movs	r3, #45	; 0x2d
 8004f10:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f14:	4a93      	ldr	r2, [pc, #588]	; (8005164 <_printf_float+0x2dc>)
 8004f16:	4b94      	ldr	r3, [pc, #592]	; (8005168 <_printf_float+0x2e0>)
 8004f18:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004f1c:	bf94      	ite	ls
 8004f1e:	4690      	movls	r8, r2
 8004f20:	4698      	movhi	r8, r3
 8004f22:	2303      	movs	r3, #3
 8004f24:	6123      	str	r3, [r4, #16]
 8004f26:	9b05      	ldr	r3, [sp, #20]
 8004f28:	f023 0304 	bic.w	r3, r3, #4
 8004f2c:	6023      	str	r3, [r4, #0]
 8004f2e:	f04f 0900 	mov.w	r9, #0
 8004f32:	9700      	str	r7, [sp, #0]
 8004f34:	4633      	mov	r3, r6
 8004f36:	aa0b      	add	r2, sp, #44	; 0x2c
 8004f38:	4621      	mov	r1, r4
 8004f3a:	4628      	mov	r0, r5
 8004f3c:	f000 f9da 	bl	80052f4 <_printf_common>
 8004f40:	3001      	adds	r0, #1
 8004f42:	f040 8090 	bne.w	8005066 <_printf_float+0x1de>
 8004f46:	f04f 30ff 	mov.w	r0, #4294967295
 8004f4a:	b00d      	add	sp, #52	; 0x34
 8004f4c:	ecbd 8b02 	vpop	{d8}
 8004f50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f54:	4642      	mov	r2, r8
 8004f56:	464b      	mov	r3, r9
 8004f58:	4640      	mov	r0, r8
 8004f5a:	4649      	mov	r1, r9
 8004f5c:	f7fb fde6 	bl	8000b2c <__aeabi_dcmpun>
 8004f60:	b140      	cbz	r0, 8004f74 <_printf_float+0xec>
 8004f62:	464b      	mov	r3, r9
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	bfbc      	itt	lt
 8004f68:	232d      	movlt	r3, #45	; 0x2d
 8004f6a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004f6e:	4a7f      	ldr	r2, [pc, #508]	; (800516c <_printf_float+0x2e4>)
 8004f70:	4b7f      	ldr	r3, [pc, #508]	; (8005170 <_printf_float+0x2e8>)
 8004f72:	e7d1      	b.n	8004f18 <_printf_float+0x90>
 8004f74:	6863      	ldr	r3, [r4, #4]
 8004f76:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004f7a:	9206      	str	r2, [sp, #24]
 8004f7c:	1c5a      	adds	r2, r3, #1
 8004f7e:	d13f      	bne.n	8005000 <_printf_float+0x178>
 8004f80:	2306      	movs	r3, #6
 8004f82:	6063      	str	r3, [r4, #4]
 8004f84:	9b05      	ldr	r3, [sp, #20]
 8004f86:	6861      	ldr	r1, [r4, #4]
 8004f88:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	9303      	str	r3, [sp, #12]
 8004f90:	ab0a      	add	r3, sp, #40	; 0x28
 8004f92:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004f96:	ab09      	add	r3, sp, #36	; 0x24
 8004f98:	ec49 8b10 	vmov	d0, r8, r9
 8004f9c:	9300      	str	r3, [sp, #0]
 8004f9e:	6022      	str	r2, [r4, #0]
 8004fa0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004fa4:	4628      	mov	r0, r5
 8004fa6:	f7ff fecf 	bl	8004d48 <__cvt>
 8004faa:	9b06      	ldr	r3, [sp, #24]
 8004fac:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004fae:	2b47      	cmp	r3, #71	; 0x47
 8004fb0:	4680      	mov	r8, r0
 8004fb2:	d108      	bne.n	8004fc6 <_printf_float+0x13e>
 8004fb4:	1cc8      	adds	r0, r1, #3
 8004fb6:	db02      	blt.n	8004fbe <_printf_float+0x136>
 8004fb8:	6863      	ldr	r3, [r4, #4]
 8004fba:	4299      	cmp	r1, r3
 8004fbc:	dd41      	ble.n	8005042 <_printf_float+0x1ba>
 8004fbe:	f1ab 0302 	sub.w	r3, fp, #2
 8004fc2:	fa5f fb83 	uxtb.w	fp, r3
 8004fc6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004fca:	d820      	bhi.n	800500e <_printf_float+0x186>
 8004fcc:	3901      	subs	r1, #1
 8004fce:	465a      	mov	r2, fp
 8004fd0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004fd4:	9109      	str	r1, [sp, #36]	; 0x24
 8004fd6:	f7ff ff19 	bl	8004e0c <__exponent>
 8004fda:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004fdc:	1813      	adds	r3, r2, r0
 8004fde:	2a01      	cmp	r2, #1
 8004fe0:	4681      	mov	r9, r0
 8004fe2:	6123      	str	r3, [r4, #16]
 8004fe4:	dc02      	bgt.n	8004fec <_printf_float+0x164>
 8004fe6:	6822      	ldr	r2, [r4, #0]
 8004fe8:	07d2      	lsls	r2, r2, #31
 8004fea:	d501      	bpl.n	8004ff0 <_printf_float+0x168>
 8004fec:	3301      	adds	r3, #1
 8004fee:	6123      	str	r3, [r4, #16]
 8004ff0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d09c      	beq.n	8004f32 <_printf_float+0xaa>
 8004ff8:	232d      	movs	r3, #45	; 0x2d
 8004ffa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ffe:	e798      	b.n	8004f32 <_printf_float+0xaa>
 8005000:	9a06      	ldr	r2, [sp, #24]
 8005002:	2a47      	cmp	r2, #71	; 0x47
 8005004:	d1be      	bne.n	8004f84 <_printf_float+0xfc>
 8005006:	2b00      	cmp	r3, #0
 8005008:	d1bc      	bne.n	8004f84 <_printf_float+0xfc>
 800500a:	2301      	movs	r3, #1
 800500c:	e7b9      	b.n	8004f82 <_printf_float+0xfa>
 800500e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8005012:	d118      	bne.n	8005046 <_printf_float+0x1be>
 8005014:	2900      	cmp	r1, #0
 8005016:	6863      	ldr	r3, [r4, #4]
 8005018:	dd0b      	ble.n	8005032 <_printf_float+0x1aa>
 800501a:	6121      	str	r1, [r4, #16]
 800501c:	b913      	cbnz	r3, 8005024 <_printf_float+0x19c>
 800501e:	6822      	ldr	r2, [r4, #0]
 8005020:	07d0      	lsls	r0, r2, #31
 8005022:	d502      	bpl.n	800502a <_printf_float+0x1a2>
 8005024:	3301      	adds	r3, #1
 8005026:	440b      	add	r3, r1
 8005028:	6123      	str	r3, [r4, #16]
 800502a:	65a1      	str	r1, [r4, #88]	; 0x58
 800502c:	f04f 0900 	mov.w	r9, #0
 8005030:	e7de      	b.n	8004ff0 <_printf_float+0x168>
 8005032:	b913      	cbnz	r3, 800503a <_printf_float+0x1b2>
 8005034:	6822      	ldr	r2, [r4, #0]
 8005036:	07d2      	lsls	r2, r2, #31
 8005038:	d501      	bpl.n	800503e <_printf_float+0x1b6>
 800503a:	3302      	adds	r3, #2
 800503c:	e7f4      	b.n	8005028 <_printf_float+0x1a0>
 800503e:	2301      	movs	r3, #1
 8005040:	e7f2      	b.n	8005028 <_printf_float+0x1a0>
 8005042:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8005046:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005048:	4299      	cmp	r1, r3
 800504a:	db05      	blt.n	8005058 <_printf_float+0x1d0>
 800504c:	6823      	ldr	r3, [r4, #0]
 800504e:	6121      	str	r1, [r4, #16]
 8005050:	07d8      	lsls	r0, r3, #31
 8005052:	d5ea      	bpl.n	800502a <_printf_float+0x1a2>
 8005054:	1c4b      	adds	r3, r1, #1
 8005056:	e7e7      	b.n	8005028 <_printf_float+0x1a0>
 8005058:	2900      	cmp	r1, #0
 800505a:	bfd4      	ite	le
 800505c:	f1c1 0202 	rsble	r2, r1, #2
 8005060:	2201      	movgt	r2, #1
 8005062:	4413      	add	r3, r2
 8005064:	e7e0      	b.n	8005028 <_printf_float+0x1a0>
 8005066:	6823      	ldr	r3, [r4, #0]
 8005068:	055a      	lsls	r2, r3, #21
 800506a:	d407      	bmi.n	800507c <_printf_float+0x1f4>
 800506c:	6923      	ldr	r3, [r4, #16]
 800506e:	4642      	mov	r2, r8
 8005070:	4631      	mov	r1, r6
 8005072:	4628      	mov	r0, r5
 8005074:	47b8      	blx	r7
 8005076:	3001      	adds	r0, #1
 8005078:	d12c      	bne.n	80050d4 <_printf_float+0x24c>
 800507a:	e764      	b.n	8004f46 <_printf_float+0xbe>
 800507c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8005080:	f240 80e0 	bls.w	8005244 <_printf_float+0x3bc>
 8005084:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005088:	2200      	movs	r2, #0
 800508a:	2300      	movs	r3, #0
 800508c:	f7fb fd1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8005090:	2800      	cmp	r0, #0
 8005092:	d034      	beq.n	80050fe <_printf_float+0x276>
 8005094:	4a37      	ldr	r2, [pc, #220]	; (8005174 <_printf_float+0x2ec>)
 8005096:	2301      	movs	r3, #1
 8005098:	4631      	mov	r1, r6
 800509a:	4628      	mov	r0, r5
 800509c:	47b8      	blx	r7
 800509e:	3001      	adds	r0, #1
 80050a0:	f43f af51 	beq.w	8004f46 <_printf_float+0xbe>
 80050a4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80050a8:	429a      	cmp	r2, r3
 80050aa:	db02      	blt.n	80050b2 <_printf_float+0x22a>
 80050ac:	6823      	ldr	r3, [r4, #0]
 80050ae:	07d8      	lsls	r0, r3, #31
 80050b0:	d510      	bpl.n	80050d4 <_printf_float+0x24c>
 80050b2:	ee18 3a10 	vmov	r3, s16
 80050b6:	4652      	mov	r2, sl
 80050b8:	4631      	mov	r1, r6
 80050ba:	4628      	mov	r0, r5
 80050bc:	47b8      	blx	r7
 80050be:	3001      	adds	r0, #1
 80050c0:	f43f af41 	beq.w	8004f46 <_printf_float+0xbe>
 80050c4:	f04f 0800 	mov.w	r8, #0
 80050c8:	f104 091a 	add.w	r9, r4, #26
 80050cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80050ce:	3b01      	subs	r3, #1
 80050d0:	4543      	cmp	r3, r8
 80050d2:	dc09      	bgt.n	80050e8 <_printf_float+0x260>
 80050d4:	6823      	ldr	r3, [r4, #0]
 80050d6:	079b      	lsls	r3, r3, #30
 80050d8:	f100 8107 	bmi.w	80052ea <_printf_float+0x462>
 80050dc:	68e0      	ldr	r0, [r4, #12]
 80050de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80050e0:	4298      	cmp	r0, r3
 80050e2:	bfb8      	it	lt
 80050e4:	4618      	movlt	r0, r3
 80050e6:	e730      	b.n	8004f4a <_printf_float+0xc2>
 80050e8:	2301      	movs	r3, #1
 80050ea:	464a      	mov	r2, r9
 80050ec:	4631      	mov	r1, r6
 80050ee:	4628      	mov	r0, r5
 80050f0:	47b8      	blx	r7
 80050f2:	3001      	adds	r0, #1
 80050f4:	f43f af27 	beq.w	8004f46 <_printf_float+0xbe>
 80050f8:	f108 0801 	add.w	r8, r8, #1
 80050fc:	e7e6      	b.n	80050cc <_printf_float+0x244>
 80050fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005100:	2b00      	cmp	r3, #0
 8005102:	dc39      	bgt.n	8005178 <_printf_float+0x2f0>
 8005104:	4a1b      	ldr	r2, [pc, #108]	; (8005174 <_printf_float+0x2ec>)
 8005106:	2301      	movs	r3, #1
 8005108:	4631      	mov	r1, r6
 800510a:	4628      	mov	r0, r5
 800510c:	47b8      	blx	r7
 800510e:	3001      	adds	r0, #1
 8005110:	f43f af19 	beq.w	8004f46 <_printf_float+0xbe>
 8005114:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8005118:	4313      	orrs	r3, r2
 800511a:	d102      	bne.n	8005122 <_printf_float+0x29a>
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	07d9      	lsls	r1, r3, #31
 8005120:	d5d8      	bpl.n	80050d4 <_printf_float+0x24c>
 8005122:	ee18 3a10 	vmov	r3, s16
 8005126:	4652      	mov	r2, sl
 8005128:	4631      	mov	r1, r6
 800512a:	4628      	mov	r0, r5
 800512c:	47b8      	blx	r7
 800512e:	3001      	adds	r0, #1
 8005130:	f43f af09 	beq.w	8004f46 <_printf_float+0xbe>
 8005134:	f04f 0900 	mov.w	r9, #0
 8005138:	f104 0a1a 	add.w	sl, r4, #26
 800513c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800513e:	425b      	negs	r3, r3
 8005140:	454b      	cmp	r3, r9
 8005142:	dc01      	bgt.n	8005148 <_printf_float+0x2c0>
 8005144:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005146:	e792      	b.n	800506e <_printf_float+0x1e6>
 8005148:	2301      	movs	r3, #1
 800514a:	4652      	mov	r2, sl
 800514c:	4631      	mov	r1, r6
 800514e:	4628      	mov	r0, r5
 8005150:	47b8      	blx	r7
 8005152:	3001      	adds	r0, #1
 8005154:	f43f aef7 	beq.w	8004f46 <_printf_float+0xbe>
 8005158:	f109 0901 	add.w	r9, r9, #1
 800515c:	e7ee      	b.n	800513c <_printf_float+0x2b4>
 800515e:	bf00      	nop
 8005160:	7fefffff 	.word	0x7fefffff
 8005164:	080097e0 	.word	0x080097e0
 8005168:	080097e4 	.word	0x080097e4
 800516c:	080097e8 	.word	0x080097e8
 8005170:	080097ec 	.word	0x080097ec
 8005174:	080097f0 	.word	0x080097f0
 8005178:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800517a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800517c:	429a      	cmp	r2, r3
 800517e:	bfa8      	it	ge
 8005180:	461a      	movge	r2, r3
 8005182:	2a00      	cmp	r2, #0
 8005184:	4691      	mov	r9, r2
 8005186:	dc37      	bgt.n	80051f8 <_printf_float+0x370>
 8005188:	f04f 0b00 	mov.w	fp, #0
 800518c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005190:	f104 021a 	add.w	r2, r4, #26
 8005194:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8005196:	9305      	str	r3, [sp, #20]
 8005198:	eba3 0309 	sub.w	r3, r3, r9
 800519c:	455b      	cmp	r3, fp
 800519e:	dc33      	bgt.n	8005208 <_printf_float+0x380>
 80051a0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051a4:	429a      	cmp	r2, r3
 80051a6:	db3b      	blt.n	8005220 <_printf_float+0x398>
 80051a8:	6823      	ldr	r3, [r4, #0]
 80051aa:	07da      	lsls	r2, r3, #31
 80051ac:	d438      	bmi.n	8005220 <_printf_float+0x398>
 80051ae:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80051b2:	eba2 0903 	sub.w	r9, r2, r3
 80051b6:	9b05      	ldr	r3, [sp, #20]
 80051b8:	1ad2      	subs	r2, r2, r3
 80051ba:	4591      	cmp	r9, r2
 80051bc:	bfa8      	it	ge
 80051be:	4691      	movge	r9, r2
 80051c0:	f1b9 0f00 	cmp.w	r9, #0
 80051c4:	dc35      	bgt.n	8005232 <_printf_float+0x3aa>
 80051c6:	f04f 0800 	mov.w	r8, #0
 80051ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80051ce:	f104 0a1a 	add.w	sl, r4, #26
 80051d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80051d6:	1a9b      	subs	r3, r3, r2
 80051d8:	eba3 0309 	sub.w	r3, r3, r9
 80051dc:	4543      	cmp	r3, r8
 80051de:	f77f af79 	ble.w	80050d4 <_printf_float+0x24c>
 80051e2:	2301      	movs	r3, #1
 80051e4:	4652      	mov	r2, sl
 80051e6:	4631      	mov	r1, r6
 80051e8:	4628      	mov	r0, r5
 80051ea:	47b8      	blx	r7
 80051ec:	3001      	adds	r0, #1
 80051ee:	f43f aeaa 	beq.w	8004f46 <_printf_float+0xbe>
 80051f2:	f108 0801 	add.w	r8, r8, #1
 80051f6:	e7ec      	b.n	80051d2 <_printf_float+0x34a>
 80051f8:	4613      	mov	r3, r2
 80051fa:	4631      	mov	r1, r6
 80051fc:	4642      	mov	r2, r8
 80051fe:	4628      	mov	r0, r5
 8005200:	47b8      	blx	r7
 8005202:	3001      	adds	r0, #1
 8005204:	d1c0      	bne.n	8005188 <_printf_float+0x300>
 8005206:	e69e      	b.n	8004f46 <_printf_float+0xbe>
 8005208:	2301      	movs	r3, #1
 800520a:	4631      	mov	r1, r6
 800520c:	4628      	mov	r0, r5
 800520e:	9205      	str	r2, [sp, #20]
 8005210:	47b8      	blx	r7
 8005212:	3001      	adds	r0, #1
 8005214:	f43f ae97 	beq.w	8004f46 <_printf_float+0xbe>
 8005218:	9a05      	ldr	r2, [sp, #20]
 800521a:	f10b 0b01 	add.w	fp, fp, #1
 800521e:	e7b9      	b.n	8005194 <_printf_float+0x30c>
 8005220:	ee18 3a10 	vmov	r3, s16
 8005224:	4652      	mov	r2, sl
 8005226:	4631      	mov	r1, r6
 8005228:	4628      	mov	r0, r5
 800522a:	47b8      	blx	r7
 800522c:	3001      	adds	r0, #1
 800522e:	d1be      	bne.n	80051ae <_printf_float+0x326>
 8005230:	e689      	b.n	8004f46 <_printf_float+0xbe>
 8005232:	9a05      	ldr	r2, [sp, #20]
 8005234:	464b      	mov	r3, r9
 8005236:	4442      	add	r2, r8
 8005238:	4631      	mov	r1, r6
 800523a:	4628      	mov	r0, r5
 800523c:	47b8      	blx	r7
 800523e:	3001      	adds	r0, #1
 8005240:	d1c1      	bne.n	80051c6 <_printf_float+0x33e>
 8005242:	e680      	b.n	8004f46 <_printf_float+0xbe>
 8005244:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005246:	2a01      	cmp	r2, #1
 8005248:	dc01      	bgt.n	800524e <_printf_float+0x3c6>
 800524a:	07db      	lsls	r3, r3, #31
 800524c:	d53a      	bpl.n	80052c4 <_printf_float+0x43c>
 800524e:	2301      	movs	r3, #1
 8005250:	4642      	mov	r2, r8
 8005252:	4631      	mov	r1, r6
 8005254:	4628      	mov	r0, r5
 8005256:	47b8      	blx	r7
 8005258:	3001      	adds	r0, #1
 800525a:	f43f ae74 	beq.w	8004f46 <_printf_float+0xbe>
 800525e:	ee18 3a10 	vmov	r3, s16
 8005262:	4652      	mov	r2, sl
 8005264:	4631      	mov	r1, r6
 8005266:	4628      	mov	r0, r5
 8005268:	47b8      	blx	r7
 800526a:	3001      	adds	r0, #1
 800526c:	f43f ae6b 	beq.w	8004f46 <_printf_float+0xbe>
 8005270:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8005274:	2200      	movs	r2, #0
 8005276:	2300      	movs	r3, #0
 8005278:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800527c:	f7fb fc24 	bl	8000ac8 <__aeabi_dcmpeq>
 8005280:	b9d8      	cbnz	r0, 80052ba <_printf_float+0x432>
 8005282:	f10a 33ff 	add.w	r3, sl, #4294967295
 8005286:	f108 0201 	add.w	r2, r8, #1
 800528a:	4631      	mov	r1, r6
 800528c:	4628      	mov	r0, r5
 800528e:	47b8      	blx	r7
 8005290:	3001      	adds	r0, #1
 8005292:	d10e      	bne.n	80052b2 <_printf_float+0x42a>
 8005294:	e657      	b.n	8004f46 <_printf_float+0xbe>
 8005296:	2301      	movs	r3, #1
 8005298:	4652      	mov	r2, sl
 800529a:	4631      	mov	r1, r6
 800529c:	4628      	mov	r0, r5
 800529e:	47b8      	blx	r7
 80052a0:	3001      	adds	r0, #1
 80052a2:	f43f ae50 	beq.w	8004f46 <_printf_float+0xbe>
 80052a6:	f108 0801 	add.w	r8, r8, #1
 80052aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80052ac:	3b01      	subs	r3, #1
 80052ae:	4543      	cmp	r3, r8
 80052b0:	dcf1      	bgt.n	8005296 <_printf_float+0x40e>
 80052b2:	464b      	mov	r3, r9
 80052b4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80052b8:	e6da      	b.n	8005070 <_printf_float+0x1e8>
 80052ba:	f04f 0800 	mov.w	r8, #0
 80052be:	f104 0a1a 	add.w	sl, r4, #26
 80052c2:	e7f2      	b.n	80052aa <_printf_float+0x422>
 80052c4:	2301      	movs	r3, #1
 80052c6:	4642      	mov	r2, r8
 80052c8:	e7df      	b.n	800528a <_printf_float+0x402>
 80052ca:	2301      	movs	r3, #1
 80052cc:	464a      	mov	r2, r9
 80052ce:	4631      	mov	r1, r6
 80052d0:	4628      	mov	r0, r5
 80052d2:	47b8      	blx	r7
 80052d4:	3001      	adds	r0, #1
 80052d6:	f43f ae36 	beq.w	8004f46 <_printf_float+0xbe>
 80052da:	f108 0801 	add.w	r8, r8, #1
 80052de:	68e3      	ldr	r3, [r4, #12]
 80052e0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80052e2:	1a5b      	subs	r3, r3, r1
 80052e4:	4543      	cmp	r3, r8
 80052e6:	dcf0      	bgt.n	80052ca <_printf_float+0x442>
 80052e8:	e6f8      	b.n	80050dc <_printf_float+0x254>
 80052ea:	f04f 0800 	mov.w	r8, #0
 80052ee:	f104 0919 	add.w	r9, r4, #25
 80052f2:	e7f4      	b.n	80052de <_printf_float+0x456>

080052f4 <_printf_common>:
 80052f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80052f8:	4616      	mov	r6, r2
 80052fa:	4699      	mov	r9, r3
 80052fc:	688a      	ldr	r2, [r1, #8]
 80052fe:	690b      	ldr	r3, [r1, #16]
 8005300:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005304:	4293      	cmp	r3, r2
 8005306:	bfb8      	it	lt
 8005308:	4613      	movlt	r3, r2
 800530a:	6033      	str	r3, [r6, #0]
 800530c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005310:	4607      	mov	r7, r0
 8005312:	460c      	mov	r4, r1
 8005314:	b10a      	cbz	r2, 800531a <_printf_common+0x26>
 8005316:	3301      	adds	r3, #1
 8005318:	6033      	str	r3, [r6, #0]
 800531a:	6823      	ldr	r3, [r4, #0]
 800531c:	0699      	lsls	r1, r3, #26
 800531e:	bf42      	ittt	mi
 8005320:	6833      	ldrmi	r3, [r6, #0]
 8005322:	3302      	addmi	r3, #2
 8005324:	6033      	strmi	r3, [r6, #0]
 8005326:	6825      	ldr	r5, [r4, #0]
 8005328:	f015 0506 	ands.w	r5, r5, #6
 800532c:	d106      	bne.n	800533c <_printf_common+0x48>
 800532e:	f104 0a19 	add.w	sl, r4, #25
 8005332:	68e3      	ldr	r3, [r4, #12]
 8005334:	6832      	ldr	r2, [r6, #0]
 8005336:	1a9b      	subs	r3, r3, r2
 8005338:	42ab      	cmp	r3, r5
 800533a:	dc26      	bgt.n	800538a <_printf_common+0x96>
 800533c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005340:	1e13      	subs	r3, r2, #0
 8005342:	6822      	ldr	r2, [r4, #0]
 8005344:	bf18      	it	ne
 8005346:	2301      	movne	r3, #1
 8005348:	0692      	lsls	r2, r2, #26
 800534a:	d42b      	bmi.n	80053a4 <_printf_common+0xb0>
 800534c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005350:	4649      	mov	r1, r9
 8005352:	4638      	mov	r0, r7
 8005354:	47c0      	blx	r8
 8005356:	3001      	adds	r0, #1
 8005358:	d01e      	beq.n	8005398 <_printf_common+0xa4>
 800535a:	6823      	ldr	r3, [r4, #0]
 800535c:	6922      	ldr	r2, [r4, #16]
 800535e:	f003 0306 	and.w	r3, r3, #6
 8005362:	2b04      	cmp	r3, #4
 8005364:	bf02      	ittt	eq
 8005366:	68e5      	ldreq	r5, [r4, #12]
 8005368:	6833      	ldreq	r3, [r6, #0]
 800536a:	1aed      	subeq	r5, r5, r3
 800536c:	68a3      	ldr	r3, [r4, #8]
 800536e:	bf0c      	ite	eq
 8005370:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005374:	2500      	movne	r5, #0
 8005376:	4293      	cmp	r3, r2
 8005378:	bfc4      	itt	gt
 800537a:	1a9b      	subgt	r3, r3, r2
 800537c:	18ed      	addgt	r5, r5, r3
 800537e:	2600      	movs	r6, #0
 8005380:	341a      	adds	r4, #26
 8005382:	42b5      	cmp	r5, r6
 8005384:	d11a      	bne.n	80053bc <_printf_common+0xc8>
 8005386:	2000      	movs	r0, #0
 8005388:	e008      	b.n	800539c <_printf_common+0xa8>
 800538a:	2301      	movs	r3, #1
 800538c:	4652      	mov	r2, sl
 800538e:	4649      	mov	r1, r9
 8005390:	4638      	mov	r0, r7
 8005392:	47c0      	blx	r8
 8005394:	3001      	adds	r0, #1
 8005396:	d103      	bne.n	80053a0 <_printf_common+0xac>
 8005398:	f04f 30ff 	mov.w	r0, #4294967295
 800539c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80053a0:	3501      	adds	r5, #1
 80053a2:	e7c6      	b.n	8005332 <_printf_common+0x3e>
 80053a4:	18e1      	adds	r1, r4, r3
 80053a6:	1c5a      	adds	r2, r3, #1
 80053a8:	2030      	movs	r0, #48	; 0x30
 80053aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80053ae:	4422      	add	r2, r4
 80053b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80053b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80053b8:	3302      	adds	r3, #2
 80053ba:	e7c7      	b.n	800534c <_printf_common+0x58>
 80053bc:	2301      	movs	r3, #1
 80053be:	4622      	mov	r2, r4
 80053c0:	4649      	mov	r1, r9
 80053c2:	4638      	mov	r0, r7
 80053c4:	47c0      	blx	r8
 80053c6:	3001      	adds	r0, #1
 80053c8:	d0e6      	beq.n	8005398 <_printf_common+0xa4>
 80053ca:	3601      	adds	r6, #1
 80053cc:	e7d9      	b.n	8005382 <_printf_common+0x8e>
	...

080053d0 <_printf_i>:
 80053d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80053d4:	7e0f      	ldrb	r7, [r1, #24]
 80053d6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80053d8:	2f78      	cmp	r7, #120	; 0x78
 80053da:	4691      	mov	r9, r2
 80053dc:	4680      	mov	r8, r0
 80053de:	460c      	mov	r4, r1
 80053e0:	469a      	mov	sl, r3
 80053e2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80053e6:	d807      	bhi.n	80053f8 <_printf_i+0x28>
 80053e8:	2f62      	cmp	r7, #98	; 0x62
 80053ea:	d80a      	bhi.n	8005402 <_printf_i+0x32>
 80053ec:	2f00      	cmp	r7, #0
 80053ee:	f000 80d4 	beq.w	800559a <_printf_i+0x1ca>
 80053f2:	2f58      	cmp	r7, #88	; 0x58
 80053f4:	f000 80c0 	beq.w	8005578 <_printf_i+0x1a8>
 80053f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005400:	e03a      	b.n	8005478 <_printf_i+0xa8>
 8005402:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005406:	2b15      	cmp	r3, #21
 8005408:	d8f6      	bhi.n	80053f8 <_printf_i+0x28>
 800540a:	a101      	add	r1, pc, #4	; (adr r1, 8005410 <_printf_i+0x40>)
 800540c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005410:	08005469 	.word	0x08005469
 8005414:	0800547d 	.word	0x0800547d
 8005418:	080053f9 	.word	0x080053f9
 800541c:	080053f9 	.word	0x080053f9
 8005420:	080053f9 	.word	0x080053f9
 8005424:	080053f9 	.word	0x080053f9
 8005428:	0800547d 	.word	0x0800547d
 800542c:	080053f9 	.word	0x080053f9
 8005430:	080053f9 	.word	0x080053f9
 8005434:	080053f9 	.word	0x080053f9
 8005438:	080053f9 	.word	0x080053f9
 800543c:	08005581 	.word	0x08005581
 8005440:	080054a9 	.word	0x080054a9
 8005444:	0800553b 	.word	0x0800553b
 8005448:	080053f9 	.word	0x080053f9
 800544c:	080053f9 	.word	0x080053f9
 8005450:	080055a3 	.word	0x080055a3
 8005454:	080053f9 	.word	0x080053f9
 8005458:	080054a9 	.word	0x080054a9
 800545c:	080053f9 	.word	0x080053f9
 8005460:	080053f9 	.word	0x080053f9
 8005464:	08005543 	.word	0x08005543
 8005468:	682b      	ldr	r3, [r5, #0]
 800546a:	1d1a      	adds	r2, r3, #4
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	602a      	str	r2, [r5, #0]
 8005470:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005474:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005478:	2301      	movs	r3, #1
 800547a:	e09f      	b.n	80055bc <_printf_i+0x1ec>
 800547c:	6820      	ldr	r0, [r4, #0]
 800547e:	682b      	ldr	r3, [r5, #0]
 8005480:	0607      	lsls	r7, r0, #24
 8005482:	f103 0104 	add.w	r1, r3, #4
 8005486:	6029      	str	r1, [r5, #0]
 8005488:	d501      	bpl.n	800548e <_printf_i+0xbe>
 800548a:	681e      	ldr	r6, [r3, #0]
 800548c:	e003      	b.n	8005496 <_printf_i+0xc6>
 800548e:	0646      	lsls	r6, r0, #25
 8005490:	d5fb      	bpl.n	800548a <_printf_i+0xba>
 8005492:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005496:	2e00      	cmp	r6, #0
 8005498:	da03      	bge.n	80054a2 <_printf_i+0xd2>
 800549a:	232d      	movs	r3, #45	; 0x2d
 800549c:	4276      	negs	r6, r6
 800549e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054a2:	485a      	ldr	r0, [pc, #360]	; (800560c <_printf_i+0x23c>)
 80054a4:	230a      	movs	r3, #10
 80054a6:	e012      	b.n	80054ce <_printf_i+0xfe>
 80054a8:	682b      	ldr	r3, [r5, #0]
 80054aa:	6820      	ldr	r0, [r4, #0]
 80054ac:	1d19      	adds	r1, r3, #4
 80054ae:	6029      	str	r1, [r5, #0]
 80054b0:	0605      	lsls	r5, r0, #24
 80054b2:	d501      	bpl.n	80054b8 <_printf_i+0xe8>
 80054b4:	681e      	ldr	r6, [r3, #0]
 80054b6:	e002      	b.n	80054be <_printf_i+0xee>
 80054b8:	0641      	lsls	r1, r0, #25
 80054ba:	d5fb      	bpl.n	80054b4 <_printf_i+0xe4>
 80054bc:	881e      	ldrh	r6, [r3, #0]
 80054be:	4853      	ldr	r0, [pc, #332]	; (800560c <_printf_i+0x23c>)
 80054c0:	2f6f      	cmp	r7, #111	; 0x6f
 80054c2:	bf0c      	ite	eq
 80054c4:	2308      	moveq	r3, #8
 80054c6:	230a      	movne	r3, #10
 80054c8:	2100      	movs	r1, #0
 80054ca:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80054ce:	6865      	ldr	r5, [r4, #4]
 80054d0:	60a5      	str	r5, [r4, #8]
 80054d2:	2d00      	cmp	r5, #0
 80054d4:	bfa2      	ittt	ge
 80054d6:	6821      	ldrge	r1, [r4, #0]
 80054d8:	f021 0104 	bicge.w	r1, r1, #4
 80054dc:	6021      	strge	r1, [r4, #0]
 80054de:	b90e      	cbnz	r6, 80054e4 <_printf_i+0x114>
 80054e0:	2d00      	cmp	r5, #0
 80054e2:	d04b      	beq.n	800557c <_printf_i+0x1ac>
 80054e4:	4615      	mov	r5, r2
 80054e6:	fbb6 f1f3 	udiv	r1, r6, r3
 80054ea:	fb03 6711 	mls	r7, r3, r1, r6
 80054ee:	5dc7      	ldrb	r7, [r0, r7]
 80054f0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80054f4:	4637      	mov	r7, r6
 80054f6:	42bb      	cmp	r3, r7
 80054f8:	460e      	mov	r6, r1
 80054fa:	d9f4      	bls.n	80054e6 <_printf_i+0x116>
 80054fc:	2b08      	cmp	r3, #8
 80054fe:	d10b      	bne.n	8005518 <_printf_i+0x148>
 8005500:	6823      	ldr	r3, [r4, #0]
 8005502:	07de      	lsls	r6, r3, #31
 8005504:	d508      	bpl.n	8005518 <_printf_i+0x148>
 8005506:	6923      	ldr	r3, [r4, #16]
 8005508:	6861      	ldr	r1, [r4, #4]
 800550a:	4299      	cmp	r1, r3
 800550c:	bfde      	ittt	le
 800550e:	2330      	movle	r3, #48	; 0x30
 8005510:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005514:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005518:	1b52      	subs	r2, r2, r5
 800551a:	6122      	str	r2, [r4, #16]
 800551c:	f8cd a000 	str.w	sl, [sp]
 8005520:	464b      	mov	r3, r9
 8005522:	aa03      	add	r2, sp, #12
 8005524:	4621      	mov	r1, r4
 8005526:	4640      	mov	r0, r8
 8005528:	f7ff fee4 	bl	80052f4 <_printf_common>
 800552c:	3001      	adds	r0, #1
 800552e:	d14a      	bne.n	80055c6 <_printf_i+0x1f6>
 8005530:	f04f 30ff 	mov.w	r0, #4294967295
 8005534:	b004      	add	sp, #16
 8005536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	f043 0320 	orr.w	r3, r3, #32
 8005540:	6023      	str	r3, [r4, #0]
 8005542:	4833      	ldr	r0, [pc, #204]	; (8005610 <_printf_i+0x240>)
 8005544:	2778      	movs	r7, #120	; 0x78
 8005546:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800554a:	6823      	ldr	r3, [r4, #0]
 800554c:	6829      	ldr	r1, [r5, #0]
 800554e:	061f      	lsls	r7, r3, #24
 8005550:	f851 6b04 	ldr.w	r6, [r1], #4
 8005554:	d402      	bmi.n	800555c <_printf_i+0x18c>
 8005556:	065f      	lsls	r7, r3, #25
 8005558:	bf48      	it	mi
 800555a:	b2b6      	uxthmi	r6, r6
 800555c:	07df      	lsls	r7, r3, #31
 800555e:	bf48      	it	mi
 8005560:	f043 0320 	orrmi.w	r3, r3, #32
 8005564:	6029      	str	r1, [r5, #0]
 8005566:	bf48      	it	mi
 8005568:	6023      	strmi	r3, [r4, #0]
 800556a:	b91e      	cbnz	r6, 8005574 <_printf_i+0x1a4>
 800556c:	6823      	ldr	r3, [r4, #0]
 800556e:	f023 0320 	bic.w	r3, r3, #32
 8005572:	6023      	str	r3, [r4, #0]
 8005574:	2310      	movs	r3, #16
 8005576:	e7a7      	b.n	80054c8 <_printf_i+0xf8>
 8005578:	4824      	ldr	r0, [pc, #144]	; (800560c <_printf_i+0x23c>)
 800557a:	e7e4      	b.n	8005546 <_printf_i+0x176>
 800557c:	4615      	mov	r5, r2
 800557e:	e7bd      	b.n	80054fc <_printf_i+0x12c>
 8005580:	682b      	ldr	r3, [r5, #0]
 8005582:	6826      	ldr	r6, [r4, #0]
 8005584:	6961      	ldr	r1, [r4, #20]
 8005586:	1d18      	adds	r0, r3, #4
 8005588:	6028      	str	r0, [r5, #0]
 800558a:	0635      	lsls	r5, r6, #24
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	d501      	bpl.n	8005594 <_printf_i+0x1c4>
 8005590:	6019      	str	r1, [r3, #0]
 8005592:	e002      	b.n	800559a <_printf_i+0x1ca>
 8005594:	0670      	lsls	r0, r6, #25
 8005596:	d5fb      	bpl.n	8005590 <_printf_i+0x1c0>
 8005598:	8019      	strh	r1, [r3, #0]
 800559a:	2300      	movs	r3, #0
 800559c:	6123      	str	r3, [r4, #16]
 800559e:	4615      	mov	r5, r2
 80055a0:	e7bc      	b.n	800551c <_printf_i+0x14c>
 80055a2:	682b      	ldr	r3, [r5, #0]
 80055a4:	1d1a      	adds	r2, r3, #4
 80055a6:	602a      	str	r2, [r5, #0]
 80055a8:	681d      	ldr	r5, [r3, #0]
 80055aa:	6862      	ldr	r2, [r4, #4]
 80055ac:	2100      	movs	r1, #0
 80055ae:	4628      	mov	r0, r5
 80055b0:	f7fa fe0e 	bl	80001d0 <memchr>
 80055b4:	b108      	cbz	r0, 80055ba <_printf_i+0x1ea>
 80055b6:	1b40      	subs	r0, r0, r5
 80055b8:	6060      	str	r0, [r4, #4]
 80055ba:	6863      	ldr	r3, [r4, #4]
 80055bc:	6123      	str	r3, [r4, #16]
 80055be:	2300      	movs	r3, #0
 80055c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80055c4:	e7aa      	b.n	800551c <_printf_i+0x14c>
 80055c6:	6923      	ldr	r3, [r4, #16]
 80055c8:	462a      	mov	r2, r5
 80055ca:	4649      	mov	r1, r9
 80055cc:	4640      	mov	r0, r8
 80055ce:	47d0      	blx	sl
 80055d0:	3001      	adds	r0, #1
 80055d2:	d0ad      	beq.n	8005530 <_printf_i+0x160>
 80055d4:	6823      	ldr	r3, [r4, #0]
 80055d6:	079b      	lsls	r3, r3, #30
 80055d8:	d413      	bmi.n	8005602 <_printf_i+0x232>
 80055da:	68e0      	ldr	r0, [r4, #12]
 80055dc:	9b03      	ldr	r3, [sp, #12]
 80055de:	4298      	cmp	r0, r3
 80055e0:	bfb8      	it	lt
 80055e2:	4618      	movlt	r0, r3
 80055e4:	e7a6      	b.n	8005534 <_printf_i+0x164>
 80055e6:	2301      	movs	r3, #1
 80055e8:	4632      	mov	r2, r6
 80055ea:	4649      	mov	r1, r9
 80055ec:	4640      	mov	r0, r8
 80055ee:	47d0      	blx	sl
 80055f0:	3001      	adds	r0, #1
 80055f2:	d09d      	beq.n	8005530 <_printf_i+0x160>
 80055f4:	3501      	adds	r5, #1
 80055f6:	68e3      	ldr	r3, [r4, #12]
 80055f8:	9903      	ldr	r1, [sp, #12]
 80055fa:	1a5b      	subs	r3, r3, r1
 80055fc:	42ab      	cmp	r3, r5
 80055fe:	dcf2      	bgt.n	80055e6 <_printf_i+0x216>
 8005600:	e7eb      	b.n	80055da <_printf_i+0x20a>
 8005602:	2500      	movs	r5, #0
 8005604:	f104 0619 	add.w	r6, r4, #25
 8005608:	e7f5      	b.n	80055f6 <_printf_i+0x226>
 800560a:	bf00      	nop
 800560c:	080097f2 	.word	0x080097f2
 8005610:	08009803 	.word	0x08009803

08005614 <_scanf_float>:
 8005614:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005618:	b087      	sub	sp, #28
 800561a:	4617      	mov	r7, r2
 800561c:	9303      	str	r3, [sp, #12]
 800561e:	688b      	ldr	r3, [r1, #8]
 8005620:	1e5a      	subs	r2, r3, #1
 8005622:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005626:	bf83      	ittte	hi
 8005628:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800562c:	195b      	addhi	r3, r3, r5
 800562e:	9302      	strhi	r3, [sp, #8]
 8005630:	2300      	movls	r3, #0
 8005632:	bf86      	itte	hi
 8005634:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005638:	608b      	strhi	r3, [r1, #8]
 800563a:	9302      	strls	r3, [sp, #8]
 800563c:	680b      	ldr	r3, [r1, #0]
 800563e:	468b      	mov	fp, r1
 8005640:	2500      	movs	r5, #0
 8005642:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005646:	f84b 3b1c 	str.w	r3, [fp], #28
 800564a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800564e:	4680      	mov	r8, r0
 8005650:	460c      	mov	r4, r1
 8005652:	465e      	mov	r6, fp
 8005654:	46aa      	mov	sl, r5
 8005656:	46a9      	mov	r9, r5
 8005658:	9501      	str	r5, [sp, #4]
 800565a:	68a2      	ldr	r2, [r4, #8]
 800565c:	b152      	cbz	r2, 8005674 <_scanf_float+0x60>
 800565e:	683b      	ldr	r3, [r7, #0]
 8005660:	781b      	ldrb	r3, [r3, #0]
 8005662:	2b4e      	cmp	r3, #78	; 0x4e
 8005664:	d864      	bhi.n	8005730 <_scanf_float+0x11c>
 8005666:	2b40      	cmp	r3, #64	; 0x40
 8005668:	d83c      	bhi.n	80056e4 <_scanf_float+0xd0>
 800566a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800566e:	b2c8      	uxtb	r0, r1
 8005670:	280e      	cmp	r0, #14
 8005672:	d93a      	bls.n	80056ea <_scanf_float+0xd6>
 8005674:	f1b9 0f00 	cmp.w	r9, #0
 8005678:	d003      	beq.n	8005682 <_scanf_float+0x6e>
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005680:	6023      	str	r3, [r4, #0]
 8005682:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005686:	f1ba 0f01 	cmp.w	sl, #1
 800568a:	f200 8113 	bhi.w	80058b4 <_scanf_float+0x2a0>
 800568e:	455e      	cmp	r6, fp
 8005690:	f200 8105 	bhi.w	800589e <_scanf_float+0x28a>
 8005694:	2501      	movs	r5, #1
 8005696:	4628      	mov	r0, r5
 8005698:	b007      	add	sp, #28
 800569a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800569e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80056a2:	2a0d      	cmp	r2, #13
 80056a4:	d8e6      	bhi.n	8005674 <_scanf_float+0x60>
 80056a6:	a101      	add	r1, pc, #4	; (adr r1, 80056ac <_scanf_float+0x98>)
 80056a8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80056ac:	080057eb 	.word	0x080057eb
 80056b0:	08005675 	.word	0x08005675
 80056b4:	08005675 	.word	0x08005675
 80056b8:	08005675 	.word	0x08005675
 80056bc:	0800584b 	.word	0x0800584b
 80056c0:	08005823 	.word	0x08005823
 80056c4:	08005675 	.word	0x08005675
 80056c8:	08005675 	.word	0x08005675
 80056cc:	080057f9 	.word	0x080057f9
 80056d0:	08005675 	.word	0x08005675
 80056d4:	08005675 	.word	0x08005675
 80056d8:	08005675 	.word	0x08005675
 80056dc:	08005675 	.word	0x08005675
 80056e0:	080057b1 	.word	0x080057b1
 80056e4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80056e8:	e7db      	b.n	80056a2 <_scanf_float+0x8e>
 80056ea:	290e      	cmp	r1, #14
 80056ec:	d8c2      	bhi.n	8005674 <_scanf_float+0x60>
 80056ee:	a001      	add	r0, pc, #4	; (adr r0, 80056f4 <_scanf_float+0xe0>)
 80056f0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80056f4:	080057a3 	.word	0x080057a3
 80056f8:	08005675 	.word	0x08005675
 80056fc:	080057a3 	.word	0x080057a3
 8005700:	08005837 	.word	0x08005837
 8005704:	08005675 	.word	0x08005675
 8005708:	08005751 	.word	0x08005751
 800570c:	0800578d 	.word	0x0800578d
 8005710:	0800578d 	.word	0x0800578d
 8005714:	0800578d 	.word	0x0800578d
 8005718:	0800578d 	.word	0x0800578d
 800571c:	0800578d 	.word	0x0800578d
 8005720:	0800578d 	.word	0x0800578d
 8005724:	0800578d 	.word	0x0800578d
 8005728:	0800578d 	.word	0x0800578d
 800572c:	0800578d 	.word	0x0800578d
 8005730:	2b6e      	cmp	r3, #110	; 0x6e
 8005732:	d809      	bhi.n	8005748 <_scanf_float+0x134>
 8005734:	2b60      	cmp	r3, #96	; 0x60
 8005736:	d8b2      	bhi.n	800569e <_scanf_float+0x8a>
 8005738:	2b54      	cmp	r3, #84	; 0x54
 800573a:	d077      	beq.n	800582c <_scanf_float+0x218>
 800573c:	2b59      	cmp	r3, #89	; 0x59
 800573e:	d199      	bne.n	8005674 <_scanf_float+0x60>
 8005740:	2d07      	cmp	r5, #7
 8005742:	d197      	bne.n	8005674 <_scanf_float+0x60>
 8005744:	2508      	movs	r5, #8
 8005746:	e029      	b.n	800579c <_scanf_float+0x188>
 8005748:	2b74      	cmp	r3, #116	; 0x74
 800574a:	d06f      	beq.n	800582c <_scanf_float+0x218>
 800574c:	2b79      	cmp	r3, #121	; 0x79
 800574e:	e7f6      	b.n	800573e <_scanf_float+0x12a>
 8005750:	6821      	ldr	r1, [r4, #0]
 8005752:	05c8      	lsls	r0, r1, #23
 8005754:	d51a      	bpl.n	800578c <_scanf_float+0x178>
 8005756:	9b02      	ldr	r3, [sp, #8]
 8005758:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800575c:	6021      	str	r1, [r4, #0]
 800575e:	f109 0901 	add.w	r9, r9, #1
 8005762:	b11b      	cbz	r3, 800576c <_scanf_float+0x158>
 8005764:	3b01      	subs	r3, #1
 8005766:	3201      	adds	r2, #1
 8005768:	9302      	str	r3, [sp, #8]
 800576a:	60a2      	str	r2, [r4, #8]
 800576c:	68a3      	ldr	r3, [r4, #8]
 800576e:	3b01      	subs	r3, #1
 8005770:	60a3      	str	r3, [r4, #8]
 8005772:	6923      	ldr	r3, [r4, #16]
 8005774:	3301      	adds	r3, #1
 8005776:	6123      	str	r3, [r4, #16]
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	3b01      	subs	r3, #1
 800577c:	2b00      	cmp	r3, #0
 800577e:	607b      	str	r3, [r7, #4]
 8005780:	f340 8084 	ble.w	800588c <_scanf_float+0x278>
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	3301      	adds	r3, #1
 8005788:	603b      	str	r3, [r7, #0]
 800578a:	e766      	b.n	800565a <_scanf_float+0x46>
 800578c:	eb1a 0f05 	cmn.w	sl, r5
 8005790:	f47f af70 	bne.w	8005674 <_scanf_float+0x60>
 8005794:	6822      	ldr	r2, [r4, #0]
 8005796:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800579a:	6022      	str	r2, [r4, #0]
 800579c:	f806 3b01 	strb.w	r3, [r6], #1
 80057a0:	e7e4      	b.n	800576c <_scanf_float+0x158>
 80057a2:	6822      	ldr	r2, [r4, #0]
 80057a4:	0610      	lsls	r0, r2, #24
 80057a6:	f57f af65 	bpl.w	8005674 <_scanf_float+0x60>
 80057aa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80057ae:	e7f4      	b.n	800579a <_scanf_float+0x186>
 80057b0:	f1ba 0f00 	cmp.w	sl, #0
 80057b4:	d10e      	bne.n	80057d4 <_scanf_float+0x1c0>
 80057b6:	f1b9 0f00 	cmp.w	r9, #0
 80057ba:	d10e      	bne.n	80057da <_scanf_float+0x1c6>
 80057bc:	6822      	ldr	r2, [r4, #0]
 80057be:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80057c2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80057c6:	d108      	bne.n	80057da <_scanf_float+0x1c6>
 80057c8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80057cc:	6022      	str	r2, [r4, #0]
 80057ce:	f04f 0a01 	mov.w	sl, #1
 80057d2:	e7e3      	b.n	800579c <_scanf_float+0x188>
 80057d4:	f1ba 0f02 	cmp.w	sl, #2
 80057d8:	d055      	beq.n	8005886 <_scanf_float+0x272>
 80057da:	2d01      	cmp	r5, #1
 80057dc:	d002      	beq.n	80057e4 <_scanf_float+0x1d0>
 80057de:	2d04      	cmp	r5, #4
 80057e0:	f47f af48 	bne.w	8005674 <_scanf_float+0x60>
 80057e4:	3501      	adds	r5, #1
 80057e6:	b2ed      	uxtb	r5, r5
 80057e8:	e7d8      	b.n	800579c <_scanf_float+0x188>
 80057ea:	f1ba 0f01 	cmp.w	sl, #1
 80057ee:	f47f af41 	bne.w	8005674 <_scanf_float+0x60>
 80057f2:	f04f 0a02 	mov.w	sl, #2
 80057f6:	e7d1      	b.n	800579c <_scanf_float+0x188>
 80057f8:	b97d      	cbnz	r5, 800581a <_scanf_float+0x206>
 80057fa:	f1b9 0f00 	cmp.w	r9, #0
 80057fe:	f47f af3c 	bne.w	800567a <_scanf_float+0x66>
 8005802:	6822      	ldr	r2, [r4, #0]
 8005804:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005808:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800580c:	f47f af39 	bne.w	8005682 <_scanf_float+0x6e>
 8005810:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005814:	6022      	str	r2, [r4, #0]
 8005816:	2501      	movs	r5, #1
 8005818:	e7c0      	b.n	800579c <_scanf_float+0x188>
 800581a:	2d03      	cmp	r5, #3
 800581c:	d0e2      	beq.n	80057e4 <_scanf_float+0x1d0>
 800581e:	2d05      	cmp	r5, #5
 8005820:	e7de      	b.n	80057e0 <_scanf_float+0x1cc>
 8005822:	2d02      	cmp	r5, #2
 8005824:	f47f af26 	bne.w	8005674 <_scanf_float+0x60>
 8005828:	2503      	movs	r5, #3
 800582a:	e7b7      	b.n	800579c <_scanf_float+0x188>
 800582c:	2d06      	cmp	r5, #6
 800582e:	f47f af21 	bne.w	8005674 <_scanf_float+0x60>
 8005832:	2507      	movs	r5, #7
 8005834:	e7b2      	b.n	800579c <_scanf_float+0x188>
 8005836:	6822      	ldr	r2, [r4, #0]
 8005838:	0591      	lsls	r1, r2, #22
 800583a:	f57f af1b 	bpl.w	8005674 <_scanf_float+0x60>
 800583e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005842:	6022      	str	r2, [r4, #0]
 8005844:	f8cd 9004 	str.w	r9, [sp, #4]
 8005848:	e7a8      	b.n	800579c <_scanf_float+0x188>
 800584a:	6822      	ldr	r2, [r4, #0]
 800584c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005850:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005854:	d006      	beq.n	8005864 <_scanf_float+0x250>
 8005856:	0550      	lsls	r0, r2, #21
 8005858:	f57f af0c 	bpl.w	8005674 <_scanf_float+0x60>
 800585c:	f1b9 0f00 	cmp.w	r9, #0
 8005860:	f43f af0f 	beq.w	8005682 <_scanf_float+0x6e>
 8005864:	0591      	lsls	r1, r2, #22
 8005866:	bf58      	it	pl
 8005868:	9901      	ldrpl	r1, [sp, #4]
 800586a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800586e:	bf58      	it	pl
 8005870:	eba9 0101 	subpl.w	r1, r9, r1
 8005874:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8005878:	bf58      	it	pl
 800587a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800587e:	6022      	str	r2, [r4, #0]
 8005880:	f04f 0900 	mov.w	r9, #0
 8005884:	e78a      	b.n	800579c <_scanf_float+0x188>
 8005886:	f04f 0a03 	mov.w	sl, #3
 800588a:	e787      	b.n	800579c <_scanf_float+0x188>
 800588c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8005890:	4639      	mov	r1, r7
 8005892:	4640      	mov	r0, r8
 8005894:	4798      	blx	r3
 8005896:	2800      	cmp	r0, #0
 8005898:	f43f aedf 	beq.w	800565a <_scanf_float+0x46>
 800589c:	e6ea      	b.n	8005674 <_scanf_float+0x60>
 800589e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058a2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80058a6:	463a      	mov	r2, r7
 80058a8:	4640      	mov	r0, r8
 80058aa:	4798      	blx	r3
 80058ac:	6923      	ldr	r3, [r4, #16]
 80058ae:	3b01      	subs	r3, #1
 80058b0:	6123      	str	r3, [r4, #16]
 80058b2:	e6ec      	b.n	800568e <_scanf_float+0x7a>
 80058b4:	1e6b      	subs	r3, r5, #1
 80058b6:	2b06      	cmp	r3, #6
 80058b8:	d825      	bhi.n	8005906 <_scanf_float+0x2f2>
 80058ba:	2d02      	cmp	r5, #2
 80058bc:	d836      	bhi.n	800592c <_scanf_float+0x318>
 80058be:	455e      	cmp	r6, fp
 80058c0:	f67f aee8 	bls.w	8005694 <_scanf_float+0x80>
 80058c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058c8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80058cc:	463a      	mov	r2, r7
 80058ce:	4640      	mov	r0, r8
 80058d0:	4798      	blx	r3
 80058d2:	6923      	ldr	r3, [r4, #16]
 80058d4:	3b01      	subs	r3, #1
 80058d6:	6123      	str	r3, [r4, #16]
 80058d8:	e7f1      	b.n	80058be <_scanf_float+0x2aa>
 80058da:	9802      	ldr	r0, [sp, #8]
 80058dc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80058e0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80058e4:	9002      	str	r0, [sp, #8]
 80058e6:	463a      	mov	r2, r7
 80058e8:	4640      	mov	r0, r8
 80058ea:	4798      	blx	r3
 80058ec:	6923      	ldr	r3, [r4, #16]
 80058ee:	3b01      	subs	r3, #1
 80058f0:	6123      	str	r3, [r4, #16]
 80058f2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058f6:	fa5f fa8a 	uxtb.w	sl, sl
 80058fa:	f1ba 0f02 	cmp.w	sl, #2
 80058fe:	d1ec      	bne.n	80058da <_scanf_float+0x2c6>
 8005900:	3d03      	subs	r5, #3
 8005902:	b2ed      	uxtb	r5, r5
 8005904:	1b76      	subs	r6, r6, r5
 8005906:	6823      	ldr	r3, [r4, #0]
 8005908:	05da      	lsls	r2, r3, #23
 800590a:	d52f      	bpl.n	800596c <_scanf_float+0x358>
 800590c:	055b      	lsls	r3, r3, #21
 800590e:	d510      	bpl.n	8005932 <_scanf_float+0x31e>
 8005910:	455e      	cmp	r6, fp
 8005912:	f67f aebf 	bls.w	8005694 <_scanf_float+0x80>
 8005916:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800591a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800591e:	463a      	mov	r2, r7
 8005920:	4640      	mov	r0, r8
 8005922:	4798      	blx	r3
 8005924:	6923      	ldr	r3, [r4, #16]
 8005926:	3b01      	subs	r3, #1
 8005928:	6123      	str	r3, [r4, #16]
 800592a:	e7f1      	b.n	8005910 <_scanf_float+0x2fc>
 800592c:	46aa      	mov	sl, r5
 800592e:	9602      	str	r6, [sp, #8]
 8005930:	e7df      	b.n	80058f2 <_scanf_float+0x2de>
 8005932:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005936:	6923      	ldr	r3, [r4, #16]
 8005938:	2965      	cmp	r1, #101	; 0x65
 800593a:	f103 33ff 	add.w	r3, r3, #4294967295
 800593e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005942:	6123      	str	r3, [r4, #16]
 8005944:	d00c      	beq.n	8005960 <_scanf_float+0x34c>
 8005946:	2945      	cmp	r1, #69	; 0x45
 8005948:	d00a      	beq.n	8005960 <_scanf_float+0x34c>
 800594a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800594e:	463a      	mov	r2, r7
 8005950:	4640      	mov	r0, r8
 8005952:	4798      	blx	r3
 8005954:	6923      	ldr	r3, [r4, #16]
 8005956:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800595a:	3b01      	subs	r3, #1
 800595c:	1eb5      	subs	r5, r6, #2
 800595e:	6123      	str	r3, [r4, #16]
 8005960:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005964:	463a      	mov	r2, r7
 8005966:	4640      	mov	r0, r8
 8005968:	4798      	blx	r3
 800596a:	462e      	mov	r6, r5
 800596c:	6825      	ldr	r5, [r4, #0]
 800596e:	f015 0510 	ands.w	r5, r5, #16
 8005972:	d158      	bne.n	8005a26 <_scanf_float+0x412>
 8005974:	7035      	strb	r5, [r6, #0]
 8005976:	6823      	ldr	r3, [r4, #0]
 8005978:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800597c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005980:	d11c      	bne.n	80059bc <_scanf_float+0x3a8>
 8005982:	9b01      	ldr	r3, [sp, #4]
 8005984:	454b      	cmp	r3, r9
 8005986:	eba3 0209 	sub.w	r2, r3, r9
 800598a:	d124      	bne.n	80059d6 <_scanf_float+0x3c2>
 800598c:	2200      	movs	r2, #0
 800598e:	4659      	mov	r1, fp
 8005990:	4640      	mov	r0, r8
 8005992:	f002 fd65 	bl	8008460 <_strtod_r>
 8005996:	9b03      	ldr	r3, [sp, #12]
 8005998:	6821      	ldr	r1, [r4, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f011 0f02 	tst.w	r1, #2
 80059a0:	ec57 6b10 	vmov	r6, r7, d0
 80059a4:	f103 0204 	add.w	r2, r3, #4
 80059a8:	d020      	beq.n	80059ec <_scanf_float+0x3d8>
 80059aa:	9903      	ldr	r1, [sp, #12]
 80059ac:	600a      	str	r2, [r1, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	e9c3 6700 	strd	r6, r7, [r3]
 80059b4:	68e3      	ldr	r3, [r4, #12]
 80059b6:	3301      	adds	r3, #1
 80059b8:	60e3      	str	r3, [r4, #12]
 80059ba:	e66c      	b.n	8005696 <_scanf_float+0x82>
 80059bc:	9b04      	ldr	r3, [sp, #16]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d0e4      	beq.n	800598c <_scanf_float+0x378>
 80059c2:	9905      	ldr	r1, [sp, #20]
 80059c4:	230a      	movs	r3, #10
 80059c6:	462a      	mov	r2, r5
 80059c8:	3101      	adds	r1, #1
 80059ca:	4640      	mov	r0, r8
 80059cc:	f002 fdd0 	bl	8008570 <_strtol_r>
 80059d0:	9b04      	ldr	r3, [sp, #16]
 80059d2:	9e05      	ldr	r6, [sp, #20]
 80059d4:	1ac2      	subs	r2, r0, r3
 80059d6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80059da:	429e      	cmp	r6, r3
 80059dc:	bf28      	it	cs
 80059de:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80059e2:	4912      	ldr	r1, [pc, #72]	; (8005a2c <_scanf_float+0x418>)
 80059e4:	4630      	mov	r0, r6
 80059e6:	f000 f989 	bl	8005cfc <siprintf>
 80059ea:	e7cf      	b.n	800598c <_scanf_float+0x378>
 80059ec:	f011 0f04 	tst.w	r1, #4
 80059f0:	9903      	ldr	r1, [sp, #12]
 80059f2:	600a      	str	r2, [r1, #0]
 80059f4:	d1db      	bne.n	80059ae <_scanf_float+0x39a>
 80059f6:	f8d3 8000 	ldr.w	r8, [r3]
 80059fa:	ee10 2a10 	vmov	r2, s0
 80059fe:	ee10 0a10 	vmov	r0, s0
 8005a02:	463b      	mov	r3, r7
 8005a04:	4639      	mov	r1, r7
 8005a06:	f7fb f891 	bl	8000b2c <__aeabi_dcmpun>
 8005a0a:	b128      	cbz	r0, 8005a18 <_scanf_float+0x404>
 8005a0c:	4808      	ldr	r0, [pc, #32]	; (8005a30 <_scanf_float+0x41c>)
 8005a0e:	f000 faed 	bl	8005fec <nanf>
 8005a12:	ed88 0a00 	vstr	s0, [r8]
 8005a16:	e7cd      	b.n	80059b4 <_scanf_float+0x3a0>
 8005a18:	4630      	mov	r0, r6
 8005a1a:	4639      	mov	r1, r7
 8005a1c:	f7fb f8e4 	bl	8000be8 <__aeabi_d2f>
 8005a20:	f8c8 0000 	str.w	r0, [r8]
 8005a24:	e7c6      	b.n	80059b4 <_scanf_float+0x3a0>
 8005a26:	2500      	movs	r5, #0
 8005a28:	e635      	b.n	8005696 <_scanf_float+0x82>
 8005a2a:	bf00      	nop
 8005a2c:	08009814 	.word	0x08009814
 8005a30:	08009ba5 	.word	0x08009ba5

08005a34 <std>:
 8005a34:	2300      	movs	r3, #0
 8005a36:	b510      	push	{r4, lr}
 8005a38:	4604      	mov	r4, r0
 8005a3a:	e9c0 3300 	strd	r3, r3, [r0]
 8005a3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005a42:	6083      	str	r3, [r0, #8]
 8005a44:	8181      	strh	r1, [r0, #12]
 8005a46:	6643      	str	r3, [r0, #100]	; 0x64
 8005a48:	81c2      	strh	r2, [r0, #14]
 8005a4a:	6183      	str	r3, [r0, #24]
 8005a4c:	4619      	mov	r1, r3
 8005a4e:	2208      	movs	r2, #8
 8005a50:	305c      	adds	r0, #92	; 0x5c
 8005a52:	f000 fa4b 	bl	8005eec <memset>
 8005a56:	4b0d      	ldr	r3, [pc, #52]	; (8005a8c <std+0x58>)
 8005a58:	6263      	str	r3, [r4, #36]	; 0x24
 8005a5a:	4b0d      	ldr	r3, [pc, #52]	; (8005a90 <std+0x5c>)
 8005a5c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005a5e:	4b0d      	ldr	r3, [pc, #52]	; (8005a94 <std+0x60>)
 8005a60:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005a62:	4b0d      	ldr	r3, [pc, #52]	; (8005a98 <std+0x64>)
 8005a64:	6323      	str	r3, [r4, #48]	; 0x30
 8005a66:	4b0d      	ldr	r3, [pc, #52]	; (8005a9c <std+0x68>)
 8005a68:	6224      	str	r4, [r4, #32]
 8005a6a:	429c      	cmp	r4, r3
 8005a6c:	d006      	beq.n	8005a7c <std+0x48>
 8005a6e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8005a72:	4294      	cmp	r4, r2
 8005a74:	d002      	beq.n	8005a7c <std+0x48>
 8005a76:	33d0      	adds	r3, #208	; 0xd0
 8005a78:	429c      	cmp	r4, r3
 8005a7a:	d105      	bne.n	8005a88 <std+0x54>
 8005a7c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a84:	f000 baae 	b.w	8005fe4 <__retarget_lock_init_recursive>
 8005a88:	bd10      	pop	{r4, pc}
 8005a8a:	bf00      	nop
 8005a8c:	08005d3d 	.word	0x08005d3d
 8005a90:	08005d5f 	.word	0x08005d5f
 8005a94:	08005d97 	.word	0x08005d97
 8005a98:	08005dbb 	.word	0x08005dbb
 8005a9c:	200003e0 	.word	0x200003e0

08005aa0 <stdio_exit_handler>:
 8005aa0:	4a02      	ldr	r2, [pc, #8]	; (8005aac <stdio_exit_handler+0xc>)
 8005aa2:	4903      	ldr	r1, [pc, #12]	; (8005ab0 <stdio_exit_handler+0x10>)
 8005aa4:	4803      	ldr	r0, [pc, #12]	; (8005ab4 <stdio_exit_handler+0x14>)
 8005aa6:	f000 b869 	b.w	8005b7c <_fwalk_sglue>
 8005aaa:	bf00      	nop
 8005aac:	20000020 	.word	0x20000020
 8005ab0:	08008bb9 	.word	0x08008bb9
 8005ab4:	2000002c 	.word	0x2000002c

08005ab8 <cleanup_stdio>:
 8005ab8:	6841      	ldr	r1, [r0, #4]
 8005aba:	4b0c      	ldr	r3, [pc, #48]	; (8005aec <cleanup_stdio+0x34>)
 8005abc:	4299      	cmp	r1, r3
 8005abe:	b510      	push	{r4, lr}
 8005ac0:	4604      	mov	r4, r0
 8005ac2:	d001      	beq.n	8005ac8 <cleanup_stdio+0x10>
 8005ac4:	f003 f878 	bl	8008bb8 <_fflush_r>
 8005ac8:	68a1      	ldr	r1, [r4, #8]
 8005aca:	4b09      	ldr	r3, [pc, #36]	; (8005af0 <cleanup_stdio+0x38>)
 8005acc:	4299      	cmp	r1, r3
 8005ace:	d002      	beq.n	8005ad6 <cleanup_stdio+0x1e>
 8005ad0:	4620      	mov	r0, r4
 8005ad2:	f003 f871 	bl	8008bb8 <_fflush_r>
 8005ad6:	68e1      	ldr	r1, [r4, #12]
 8005ad8:	4b06      	ldr	r3, [pc, #24]	; (8005af4 <cleanup_stdio+0x3c>)
 8005ada:	4299      	cmp	r1, r3
 8005adc:	d004      	beq.n	8005ae8 <cleanup_stdio+0x30>
 8005ade:	4620      	mov	r0, r4
 8005ae0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005ae4:	f003 b868 	b.w	8008bb8 <_fflush_r>
 8005ae8:	bd10      	pop	{r4, pc}
 8005aea:	bf00      	nop
 8005aec:	200003e0 	.word	0x200003e0
 8005af0:	20000448 	.word	0x20000448
 8005af4:	200004b0 	.word	0x200004b0

08005af8 <global_stdio_init.part.0>:
 8005af8:	b510      	push	{r4, lr}
 8005afa:	4b0b      	ldr	r3, [pc, #44]	; (8005b28 <global_stdio_init.part.0+0x30>)
 8005afc:	4c0b      	ldr	r4, [pc, #44]	; (8005b2c <global_stdio_init.part.0+0x34>)
 8005afe:	4a0c      	ldr	r2, [pc, #48]	; (8005b30 <global_stdio_init.part.0+0x38>)
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	4620      	mov	r0, r4
 8005b04:	2200      	movs	r2, #0
 8005b06:	2104      	movs	r1, #4
 8005b08:	f7ff ff94 	bl	8005a34 <std>
 8005b0c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005b10:	2201      	movs	r2, #1
 8005b12:	2109      	movs	r1, #9
 8005b14:	f7ff ff8e 	bl	8005a34 <std>
 8005b18:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005b1c:	2202      	movs	r2, #2
 8005b1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b22:	2112      	movs	r1, #18
 8005b24:	f7ff bf86 	b.w	8005a34 <std>
 8005b28:	20000518 	.word	0x20000518
 8005b2c:	200003e0 	.word	0x200003e0
 8005b30:	08005aa1 	.word	0x08005aa1

08005b34 <__sfp_lock_acquire>:
 8005b34:	4801      	ldr	r0, [pc, #4]	; (8005b3c <__sfp_lock_acquire+0x8>)
 8005b36:	f000 ba56 	b.w	8005fe6 <__retarget_lock_acquire_recursive>
 8005b3a:	bf00      	nop
 8005b3c:	20000521 	.word	0x20000521

08005b40 <__sfp_lock_release>:
 8005b40:	4801      	ldr	r0, [pc, #4]	; (8005b48 <__sfp_lock_release+0x8>)
 8005b42:	f000 ba51 	b.w	8005fe8 <__retarget_lock_release_recursive>
 8005b46:	bf00      	nop
 8005b48:	20000521 	.word	0x20000521

08005b4c <__sinit>:
 8005b4c:	b510      	push	{r4, lr}
 8005b4e:	4604      	mov	r4, r0
 8005b50:	f7ff fff0 	bl	8005b34 <__sfp_lock_acquire>
 8005b54:	6a23      	ldr	r3, [r4, #32]
 8005b56:	b11b      	cbz	r3, 8005b60 <__sinit+0x14>
 8005b58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b5c:	f7ff bff0 	b.w	8005b40 <__sfp_lock_release>
 8005b60:	4b04      	ldr	r3, [pc, #16]	; (8005b74 <__sinit+0x28>)
 8005b62:	6223      	str	r3, [r4, #32]
 8005b64:	4b04      	ldr	r3, [pc, #16]	; (8005b78 <__sinit+0x2c>)
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	d1f5      	bne.n	8005b58 <__sinit+0xc>
 8005b6c:	f7ff ffc4 	bl	8005af8 <global_stdio_init.part.0>
 8005b70:	e7f2      	b.n	8005b58 <__sinit+0xc>
 8005b72:	bf00      	nop
 8005b74:	08005ab9 	.word	0x08005ab9
 8005b78:	20000518 	.word	0x20000518

08005b7c <_fwalk_sglue>:
 8005b7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005b80:	4607      	mov	r7, r0
 8005b82:	4688      	mov	r8, r1
 8005b84:	4614      	mov	r4, r2
 8005b86:	2600      	movs	r6, #0
 8005b88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005b8c:	f1b9 0901 	subs.w	r9, r9, #1
 8005b90:	d505      	bpl.n	8005b9e <_fwalk_sglue+0x22>
 8005b92:	6824      	ldr	r4, [r4, #0]
 8005b94:	2c00      	cmp	r4, #0
 8005b96:	d1f7      	bne.n	8005b88 <_fwalk_sglue+0xc>
 8005b98:	4630      	mov	r0, r6
 8005b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005b9e:	89ab      	ldrh	r3, [r5, #12]
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d907      	bls.n	8005bb4 <_fwalk_sglue+0x38>
 8005ba4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ba8:	3301      	adds	r3, #1
 8005baa:	d003      	beq.n	8005bb4 <_fwalk_sglue+0x38>
 8005bac:	4629      	mov	r1, r5
 8005bae:	4638      	mov	r0, r7
 8005bb0:	47c0      	blx	r8
 8005bb2:	4306      	orrs	r6, r0
 8005bb4:	3568      	adds	r5, #104	; 0x68
 8005bb6:	e7e9      	b.n	8005b8c <_fwalk_sglue+0x10>

08005bb8 <iprintf>:
 8005bb8:	b40f      	push	{r0, r1, r2, r3}
 8005bba:	b507      	push	{r0, r1, r2, lr}
 8005bbc:	4906      	ldr	r1, [pc, #24]	; (8005bd8 <iprintf+0x20>)
 8005bbe:	ab04      	add	r3, sp, #16
 8005bc0:	6808      	ldr	r0, [r1, #0]
 8005bc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8005bc6:	6881      	ldr	r1, [r0, #8]
 8005bc8:	9301      	str	r3, [sp, #4]
 8005bca:	f002 fe55 	bl	8008878 <_vfiprintf_r>
 8005bce:	b003      	add	sp, #12
 8005bd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8005bd4:	b004      	add	sp, #16
 8005bd6:	4770      	bx	lr
 8005bd8:	20000078 	.word	0x20000078

08005bdc <_puts_r>:
 8005bdc:	6a03      	ldr	r3, [r0, #32]
 8005bde:	b570      	push	{r4, r5, r6, lr}
 8005be0:	6884      	ldr	r4, [r0, #8]
 8005be2:	4605      	mov	r5, r0
 8005be4:	460e      	mov	r6, r1
 8005be6:	b90b      	cbnz	r3, 8005bec <_puts_r+0x10>
 8005be8:	f7ff ffb0 	bl	8005b4c <__sinit>
 8005bec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005bee:	07db      	lsls	r3, r3, #31
 8005bf0:	d405      	bmi.n	8005bfe <_puts_r+0x22>
 8005bf2:	89a3      	ldrh	r3, [r4, #12]
 8005bf4:	0598      	lsls	r0, r3, #22
 8005bf6:	d402      	bmi.n	8005bfe <_puts_r+0x22>
 8005bf8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005bfa:	f000 f9f4 	bl	8005fe6 <__retarget_lock_acquire_recursive>
 8005bfe:	89a3      	ldrh	r3, [r4, #12]
 8005c00:	0719      	lsls	r1, r3, #28
 8005c02:	d513      	bpl.n	8005c2c <_puts_r+0x50>
 8005c04:	6923      	ldr	r3, [r4, #16]
 8005c06:	b18b      	cbz	r3, 8005c2c <_puts_r+0x50>
 8005c08:	3e01      	subs	r6, #1
 8005c0a:	68a3      	ldr	r3, [r4, #8]
 8005c0c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8005c10:	3b01      	subs	r3, #1
 8005c12:	60a3      	str	r3, [r4, #8]
 8005c14:	b9e9      	cbnz	r1, 8005c52 <_puts_r+0x76>
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	da2e      	bge.n	8005c78 <_puts_r+0x9c>
 8005c1a:	4622      	mov	r2, r4
 8005c1c:	210a      	movs	r1, #10
 8005c1e:	4628      	mov	r0, r5
 8005c20:	f000 f8cf 	bl	8005dc2 <__swbuf_r>
 8005c24:	3001      	adds	r0, #1
 8005c26:	d007      	beq.n	8005c38 <_puts_r+0x5c>
 8005c28:	250a      	movs	r5, #10
 8005c2a:	e007      	b.n	8005c3c <_puts_r+0x60>
 8005c2c:	4621      	mov	r1, r4
 8005c2e:	4628      	mov	r0, r5
 8005c30:	f000 f904 	bl	8005e3c <__swsetup_r>
 8005c34:	2800      	cmp	r0, #0
 8005c36:	d0e7      	beq.n	8005c08 <_puts_r+0x2c>
 8005c38:	f04f 35ff 	mov.w	r5, #4294967295
 8005c3c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005c3e:	07da      	lsls	r2, r3, #31
 8005c40:	d405      	bmi.n	8005c4e <_puts_r+0x72>
 8005c42:	89a3      	ldrh	r3, [r4, #12]
 8005c44:	059b      	lsls	r3, r3, #22
 8005c46:	d402      	bmi.n	8005c4e <_puts_r+0x72>
 8005c48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005c4a:	f000 f9cd 	bl	8005fe8 <__retarget_lock_release_recursive>
 8005c4e:	4628      	mov	r0, r5
 8005c50:	bd70      	pop	{r4, r5, r6, pc}
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	da04      	bge.n	8005c60 <_puts_r+0x84>
 8005c56:	69a2      	ldr	r2, [r4, #24]
 8005c58:	429a      	cmp	r2, r3
 8005c5a:	dc06      	bgt.n	8005c6a <_puts_r+0x8e>
 8005c5c:	290a      	cmp	r1, #10
 8005c5e:	d004      	beq.n	8005c6a <_puts_r+0x8e>
 8005c60:	6823      	ldr	r3, [r4, #0]
 8005c62:	1c5a      	adds	r2, r3, #1
 8005c64:	6022      	str	r2, [r4, #0]
 8005c66:	7019      	strb	r1, [r3, #0]
 8005c68:	e7cf      	b.n	8005c0a <_puts_r+0x2e>
 8005c6a:	4622      	mov	r2, r4
 8005c6c:	4628      	mov	r0, r5
 8005c6e:	f000 f8a8 	bl	8005dc2 <__swbuf_r>
 8005c72:	3001      	adds	r0, #1
 8005c74:	d1c9      	bne.n	8005c0a <_puts_r+0x2e>
 8005c76:	e7df      	b.n	8005c38 <_puts_r+0x5c>
 8005c78:	6823      	ldr	r3, [r4, #0]
 8005c7a:	250a      	movs	r5, #10
 8005c7c:	1c5a      	adds	r2, r3, #1
 8005c7e:	6022      	str	r2, [r4, #0]
 8005c80:	701d      	strb	r5, [r3, #0]
 8005c82:	e7db      	b.n	8005c3c <_puts_r+0x60>

08005c84 <puts>:
 8005c84:	4b02      	ldr	r3, [pc, #8]	; (8005c90 <puts+0xc>)
 8005c86:	4601      	mov	r1, r0
 8005c88:	6818      	ldr	r0, [r3, #0]
 8005c8a:	f7ff bfa7 	b.w	8005bdc <_puts_r>
 8005c8e:	bf00      	nop
 8005c90:	20000078 	.word	0x20000078

08005c94 <sniprintf>:
 8005c94:	b40c      	push	{r2, r3}
 8005c96:	b530      	push	{r4, r5, lr}
 8005c98:	4b17      	ldr	r3, [pc, #92]	; (8005cf8 <sniprintf+0x64>)
 8005c9a:	1e0c      	subs	r4, r1, #0
 8005c9c:	681d      	ldr	r5, [r3, #0]
 8005c9e:	b09d      	sub	sp, #116	; 0x74
 8005ca0:	da08      	bge.n	8005cb4 <sniprintf+0x20>
 8005ca2:	238b      	movs	r3, #139	; 0x8b
 8005ca4:	602b      	str	r3, [r5, #0]
 8005ca6:	f04f 30ff 	mov.w	r0, #4294967295
 8005caa:	b01d      	add	sp, #116	; 0x74
 8005cac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005cb0:	b002      	add	sp, #8
 8005cb2:	4770      	bx	lr
 8005cb4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005cb8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005cbc:	bf14      	ite	ne
 8005cbe:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005cc2:	4623      	moveq	r3, r4
 8005cc4:	9304      	str	r3, [sp, #16]
 8005cc6:	9307      	str	r3, [sp, #28]
 8005cc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ccc:	9002      	str	r0, [sp, #8]
 8005cce:	9006      	str	r0, [sp, #24]
 8005cd0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005cd4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005cd6:	ab21      	add	r3, sp, #132	; 0x84
 8005cd8:	a902      	add	r1, sp, #8
 8005cda:	4628      	mov	r0, r5
 8005cdc:	9301      	str	r3, [sp, #4]
 8005cde:	f002 fca3 	bl	8008628 <_svfiprintf_r>
 8005ce2:	1c43      	adds	r3, r0, #1
 8005ce4:	bfbc      	itt	lt
 8005ce6:	238b      	movlt	r3, #139	; 0x8b
 8005ce8:	602b      	strlt	r3, [r5, #0]
 8005cea:	2c00      	cmp	r4, #0
 8005cec:	d0dd      	beq.n	8005caa <sniprintf+0x16>
 8005cee:	9b02      	ldr	r3, [sp, #8]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	701a      	strb	r2, [r3, #0]
 8005cf4:	e7d9      	b.n	8005caa <sniprintf+0x16>
 8005cf6:	bf00      	nop
 8005cf8:	20000078 	.word	0x20000078

08005cfc <siprintf>:
 8005cfc:	b40e      	push	{r1, r2, r3}
 8005cfe:	b500      	push	{lr}
 8005d00:	b09c      	sub	sp, #112	; 0x70
 8005d02:	ab1d      	add	r3, sp, #116	; 0x74
 8005d04:	9002      	str	r0, [sp, #8]
 8005d06:	9006      	str	r0, [sp, #24]
 8005d08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005d0c:	4809      	ldr	r0, [pc, #36]	; (8005d34 <siprintf+0x38>)
 8005d0e:	9107      	str	r1, [sp, #28]
 8005d10:	9104      	str	r1, [sp, #16]
 8005d12:	4909      	ldr	r1, [pc, #36]	; (8005d38 <siprintf+0x3c>)
 8005d14:	f853 2b04 	ldr.w	r2, [r3], #4
 8005d18:	9105      	str	r1, [sp, #20]
 8005d1a:	6800      	ldr	r0, [r0, #0]
 8005d1c:	9301      	str	r3, [sp, #4]
 8005d1e:	a902      	add	r1, sp, #8
 8005d20:	f002 fc82 	bl	8008628 <_svfiprintf_r>
 8005d24:	9b02      	ldr	r3, [sp, #8]
 8005d26:	2200      	movs	r2, #0
 8005d28:	701a      	strb	r2, [r3, #0]
 8005d2a:	b01c      	add	sp, #112	; 0x70
 8005d2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005d30:	b003      	add	sp, #12
 8005d32:	4770      	bx	lr
 8005d34:	20000078 	.word	0x20000078
 8005d38:	ffff0208 	.word	0xffff0208

08005d3c <__sread>:
 8005d3c:	b510      	push	{r4, lr}
 8005d3e:	460c      	mov	r4, r1
 8005d40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d44:	f000 f900 	bl	8005f48 <_read_r>
 8005d48:	2800      	cmp	r0, #0
 8005d4a:	bfab      	itete	ge
 8005d4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005d4e:	89a3      	ldrhlt	r3, [r4, #12]
 8005d50:	181b      	addge	r3, r3, r0
 8005d52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005d56:	bfac      	ite	ge
 8005d58:	6563      	strge	r3, [r4, #84]	; 0x54
 8005d5a:	81a3      	strhlt	r3, [r4, #12]
 8005d5c:	bd10      	pop	{r4, pc}

08005d5e <__swrite>:
 8005d5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005d62:	461f      	mov	r7, r3
 8005d64:	898b      	ldrh	r3, [r1, #12]
 8005d66:	05db      	lsls	r3, r3, #23
 8005d68:	4605      	mov	r5, r0
 8005d6a:	460c      	mov	r4, r1
 8005d6c:	4616      	mov	r6, r2
 8005d6e:	d505      	bpl.n	8005d7c <__swrite+0x1e>
 8005d70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d74:	2302      	movs	r3, #2
 8005d76:	2200      	movs	r2, #0
 8005d78:	f000 f8d4 	bl	8005f24 <_lseek_r>
 8005d7c:	89a3      	ldrh	r3, [r4, #12]
 8005d7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005d82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d86:	81a3      	strh	r3, [r4, #12]
 8005d88:	4632      	mov	r2, r6
 8005d8a:	463b      	mov	r3, r7
 8005d8c:	4628      	mov	r0, r5
 8005d8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d92:	f000 b8eb 	b.w	8005f6c <_write_r>

08005d96 <__sseek>:
 8005d96:	b510      	push	{r4, lr}
 8005d98:	460c      	mov	r4, r1
 8005d9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d9e:	f000 f8c1 	bl	8005f24 <_lseek_r>
 8005da2:	1c43      	adds	r3, r0, #1
 8005da4:	89a3      	ldrh	r3, [r4, #12]
 8005da6:	bf15      	itete	ne
 8005da8:	6560      	strne	r0, [r4, #84]	; 0x54
 8005daa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005dae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005db2:	81a3      	strheq	r3, [r4, #12]
 8005db4:	bf18      	it	ne
 8005db6:	81a3      	strhne	r3, [r4, #12]
 8005db8:	bd10      	pop	{r4, pc}

08005dba <__sclose>:
 8005dba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005dbe:	f000 b8a1 	b.w	8005f04 <_close_r>

08005dc2 <__swbuf_r>:
 8005dc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dc4:	460e      	mov	r6, r1
 8005dc6:	4614      	mov	r4, r2
 8005dc8:	4605      	mov	r5, r0
 8005dca:	b118      	cbz	r0, 8005dd4 <__swbuf_r+0x12>
 8005dcc:	6a03      	ldr	r3, [r0, #32]
 8005dce:	b90b      	cbnz	r3, 8005dd4 <__swbuf_r+0x12>
 8005dd0:	f7ff febc 	bl	8005b4c <__sinit>
 8005dd4:	69a3      	ldr	r3, [r4, #24]
 8005dd6:	60a3      	str	r3, [r4, #8]
 8005dd8:	89a3      	ldrh	r3, [r4, #12]
 8005dda:	071a      	lsls	r2, r3, #28
 8005ddc:	d525      	bpl.n	8005e2a <__swbuf_r+0x68>
 8005dde:	6923      	ldr	r3, [r4, #16]
 8005de0:	b31b      	cbz	r3, 8005e2a <__swbuf_r+0x68>
 8005de2:	6823      	ldr	r3, [r4, #0]
 8005de4:	6922      	ldr	r2, [r4, #16]
 8005de6:	1a98      	subs	r0, r3, r2
 8005de8:	6963      	ldr	r3, [r4, #20]
 8005dea:	b2f6      	uxtb	r6, r6
 8005dec:	4283      	cmp	r3, r0
 8005dee:	4637      	mov	r7, r6
 8005df0:	dc04      	bgt.n	8005dfc <__swbuf_r+0x3a>
 8005df2:	4621      	mov	r1, r4
 8005df4:	4628      	mov	r0, r5
 8005df6:	f002 fedf 	bl	8008bb8 <_fflush_r>
 8005dfa:	b9e0      	cbnz	r0, 8005e36 <__swbuf_r+0x74>
 8005dfc:	68a3      	ldr	r3, [r4, #8]
 8005dfe:	3b01      	subs	r3, #1
 8005e00:	60a3      	str	r3, [r4, #8]
 8005e02:	6823      	ldr	r3, [r4, #0]
 8005e04:	1c5a      	adds	r2, r3, #1
 8005e06:	6022      	str	r2, [r4, #0]
 8005e08:	701e      	strb	r6, [r3, #0]
 8005e0a:	6962      	ldr	r2, [r4, #20]
 8005e0c:	1c43      	adds	r3, r0, #1
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d004      	beq.n	8005e1c <__swbuf_r+0x5a>
 8005e12:	89a3      	ldrh	r3, [r4, #12]
 8005e14:	07db      	lsls	r3, r3, #31
 8005e16:	d506      	bpl.n	8005e26 <__swbuf_r+0x64>
 8005e18:	2e0a      	cmp	r6, #10
 8005e1a:	d104      	bne.n	8005e26 <__swbuf_r+0x64>
 8005e1c:	4621      	mov	r1, r4
 8005e1e:	4628      	mov	r0, r5
 8005e20:	f002 feca 	bl	8008bb8 <_fflush_r>
 8005e24:	b938      	cbnz	r0, 8005e36 <__swbuf_r+0x74>
 8005e26:	4638      	mov	r0, r7
 8005e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e2a:	4621      	mov	r1, r4
 8005e2c:	4628      	mov	r0, r5
 8005e2e:	f000 f805 	bl	8005e3c <__swsetup_r>
 8005e32:	2800      	cmp	r0, #0
 8005e34:	d0d5      	beq.n	8005de2 <__swbuf_r+0x20>
 8005e36:	f04f 37ff 	mov.w	r7, #4294967295
 8005e3a:	e7f4      	b.n	8005e26 <__swbuf_r+0x64>

08005e3c <__swsetup_r>:
 8005e3c:	b538      	push	{r3, r4, r5, lr}
 8005e3e:	4b2a      	ldr	r3, [pc, #168]	; (8005ee8 <__swsetup_r+0xac>)
 8005e40:	4605      	mov	r5, r0
 8005e42:	6818      	ldr	r0, [r3, #0]
 8005e44:	460c      	mov	r4, r1
 8005e46:	b118      	cbz	r0, 8005e50 <__swsetup_r+0x14>
 8005e48:	6a03      	ldr	r3, [r0, #32]
 8005e4a:	b90b      	cbnz	r3, 8005e50 <__swsetup_r+0x14>
 8005e4c:	f7ff fe7e 	bl	8005b4c <__sinit>
 8005e50:	89a3      	ldrh	r3, [r4, #12]
 8005e52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005e56:	0718      	lsls	r0, r3, #28
 8005e58:	d422      	bmi.n	8005ea0 <__swsetup_r+0x64>
 8005e5a:	06d9      	lsls	r1, r3, #27
 8005e5c:	d407      	bmi.n	8005e6e <__swsetup_r+0x32>
 8005e5e:	2309      	movs	r3, #9
 8005e60:	602b      	str	r3, [r5, #0]
 8005e62:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8005e66:	81a3      	strh	r3, [r4, #12]
 8005e68:	f04f 30ff 	mov.w	r0, #4294967295
 8005e6c:	e034      	b.n	8005ed8 <__swsetup_r+0x9c>
 8005e6e:	0758      	lsls	r0, r3, #29
 8005e70:	d512      	bpl.n	8005e98 <__swsetup_r+0x5c>
 8005e72:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005e74:	b141      	cbz	r1, 8005e88 <__swsetup_r+0x4c>
 8005e76:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005e7a:	4299      	cmp	r1, r3
 8005e7c:	d002      	beq.n	8005e84 <__swsetup_r+0x48>
 8005e7e:	4628      	mov	r0, r5
 8005e80:	f000 ff34 	bl	8006cec <_free_r>
 8005e84:	2300      	movs	r3, #0
 8005e86:	6363      	str	r3, [r4, #52]	; 0x34
 8005e88:	89a3      	ldrh	r3, [r4, #12]
 8005e8a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005e8e:	81a3      	strh	r3, [r4, #12]
 8005e90:	2300      	movs	r3, #0
 8005e92:	6063      	str	r3, [r4, #4]
 8005e94:	6923      	ldr	r3, [r4, #16]
 8005e96:	6023      	str	r3, [r4, #0]
 8005e98:	89a3      	ldrh	r3, [r4, #12]
 8005e9a:	f043 0308 	orr.w	r3, r3, #8
 8005e9e:	81a3      	strh	r3, [r4, #12]
 8005ea0:	6923      	ldr	r3, [r4, #16]
 8005ea2:	b94b      	cbnz	r3, 8005eb8 <__swsetup_r+0x7c>
 8005ea4:	89a3      	ldrh	r3, [r4, #12]
 8005ea6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005eaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005eae:	d003      	beq.n	8005eb8 <__swsetup_r+0x7c>
 8005eb0:	4621      	mov	r1, r4
 8005eb2:	4628      	mov	r0, r5
 8005eb4:	f002 fece 	bl	8008c54 <__smakebuf_r>
 8005eb8:	89a0      	ldrh	r0, [r4, #12]
 8005eba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8005ebe:	f010 0301 	ands.w	r3, r0, #1
 8005ec2:	d00a      	beq.n	8005eda <__swsetup_r+0x9e>
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	60a3      	str	r3, [r4, #8]
 8005ec8:	6963      	ldr	r3, [r4, #20]
 8005eca:	425b      	negs	r3, r3
 8005ecc:	61a3      	str	r3, [r4, #24]
 8005ece:	6923      	ldr	r3, [r4, #16]
 8005ed0:	b943      	cbnz	r3, 8005ee4 <__swsetup_r+0xa8>
 8005ed2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8005ed6:	d1c4      	bne.n	8005e62 <__swsetup_r+0x26>
 8005ed8:	bd38      	pop	{r3, r4, r5, pc}
 8005eda:	0781      	lsls	r1, r0, #30
 8005edc:	bf58      	it	pl
 8005ede:	6963      	ldrpl	r3, [r4, #20]
 8005ee0:	60a3      	str	r3, [r4, #8]
 8005ee2:	e7f4      	b.n	8005ece <__swsetup_r+0x92>
 8005ee4:	2000      	movs	r0, #0
 8005ee6:	e7f7      	b.n	8005ed8 <__swsetup_r+0x9c>
 8005ee8:	20000078 	.word	0x20000078

08005eec <memset>:
 8005eec:	4402      	add	r2, r0
 8005eee:	4603      	mov	r3, r0
 8005ef0:	4293      	cmp	r3, r2
 8005ef2:	d100      	bne.n	8005ef6 <memset+0xa>
 8005ef4:	4770      	bx	lr
 8005ef6:	f803 1b01 	strb.w	r1, [r3], #1
 8005efa:	e7f9      	b.n	8005ef0 <memset+0x4>

08005efc <_localeconv_r>:
 8005efc:	4800      	ldr	r0, [pc, #0]	; (8005f00 <_localeconv_r+0x4>)
 8005efe:	4770      	bx	lr
 8005f00:	2000016c 	.word	0x2000016c

08005f04 <_close_r>:
 8005f04:	b538      	push	{r3, r4, r5, lr}
 8005f06:	4d06      	ldr	r5, [pc, #24]	; (8005f20 <_close_r+0x1c>)
 8005f08:	2300      	movs	r3, #0
 8005f0a:	4604      	mov	r4, r0
 8005f0c:	4608      	mov	r0, r1
 8005f0e:	602b      	str	r3, [r5, #0]
 8005f10:	f7fb fd39 	bl	8001986 <_close>
 8005f14:	1c43      	adds	r3, r0, #1
 8005f16:	d102      	bne.n	8005f1e <_close_r+0x1a>
 8005f18:	682b      	ldr	r3, [r5, #0]
 8005f1a:	b103      	cbz	r3, 8005f1e <_close_r+0x1a>
 8005f1c:	6023      	str	r3, [r4, #0]
 8005f1e:	bd38      	pop	{r3, r4, r5, pc}
 8005f20:	2000051c 	.word	0x2000051c

08005f24 <_lseek_r>:
 8005f24:	b538      	push	{r3, r4, r5, lr}
 8005f26:	4d07      	ldr	r5, [pc, #28]	; (8005f44 <_lseek_r+0x20>)
 8005f28:	4604      	mov	r4, r0
 8005f2a:	4608      	mov	r0, r1
 8005f2c:	4611      	mov	r1, r2
 8005f2e:	2200      	movs	r2, #0
 8005f30:	602a      	str	r2, [r5, #0]
 8005f32:	461a      	mov	r2, r3
 8005f34:	f7fb fd4e 	bl	80019d4 <_lseek>
 8005f38:	1c43      	adds	r3, r0, #1
 8005f3a:	d102      	bne.n	8005f42 <_lseek_r+0x1e>
 8005f3c:	682b      	ldr	r3, [r5, #0]
 8005f3e:	b103      	cbz	r3, 8005f42 <_lseek_r+0x1e>
 8005f40:	6023      	str	r3, [r4, #0]
 8005f42:	bd38      	pop	{r3, r4, r5, pc}
 8005f44:	2000051c 	.word	0x2000051c

08005f48 <_read_r>:
 8005f48:	b538      	push	{r3, r4, r5, lr}
 8005f4a:	4d07      	ldr	r5, [pc, #28]	; (8005f68 <_read_r+0x20>)
 8005f4c:	4604      	mov	r4, r0
 8005f4e:	4608      	mov	r0, r1
 8005f50:	4611      	mov	r1, r2
 8005f52:	2200      	movs	r2, #0
 8005f54:	602a      	str	r2, [r5, #0]
 8005f56:	461a      	mov	r2, r3
 8005f58:	f7fb fcdc 	bl	8001914 <_read>
 8005f5c:	1c43      	adds	r3, r0, #1
 8005f5e:	d102      	bne.n	8005f66 <_read_r+0x1e>
 8005f60:	682b      	ldr	r3, [r5, #0]
 8005f62:	b103      	cbz	r3, 8005f66 <_read_r+0x1e>
 8005f64:	6023      	str	r3, [r4, #0]
 8005f66:	bd38      	pop	{r3, r4, r5, pc}
 8005f68:	2000051c 	.word	0x2000051c

08005f6c <_write_r>:
 8005f6c:	b538      	push	{r3, r4, r5, lr}
 8005f6e:	4d07      	ldr	r5, [pc, #28]	; (8005f8c <_write_r+0x20>)
 8005f70:	4604      	mov	r4, r0
 8005f72:	4608      	mov	r0, r1
 8005f74:	4611      	mov	r1, r2
 8005f76:	2200      	movs	r2, #0
 8005f78:	602a      	str	r2, [r5, #0]
 8005f7a:	461a      	mov	r2, r3
 8005f7c:	f7fb fce7 	bl	800194e <_write>
 8005f80:	1c43      	adds	r3, r0, #1
 8005f82:	d102      	bne.n	8005f8a <_write_r+0x1e>
 8005f84:	682b      	ldr	r3, [r5, #0]
 8005f86:	b103      	cbz	r3, 8005f8a <_write_r+0x1e>
 8005f88:	6023      	str	r3, [r4, #0]
 8005f8a:	bd38      	pop	{r3, r4, r5, pc}
 8005f8c:	2000051c 	.word	0x2000051c

08005f90 <__errno>:
 8005f90:	4b01      	ldr	r3, [pc, #4]	; (8005f98 <__errno+0x8>)
 8005f92:	6818      	ldr	r0, [r3, #0]
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	20000078 	.word	0x20000078

08005f9c <__libc_init_array>:
 8005f9c:	b570      	push	{r4, r5, r6, lr}
 8005f9e:	4d0d      	ldr	r5, [pc, #52]	; (8005fd4 <__libc_init_array+0x38>)
 8005fa0:	4c0d      	ldr	r4, [pc, #52]	; (8005fd8 <__libc_init_array+0x3c>)
 8005fa2:	1b64      	subs	r4, r4, r5
 8005fa4:	10a4      	asrs	r4, r4, #2
 8005fa6:	2600      	movs	r6, #0
 8005fa8:	42a6      	cmp	r6, r4
 8005faa:	d109      	bne.n	8005fc0 <__libc_init_array+0x24>
 8005fac:	4d0b      	ldr	r5, [pc, #44]	; (8005fdc <__libc_init_array+0x40>)
 8005fae:	4c0c      	ldr	r4, [pc, #48]	; (8005fe0 <__libc_init_array+0x44>)
 8005fb0:	f003 fb42 	bl	8009638 <_init>
 8005fb4:	1b64      	subs	r4, r4, r5
 8005fb6:	10a4      	asrs	r4, r4, #2
 8005fb8:	2600      	movs	r6, #0
 8005fba:	42a6      	cmp	r6, r4
 8005fbc:	d105      	bne.n	8005fca <__libc_init_array+0x2e>
 8005fbe:	bd70      	pop	{r4, r5, r6, pc}
 8005fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fc4:	4798      	blx	r3
 8005fc6:	3601      	adds	r6, #1
 8005fc8:	e7ee      	b.n	8005fa8 <__libc_init_array+0xc>
 8005fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fce:	4798      	blx	r3
 8005fd0:	3601      	adds	r6, #1
 8005fd2:	e7f2      	b.n	8005fba <__libc_init_array+0x1e>
 8005fd4:	08009c10 	.word	0x08009c10
 8005fd8:	08009c10 	.word	0x08009c10
 8005fdc:	08009c10 	.word	0x08009c10
 8005fe0:	08009c14 	.word	0x08009c14

08005fe4 <__retarget_lock_init_recursive>:
 8005fe4:	4770      	bx	lr

08005fe6 <__retarget_lock_acquire_recursive>:
 8005fe6:	4770      	bx	lr

08005fe8 <__retarget_lock_release_recursive>:
 8005fe8:	4770      	bx	lr
	...

08005fec <nanf>:
 8005fec:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8005ff4 <nanf+0x8>
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	7fc00000 	.word	0x7fc00000

08005ff8 <quorem>:
 8005ff8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ffc:	6903      	ldr	r3, [r0, #16]
 8005ffe:	690c      	ldr	r4, [r1, #16]
 8006000:	42a3      	cmp	r3, r4
 8006002:	4607      	mov	r7, r0
 8006004:	db7e      	blt.n	8006104 <quorem+0x10c>
 8006006:	3c01      	subs	r4, #1
 8006008:	f101 0814 	add.w	r8, r1, #20
 800600c:	f100 0514 	add.w	r5, r0, #20
 8006010:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006014:	9301      	str	r3, [sp, #4]
 8006016:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800601a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800601e:	3301      	adds	r3, #1
 8006020:	429a      	cmp	r2, r3
 8006022:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006026:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800602a:	fbb2 f6f3 	udiv	r6, r2, r3
 800602e:	d331      	bcc.n	8006094 <quorem+0x9c>
 8006030:	f04f 0e00 	mov.w	lr, #0
 8006034:	4640      	mov	r0, r8
 8006036:	46ac      	mov	ip, r5
 8006038:	46f2      	mov	sl, lr
 800603a:	f850 2b04 	ldr.w	r2, [r0], #4
 800603e:	b293      	uxth	r3, r2
 8006040:	fb06 e303 	mla	r3, r6, r3, lr
 8006044:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006048:	0c1a      	lsrs	r2, r3, #16
 800604a:	b29b      	uxth	r3, r3
 800604c:	ebaa 0303 	sub.w	r3, sl, r3
 8006050:	f8dc a000 	ldr.w	sl, [ip]
 8006054:	fa13 f38a 	uxtah	r3, r3, sl
 8006058:	fb06 220e 	mla	r2, r6, lr, r2
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	9b00      	ldr	r3, [sp, #0]
 8006060:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006064:	b292      	uxth	r2, r2
 8006066:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800606a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800606e:	f8bd 3000 	ldrh.w	r3, [sp]
 8006072:	4581      	cmp	r9, r0
 8006074:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006078:	f84c 3b04 	str.w	r3, [ip], #4
 800607c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006080:	d2db      	bcs.n	800603a <quorem+0x42>
 8006082:	f855 300b 	ldr.w	r3, [r5, fp]
 8006086:	b92b      	cbnz	r3, 8006094 <quorem+0x9c>
 8006088:	9b01      	ldr	r3, [sp, #4]
 800608a:	3b04      	subs	r3, #4
 800608c:	429d      	cmp	r5, r3
 800608e:	461a      	mov	r2, r3
 8006090:	d32c      	bcc.n	80060ec <quorem+0xf4>
 8006092:	613c      	str	r4, [r7, #16]
 8006094:	4638      	mov	r0, r7
 8006096:	f001 f9ef 	bl	8007478 <__mcmp>
 800609a:	2800      	cmp	r0, #0
 800609c:	db22      	blt.n	80060e4 <quorem+0xec>
 800609e:	3601      	adds	r6, #1
 80060a0:	4629      	mov	r1, r5
 80060a2:	2000      	movs	r0, #0
 80060a4:	f858 2b04 	ldr.w	r2, [r8], #4
 80060a8:	f8d1 c000 	ldr.w	ip, [r1]
 80060ac:	b293      	uxth	r3, r2
 80060ae:	1ac3      	subs	r3, r0, r3
 80060b0:	0c12      	lsrs	r2, r2, #16
 80060b2:	fa13 f38c 	uxtah	r3, r3, ip
 80060b6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80060ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80060be:	b29b      	uxth	r3, r3
 80060c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060c4:	45c1      	cmp	r9, r8
 80060c6:	f841 3b04 	str.w	r3, [r1], #4
 80060ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 80060ce:	d2e9      	bcs.n	80060a4 <quorem+0xac>
 80060d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060d8:	b922      	cbnz	r2, 80060e4 <quorem+0xec>
 80060da:	3b04      	subs	r3, #4
 80060dc:	429d      	cmp	r5, r3
 80060de:	461a      	mov	r2, r3
 80060e0:	d30a      	bcc.n	80060f8 <quorem+0x100>
 80060e2:	613c      	str	r4, [r7, #16]
 80060e4:	4630      	mov	r0, r6
 80060e6:	b003      	add	sp, #12
 80060e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ec:	6812      	ldr	r2, [r2, #0]
 80060ee:	3b04      	subs	r3, #4
 80060f0:	2a00      	cmp	r2, #0
 80060f2:	d1ce      	bne.n	8006092 <quorem+0x9a>
 80060f4:	3c01      	subs	r4, #1
 80060f6:	e7c9      	b.n	800608c <quorem+0x94>
 80060f8:	6812      	ldr	r2, [r2, #0]
 80060fa:	3b04      	subs	r3, #4
 80060fc:	2a00      	cmp	r2, #0
 80060fe:	d1f0      	bne.n	80060e2 <quorem+0xea>
 8006100:	3c01      	subs	r4, #1
 8006102:	e7eb      	b.n	80060dc <quorem+0xe4>
 8006104:	2000      	movs	r0, #0
 8006106:	e7ee      	b.n	80060e6 <quorem+0xee>

08006108 <_dtoa_r>:
 8006108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800610c:	ed2d 8b04 	vpush	{d8-d9}
 8006110:	69c5      	ldr	r5, [r0, #28]
 8006112:	b093      	sub	sp, #76	; 0x4c
 8006114:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006118:	ec57 6b10 	vmov	r6, r7, d0
 800611c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8006120:	9107      	str	r1, [sp, #28]
 8006122:	4604      	mov	r4, r0
 8006124:	920a      	str	r2, [sp, #40]	; 0x28
 8006126:	930d      	str	r3, [sp, #52]	; 0x34
 8006128:	b975      	cbnz	r5, 8006148 <_dtoa_r+0x40>
 800612a:	2010      	movs	r0, #16
 800612c:	f000 fe2a 	bl	8006d84 <malloc>
 8006130:	4602      	mov	r2, r0
 8006132:	61e0      	str	r0, [r4, #28]
 8006134:	b920      	cbnz	r0, 8006140 <_dtoa_r+0x38>
 8006136:	4bae      	ldr	r3, [pc, #696]	; (80063f0 <_dtoa_r+0x2e8>)
 8006138:	21ef      	movs	r1, #239	; 0xef
 800613a:	48ae      	ldr	r0, [pc, #696]	; (80063f4 <_dtoa_r+0x2ec>)
 800613c:	f002 fe3c 	bl	8008db8 <__assert_func>
 8006140:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006144:	6005      	str	r5, [r0, #0]
 8006146:	60c5      	str	r5, [r0, #12]
 8006148:	69e3      	ldr	r3, [r4, #28]
 800614a:	6819      	ldr	r1, [r3, #0]
 800614c:	b151      	cbz	r1, 8006164 <_dtoa_r+0x5c>
 800614e:	685a      	ldr	r2, [r3, #4]
 8006150:	604a      	str	r2, [r1, #4]
 8006152:	2301      	movs	r3, #1
 8006154:	4093      	lsls	r3, r2
 8006156:	608b      	str	r3, [r1, #8]
 8006158:	4620      	mov	r0, r4
 800615a:	f000 ff07 	bl	8006f6c <_Bfree>
 800615e:	69e3      	ldr	r3, [r4, #28]
 8006160:	2200      	movs	r2, #0
 8006162:	601a      	str	r2, [r3, #0]
 8006164:	1e3b      	subs	r3, r7, #0
 8006166:	bfbb      	ittet	lt
 8006168:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800616c:	9303      	strlt	r3, [sp, #12]
 800616e:	2300      	movge	r3, #0
 8006170:	2201      	movlt	r2, #1
 8006172:	bfac      	ite	ge
 8006174:	f8c8 3000 	strge.w	r3, [r8]
 8006178:	f8c8 2000 	strlt.w	r2, [r8]
 800617c:	4b9e      	ldr	r3, [pc, #632]	; (80063f8 <_dtoa_r+0x2f0>)
 800617e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006182:	ea33 0308 	bics.w	r3, r3, r8
 8006186:	d11b      	bne.n	80061c0 <_dtoa_r+0xb8>
 8006188:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800618a:	f242 730f 	movw	r3, #9999	; 0x270f
 800618e:	6013      	str	r3, [r2, #0]
 8006190:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8006194:	4333      	orrs	r3, r6
 8006196:	f000 8593 	beq.w	8006cc0 <_dtoa_r+0xbb8>
 800619a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800619c:	b963      	cbnz	r3, 80061b8 <_dtoa_r+0xb0>
 800619e:	4b97      	ldr	r3, [pc, #604]	; (80063fc <_dtoa_r+0x2f4>)
 80061a0:	e027      	b.n	80061f2 <_dtoa_r+0xea>
 80061a2:	4b97      	ldr	r3, [pc, #604]	; (8006400 <_dtoa_r+0x2f8>)
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	3308      	adds	r3, #8
 80061a8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80061aa:	6013      	str	r3, [r2, #0]
 80061ac:	9800      	ldr	r0, [sp, #0]
 80061ae:	b013      	add	sp, #76	; 0x4c
 80061b0:	ecbd 8b04 	vpop	{d8-d9}
 80061b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061b8:	4b90      	ldr	r3, [pc, #576]	; (80063fc <_dtoa_r+0x2f4>)
 80061ba:	9300      	str	r3, [sp, #0]
 80061bc:	3303      	adds	r3, #3
 80061be:	e7f3      	b.n	80061a8 <_dtoa_r+0xa0>
 80061c0:	ed9d 7b02 	vldr	d7, [sp, #8]
 80061c4:	2200      	movs	r2, #0
 80061c6:	ec51 0b17 	vmov	r0, r1, d7
 80061ca:	eeb0 8a47 	vmov.f32	s16, s14
 80061ce:	eef0 8a67 	vmov.f32	s17, s15
 80061d2:	2300      	movs	r3, #0
 80061d4:	f7fa fc78 	bl	8000ac8 <__aeabi_dcmpeq>
 80061d8:	4681      	mov	r9, r0
 80061da:	b160      	cbz	r0, 80061f6 <_dtoa_r+0xee>
 80061dc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80061de:	2301      	movs	r3, #1
 80061e0:	6013      	str	r3, [r2, #0]
 80061e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	f000 8568 	beq.w	8006cba <_dtoa_r+0xbb2>
 80061ea:	4b86      	ldr	r3, [pc, #536]	; (8006404 <_dtoa_r+0x2fc>)
 80061ec:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80061ee:	6013      	str	r3, [r2, #0]
 80061f0:	3b01      	subs	r3, #1
 80061f2:	9300      	str	r3, [sp, #0]
 80061f4:	e7da      	b.n	80061ac <_dtoa_r+0xa4>
 80061f6:	aa10      	add	r2, sp, #64	; 0x40
 80061f8:	a911      	add	r1, sp, #68	; 0x44
 80061fa:	4620      	mov	r0, r4
 80061fc:	eeb0 0a48 	vmov.f32	s0, s16
 8006200:	eef0 0a68 	vmov.f32	s1, s17
 8006204:	f001 fa4e 	bl	80076a4 <__d2b>
 8006208:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800620c:	4682      	mov	sl, r0
 800620e:	2d00      	cmp	r5, #0
 8006210:	d07f      	beq.n	8006312 <_dtoa_r+0x20a>
 8006212:	ee18 3a90 	vmov	r3, s17
 8006216:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800621a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800621e:	ec51 0b18 	vmov	r0, r1, d8
 8006222:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8006226:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800622a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800622e:	4619      	mov	r1, r3
 8006230:	2200      	movs	r2, #0
 8006232:	4b75      	ldr	r3, [pc, #468]	; (8006408 <_dtoa_r+0x300>)
 8006234:	f7fa f828 	bl	8000288 <__aeabi_dsub>
 8006238:	a367      	add	r3, pc, #412	; (adr r3, 80063d8 <_dtoa_r+0x2d0>)
 800623a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623e:	f7fa f9db 	bl	80005f8 <__aeabi_dmul>
 8006242:	a367      	add	r3, pc, #412	; (adr r3, 80063e0 <_dtoa_r+0x2d8>)
 8006244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006248:	f7fa f820 	bl	800028c <__adddf3>
 800624c:	4606      	mov	r6, r0
 800624e:	4628      	mov	r0, r5
 8006250:	460f      	mov	r7, r1
 8006252:	f7fa f967 	bl	8000524 <__aeabi_i2d>
 8006256:	a364      	add	r3, pc, #400	; (adr r3, 80063e8 <_dtoa_r+0x2e0>)
 8006258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800625c:	f7fa f9cc 	bl	80005f8 <__aeabi_dmul>
 8006260:	4602      	mov	r2, r0
 8006262:	460b      	mov	r3, r1
 8006264:	4630      	mov	r0, r6
 8006266:	4639      	mov	r1, r7
 8006268:	f7fa f810 	bl	800028c <__adddf3>
 800626c:	4606      	mov	r6, r0
 800626e:	460f      	mov	r7, r1
 8006270:	f7fa fc72 	bl	8000b58 <__aeabi_d2iz>
 8006274:	2200      	movs	r2, #0
 8006276:	4683      	mov	fp, r0
 8006278:	2300      	movs	r3, #0
 800627a:	4630      	mov	r0, r6
 800627c:	4639      	mov	r1, r7
 800627e:	f7fa fc2d 	bl	8000adc <__aeabi_dcmplt>
 8006282:	b148      	cbz	r0, 8006298 <_dtoa_r+0x190>
 8006284:	4658      	mov	r0, fp
 8006286:	f7fa f94d 	bl	8000524 <__aeabi_i2d>
 800628a:	4632      	mov	r2, r6
 800628c:	463b      	mov	r3, r7
 800628e:	f7fa fc1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8006292:	b908      	cbnz	r0, 8006298 <_dtoa_r+0x190>
 8006294:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006298:	f1bb 0f16 	cmp.w	fp, #22
 800629c:	d857      	bhi.n	800634e <_dtoa_r+0x246>
 800629e:	4b5b      	ldr	r3, [pc, #364]	; (800640c <_dtoa_r+0x304>)
 80062a0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80062a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062a8:	ec51 0b18 	vmov	r0, r1, d8
 80062ac:	f7fa fc16 	bl	8000adc <__aeabi_dcmplt>
 80062b0:	2800      	cmp	r0, #0
 80062b2:	d04e      	beq.n	8006352 <_dtoa_r+0x24a>
 80062b4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80062b8:	2300      	movs	r3, #0
 80062ba:	930c      	str	r3, [sp, #48]	; 0x30
 80062bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80062be:	1b5b      	subs	r3, r3, r5
 80062c0:	1e5a      	subs	r2, r3, #1
 80062c2:	bf45      	ittet	mi
 80062c4:	f1c3 0301 	rsbmi	r3, r3, #1
 80062c8:	9305      	strmi	r3, [sp, #20]
 80062ca:	2300      	movpl	r3, #0
 80062cc:	2300      	movmi	r3, #0
 80062ce:	9206      	str	r2, [sp, #24]
 80062d0:	bf54      	ite	pl
 80062d2:	9305      	strpl	r3, [sp, #20]
 80062d4:	9306      	strmi	r3, [sp, #24]
 80062d6:	f1bb 0f00 	cmp.w	fp, #0
 80062da:	db3c      	blt.n	8006356 <_dtoa_r+0x24e>
 80062dc:	9b06      	ldr	r3, [sp, #24]
 80062de:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80062e2:	445b      	add	r3, fp
 80062e4:	9306      	str	r3, [sp, #24]
 80062e6:	2300      	movs	r3, #0
 80062e8:	9308      	str	r3, [sp, #32]
 80062ea:	9b07      	ldr	r3, [sp, #28]
 80062ec:	2b09      	cmp	r3, #9
 80062ee:	d868      	bhi.n	80063c2 <_dtoa_r+0x2ba>
 80062f0:	2b05      	cmp	r3, #5
 80062f2:	bfc4      	itt	gt
 80062f4:	3b04      	subgt	r3, #4
 80062f6:	9307      	strgt	r3, [sp, #28]
 80062f8:	9b07      	ldr	r3, [sp, #28]
 80062fa:	f1a3 0302 	sub.w	r3, r3, #2
 80062fe:	bfcc      	ite	gt
 8006300:	2500      	movgt	r5, #0
 8006302:	2501      	movle	r5, #1
 8006304:	2b03      	cmp	r3, #3
 8006306:	f200 8085 	bhi.w	8006414 <_dtoa_r+0x30c>
 800630a:	e8df f003 	tbb	[pc, r3]
 800630e:	3b2e      	.short	0x3b2e
 8006310:	5839      	.short	0x5839
 8006312:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8006316:	441d      	add	r5, r3
 8006318:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800631c:	2b20      	cmp	r3, #32
 800631e:	bfc1      	itttt	gt
 8006320:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8006324:	fa08 f803 	lslgt.w	r8, r8, r3
 8006328:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800632c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8006330:	bfd6      	itet	le
 8006332:	f1c3 0320 	rsble	r3, r3, #32
 8006336:	ea48 0003 	orrgt.w	r0, r8, r3
 800633a:	fa06 f003 	lslle.w	r0, r6, r3
 800633e:	f7fa f8e1 	bl	8000504 <__aeabi_ui2d>
 8006342:	2201      	movs	r2, #1
 8006344:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8006348:	3d01      	subs	r5, #1
 800634a:	920e      	str	r2, [sp, #56]	; 0x38
 800634c:	e76f      	b.n	800622e <_dtoa_r+0x126>
 800634e:	2301      	movs	r3, #1
 8006350:	e7b3      	b.n	80062ba <_dtoa_r+0x1b2>
 8006352:	900c      	str	r0, [sp, #48]	; 0x30
 8006354:	e7b2      	b.n	80062bc <_dtoa_r+0x1b4>
 8006356:	9b05      	ldr	r3, [sp, #20]
 8006358:	eba3 030b 	sub.w	r3, r3, fp
 800635c:	9305      	str	r3, [sp, #20]
 800635e:	f1cb 0300 	rsb	r3, fp, #0
 8006362:	9308      	str	r3, [sp, #32]
 8006364:	2300      	movs	r3, #0
 8006366:	930b      	str	r3, [sp, #44]	; 0x2c
 8006368:	e7bf      	b.n	80062ea <_dtoa_r+0x1e2>
 800636a:	2300      	movs	r3, #0
 800636c:	9309      	str	r3, [sp, #36]	; 0x24
 800636e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006370:	2b00      	cmp	r3, #0
 8006372:	dc52      	bgt.n	800641a <_dtoa_r+0x312>
 8006374:	2301      	movs	r3, #1
 8006376:	9301      	str	r3, [sp, #4]
 8006378:	9304      	str	r3, [sp, #16]
 800637a:	461a      	mov	r2, r3
 800637c:	920a      	str	r2, [sp, #40]	; 0x28
 800637e:	e00b      	b.n	8006398 <_dtoa_r+0x290>
 8006380:	2301      	movs	r3, #1
 8006382:	e7f3      	b.n	800636c <_dtoa_r+0x264>
 8006384:	2300      	movs	r3, #0
 8006386:	9309      	str	r3, [sp, #36]	; 0x24
 8006388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800638a:	445b      	add	r3, fp
 800638c:	9301      	str	r3, [sp, #4]
 800638e:	3301      	adds	r3, #1
 8006390:	2b01      	cmp	r3, #1
 8006392:	9304      	str	r3, [sp, #16]
 8006394:	bfb8      	it	lt
 8006396:	2301      	movlt	r3, #1
 8006398:	69e0      	ldr	r0, [r4, #28]
 800639a:	2100      	movs	r1, #0
 800639c:	2204      	movs	r2, #4
 800639e:	f102 0614 	add.w	r6, r2, #20
 80063a2:	429e      	cmp	r6, r3
 80063a4:	d93d      	bls.n	8006422 <_dtoa_r+0x31a>
 80063a6:	6041      	str	r1, [r0, #4]
 80063a8:	4620      	mov	r0, r4
 80063aa:	f000 fd9f 	bl	8006eec <_Balloc>
 80063ae:	9000      	str	r0, [sp, #0]
 80063b0:	2800      	cmp	r0, #0
 80063b2:	d139      	bne.n	8006428 <_dtoa_r+0x320>
 80063b4:	4b16      	ldr	r3, [pc, #88]	; (8006410 <_dtoa_r+0x308>)
 80063b6:	4602      	mov	r2, r0
 80063b8:	f240 11af 	movw	r1, #431	; 0x1af
 80063bc:	e6bd      	b.n	800613a <_dtoa_r+0x32>
 80063be:	2301      	movs	r3, #1
 80063c0:	e7e1      	b.n	8006386 <_dtoa_r+0x27e>
 80063c2:	2501      	movs	r5, #1
 80063c4:	2300      	movs	r3, #0
 80063c6:	9307      	str	r3, [sp, #28]
 80063c8:	9509      	str	r5, [sp, #36]	; 0x24
 80063ca:	f04f 33ff 	mov.w	r3, #4294967295
 80063ce:	9301      	str	r3, [sp, #4]
 80063d0:	9304      	str	r3, [sp, #16]
 80063d2:	2200      	movs	r2, #0
 80063d4:	2312      	movs	r3, #18
 80063d6:	e7d1      	b.n	800637c <_dtoa_r+0x274>
 80063d8:	636f4361 	.word	0x636f4361
 80063dc:	3fd287a7 	.word	0x3fd287a7
 80063e0:	8b60c8b3 	.word	0x8b60c8b3
 80063e4:	3fc68a28 	.word	0x3fc68a28
 80063e8:	509f79fb 	.word	0x509f79fb
 80063ec:	3fd34413 	.word	0x3fd34413
 80063f0:	08009826 	.word	0x08009826
 80063f4:	0800983d 	.word	0x0800983d
 80063f8:	7ff00000 	.word	0x7ff00000
 80063fc:	08009822 	.word	0x08009822
 8006400:	08009819 	.word	0x08009819
 8006404:	080097f1 	.word	0x080097f1
 8006408:	3ff80000 	.word	0x3ff80000
 800640c:	08009928 	.word	0x08009928
 8006410:	08009895 	.word	0x08009895
 8006414:	2301      	movs	r3, #1
 8006416:	9309      	str	r3, [sp, #36]	; 0x24
 8006418:	e7d7      	b.n	80063ca <_dtoa_r+0x2c2>
 800641a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800641c:	9301      	str	r3, [sp, #4]
 800641e:	9304      	str	r3, [sp, #16]
 8006420:	e7ba      	b.n	8006398 <_dtoa_r+0x290>
 8006422:	3101      	adds	r1, #1
 8006424:	0052      	lsls	r2, r2, #1
 8006426:	e7ba      	b.n	800639e <_dtoa_r+0x296>
 8006428:	69e3      	ldr	r3, [r4, #28]
 800642a:	9a00      	ldr	r2, [sp, #0]
 800642c:	601a      	str	r2, [r3, #0]
 800642e:	9b04      	ldr	r3, [sp, #16]
 8006430:	2b0e      	cmp	r3, #14
 8006432:	f200 80a8 	bhi.w	8006586 <_dtoa_r+0x47e>
 8006436:	2d00      	cmp	r5, #0
 8006438:	f000 80a5 	beq.w	8006586 <_dtoa_r+0x47e>
 800643c:	f1bb 0f00 	cmp.w	fp, #0
 8006440:	dd38      	ble.n	80064b4 <_dtoa_r+0x3ac>
 8006442:	4bc0      	ldr	r3, [pc, #768]	; (8006744 <_dtoa_r+0x63c>)
 8006444:	f00b 020f 	and.w	r2, fp, #15
 8006448:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800644c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8006450:	e9d3 6700 	ldrd	r6, r7, [r3]
 8006454:	ea4f 182b 	mov.w	r8, fp, asr #4
 8006458:	d019      	beq.n	800648e <_dtoa_r+0x386>
 800645a:	4bbb      	ldr	r3, [pc, #748]	; (8006748 <_dtoa_r+0x640>)
 800645c:	ec51 0b18 	vmov	r0, r1, d8
 8006460:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006464:	f7fa f9f2 	bl	800084c <__aeabi_ddiv>
 8006468:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800646c:	f008 080f 	and.w	r8, r8, #15
 8006470:	2503      	movs	r5, #3
 8006472:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006748 <_dtoa_r+0x640>
 8006476:	f1b8 0f00 	cmp.w	r8, #0
 800647a:	d10a      	bne.n	8006492 <_dtoa_r+0x38a>
 800647c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006480:	4632      	mov	r2, r6
 8006482:	463b      	mov	r3, r7
 8006484:	f7fa f9e2 	bl	800084c <__aeabi_ddiv>
 8006488:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800648c:	e02b      	b.n	80064e6 <_dtoa_r+0x3de>
 800648e:	2502      	movs	r5, #2
 8006490:	e7ef      	b.n	8006472 <_dtoa_r+0x36a>
 8006492:	f018 0f01 	tst.w	r8, #1
 8006496:	d008      	beq.n	80064aa <_dtoa_r+0x3a2>
 8006498:	4630      	mov	r0, r6
 800649a:	4639      	mov	r1, r7
 800649c:	e9d9 2300 	ldrd	r2, r3, [r9]
 80064a0:	f7fa f8aa 	bl	80005f8 <__aeabi_dmul>
 80064a4:	3501      	adds	r5, #1
 80064a6:	4606      	mov	r6, r0
 80064a8:	460f      	mov	r7, r1
 80064aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 80064ae:	f109 0908 	add.w	r9, r9, #8
 80064b2:	e7e0      	b.n	8006476 <_dtoa_r+0x36e>
 80064b4:	f000 809f 	beq.w	80065f6 <_dtoa_r+0x4ee>
 80064b8:	f1cb 0600 	rsb	r6, fp, #0
 80064bc:	4ba1      	ldr	r3, [pc, #644]	; (8006744 <_dtoa_r+0x63c>)
 80064be:	4fa2      	ldr	r7, [pc, #648]	; (8006748 <_dtoa_r+0x640>)
 80064c0:	f006 020f 	and.w	r2, r6, #15
 80064c4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064cc:	ec51 0b18 	vmov	r0, r1, d8
 80064d0:	f7fa f892 	bl	80005f8 <__aeabi_dmul>
 80064d4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064d8:	1136      	asrs	r6, r6, #4
 80064da:	2300      	movs	r3, #0
 80064dc:	2502      	movs	r5, #2
 80064de:	2e00      	cmp	r6, #0
 80064e0:	d17e      	bne.n	80065e0 <_dtoa_r+0x4d8>
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1d0      	bne.n	8006488 <_dtoa_r+0x380>
 80064e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80064e8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f000 8084 	beq.w	80065fa <_dtoa_r+0x4f2>
 80064f2:	4b96      	ldr	r3, [pc, #600]	; (800674c <_dtoa_r+0x644>)
 80064f4:	2200      	movs	r2, #0
 80064f6:	4640      	mov	r0, r8
 80064f8:	4649      	mov	r1, r9
 80064fa:	f7fa faef 	bl	8000adc <__aeabi_dcmplt>
 80064fe:	2800      	cmp	r0, #0
 8006500:	d07b      	beq.n	80065fa <_dtoa_r+0x4f2>
 8006502:	9b04      	ldr	r3, [sp, #16]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d078      	beq.n	80065fa <_dtoa_r+0x4f2>
 8006508:	9b01      	ldr	r3, [sp, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	dd39      	ble.n	8006582 <_dtoa_r+0x47a>
 800650e:	4b90      	ldr	r3, [pc, #576]	; (8006750 <_dtoa_r+0x648>)
 8006510:	2200      	movs	r2, #0
 8006512:	4640      	mov	r0, r8
 8006514:	4649      	mov	r1, r9
 8006516:	f7fa f86f 	bl	80005f8 <__aeabi_dmul>
 800651a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800651e:	9e01      	ldr	r6, [sp, #4]
 8006520:	f10b 37ff 	add.w	r7, fp, #4294967295
 8006524:	3501      	adds	r5, #1
 8006526:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800652a:	4628      	mov	r0, r5
 800652c:	f7f9 fffa 	bl	8000524 <__aeabi_i2d>
 8006530:	4642      	mov	r2, r8
 8006532:	464b      	mov	r3, r9
 8006534:	f7fa f860 	bl	80005f8 <__aeabi_dmul>
 8006538:	4b86      	ldr	r3, [pc, #536]	; (8006754 <_dtoa_r+0x64c>)
 800653a:	2200      	movs	r2, #0
 800653c:	f7f9 fea6 	bl	800028c <__adddf3>
 8006540:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8006544:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006548:	9303      	str	r3, [sp, #12]
 800654a:	2e00      	cmp	r6, #0
 800654c:	d158      	bne.n	8006600 <_dtoa_r+0x4f8>
 800654e:	4b82      	ldr	r3, [pc, #520]	; (8006758 <_dtoa_r+0x650>)
 8006550:	2200      	movs	r2, #0
 8006552:	4640      	mov	r0, r8
 8006554:	4649      	mov	r1, r9
 8006556:	f7f9 fe97 	bl	8000288 <__aeabi_dsub>
 800655a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800655e:	4680      	mov	r8, r0
 8006560:	4689      	mov	r9, r1
 8006562:	f7fa fad9 	bl	8000b18 <__aeabi_dcmpgt>
 8006566:	2800      	cmp	r0, #0
 8006568:	f040 8296 	bne.w	8006a98 <_dtoa_r+0x990>
 800656c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8006570:	4640      	mov	r0, r8
 8006572:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8006576:	4649      	mov	r1, r9
 8006578:	f7fa fab0 	bl	8000adc <__aeabi_dcmplt>
 800657c:	2800      	cmp	r0, #0
 800657e:	f040 8289 	bne.w	8006a94 <_dtoa_r+0x98c>
 8006582:	ed8d 8b02 	vstr	d8, [sp, #8]
 8006586:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006588:	2b00      	cmp	r3, #0
 800658a:	f2c0 814e 	blt.w	800682a <_dtoa_r+0x722>
 800658e:	f1bb 0f0e 	cmp.w	fp, #14
 8006592:	f300 814a 	bgt.w	800682a <_dtoa_r+0x722>
 8006596:	4b6b      	ldr	r3, [pc, #428]	; (8006744 <_dtoa_r+0x63c>)
 8006598:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800659c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80065a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f280 80dc 	bge.w	8006760 <_dtoa_r+0x658>
 80065a8:	9b04      	ldr	r3, [sp, #16]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f300 80d8 	bgt.w	8006760 <_dtoa_r+0x658>
 80065b0:	f040 826f 	bne.w	8006a92 <_dtoa_r+0x98a>
 80065b4:	4b68      	ldr	r3, [pc, #416]	; (8006758 <_dtoa_r+0x650>)
 80065b6:	2200      	movs	r2, #0
 80065b8:	4640      	mov	r0, r8
 80065ba:	4649      	mov	r1, r9
 80065bc:	f7fa f81c 	bl	80005f8 <__aeabi_dmul>
 80065c0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065c4:	f7fa fa9e 	bl	8000b04 <__aeabi_dcmpge>
 80065c8:	9e04      	ldr	r6, [sp, #16]
 80065ca:	4637      	mov	r7, r6
 80065cc:	2800      	cmp	r0, #0
 80065ce:	f040 8245 	bne.w	8006a5c <_dtoa_r+0x954>
 80065d2:	9d00      	ldr	r5, [sp, #0]
 80065d4:	2331      	movs	r3, #49	; 0x31
 80065d6:	f805 3b01 	strb.w	r3, [r5], #1
 80065da:	f10b 0b01 	add.w	fp, fp, #1
 80065de:	e241      	b.n	8006a64 <_dtoa_r+0x95c>
 80065e0:	07f2      	lsls	r2, r6, #31
 80065e2:	d505      	bpl.n	80065f0 <_dtoa_r+0x4e8>
 80065e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80065e8:	f7fa f806 	bl	80005f8 <__aeabi_dmul>
 80065ec:	3501      	adds	r5, #1
 80065ee:	2301      	movs	r3, #1
 80065f0:	1076      	asrs	r6, r6, #1
 80065f2:	3708      	adds	r7, #8
 80065f4:	e773      	b.n	80064de <_dtoa_r+0x3d6>
 80065f6:	2502      	movs	r5, #2
 80065f8:	e775      	b.n	80064e6 <_dtoa_r+0x3de>
 80065fa:	9e04      	ldr	r6, [sp, #16]
 80065fc:	465f      	mov	r7, fp
 80065fe:	e792      	b.n	8006526 <_dtoa_r+0x41e>
 8006600:	9900      	ldr	r1, [sp, #0]
 8006602:	4b50      	ldr	r3, [pc, #320]	; (8006744 <_dtoa_r+0x63c>)
 8006604:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006608:	4431      	add	r1, r6
 800660a:	9102      	str	r1, [sp, #8]
 800660c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800660e:	eeb0 9a47 	vmov.f32	s18, s14
 8006612:	eef0 9a67 	vmov.f32	s19, s15
 8006616:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800661a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800661e:	2900      	cmp	r1, #0
 8006620:	d044      	beq.n	80066ac <_dtoa_r+0x5a4>
 8006622:	494e      	ldr	r1, [pc, #312]	; (800675c <_dtoa_r+0x654>)
 8006624:	2000      	movs	r0, #0
 8006626:	f7fa f911 	bl	800084c <__aeabi_ddiv>
 800662a:	ec53 2b19 	vmov	r2, r3, d9
 800662e:	f7f9 fe2b 	bl	8000288 <__aeabi_dsub>
 8006632:	9d00      	ldr	r5, [sp, #0]
 8006634:	ec41 0b19 	vmov	d9, r0, r1
 8006638:	4649      	mov	r1, r9
 800663a:	4640      	mov	r0, r8
 800663c:	f7fa fa8c 	bl	8000b58 <__aeabi_d2iz>
 8006640:	4606      	mov	r6, r0
 8006642:	f7f9 ff6f 	bl	8000524 <__aeabi_i2d>
 8006646:	4602      	mov	r2, r0
 8006648:	460b      	mov	r3, r1
 800664a:	4640      	mov	r0, r8
 800664c:	4649      	mov	r1, r9
 800664e:	f7f9 fe1b 	bl	8000288 <__aeabi_dsub>
 8006652:	3630      	adds	r6, #48	; 0x30
 8006654:	f805 6b01 	strb.w	r6, [r5], #1
 8006658:	ec53 2b19 	vmov	r2, r3, d9
 800665c:	4680      	mov	r8, r0
 800665e:	4689      	mov	r9, r1
 8006660:	f7fa fa3c 	bl	8000adc <__aeabi_dcmplt>
 8006664:	2800      	cmp	r0, #0
 8006666:	d164      	bne.n	8006732 <_dtoa_r+0x62a>
 8006668:	4642      	mov	r2, r8
 800666a:	464b      	mov	r3, r9
 800666c:	4937      	ldr	r1, [pc, #220]	; (800674c <_dtoa_r+0x644>)
 800666e:	2000      	movs	r0, #0
 8006670:	f7f9 fe0a 	bl	8000288 <__aeabi_dsub>
 8006674:	ec53 2b19 	vmov	r2, r3, d9
 8006678:	f7fa fa30 	bl	8000adc <__aeabi_dcmplt>
 800667c:	2800      	cmp	r0, #0
 800667e:	f040 80b6 	bne.w	80067ee <_dtoa_r+0x6e6>
 8006682:	9b02      	ldr	r3, [sp, #8]
 8006684:	429d      	cmp	r5, r3
 8006686:	f43f af7c 	beq.w	8006582 <_dtoa_r+0x47a>
 800668a:	4b31      	ldr	r3, [pc, #196]	; (8006750 <_dtoa_r+0x648>)
 800668c:	ec51 0b19 	vmov	r0, r1, d9
 8006690:	2200      	movs	r2, #0
 8006692:	f7f9 ffb1 	bl	80005f8 <__aeabi_dmul>
 8006696:	4b2e      	ldr	r3, [pc, #184]	; (8006750 <_dtoa_r+0x648>)
 8006698:	ec41 0b19 	vmov	d9, r0, r1
 800669c:	2200      	movs	r2, #0
 800669e:	4640      	mov	r0, r8
 80066a0:	4649      	mov	r1, r9
 80066a2:	f7f9 ffa9 	bl	80005f8 <__aeabi_dmul>
 80066a6:	4680      	mov	r8, r0
 80066a8:	4689      	mov	r9, r1
 80066aa:	e7c5      	b.n	8006638 <_dtoa_r+0x530>
 80066ac:	ec51 0b17 	vmov	r0, r1, d7
 80066b0:	f7f9 ffa2 	bl	80005f8 <__aeabi_dmul>
 80066b4:	9b02      	ldr	r3, [sp, #8]
 80066b6:	9d00      	ldr	r5, [sp, #0]
 80066b8:	930f      	str	r3, [sp, #60]	; 0x3c
 80066ba:	ec41 0b19 	vmov	d9, r0, r1
 80066be:	4649      	mov	r1, r9
 80066c0:	4640      	mov	r0, r8
 80066c2:	f7fa fa49 	bl	8000b58 <__aeabi_d2iz>
 80066c6:	4606      	mov	r6, r0
 80066c8:	f7f9 ff2c 	bl	8000524 <__aeabi_i2d>
 80066cc:	3630      	adds	r6, #48	; 0x30
 80066ce:	4602      	mov	r2, r0
 80066d0:	460b      	mov	r3, r1
 80066d2:	4640      	mov	r0, r8
 80066d4:	4649      	mov	r1, r9
 80066d6:	f7f9 fdd7 	bl	8000288 <__aeabi_dsub>
 80066da:	f805 6b01 	strb.w	r6, [r5], #1
 80066de:	9b02      	ldr	r3, [sp, #8]
 80066e0:	429d      	cmp	r5, r3
 80066e2:	4680      	mov	r8, r0
 80066e4:	4689      	mov	r9, r1
 80066e6:	f04f 0200 	mov.w	r2, #0
 80066ea:	d124      	bne.n	8006736 <_dtoa_r+0x62e>
 80066ec:	4b1b      	ldr	r3, [pc, #108]	; (800675c <_dtoa_r+0x654>)
 80066ee:	ec51 0b19 	vmov	r0, r1, d9
 80066f2:	f7f9 fdcb 	bl	800028c <__adddf3>
 80066f6:	4602      	mov	r2, r0
 80066f8:	460b      	mov	r3, r1
 80066fa:	4640      	mov	r0, r8
 80066fc:	4649      	mov	r1, r9
 80066fe:	f7fa fa0b 	bl	8000b18 <__aeabi_dcmpgt>
 8006702:	2800      	cmp	r0, #0
 8006704:	d173      	bne.n	80067ee <_dtoa_r+0x6e6>
 8006706:	ec53 2b19 	vmov	r2, r3, d9
 800670a:	4914      	ldr	r1, [pc, #80]	; (800675c <_dtoa_r+0x654>)
 800670c:	2000      	movs	r0, #0
 800670e:	f7f9 fdbb 	bl	8000288 <__aeabi_dsub>
 8006712:	4602      	mov	r2, r0
 8006714:	460b      	mov	r3, r1
 8006716:	4640      	mov	r0, r8
 8006718:	4649      	mov	r1, r9
 800671a:	f7fa f9df 	bl	8000adc <__aeabi_dcmplt>
 800671e:	2800      	cmp	r0, #0
 8006720:	f43f af2f 	beq.w	8006582 <_dtoa_r+0x47a>
 8006724:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8006726:	1e6b      	subs	r3, r5, #1
 8006728:	930f      	str	r3, [sp, #60]	; 0x3c
 800672a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800672e:	2b30      	cmp	r3, #48	; 0x30
 8006730:	d0f8      	beq.n	8006724 <_dtoa_r+0x61c>
 8006732:	46bb      	mov	fp, r7
 8006734:	e04a      	b.n	80067cc <_dtoa_r+0x6c4>
 8006736:	4b06      	ldr	r3, [pc, #24]	; (8006750 <_dtoa_r+0x648>)
 8006738:	f7f9 ff5e 	bl	80005f8 <__aeabi_dmul>
 800673c:	4680      	mov	r8, r0
 800673e:	4689      	mov	r9, r1
 8006740:	e7bd      	b.n	80066be <_dtoa_r+0x5b6>
 8006742:	bf00      	nop
 8006744:	08009928 	.word	0x08009928
 8006748:	08009900 	.word	0x08009900
 800674c:	3ff00000 	.word	0x3ff00000
 8006750:	40240000 	.word	0x40240000
 8006754:	401c0000 	.word	0x401c0000
 8006758:	40140000 	.word	0x40140000
 800675c:	3fe00000 	.word	0x3fe00000
 8006760:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8006764:	9d00      	ldr	r5, [sp, #0]
 8006766:	4642      	mov	r2, r8
 8006768:	464b      	mov	r3, r9
 800676a:	4630      	mov	r0, r6
 800676c:	4639      	mov	r1, r7
 800676e:	f7fa f86d 	bl	800084c <__aeabi_ddiv>
 8006772:	f7fa f9f1 	bl	8000b58 <__aeabi_d2iz>
 8006776:	9001      	str	r0, [sp, #4]
 8006778:	f7f9 fed4 	bl	8000524 <__aeabi_i2d>
 800677c:	4642      	mov	r2, r8
 800677e:	464b      	mov	r3, r9
 8006780:	f7f9 ff3a 	bl	80005f8 <__aeabi_dmul>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	4630      	mov	r0, r6
 800678a:	4639      	mov	r1, r7
 800678c:	f7f9 fd7c 	bl	8000288 <__aeabi_dsub>
 8006790:	9e01      	ldr	r6, [sp, #4]
 8006792:	9f04      	ldr	r7, [sp, #16]
 8006794:	3630      	adds	r6, #48	; 0x30
 8006796:	f805 6b01 	strb.w	r6, [r5], #1
 800679a:	9e00      	ldr	r6, [sp, #0]
 800679c:	1bae      	subs	r6, r5, r6
 800679e:	42b7      	cmp	r7, r6
 80067a0:	4602      	mov	r2, r0
 80067a2:	460b      	mov	r3, r1
 80067a4:	d134      	bne.n	8006810 <_dtoa_r+0x708>
 80067a6:	f7f9 fd71 	bl	800028c <__adddf3>
 80067aa:	4642      	mov	r2, r8
 80067ac:	464b      	mov	r3, r9
 80067ae:	4606      	mov	r6, r0
 80067b0:	460f      	mov	r7, r1
 80067b2:	f7fa f9b1 	bl	8000b18 <__aeabi_dcmpgt>
 80067b6:	b9c8      	cbnz	r0, 80067ec <_dtoa_r+0x6e4>
 80067b8:	4642      	mov	r2, r8
 80067ba:	464b      	mov	r3, r9
 80067bc:	4630      	mov	r0, r6
 80067be:	4639      	mov	r1, r7
 80067c0:	f7fa f982 	bl	8000ac8 <__aeabi_dcmpeq>
 80067c4:	b110      	cbz	r0, 80067cc <_dtoa_r+0x6c4>
 80067c6:	9b01      	ldr	r3, [sp, #4]
 80067c8:	07db      	lsls	r3, r3, #31
 80067ca:	d40f      	bmi.n	80067ec <_dtoa_r+0x6e4>
 80067cc:	4651      	mov	r1, sl
 80067ce:	4620      	mov	r0, r4
 80067d0:	f000 fbcc 	bl	8006f6c <_Bfree>
 80067d4:	2300      	movs	r3, #0
 80067d6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80067d8:	702b      	strb	r3, [r5, #0]
 80067da:	f10b 0301 	add.w	r3, fp, #1
 80067de:	6013      	str	r3, [r2, #0]
 80067e0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	f43f ace2 	beq.w	80061ac <_dtoa_r+0xa4>
 80067e8:	601d      	str	r5, [r3, #0]
 80067ea:	e4df      	b.n	80061ac <_dtoa_r+0xa4>
 80067ec:	465f      	mov	r7, fp
 80067ee:	462b      	mov	r3, r5
 80067f0:	461d      	mov	r5, r3
 80067f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067f6:	2a39      	cmp	r2, #57	; 0x39
 80067f8:	d106      	bne.n	8006808 <_dtoa_r+0x700>
 80067fa:	9a00      	ldr	r2, [sp, #0]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d1f7      	bne.n	80067f0 <_dtoa_r+0x6e8>
 8006800:	9900      	ldr	r1, [sp, #0]
 8006802:	2230      	movs	r2, #48	; 0x30
 8006804:	3701      	adds	r7, #1
 8006806:	700a      	strb	r2, [r1, #0]
 8006808:	781a      	ldrb	r2, [r3, #0]
 800680a:	3201      	adds	r2, #1
 800680c:	701a      	strb	r2, [r3, #0]
 800680e:	e790      	b.n	8006732 <_dtoa_r+0x62a>
 8006810:	4ba3      	ldr	r3, [pc, #652]	; (8006aa0 <_dtoa_r+0x998>)
 8006812:	2200      	movs	r2, #0
 8006814:	f7f9 fef0 	bl	80005f8 <__aeabi_dmul>
 8006818:	2200      	movs	r2, #0
 800681a:	2300      	movs	r3, #0
 800681c:	4606      	mov	r6, r0
 800681e:	460f      	mov	r7, r1
 8006820:	f7fa f952 	bl	8000ac8 <__aeabi_dcmpeq>
 8006824:	2800      	cmp	r0, #0
 8006826:	d09e      	beq.n	8006766 <_dtoa_r+0x65e>
 8006828:	e7d0      	b.n	80067cc <_dtoa_r+0x6c4>
 800682a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800682c:	2a00      	cmp	r2, #0
 800682e:	f000 80ca 	beq.w	80069c6 <_dtoa_r+0x8be>
 8006832:	9a07      	ldr	r2, [sp, #28]
 8006834:	2a01      	cmp	r2, #1
 8006836:	f300 80ad 	bgt.w	8006994 <_dtoa_r+0x88c>
 800683a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800683c:	2a00      	cmp	r2, #0
 800683e:	f000 80a5 	beq.w	800698c <_dtoa_r+0x884>
 8006842:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8006846:	9e08      	ldr	r6, [sp, #32]
 8006848:	9d05      	ldr	r5, [sp, #20]
 800684a:	9a05      	ldr	r2, [sp, #20]
 800684c:	441a      	add	r2, r3
 800684e:	9205      	str	r2, [sp, #20]
 8006850:	9a06      	ldr	r2, [sp, #24]
 8006852:	2101      	movs	r1, #1
 8006854:	441a      	add	r2, r3
 8006856:	4620      	mov	r0, r4
 8006858:	9206      	str	r2, [sp, #24]
 800685a:	f000 fc87 	bl	800716c <__i2b>
 800685e:	4607      	mov	r7, r0
 8006860:	b165      	cbz	r5, 800687c <_dtoa_r+0x774>
 8006862:	9b06      	ldr	r3, [sp, #24]
 8006864:	2b00      	cmp	r3, #0
 8006866:	dd09      	ble.n	800687c <_dtoa_r+0x774>
 8006868:	42ab      	cmp	r3, r5
 800686a:	9a05      	ldr	r2, [sp, #20]
 800686c:	bfa8      	it	ge
 800686e:	462b      	movge	r3, r5
 8006870:	1ad2      	subs	r2, r2, r3
 8006872:	9205      	str	r2, [sp, #20]
 8006874:	9a06      	ldr	r2, [sp, #24]
 8006876:	1aed      	subs	r5, r5, r3
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	9306      	str	r3, [sp, #24]
 800687c:	9b08      	ldr	r3, [sp, #32]
 800687e:	b1f3      	cbz	r3, 80068be <_dtoa_r+0x7b6>
 8006880:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 80a3 	beq.w	80069ce <_dtoa_r+0x8c6>
 8006888:	2e00      	cmp	r6, #0
 800688a:	dd10      	ble.n	80068ae <_dtoa_r+0x7a6>
 800688c:	4639      	mov	r1, r7
 800688e:	4632      	mov	r2, r6
 8006890:	4620      	mov	r0, r4
 8006892:	f000 fd2b 	bl	80072ec <__pow5mult>
 8006896:	4652      	mov	r2, sl
 8006898:	4601      	mov	r1, r0
 800689a:	4607      	mov	r7, r0
 800689c:	4620      	mov	r0, r4
 800689e:	f000 fc7b 	bl	8007198 <__multiply>
 80068a2:	4651      	mov	r1, sl
 80068a4:	4680      	mov	r8, r0
 80068a6:	4620      	mov	r0, r4
 80068a8:	f000 fb60 	bl	8006f6c <_Bfree>
 80068ac:	46c2      	mov	sl, r8
 80068ae:	9b08      	ldr	r3, [sp, #32]
 80068b0:	1b9a      	subs	r2, r3, r6
 80068b2:	d004      	beq.n	80068be <_dtoa_r+0x7b6>
 80068b4:	4651      	mov	r1, sl
 80068b6:	4620      	mov	r0, r4
 80068b8:	f000 fd18 	bl	80072ec <__pow5mult>
 80068bc:	4682      	mov	sl, r0
 80068be:	2101      	movs	r1, #1
 80068c0:	4620      	mov	r0, r4
 80068c2:	f000 fc53 	bl	800716c <__i2b>
 80068c6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	4606      	mov	r6, r0
 80068cc:	f340 8081 	ble.w	80069d2 <_dtoa_r+0x8ca>
 80068d0:	461a      	mov	r2, r3
 80068d2:	4601      	mov	r1, r0
 80068d4:	4620      	mov	r0, r4
 80068d6:	f000 fd09 	bl	80072ec <__pow5mult>
 80068da:	9b07      	ldr	r3, [sp, #28]
 80068dc:	2b01      	cmp	r3, #1
 80068de:	4606      	mov	r6, r0
 80068e0:	dd7a      	ble.n	80069d8 <_dtoa_r+0x8d0>
 80068e2:	f04f 0800 	mov.w	r8, #0
 80068e6:	6933      	ldr	r3, [r6, #16]
 80068e8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80068ec:	6918      	ldr	r0, [r3, #16]
 80068ee:	f000 fbef 	bl	80070d0 <__hi0bits>
 80068f2:	f1c0 0020 	rsb	r0, r0, #32
 80068f6:	9b06      	ldr	r3, [sp, #24]
 80068f8:	4418      	add	r0, r3
 80068fa:	f010 001f 	ands.w	r0, r0, #31
 80068fe:	f000 8094 	beq.w	8006a2a <_dtoa_r+0x922>
 8006902:	f1c0 0320 	rsb	r3, r0, #32
 8006906:	2b04      	cmp	r3, #4
 8006908:	f340 8085 	ble.w	8006a16 <_dtoa_r+0x90e>
 800690c:	9b05      	ldr	r3, [sp, #20]
 800690e:	f1c0 001c 	rsb	r0, r0, #28
 8006912:	4403      	add	r3, r0
 8006914:	9305      	str	r3, [sp, #20]
 8006916:	9b06      	ldr	r3, [sp, #24]
 8006918:	4403      	add	r3, r0
 800691a:	4405      	add	r5, r0
 800691c:	9306      	str	r3, [sp, #24]
 800691e:	9b05      	ldr	r3, [sp, #20]
 8006920:	2b00      	cmp	r3, #0
 8006922:	dd05      	ble.n	8006930 <_dtoa_r+0x828>
 8006924:	4651      	mov	r1, sl
 8006926:	461a      	mov	r2, r3
 8006928:	4620      	mov	r0, r4
 800692a:	f000 fd39 	bl	80073a0 <__lshift>
 800692e:	4682      	mov	sl, r0
 8006930:	9b06      	ldr	r3, [sp, #24]
 8006932:	2b00      	cmp	r3, #0
 8006934:	dd05      	ble.n	8006942 <_dtoa_r+0x83a>
 8006936:	4631      	mov	r1, r6
 8006938:	461a      	mov	r2, r3
 800693a:	4620      	mov	r0, r4
 800693c:	f000 fd30 	bl	80073a0 <__lshift>
 8006940:	4606      	mov	r6, r0
 8006942:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8006944:	2b00      	cmp	r3, #0
 8006946:	d072      	beq.n	8006a2e <_dtoa_r+0x926>
 8006948:	4631      	mov	r1, r6
 800694a:	4650      	mov	r0, sl
 800694c:	f000 fd94 	bl	8007478 <__mcmp>
 8006950:	2800      	cmp	r0, #0
 8006952:	da6c      	bge.n	8006a2e <_dtoa_r+0x926>
 8006954:	2300      	movs	r3, #0
 8006956:	4651      	mov	r1, sl
 8006958:	220a      	movs	r2, #10
 800695a:	4620      	mov	r0, r4
 800695c:	f000 fb28 	bl	8006fb0 <__multadd>
 8006960:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006962:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006966:	4682      	mov	sl, r0
 8006968:	2b00      	cmp	r3, #0
 800696a:	f000 81b0 	beq.w	8006cce <_dtoa_r+0xbc6>
 800696e:	2300      	movs	r3, #0
 8006970:	4639      	mov	r1, r7
 8006972:	220a      	movs	r2, #10
 8006974:	4620      	mov	r0, r4
 8006976:	f000 fb1b 	bl	8006fb0 <__multadd>
 800697a:	9b01      	ldr	r3, [sp, #4]
 800697c:	2b00      	cmp	r3, #0
 800697e:	4607      	mov	r7, r0
 8006980:	f300 8096 	bgt.w	8006ab0 <_dtoa_r+0x9a8>
 8006984:	9b07      	ldr	r3, [sp, #28]
 8006986:	2b02      	cmp	r3, #2
 8006988:	dc59      	bgt.n	8006a3e <_dtoa_r+0x936>
 800698a:	e091      	b.n	8006ab0 <_dtoa_r+0x9a8>
 800698c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800698e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8006992:	e758      	b.n	8006846 <_dtoa_r+0x73e>
 8006994:	9b04      	ldr	r3, [sp, #16]
 8006996:	1e5e      	subs	r6, r3, #1
 8006998:	9b08      	ldr	r3, [sp, #32]
 800699a:	42b3      	cmp	r3, r6
 800699c:	bfbf      	itttt	lt
 800699e:	9b08      	ldrlt	r3, [sp, #32]
 80069a0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 80069a2:	9608      	strlt	r6, [sp, #32]
 80069a4:	1af3      	sublt	r3, r6, r3
 80069a6:	bfb4      	ite	lt
 80069a8:	18d2      	addlt	r2, r2, r3
 80069aa:	1b9e      	subge	r6, r3, r6
 80069ac:	9b04      	ldr	r3, [sp, #16]
 80069ae:	bfbc      	itt	lt
 80069b0:	920b      	strlt	r2, [sp, #44]	; 0x2c
 80069b2:	2600      	movlt	r6, #0
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	bfb7      	itett	lt
 80069b8:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80069bc:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80069c0:	1a9d      	sublt	r5, r3, r2
 80069c2:	2300      	movlt	r3, #0
 80069c4:	e741      	b.n	800684a <_dtoa_r+0x742>
 80069c6:	9e08      	ldr	r6, [sp, #32]
 80069c8:	9d05      	ldr	r5, [sp, #20]
 80069ca:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80069cc:	e748      	b.n	8006860 <_dtoa_r+0x758>
 80069ce:	9a08      	ldr	r2, [sp, #32]
 80069d0:	e770      	b.n	80068b4 <_dtoa_r+0x7ac>
 80069d2:	9b07      	ldr	r3, [sp, #28]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	dc19      	bgt.n	8006a0c <_dtoa_r+0x904>
 80069d8:	9b02      	ldr	r3, [sp, #8]
 80069da:	b9bb      	cbnz	r3, 8006a0c <_dtoa_r+0x904>
 80069dc:	9b03      	ldr	r3, [sp, #12]
 80069de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80069e2:	b99b      	cbnz	r3, 8006a0c <_dtoa_r+0x904>
 80069e4:	9b03      	ldr	r3, [sp, #12]
 80069e6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80069ea:	0d1b      	lsrs	r3, r3, #20
 80069ec:	051b      	lsls	r3, r3, #20
 80069ee:	b183      	cbz	r3, 8006a12 <_dtoa_r+0x90a>
 80069f0:	9b05      	ldr	r3, [sp, #20]
 80069f2:	3301      	adds	r3, #1
 80069f4:	9305      	str	r3, [sp, #20]
 80069f6:	9b06      	ldr	r3, [sp, #24]
 80069f8:	3301      	adds	r3, #1
 80069fa:	9306      	str	r3, [sp, #24]
 80069fc:	f04f 0801 	mov.w	r8, #1
 8006a00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	f47f af6f 	bne.w	80068e6 <_dtoa_r+0x7de>
 8006a08:	2001      	movs	r0, #1
 8006a0a:	e774      	b.n	80068f6 <_dtoa_r+0x7ee>
 8006a0c:	f04f 0800 	mov.w	r8, #0
 8006a10:	e7f6      	b.n	8006a00 <_dtoa_r+0x8f8>
 8006a12:	4698      	mov	r8, r3
 8006a14:	e7f4      	b.n	8006a00 <_dtoa_r+0x8f8>
 8006a16:	d082      	beq.n	800691e <_dtoa_r+0x816>
 8006a18:	9a05      	ldr	r2, [sp, #20]
 8006a1a:	331c      	adds	r3, #28
 8006a1c:	441a      	add	r2, r3
 8006a1e:	9205      	str	r2, [sp, #20]
 8006a20:	9a06      	ldr	r2, [sp, #24]
 8006a22:	441a      	add	r2, r3
 8006a24:	441d      	add	r5, r3
 8006a26:	9206      	str	r2, [sp, #24]
 8006a28:	e779      	b.n	800691e <_dtoa_r+0x816>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	e7f4      	b.n	8006a18 <_dtoa_r+0x910>
 8006a2e:	9b04      	ldr	r3, [sp, #16]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	dc37      	bgt.n	8006aa4 <_dtoa_r+0x99c>
 8006a34:	9b07      	ldr	r3, [sp, #28]
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	dd34      	ble.n	8006aa4 <_dtoa_r+0x99c>
 8006a3a:	9b04      	ldr	r3, [sp, #16]
 8006a3c:	9301      	str	r3, [sp, #4]
 8006a3e:	9b01      	ldr	r3, [sp, #4]
 8006a40:	b963      	cbnz	r3, 8006a5c <_dtoa_r+0x954>
 8006a42:	4631      	mov	r1, r6
 8006a44:	2205      	movs	r2, #5
 8006a46:	4620      	mov	r0, r4
 8006a48:	f000 fab2 	bl	8006fb0 <__multadd>
 8006a4c:	4601      	mov	r1, r0
 8006a4e:	4606      	mov	r6, r0
 8006a50:	4650      	mov	r0, sl
 8006a52:	f000 fd11 	bl	8007478 <__mcmp>
 8006a56:	2800      	cmp	r0, #0
 8006a58:	f73f adbb 	bgt.w	80065d2 <_dtoa_r+0x4ca>
 8006a5c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a5e:	9d00      	ldr	r5, [sp, #0]
 8006a60:	ea6f 0b03 	mvn.w	fp, r3
 8006a64:	f04f 0800 	mov.w	r8, #0
 8006a68:	4631      	mov	r1, r6
 8006a6a:	4620      	mov	r0, r4
 8006a6c:	f000 fa7e 	bl	8006f6c <_Bfree>
 8006a70:	2f00      	cmp	r7, #0
 8006a72:	f43f aeab 	beq.w	80067cc <_dtoa_r+0x6c4>
 8006a76:	f1b8 0f00 	cmp.w	r8, #0
 8006a7a:	d005      	beq.n	8006a88 <_dtoa_r+0x980>
 8006a7c:	45b8      	cmp	r8, r7
 8006a7e:	d003      	beq.n	8006a88 <_dtoa_r+0x980>
 8006a80:	4641      	mov	r1, r8
 8006a82:	4620      	mov	r0, r4
 8006a84:	f000 fa72 	bl	8006f6c <_Bfree>
 8006a88:	4639      	mov	r1, r7
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	f000 fa6e 	bl	8006f6c <_Bfree>
 8006a90:	e69c      	b.n	80067cc <_dtoa_r+0x6c4>
 8006a92:	2600      	movs	r6, #0
 8006a94:	4637      	mov	r7, r6
 8006a96:	e7e1      	b.n	8006a5c <_dtoa_r+0x954>
 8006a98:	46bb      	mov	fp, r7
 8006a9a:	4637      	mov	r7, r6
 8006a9c:	e599      	b.n	80065d2 <_dtoa_r+0x4ca>
 8006a9e:	bf00      	nop
 8006aa0:	40240000 	.word	0x40240000
 8006aa4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f000 80c8 	beq.w	8006c3c <_dtoa_r+0xb34>
 8006aac:	9b04      	ldr	r3, [sp, #16]
 8006aae:	9301      	str	r3, [sp, #4]
 8006ab0:	2d00      	cmp	r5, #0
 8006ab2:	dd05      	ble.n	8006ac0 <_dtoa_r+0x9b8>
 8006ab4:	4639      	mov	r1, r7
 8006ab6:	462a      	mov	r2, r5
 8006ab8:	4620      	mov	r0, r4
 8006aba:	f000 fc71 	bl	80073a0 <__lshift>
 8006abe:	4607      	mov	r7, r0
 8006ac0:	f1b8 0f00 	cmp.w	r8, #0
 8006ac4:	d05b      	beq.n	8006b7e <_dtoa_r+0xa76>
 8006ac6:	6879      	ldr	r1, [r7, #4]
 8006ac8:	4620      	mov	r0, r4
 8006aca:	f000 fa0f 	bl	8006eec <_Balloc>
 8006ace:	4605      	mov	r5, r0
 8006ad0:	b928      	cbnz	r0, 8006ade <_dtoa_r+0x9d6>
 8006ad2:	4b83      	ldr	r3, [pc, #524]	; (8006ce0 <_dtoa_r+0xbd8>)
 8006ad4:	4602      	mov	r2, r0
 8006ad6:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006ada:	f7ff bb2e 	b.w	800613a <_dtoa_r+0x32>
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	3202      	adds	r2, #2
 8006ae2:	0092      	lsls	r2, r2, #2
 8006ae4:	f107 010c 	add.w	r1, r7, #12
 8006ae8:	300c      	adds	r0, #12
 8006aea:	f002 f94d 	bl	8008d88 <memcpy>
 8006aee:	2201      	movs	r2, #1
 8006af0:	4629      	mov	r1, r5
 8006af2:	4620      	mov	r0, r4
 8006af4:	f000 fc54 	bl	80073a0 <__lshift>
 8006af8:	9b00      	ldr	r3, [sp, #0]
 8006afa:	3301      	adds	r3, #1
 8006afc:	9304      	str	r3, [sp, #16]
 8006afe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b02:	4413      	add	r3, r2
 8006b04:	9308      	str	r3, [sp, #32]
 8006b06:	9b02      	ldr	r3, [sp, #8]
 8006b08:	f003 0301 	and.w	r3, r3, #1
 8006b0c:	46b8      	mov	r8, r7
 8006b0e:	9306      	str	r3, [sp, #24]
 8006b10:	4607      	mov	r7, r0
 8006b12:	9b04      	ldr	r3, [sp, #16]
 8006b14:	4631      	mov	r1, r6
 8006b16:	3b01      	subs	r3, #1
 8006b18:	4650      	mov	r0, sl
 8006b1a:	9301      	str	r3, [sp, #4]
 8006b1c:	f7ff fa6c 	bl	8005ff8 <quorem>
 8006b20:	4641      	mov	r1, r8
 8006b22:	9002      	str	r0, [sp, #8]
 8006b24:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006b28:	4650      	mov	r0, sl
 8006b2a:	f000 fca5 	bl	8007478 <__mcmp>
 8006b2e:	463a      	mov	r2, r7
 8006b30:	9005      	str	r0, [sp, #20]
 8006b32:	4631      	mov	r1, r6
 8006b34:	4620      	mov	r0, r4
 8006b36:	f000 fcbb 	bl	80074b0 <__mdiff>
 8006b3a:	68c2      	ldr	r2, [r0, #12]
 8006b3c:	4605      	mov	r5, r0
 8006b3e:	bb02      	cbnz	r2, 8006b82 <_dtoa_r+0xa7a>
 8006b40:	4601      	mov	r1, r0
 8006b42:	4650      	mov	r0, sl
 8006b44:	f000 fc98 	bl	8007478 <__mcmp>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	4629      	mov	r1, r5
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	9209      	str	r2, [sp, #36]	; 0x24
 8006b50:	f000 fa0c 	bl	8006f6c <_Bfree>
 8006b54:	9b07      	ldr	r3, [sp, #28]
 8006b56:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006b58:	9d04      	ldr	r5, [sp, #16]
 8006b5a:	ea43 0102 	orr.w	r1, r3, r2
 8006b5e:	9b06      	ldr	r3, [sp, #24]
 8006b60:	4319      	orrs	r1, r3
 8006b62:	d110      	bne.n	8006b86 <_dtoa_r+0xa7e>
 8006b64:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006b68:	d029      	beq.n	8006bbe <_dtoa_r+0xab6>
 8006b6a:	9b05      	ldr	r3, [sp, #20]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	dd02      	ble.n	8006b76 <_dtoa_r+0xa6e>
 8006b70:	9b02      	ldr	r3, [sp, #8]
 8006b72:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8006b76:	9b01      	ldr	r3, [sp, #4]
 8006b78:	f883 9000 	strb.w	r9, [r3]
 8006b7c:	e774      	b.n	8006a68 <_dtoa_r+0x960>
 8006b7e:	4638      	mov	r0, r7
 8006b80:	e7ba      	b.n	8006af8 <_dtoa_r+0x9f0>
 8006b82:	2201      	movs	r2, #1
 8006b84:	e7e1      	b.n	8006b4a <_dtoa_r+0xa42>
 8006b86:	9b05      	ldr	r3, [sp, #20]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	db04      	blt.n	8006b96 <_dtoa_r+0xa8e>
 8006b8c:	9907      	ldr	r1, [sp, #28]
 8006b8e:	430b      	orrs	r3, r1
 8006b90:	9906      	ldr	r1, [sp, #24]
 8006b92:	430b      	orrs	r3, r1
 8006b94:	d120      	bne.n	8006bd8 <_dtoa_r+0xad0>
 8006b96:	2a00      	cmp	r2, #0
 8006b98:	dded      	ble.n	8006b76 <_dtoa_r+0xa6e>
 8006b9a:	4651      	mov	r1, sl
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	f000 fbfe 	bl	80073a0 <__lshift>
 8006ba4:	4631      	mov	r1, r6
 8006ba6:	4682      	mov	sl, r0
 8006ba8:	f000 fc66 	bl	8007478 <__mcmp>
 8006bac:	2800      	cmp	r0, #0
 8006bae:	dc03      	bgt.n	8006bb8 <_dtoa_r+0xab0>
 8006bb0:	d1e1      	bne.n	8006b76 <_dtoa_r+0xa6e>
 8006bb2:	f019 0f01 	tst.w	r9, #1
 8006bb6:	d0de      	beq.n	8006b76 <_dtoa_r+0xa6e>
 8006bb8:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006bbc:	d1d8      	bne.n	8006b70 <_dtoa_r+0xa68>
 8006bbe:	9a01      	ldr	r2, [sp, #4]
 8006bc0:	2339      	movs	r3, #57	; 0x39
 8006bc2:	7013      	strb	r3, [r2, #0]
 8006bc4:	462b      	mov	r3, r5
 8006bc6:	461d      	mov	r5, r3
 8006bc8:	3b01      	subs	r3, #1
 8006bca:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006bce:	2a39      	cmp	r2, #57	; 0x39
 8006bd0:	d06c      	beq.n	8006cac <_dtoa_r+0xba4>
 8006bd2:	3201      	adds	r2, #1
 8006bd4:	701a      	strb	r2, [r3, #0]
 8006bd6:	e747      	b.n	8006a68 <_dtoa_r+0x960>
 8006bd8:	2a00      	cmp	r2, #0
 8006bda:	dd07      	ble.n	8006bec <_dtoa_r+0xae4>
 8006bdc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006be0:	d0ed      	beq.n	8006bbe <_dtoa_r+0xab6>
 8006be2:	9a01      	ldr	r2, [sp, #4]
 8006be4:	f109 0301 	add.w	r3, r9, #1
 8006be8:	7013      	strb	r3, [r2, #0]
 8006bea:	e73d      	b.n	8006a68 <_dtoa_r+0x960>
 8006bec:	9b04      	ldr	r3, [sp, #16]
 8006bee:	9a08      	ldr	r2, [sp, #32]
 8006bf0:	f803 9c01 	strb.w	r9, [r3, #-1]
 8006bf4:	4293      	cmp	r3, r2
 8006bf6:	d043      	beq.n	8006c80 <_dtoa_r+0xb78>
 8006bf8:	4651      	mov	r1, sl
 8006bfa:	2300      	movs	r3, #0
 8006bfc:	220a      	movs	r2, #10
 8006bfe:	4620      	mov	r0, r4
 8006c00:	f000 f9d6 	bl	8006fb0 <__multadd>
 8006c04:	45b8      	cmp	r8, r7
 8006c06:	4682      	mov	sl, r0
 8006c08:	f04f 0300 	mov.w	r3, #0
 8006c0c:	f04f 020a 	mov.w	r2, #10
 8006c10:	4641      	mov	r1, r8
 8006c12:	4620      	mov	r0, r4
 8006c14:	d107      	bne.n	8006c26 <_dtoa_r+0xb1e>
 8006c16:	f000 f9cb 	bl	8006fb0 <__multadd>
 8006c1a:	4680      	mov	r8, r0
 8006c1c:	4607      	mov	r7, r0
 8006c1e:	9b04      	ldr	r3, [sp, #16]
 8006c20:	3301      	adds	r3, #1
 8006c22:	9304      	str	r3, [sp, #16]
 8006c24:	e775      	b.n	8006b12 <_dtoa_r+0xa0a>
 8006c26:	f000 f9c3 	bl	8006fb0 <__multadd>
 8006c2a:	4639      	mov	r1, r7
 8006c2c:	4680      	mov	r8, r0
 8006c2e:	2300      	movs	r3, #0
 8006c30:	220a      	movs	r2, #10
 8006c32:	4620      	mov	r0, r4
 8006c34:	f000 f9bc 	bl	8006fb0 <__multadd>
 8006c38:	4607      	mov	r7, r0
 8006c3a:	e7f0      	b.n	8006c1e <_dtoa_r+0xb16>
 8006c3c:	9b04      	ldr	r3, [sp, #16]
 8006c3e:	9301      	str	r3, [sp, #4]
 8006c40:	9d00      	ldr	r5, [sp, #0]
 8006c42:	4631      	mov	r1, r6
 8006c44:	4650      	mov	r0, sl
 8006c46:	f7ff f9d7 	bl	8005ff8 <quorem>
 8006c4a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006c4e:	9b00      	ldr	r3, [sp, #0]
 8006c50:	f805 9b01 	strb.w	r9, [r5], #1
 8006c54:	1aea      	subs	r2, r5, r3
 8006c56:	9b01      	ldr	r3, [sp, #4]
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	dd07      	ble.n	8006c6c <_dtoa_r+0xb64>
 8006c5c:	4651      	mov	r1, sl
 8006c5e:	2300      	movs	r3, #0
 8006c60:	220a      	movs	r2, #10
 8006c62:	4620      	mov	r0, r4
 8006c64:	f000 f9a4 	bl	8006fb0 <__multadd>
 8006c68:	4682      	mov	sl, r0
 8006c6a:	e7ea      	b.n	8006c42 <_dtoa_r+0xb3a>
 8006c6c:	9b01      	ldr	r3, [sp, #4]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	bfc8      	it	gt
 8006c72:	461d      	movgt	r5, r3
 8006c74:	9b00      	ldr	r3, [sp, #0]
 8006c76:	bfd8      	it	le
 8006c78:	2501      	movle	r5, #1
 8006c7a:	441d      	add	r5, r3
 8006c7c:	f04f 0800 	mov.w	r8, #0
 8006c80:	4651      	mov	r1, sl
 8006c82:	2201      	movs	r2, #1
 8006c84:	4620      	mov	r0, r4
 8006c86:	f000 fb8b 	bl	80073a0 <__lshift>
 8006c8a:	4631      	mov	r1, r6
 8006c8c:	4682      	mov	sl, r0
 8006c8e:	f000 fbf3 	bl	8007478 <__mcmp>
 8006c92:	2800      	cmp	r0, #0
 8006c94:	dc96      	bgt.n	8006bc4 <_dtoa_r+0xabc>
 8006c96:	d102      	bne.n	8006c9e <_dtoa_r+0xb96>
 8006c98:	f019 0f01 	tst.w	r9, #1
 8006c9c:	d192      	bne.n	8006bc4 <_dtoa_r+0xabc>
 8006c9e:	462b      	mov	r3, r5
 8006ca0:	461d      	mov	r5, r3
 8006ca2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006ca6:	2a30      	cmp	r2, #48	; 0x30
 8006ca8:	d0fa      	beq.n	8006ca0 <_dtoa_r+0xb98>
 8006caa:	e6dd      	b.n	8006a68 <_dtoa_r+0x960>
 8006cac:	9a00      	ldr	r2, [sp, #0]
 8006cae:	429a      	cmp	r2, r3
 8006cb0:	d189      	bne.n	8006bc6 <_dtoa_r+0xabe>
 8006cb2:	f10b 0b01 	add.w	fp, fp, #1
 8006cb6:	2331      	movs	r3, #49	; 0x31
 8006cb8:	e796      	b.n	8006be8 <_dtoa_r+0xae0>
 8006cba:	4b0a      	ldr	r3, [pc, #40]	; (8006ce4 <_dtoa_r+0xbdc>)
 8006cbc:	f7ff ba99 	b.w	80061f2 <_dtoa_r+0xea>
 8006cc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f47f aa6d 	bne.w	80061a2 <_dtoa_r+0x9a>
 8006cc8:	4b07      	ldr	r3, [pc, #28]	; (8006ce8 <_dtoa_r+0xbe0>)
 8006cca:	f7ff ba92 	b.w	80061f2 <_dtoa_r+0xea>
 8006cce:	9b01      	ldr	r3, [sp, #4]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	dcb5      	bgt.n	8006c40 <_dtoa_r+0xb38>
 8006cd4:	9b07      	ldr	r3, [sp, #28]
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	f73f aeb1 	bgt.w	8006a3e <_dtoa_r+0x936>
 8006cdc:	e7b0      	b.n	8006c40 <_dtoa_r+0xb38>
 8006cde:	bf00      	nop
 8006ce0:	08009895 	.word	0x08009895
 8006ce4:	080097f0 	.word	0x080097f0
 8006ce8:	08009819 	.word	0x08009819

08006cec <_free_r>:
 8006cec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006cee:	2900      	cmp	r1, #0
 8006cf0:	d044      	beq.n	8006d7c <_free_r+0x90>
 8006cf2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cf6:	9001      	str	r0, [sp, #4]
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f1a1 0404 	sub.w	r4, r1, #4
 8006cfe:	bfb8      	it	lt
 8006d00:	18e4      	addlt	r4, r4, r3
 8006d02:	f000 f8e7 	bl	8006ed4 <__malloc_lock>
 8006d06:	4a1e      	ldr	r2, [pc, #120]	; (8006d80 <_free_r+0x94>)
 8006d08:	9801      	ldr	r0, [sp, #4]
 8006d0a:	6813      	ldr	r3, [r2, #0]
 8006d0c:	b933      	cbnz	r3, 8006d1c <_free_r+0x30>
 8006d0e:	6063      	str	r3, [r4, #4]
 8006d10:	6014      	str	r4, [r2, #0]
 8006d12:	b003      	add	sp, #12
 8006d14:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d18:	f000 b8e2 	b.w	8006ee0 <__malloc_unlock>
 8006d1c:	42a3      	cmp	r3, r4
 8006d1e:	d908      	bls.n	8006d32 <_free_r+0x46>
 8006d20:	6825      	ldr	r5, [r4, #0]
 8006d22:	1961      	adds	r1, r4, r5
 8006d24:	428b      	cmp	r3, r1
 8006d26:	bf01      	itttt	eq
 8006d28:	6819      	ldreq	r1, [r3, #0]
 8006d2a:	685b      	ldreq	r3, [r3, #4]
 8006d2c:	1949      	addeq	r1, r1, r5
 8006d2e:	6021      	streq	r1, [r4, #0]
 8006d30:	e7ed      	b.n	8006d0e <_free_r+0x22>
 8006d32:	461a      	mov	r2, r3
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	b10b      	cbz	r3, 8006d3c <_free_r+0x50>
 8006d38:	42a3      	cmp	r3, r4
 8006d3a:	d9fa      	bls.n	8006d32 <_free_r+0x46>
 8006d3c:	6811      	ldr	r1, [r2, #0]
 8006d3e:	1855      	adds	r5, r2, r1
 8006d40:	42a5      	cmp	r5, r4
 8006d42:	d10b      	bne.n	8006d5c <_free_r+0x70>
 8006d44:	6824      	ldr	r4, [r4, #0]
 8006d46:	4421      	add	r1, r4
 8006d48:	1854      	adds	r4, r2, r1
 8006d4a:	42a3      	cmp	r3, r4
 8006d4c:	6011      	str	r1, [r2, #0]
 8006d4e:	d1e0      	bne.n	8006d12 <_free_r+0x26>
 8006d50:	681c      	ldr	r4, [r3, #0]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	6053      	str	r3, [r2, #4]
 8006d56:	440c      	add	r4, r1
 8006d58:	6014      	str	r4, [r2, #0]
 8006d5a:	e7da      	b.n	8006d12 <_free_r+0x26>
 8006d5c:	d902      	bls.n	8006d64 <_free_r+0x78>
 8006d5e:	230c      	movs	r3, #12
 8006d60:	6003      	str	r3, [r0, #0]
 8006d62:	e7d6      	b.n	8006d12 <_free_r+0x26>
 8006d64:	6825      	ldr	r5, [r4, #0]
 8006d66:	1961      	adds	r1, r4, r5
 8006d68:	428b      	cmp	r3, r1
 8006d6a:	bf04      	itt	eq
 8006d6c:	6819      	ldreq	r1, [r3, #0]
 8006d6e:	685b      	ldreq	r3, [r3, #4]
 8006d70:	6063      	str	r3, [r4, #4]
 8006d72:	bf04      	itt	eq
 8006d74:	1949      	addeq	r1, r1, r5
 8006d76:	6021      	streq	r1, [r4, #0]
 8006d78:	6054      	str	r4, [r2, #4]
 8006d7a:	e7ca      	b.n	8006d12 <_free_r+0x26>
 8006d7c:	b003      	add	sp, #12
 8006d7e:	bd30      	pop	{r4, r5, pc}
 8006d80:	20000524 	.word	0x20000524

08006d84 <malloc>:
 8006d84:	4b02      	ldr	r3, [pc, #8]	; (8006d90 <malloc+0xc>)
 8006d86:	4601      	mov	r1, r0
 8006d88:	6818      	ldr	r0, [r3, #0]
 8006d8a:	f000 b823 	b.w	8006dd4 <_malloc_r>
 8006d8e:	bf00      	nop
 8006d90:	20000078 	.word	0x20000078

08006d94 <sbrk_aligned>:
 8006d94:	b570      	push	{r4, r5, r6, lr}
 8006d96:	4e0e      	ldr	r6, [pc, #56]	; (8006dd0 <sbrk_aligned+0x3c>)
 8006d98:	460c      	mov	r4, r1
 8006d9a:	6831      	ldr	r1, [r6, #0]
 8006d9c:	4605      	mov	r5, r0
 8006d9e:	b911      	cbnz	r1, 8006da6 <sbrk_aligned+0x12>
 8006da0:	f001 ffe2 	bl	8008d68 <_sbrk_r>
 8006da4:	6030      	str	r0, [r6, #0]
 8006da6:	4621      	mov	r1, r4
 8006da8:	4628      	mov	r0, r5
 8006daa:	f001 ffdd 	bl	8008d68 <_sbrk_r>
 8006dae:	1c43      	adds	r3, r0, #1
 8006db0:	d00a      	beq.n	8006dc8 <sbrk_aligned+0x34>
 8006db2:	1cc4      	adds	r4, r0, #3
 8006db4:	f024 0403 	bic.w	r4, r4, #3
 8006db8:	42a0      	cmp	r0, r4
 8006dba:	d007      	beq.n	8006dcc <sbrk_aligned+0x38>
 8006dbc:	1a21      	subs	r1, r4, r0
 8006dbe:	4628      	mov	r0, r5
 8006dc0:	f001 ffd2 	bl	8008d68 <_sbrk_r>
 8006dc4:	3001      	adds	r0, #1
 8006dc6:	d101      	bne.n	8006dcc <sbrk_aligned+0x38>
 8006dc8:	f04f 34ff 	mov.w	r4, #4294967295
 8006dcc:	4620      	mov	r0, r4
 8006dce:	bd70      	pop	{r4, r5, r6, pc}
 8006dd0:	20000528 	.word	0x20000528

08006dd4 <_malloc_r>:
 8006dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006dd8:	1ccd      	adds	r5, r1, #3
 8006dda:	f025 0503 	bic.w	r5, r5, #3
 8006dde:	3508      	adds	r5, #8
 8006de0:	2d0c      	cmp	r5, #12
 8006de2:	bf38      	it	cc
 8006de4:	250c      	movcc	r5, #12
 8006de6:	2d00      	cmp	r5, #0
 8006de8:	4607      	mov	r7, r0
 8006dea:	db01      	blt.n	8006df0 <_malloc_r+0x1c>
 8006dec:	42a9      	cmp	r1, r5
 8006dee:	d905      	bls.n	8006dfc <_malloc_r+0x28>
 8006df0:	230c      	movs	r3, #12
 8006df2:	603b      	str	r3, [r7, #0]
 8006df4:	2600      	movs	r6, #0
 8006df6:	4630      	mov	r0, r6
 8006df8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dfc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006ed0 <_malloc_r+0xfc>
 8006e00:	f000 f868 	bl	8006ed4 <__malloc_lock>
 8006e04:	f8d8 3000 	ldr.w	r3, [r8]
 8006e08:	461c      	mov	r4, r3
 8006e0a:	bb5c      	cbnz	r4, 8006e64 <_malloc_r+0x90>
 8006e0c:	4629      	mov	r1, r5
 8006e0e:	4638      	mov	r0, r7
 8006e10:	f7ff ffc0 	bl	8006d94 <sbrk_aligned>
 8006e14:	1c43      	adds	r3, r0, #1
 8006e16:	4604      	mov	r4, r0
 8006e18:	d155      	bne.n	8006ec6 <_malloc_r+0xf2>
 8006e1a:	f8d8 4000 	ldr.w	r4, [r8]
 8006e1e:	4626      	mov	r6, r4
 8006e20:	2e00      	cmp	r6, #0
 8006e22:	d145      	bne.n	8006eb0 <_malloc_r+0xdc>
 8006e24:	2c00      	cmp	r4, #0
 8006e26:	d048      	beq.n	8006eba <_malloc_r+0xe6>
 8006e28:	6823      	ldr	r3, [r4, #0]
 8006e2a:	4631      	mov	r1, r6
 8006e2c:	4638      	mov	r0, r7
 8006e2e:	eb04 0903 	add.w	r9, r4, r3
 8006e32:	f001 ff99 	bl	8008d68 <_sbrk_r>
 8006e36:	4581      	cmp	r9, r0
 8006e38:	d13f      	bne.n	8006eba <_malloc_r+0xe6>
 8006e3a:	6821      	ldr	r1, [r4, #0]
 8006e3c:	1a6d      	subs	r5, r5, r1
 8006e3e:	4629      	mov	r1, r5
 8006e40:	4638      	mov	r0, r7
 8006e42:	f7ff ffa7 	bl	8006d94 <sbrk_aligned>
 8006e46:	3001      	adds	r0, #1
 8006e48:	d037      	beq.n	8006eba <_malloc_r+0xe6>
 8006e4a:	6823      	ldr	r3, [r4, #0]
 8006e4c:	442b      	add	r3, r5
 8006e4e:	6023      	str	r3, [r4, #0]
 8006e50:	f8d8 3000 	ldr.w	r3, [r8]
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d038      	beq.n	8006eca <_malloc_r+0xf6>
 8006e58:	685a      	ldr	r2, [r3, #4]
 8006e5a:	42a2      	cmp	r2, r4
 8006e5c:	d12b      	bne.n	8006eb6 <_malloc_r+0xe2>
 8006e5e:	2200      	movs	r2, #0
 8006e60:	605a      	str	r2, [r3, #4]
 8006e62:	e00f      	b.n	8006e84 <_malloc_r+0xb0>
 8006e64:	6822      	ldr	r2, [r4, #0]
 8006e66:	1b52      	subs	r2, r2, r5
 8006e68:	d41f      	bmi.n	8006eaa <_malloc_r+0xd6>
 8006e6a:	2a0b      	cmp	r2, #11
 8006e6c:	d917      	bls.n	8006e9e <_malloc_r+0xca>
 8006e6e:	1961      	adds	r1, r4, r5
 8006e70:	42a3      	cmp	r3, r4
 8006e72:	6025      	str	r5, [r4, #0]
 8006e74:	bf18      	it	ne
 8006e76:	6059      	strne	r1, [r3, #4]
 8006e78:	6863      	ldr	r3, [r4, #4]
 8006e7a:	bf08      	it	eq
 8006e7c:	f8c8 1000 	streq.w	r1, [r8]
 8006e80:	5162      	str	r2, [r4, r5]
 8006e82:	604b      	str	r3, [r1, #4]
 8006e84:	4638      	mov	r0, r7
 8006e86:	f104 060b 	add.w	r6, r4, #11
 8006e8a:	f000 f829 	bl	8006ee0 <__malloc_unlock>
 8006e8e:	f026 0607 	bic.w	r6, r6, #7
 8006e92:	1d23      	adds	r3, r4, #4
 8006e94:	1af2      	subs	r2, r6, r3
 8006e96:	d0ae      	beq.n	8006df6 <_malloc_r+0x22>
 8006e98:	1b9b      	subs	r3, r3, r6
 8006e9a:	50a3      	str	r3, [r4, r2]
 8006e9c:	e7ab      	b.n	8006df6 <_malloc_r+0x22>
 8006e9e:	42a3      	cmp	r3, r4
 8006ea0:	6862      	ldr	r2, [r4, #4]
 8006ea2:	d1dd      	bne.n	8006e60 <_malloc_r+0x8c>
 8006ea4:	f8c8 2000 	str.w	r2, [r8]
 8006ea8:	e7ec      	b.n	8006e84 <_malloc_r+0xb0>
 8006eaa:	4623      	mov	r3, r4
 8006eac:	6864      	ldr	r4, [r4, #4]
 8006eae:	e7ac      	b.n	8006e0a <_malloc_r+0x36>
 8006eb0:	4634      	mov	r4, r6
 8006eb2:	6876      	ldr	r6, [r6, #4]
 8006eb4:	e7b4      	b.n	8006e20 <_malloc_r+0x4c>
 8006eb6:	4613      	mov	r3, r2
 8006eb8:	e7cc      	b.n	8006e54 <_malloc_r+0x80>
 8006eba:	230c      	movs	r3, #12
 8006ebc:	603b      	str	r3, [r7, #0]
 8006ebe:	4638      	mov	r0, r7
 8006ec0:	f000 f80e 	bl	8006ee0 <__malloc_unlock>
 8006ec4:	e797      	b.n	8006df6 <_malloc_r+0x22>
 8006ec6:	6025      	str	r5, [r4, #0]
 8006ec8:	e7dc      	b.n	8006e84 <_malloc_r+0xb0>
 8006eca:	605b      	str	r3, [r3, #4]
 8006ecc:	deff      	udf	#255	; 0xff
 8006ece:	bf00      	nop
 8006ed0:	20000524 	.word	0x20000524

08006ed4 <__malloc_lock>:
 8006ed4:	4801      	ldr	r0, [pc, #4]	; (8006edc <__malloc_lock+0x8>)
 8006ed6:	f7ff b886 	b.w	8005fe6 <__retarget_lock_acquire_recursive>
 8006eda:	bf00      	nop
 8006edc:	20000520 	.word	0x20000520

08006ee0 <__malloc_unlock>:
 8006ee0:	4801      	ldr	r0, [pc, #4]	; (8006ee8 <__malloc_unlock+0x8>)
 8006ee2:	f7ff b881 	b.w	8005fe8 <__retarget_lock_release_recursive>
 8006ee6:	bf00      	nop
 8006ee8:	20000520 	.word	0x20000520

08006eec <_Balloc>:
 8006eec:	b570      	push	{r4, r5, r6, lr}
 8006eee:	69c6      	ldr	r6, [r0, #28]
 8006ef0:	4604      	mov	r4, r0
 8006ef2:	460d      	mov	r5, r1
 8006ef4:	b976      	cbnz	r6, 8006f14 <_Balloc+0x28>
 8006ef6:	2010      	movs	r0, #16
 8006ef8:	f7ff ff44 	bl	8006d84 <malloc>
 8006efc:	4602      	mov	r2, r0
 8006efe:	61e0      	str	r0, [r4, #28]
 8006f00:	b920      	cbnz	r0, 8006f0c <_Balloc+0x20>
 8006f02:	4b18      	ldr	r3, [pc, #96]	; (8006f64 <_Balloc+0x78>)
 8006f04:	4818      	ldr	r0, [pc, #96]	; (8006f68 <_Balloc+0x7c>)
 8006f06:	216b      	movs	r1, #107	; 0x6b
 8006f08:	f001 ff56 	bl	8008db8 <__assert_func>
 8006f0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f10:	6006      	str	r6, [r0, #0]
 8006f12:	60c6      	str	r6, [r0, #12]
 8006f14:	69e6      	ldr	r6, [r4, #28]
 8006f16:	68f3      	ldr	r3, [r6, #12]
 8006f18:	b183      	cbz	r3, 8006f3c <_Balloc+0x50>
 8006f1a:	69e3      	ldr	r3, [r4, #28]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006f22:	b9b8      	cbnz	r0, 8006f54 <_Balloc+0x68>
 8006f24:	2101      	movs	r1, #1
 8006f26:	fa01 f605 	lsl.w	r6, r1, r5
 8006f2a:	1d72      	adds	r2, r6, #5
 8006f2c:	0092      	lsls	r2, r2, #2
 8006f2e:	4620      	mov	r0, r4
 8006f30:	f001 ff60 	bl	8008df4 <_calloc_r>
 8006f34:	b160      	cbz	r0, 8006f50 <_Balloc+0x64>
 8006f36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006f3a:	e00e      	b.n	8006f5a <_Balloc+0x6e>
 8006f3c:	2221      	movs	r2, #33	; 0x21
 8006f3e:	2104      	movs	r1, #4
 8006f40:	4620      	mov	r0, r4
 8006f42:	f001 ff57 	bl	8008df4 <_calloc_r>
 8006f46:	69e3      	ldr	r3, [r4, #28]
 8006f48:	60f0      	str	r0, [r6, #12]
 8006f4a:	68db      	ldr	r3, [r3, #12]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d1e4      	bne.n	8006f1a <_Balloc+0x2e>
 8006f50:	2000      	movs	r0, #0
 8006f52:	bd70      	pop	{r4, r5, r6, pc}
 8006f54:	6802      	ldr	r2, [r0, #0]
 8006f56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f5a:	2300      	movs	r3, #0
 8006f5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f60:	e7f7      	b.n	8006f52 <_Balloc+0x66>
 8006f62:	bf00      	nop
 8006f64:	08009826 	.word	0x08009826
 8006f68:	080098a6 	.word	0x080098a6

08006f6c <_Bfree>:
 8006f6c:	b570      	push	{r4, r5, r6, lr}
 8006f6e:	69c6      	ldr	r6, [r0, #28]
 8006f70:	4605      	mov	r5, r0
 8006f72:	460c      	mov	r4, r1
 8006f74:	b976      	cbnz	r6, 8006f94 <_Bfree+0x28>
 8006f76:	2010      	movs	r0, #16
 8006f78:	f7ff ff04 	bl	8006d84 <malloc>
 8006f7c:	4602      	mov	r2, r0
 8006f7e:	61e8      	str	r0, [r5, #28]
 8006f80:	b920      	cbnz	r0, 8006f8c <_Bfree+0x20>
 8006f82:	4b09      	ldr	r3, [pc, #36]	; (8006fa8 <_Bfree+0x3c>)
 8006f84:	4809      	ldr	r0, [pc, #36]	; (8006fac <_Bfree+0x40>)
 8006f86:	218f      	movs	r1, #143	; 0x8f
 8006f88:	f001 ff16 	bl	8008db8 <__assert_func>
 8006f8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f90:	6006      	str	r6, [r0, #0]
 8006f92:	60c6      	str	r6, [r0, #12]
 8006f94:	b13c      	cbz	r4, 8006fa6 <_Bfree+0x3a>
 8006f96:	69eb      	ldr	r3, [r5, #28]
 8006f98:	6862      	ldr	r2, [r4, #4]
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006fa0:	6021      	str	r1, [r4, #0]
 8006fa2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006fa6:	bd70      	pop	{r4, r5, r6, pc}
 8006fa8:	08009826 	.word	0x08009826
 8006fac:	080098a6 	.word	0x080098a6

08006fb0 <__multadd>:
 8006fb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006fb4:	690d      	ldr	r5, [r1, #16]
 8006fb6:	4607      	mov	r7, r0
 8006fb8:	460c      	mov	r4, r1
 8006fba:	461e      	mov	r6, r3
 8006fbc:	f101 0c14 	add.w	ip, r1, #20
 8006fc0:	2000      	movs	r0, #0
 8006fc2:	f8dc 3000 	ldr.w	r3, [ip]
 8006fc6:	b299      	uxth	r1, r3
 8006fc8:	fb02 6101 	mla	r1, r2, r1, r6
 8006fcc:	0c1e      	lsrs	r6, r3, #16
 8006fce:	0c0b      	lsrs	r3, r1, #16
 8006fd0:	fb02 3306 	mla	r3, r2, r6, r3
 8006fd4:	b289      	uxth	r1, r1
 8006fd6:	3001      	adds	r0, #1
 8006fd8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006fdc:	4285      	cmp	r5, r0
 8006fde:	f84c 1b04 	str.w	r1, [ip], #4
 8006fe2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006fe6:	dcec      	bgt.n	8006fc2 <__multadd+0x12>
 8006fe8:	b30e      	cbz	r6, 800702e <__multadd+0x7e>
 8006fea:	68a3      	ldr	r3, [r4, #8]
 8006fec:	42ab      	cmp	r3, r5
 8006fee:	dc19      	bgt.n	8007024 <__multadd+0x74>
 8006ff0:	6861      	ldr	r1, [r4, #4]
 8006ff2:	4638      	mov	r0, r7
 8006ff4:	3101      	adds	r1, #1
 8006ff6:	f7ff ff79 	bl	8006eec <_Balloc>
 8006ffa:	4680      	mov	r8, r0
 8006ffc:	b928      	cbnz	r0, 800700a <__multadd+0x5a>
 8006ffe:	4602      	mov	r2, r0
 8007000:	4b0c      	ldr	r3, [pc, #48]	; (8007034 <__multadd+0x84>)
 8007002:	480d      	ldr	r0, [pc, #52]	; (8007038 <__multadd+0x88>)
 8007004:	21ba      	movs	r1, #186	; 0xba
 8007006:	f001 fed7 	bl	8008db8 <__assert_func>
 800700a:	6922      	ldr	r2, [r4, #16]
 800700c:	3202      	adds	r2, #2
 800700e:	f104 010c 	add.w	r1, r4, #12
 8007012:	0092      	lsls	r2, r2, #2
 8007014:	300c      	adds	r0, #12
 8007016:	f001 feb7 	bl	8008d88 <memcpy>
 800701a:	4621      	mov	r1, r4
 800701c:	4638      	mov	r0, r7
 800701e:	f7ff ffa5 	bl	8006f6c <_Bfree>
 8007022:	4644      	mov	r4, r8
 8007024:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007028:	3501      	adds	r5, #1
 800702a:	615e      	str	r6, [r3, #20]
 800702c:	6125      	str	r5, [r4, #16]
 800702e:	4620      	mov	r0, r4
 8007030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007034:	08009895 	.word	0x08009895
 8007038:	080098a6 	.word	0x080098a6

0800703c <__s2b>:
 800703c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007040:	460c      	mov	r4, r1
 8007042:	4615      	mov	r5, r2
 8007044:	461f      	mov	r7, r3
 8007046:	2209      	movs	r2, #9
 8007048:	3308      	adds	r3, #8
 800704a:	4606      	mov	r6, r0
 800704c:	fb93 f3f2 	sdiv	r3, r3, r2
 8007050:	2100      	movs	r1, #0
 8007052:	2201      	movs	r2, #1
 8007054:	429a      	cmp	r2, r3
 8007056:	db09      	blt.n	800706c <__s2b+0x30>
 8007058:	4630      	mov	r0, r6
 800705a:	f7ff ff47 	bl	8006eec <_Balloc>
 800705e:	b940      	cbnz	r0, 8007072 <__s2b+0x36>
 8007060:	4602      	mov	r2, r0
 8007062:	4b19      	ldr	r3, [pc, #100]	; (80070c8 <__s2b+0x8c>)
 8007064:	4819      	ldr	r0, [pc, #100]	; (80070cc <__s2b+0x90>)
 8007066:	21d3      	movs	r1, #211	; 0xd3
 8007068:	f001 fea6 	bl	8008db8 <__assert_func>
 800706c:	0052      	lsls	r2, r2, #1
 800706e:	3101      	adds	r1, #1
 8007070:	e7f0      	b.n	8007054 <__s2b+0x18>
 8007072:	9b08      	ldr	r3, [sp, #32]
 8007074:	6143      	str	r3, [r0, #20]
 8007076:	2d09      	cmp	r5, #9
 8007078:	f04f 0301 	mov.w	r3, #1
 800707c:	6103      	str	r3, [r0, #16]
 800707e:	dd16      	ble.n	80070ae <__s2b+0x72>
 8007080:	f104 0909 	add.w	r9, r4, #9
 8007084:	46c8      	mov	r8, r9
 8007086:	442c      	add	r4, r5
 8007088:	f818 3b01 	ldrb.w	r3, [r8], #1
 800708c:	4601      	mov	r1, r0
 800708e:	3b30      	subs	r3, #48	; 0x30
 8007090:	220a      	movs	r2, #10
 8007092:	4630      	mov	r0, r6
 8007094:	f7ff ff8c 	bl	8006fb0 <__multadd>
 8007098:	45a0      	cmp	r8, r4
 800709a:	d1f5      	bne.n	8007088 <__s2b+0x4c>
 800709c:	f1a5 0408 	sub.w	r4, r5, #8
 80070a0:	444c      	add	r4, r9
 80070a2:	1b2d      	subs	r5, r5, r4
 80070a4:	1963      	adds	r3, r4, r5
 80070a6:	42bb      	cmp	r3, r7
 80070a8:	db04      	blt.n	80070b4 <__s2b+0x78>
 80070aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070ae:	340a      	adds	r4, #10
 80070b0:	2509      	movs	r5, #9
 80070b2:	e7f6      	b.n	80070a2 <__s2b+0x66>
 80070b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80070b8:	4601      	mov	r1, r0
 80070ba:	3b30      	subs	r3, #48	; 0x30
 80070bc:	220a      	movs	r2, #10
 80070be:	4630      	mov	r0, r6
 80070c0:	f7ff ff76 	bl	8006fb0 <__multadd>
 80070c4:	e7ee      	b.n	80070a4 <__s2b+0x68>
 80070c6:	bf00      	nop
 80070c8:	08009895 	.word	0x08009895
 80070cc:	080098a6 	.word	0x080098a6

080070d0 <__hi0bits>:
 80070d0:	0c03      	lsrs	r3, r0, #16
 80070d2:	041b      	lsls	r3, r3, #16
 80070d4:	b9d3      	cbnz	r3, 800710c <__hi0bits+0x3c>
 80070d6:	0400      	lsls	r0, r0, #16
 80070d8:	2310      	movs	r3, #16
 80070da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80070de:	bf04      	itt	eq
 80070e0:	0200      	lsleq	r0, r0, #8
 80070e2:	3308      	addeq	r3, #8
 80070e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80070e8:	bf04      	itt	eq
 80070ea:	0100      	lsleq	r0, r0, #4
 80070ec:	3304      	addeq	r3, #4
 80070ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80070f2:	bf04      	itt	eq
 80070f4:	0080      	lsleq	r0, r0, #2
 80070f6:	3302      	addeq	r3, #2
 80070f8:	2800      	cmp	r0, #0
 80070fa:	db05      	blt.n	8007108 <__hi0bits+0x38>
 80070fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007100:	f103 0301 	add.w	r3, r3, #1
 8007104:	bf08      	it	eq
 8007106:	2320      	moveq	r3, #32
 8007108:	4618      	mov	r0, r3
 800710a:	4770      	bx	lr
 800710c:	2300      	movs	r3, #0
 800710e:	e7e4      	b.n	80070da <__hi0bits+0xa>

08007110 <__lo0bits>:
 8007110:	6803      	ldr	r3, [r0, #0]
 8007112:	f013 0207 	ands.w	r2, r3, #7
 8007116:	d00c      	beq.n	8007132 <__lo0bits+0x22>
 8007118:	07d9      	lsls	r1, r3, #31
 800711a:	d422      	bmi.n	8007162 <__lo0bits+0x52>
 800711c:	079a      	lsls	r2, r3, #30
 800711e:	bf49      	itett	mi
 8007120:	085b      	lsrmi	r3, r3, #1
 8007122:	089b      	lsrpl	r3, r3, #2
 8007124:	6003      	strmi	r3, [r0, #0]
 8007126:	2201      	movmi	r2, #1
 8007128:	bf5c      	itt	pl
 800712a:	6003      	strpl	r3, [r0, #0]
 800712c:	2202      	movpl	r2, #2
 800712e:	4610      	mov	r0, r2
 8007130:	4770      	bx	lr
 8007132:	b299      	uxth	r1, r3
 8007134:	b909      	cbnz	r1, 800713a <__lo0bits+0x2a>
 8007136:	0c1b      	lsrs	r3, r3, #16
 8007138:	2210      	movs	r2, #16
 800713a:	b2d9      	uxtb	r1, r3
 800713c:	b909      	cbnz	r1, 8007142 <__lo0bits+0x32>
 800713e:	3208      	adds	r2, #8
 8007140:	0a1b      	lsrs	r3, r3, #8
 8007142:	0719      	lsls	r1, r3, #28
 8007144:	bf04      	itt	eq
 8007146:	091b      	lsreq	r3, r3, #4
 8007148:	3204      	addeq	r2, #4
 800714a:	0799      	lsls	r1, r3, #30
 800714c:	bf04      	itt	eq
 800714e:	089b      	lsreq	r3, r3, #2
 8007150:	3202      	addeq	r2, #2
 8007152:	07d9      	lsls	r1, r3, #31
 8007154:	d403      	bmi.n	800715e <__lo0bits+0x4e>
 8007156:	085b      	lsrs	r3, r3, #1
 8007158:	f102 0201 	add.w	r2, r2, #1
 800715c:	d003      	beq.n	8007166 <__lo0bits+0x56>
 800715e:	6003      	str	r3, [r0, #0]
 8007160:	e7e5      	b.n	800712e <__lo0bits+0x1e>
 8007162:	2200      	movs	r2, #0
 8007164:	e7e3      	b.n	800712e <__lo0bits+0x1e>
 8007166:	2220      	movs	r2, #32
 8007168:	e7e1      	b.n	800712e <__lo0bits+0x1e>
	...

0800716c <__i2b>:
 800716c:	b510      	push	{r4, lr}
 800716e:	460c      	mov	r4, r1
 8007170:	2101      	movs	r1, #1
 8007172:	f7ff febb 	bl	8006eec <_Balloc>
 8007176:	4602      	mov	r2, r0
 8007178:	b928      	cbnz	r0, 8007186 <__i2b+0x1a>
 800717a:	4b05      	ldr	r3, [pc, #20]	; (8007190 <__i2b+0x24>)
 800717c:	4805      	ldr	r0, [pc, #20]	; (8007194 <__i2b+0x28>)
 800717e:	f240 1145 	movw	r1, #325	; 0x145
 8007182:	f001 fe19 	bl	8008db8 <__assert_func>
 8007186:	2301      	movs	r3, #1
 8007188:	6144      	str	r4, [r0, #20]
 800718a:	6103      	str	r3, [r0, #16]
 800718c:	bd10      	pop	{r4, pc}
 800718e:	bf00      	nop
 8007190:	08009895 	.word	0x08009895
 8007194:	080098a6 	.word	0x080098a6

08007198 <__multiply>:
 8007198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800719c:	4691      	mov	r9, r2
 800719e:	690a      	ldr	r2, [r1, #16]
 80071a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	bfb8      	it	lt
 80071a8:	460b      	movlt	r3, r1
 80071aa:	460c      	mov	r4, r1
 80071ac:	bfbc      	itt	lt
 80071ae:	464c      	movlt	r4, r9
 80071b0:	4699      	movlt	r9, r3
 80071b2:	6927      	ldr	r7, [r4, #16]
 80071b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80071b8:	68a3      	ldr	r3, [r4, #8]
 80071ba:	6861      	ldr	r1, [r4, #4]
 80071bc:	eb07 060a 	add.w	r6, r7, sl
 80071c0:	42b3      	cmp	r3, r6
 80071c2:	b085      	sub	sp, #20
 80071c4:	bfb8      	it	lt
 80071c6:	3101      	addlt	r1, #1
 80071c8:	f7ff fe90 	bl	8006eec <_Balloc>
 80071cc:	b930      	cbnz	r0, 80071dc <__multiply+0x44>
 80071ce:	4602      	mov	r2, r0
 80071d0:	4b44      	ldr	r3, [pc, #272]	; (80072e4 <__multiply+0x14c>)
 80071d2:	4845      	ldr	r0, [pc, #276]	; (80072e8 <__multiply+0x150>)
 80071d4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80071d8:	f001 fdee 	bl	8008db8 <__assert_func>
 80071dc:	f100 0514 	add.w	r5, r0, #20
 80071e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80071e4:	462b      	mov	r3, r5
 80071e6:	2200      	movs	r2, #0
 80071e8:	4543      	cmp	r3, r8
 80071ea:	d321      	bcc.n	8007230 <__multiply+0x98>
 80071ec:	f104 0314 	add.w	r3, r4, #20
 80071f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80071f4:	f109 0314 	add.w	r3, r9, #20
 80071f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80071fc:	9202      	str	r2, [sp, #8]
 80071fe:	1b3a      	subs	r2, r7, r4
 8007200:	3a15      	subs	r2, #21
 8007202:	f022 0203 	bic.w	r2, r2, #3
 8007206:	3204      	adds	r2, #4
 8007208:	f104 0115 	add.w	r1, r4, #21
 800720c:	428f      	cmp	r7, r1
 800720e:	bf38      	it	cc
 8007210:	2204      	movcc	r2, #4
 8007212:	9201      	str	r2, [sp, #4]
 8007214:	9a02      	ldr	r2, [sp, #8]
 8007216:	9303      	str	r3, [sp, #12]
 8007218:	429a      	cmp	r2, r3
 800721a:	d80c      	bhi.n	8007236 <__multiply+0x9e>
 800721c:	2e00      	cmp	r6, #0
 800721e:	dd03      	ble.n	8007228 <__multiply+0x90>
 8007220:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007224:	2b00      	cmp	r3, #0
 8007226:	d05b      	beq.n	80072e0 <__multiply+0x148>
 8007228:	6106      	str	r6, [r0, #16]
 800722a:	b005      	add	sp, #20
 800722c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007230:	f843 2b04 	str.w	r2, [r3], #4
 8007234:	e7d8      	b.n	80071e8 <__multiply+0x50>
 8007236:	f8b3 a000 	ldrh.w	sl, [r3]
 800723a:	f1ba 0f00 	cmp.w	sl, #0
 800723e:	d024      	beq.n	800728a <__multiply+0xf2>
 8007240:	f104 0e14 	add.w	lr, r4, #20
 8007244:	46a9      	mov	r9, r5
 8007246:	f04f 0c00 	mov.w	ip, #0
 800724a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800724e:	f8d9 1000 	ldr.w	r1, [r9]
 8007252:	fa1f fb82 	uxth.w	fp, r2
 8007256:	b289      	uxth	r1, r1
 8007258:	fb0a 110b 	mla	r1, sl, fp, r1
 800725c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007260:	f8d9 2000 	ldr.w	r2, [r9]
 8007264:	4461      	add	r1, ip
 8007266:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800726a:	fb0a c20b 	mla	r2, sl, fp, ip
 800726e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007272:	b289      	uxth	r1, r1
 8007274:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007278:	4577      	cmp	r7, lr
 800727a:	f849 1b04 	str.w	r1, [r9], #4
 800727e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007282:	d8e2      	bhi.n	800724a <__multiply+0xb2>
 8007284:	9a01      	ldr	r2, [sp, #4]
 8007286:	f845 c002 	str.w	ip, [r5, r2]
 800728a:	9a03      	ldr	r2, [sp, #12]
 800728c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007290:	3304      	adds	r3, #4
 8007292:	f1b9 0f00 	cmp.w	r9, #0
 8007296:	d021      	beq.n	80072dc <__multiply+0x144>
 8007298:	6829      	ldr	r1, [r5, #0]
 800729a:	f104 0c14 	add.w	ip, r4, #20
 800729e:	46ae      	mov	lr, r5
 80072a0:	f04f 0a00 	mov.w	sl, #0
 80072a4:	f8bc b000 	ldrh.w	fp, [ip]
 80072a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80072ac:	fb09 220b 	mla	r2, r9, fp, r2
 80072b0:	4452      	add	r2, sl
 80072b2:	b289      	uxth	r1, r1
 80072b4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80072b8:	f84e 1b04 	str.w	r1, [lr], #4
 80072bc:	f85c 1b04 	ldr.w	r1, [ip], #4
 80072c0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80072c4:	f8be 1000 	ldrh.w	r1, [lr]
 80072c8:	fb09 110a 	mla	r1, r9, sl, r1
 80072cc:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80072d0:	4567      	cmp	r7, ip
 80072d2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80072d6:	d8e5      	bhi.n	80072a4 <__multiply+0x10c>
 80072d8:	9a01      	ldr	r2, [sp, #4]
 80072da:	50a9      	str	r1, [r5, r2]
 80072dc:	3504      	adds	r5, #4
 80072de:	e799      	b.n	8007214 <__multiply+0x7c>
 80072e0:	3e01      	subs	r6, #1
 80072e2:	e79b      	b.n	800721c <__multiply+0x84>
 80072e4:	08009895 	.word	0x08009895
 80072e8:	080098a6 	.word	0x080098a6

080072ec <__pow5mult>:
 80072ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072f0:	4615      	mov	r5, r2
 80072f2:	f012 0203 	ands.w	r2, r2, #3
 80072f6:	4606      	mov	r6, r0
 80072f8:	460f      	mov	r7, r1
 80072fa:	d007      	beq.n	800730c <__pow5mult+0x20>
 80072fc:	4c25      	ldr	r4, [pc, #148]	; (8007394 <__pow5mult+0xa8>)
 80072fe:	3a01      	subs	r2, #1
 8007300:	2300      	movs	r3, #0
 8007302:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007306:	f7ff fe53 	bl	8006fb0 <__multadd>
 800730a:	4607      	mov	r7, r0
 800730c:	10ad      	asrs	r5, r5, #2
 800730e:	d03d      	beq.n	800738c <__pow5mult+0xa0>
 8007310:	69f4      	ldr	r4, [r6, #28]
 8007312:	b97c      	cbnz	r4, 8007334 <__pow5mult+0x48>
 8007314:	2010      	movs	r0, #16
 8007316:	f7ff fd35 	bl	8006d84 <malloc>
 800731a:	4602      	mov	r2, r0
 800731c:	61f0      	str	r0, [r6, #28]
 800731e:	b928      	cbnz	r0, 800732c <__pow5mult+0x40>
 8007320:	4b1d      	ldr	r3, [pc, #116]	; (8007398 <__pow5mult+0xac>)
 8007322:	481e      	ldr	r0, [pc, #120]	; (800739c <__pow5mult+0xb0>)
 8007324:	f240 11b3 	movw	r1, #435	; 0x1b3
 8007328:	f001 fd46 	bl	8008db8 <__assert_func>
 800732c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007330:	6004      	str	r4, [r0, #0]
 8007332:	60c4      	str	r4, [r0, #12]
 8007334:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8007338:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800733c:	b94c      	cbnz	r4, 8007352 <__pow5mult+0x66>
 800733e:	f240 2171 	movw	r1, #625	; 0x271
 8007342:	4630      	mov	r0, r6
 8007344:	f7ff ff12 	bl	800716c <__i2b>
 8007348:	2300      	movs	r3, #0
 800734a:	f8c8 0008 	str.w	r0, [r8, #8]
 800734e:	4604      	mov	r4, r0
 8007350:	6003      	str	r3, [r0, #0]
 8007352:	f04f 0900 	mov.w	r9, #0
 8007356:	07eb      	lsls	r3, r5, #31
 8007358:	d50a      	bpl.n	8007370 <__pow5mult+0x84>
 800735a:	4639      	mov	r1, r7
 800735c:	4622      	mov	r2, r4
 800735e:	4630      	mov	r0, r6
 8007360:	f7ff ff1a 	bl	8007198 <__multiply>
 8007364:	4639      	mov	r1, r7
 8007366:	4680      	mov	r8, r0
 8007368:	4630      	mov	r0, r6
 800736a:	f7ff fdff 	bl	8006f6c <_Bfree>
 800736e:	4647      	mov	r7, r8
 8007370:	106d      	asrs	r5, r5, #1
 8007372:	d00b      	beq.n	800738c <__pow5mult+0xa0>
 8007374:	6820      	ldr	r0, [r4, #0]
 8007376:	b938      	cbnz	r0, 8007388 <__pow5mult+0x9c>
 8007378:	4622      	mov	r2, r4
 800737a:	4621      	mov	r1, r4
 800737c:	4630      	mov	r0, r6
 800737e:	f7ff ff0b 	bl	8007198 <__multiply>
 8007382:	6020      	str	r0, [r4, #0]
 8007384:	f8c0 9000 	str.w	r9, [r0]
 8007388:	4604      	mov	r4, r0
 800738a:	e7e4      	b.n	8007356 <__pow5mult+0x6a>
 800738c:	4638      	mov	r0, r7
 800738e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007392:	bf00      	nop
 8007394:	080099f0 	.word	0x080099f0
 8007398:	08009826 	.word	0x08009826
 800739c:	080098a6 	.word	0x080098a6

080073a0 <__lshift>:
 80073a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073a4:	460c      	mov	r4, r1
 80073a6:	6849      	ldr	r1, [r1, #4]
 80073a8:	6923      	ldr	r3, [r4, #16]
 80073aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80073ae:	68a3      	ldr	r3, [r4, #8]
 80073b0:	4607      	mov	r7, r0
 80073b2:	4691      	mov	r9, r2
 80073b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80073b8:	f108 0601 	add.w	r6, r8, #1
 80073bc:	42b3      	cmp	r3, r6
 80073be:	db0b      	blt.n	80073d8 <__lshift+0x38>
 80073c0:	4638      	mov	r0, r7
 80073c2:	f7ff fd93 	bl	8006eec <_Balloc>
 80073c6:	4605      	mov	r5, r0
 80073c8:	b948      	cbnz	r0, 80073de <__lshift+0x3e>
 80073ca:	4602      	mov	r2, r0
 80073cc:	4b28      	ldr	r3, [pc, #160]	; (8007470 <__lshift+0xd0>)
 80073ce:	4829      	ldr	r0, [pc, #164]	; (8007474 <__lshift+0xd4>)
 80073d0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80073d4:	f001 fcf0 	bl	8008db8 <__assert_func>
 80073d8:	3101      	adds	r1, #1
 80073da:	005b      	lsls	r3, r3, #1
 80073dc:	e7ee      	b.n	80073bc <__lshift+0x1c>
 80073de:	2300      	movs	r3, #0
 80073e0:	f100 0114 	add.w	r1, r0, #20
 80073e4:	f100 0210 	add.w	r2, r0, #16
 80073e8:	4618      	mov	r0, r3
 80073ea:	4553      	cmp	r3, sl
 80073ec:	db33      	blt.n	8007456 <__lshift+0xb6>
 80073ee:	6920      	ldr	r0, [r4, #16]
 80073f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80073f4:	f104 0314 	add.w	r3, r4, #20
 80073f8:	f019 091f 	ands.w	r9, r9, #31
 80073fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007400:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007404:	d02b      	beq.n	800745e <__lshift+0xbe>
 8007406:	f1c9 0e20 	rsb	lr, r9, #32
 800740a:	468a      	mov	sl, r1
 800740c:	2200      	movs	r2, #0
 800740e:	6818      	ldr	r0, [r3, #0]
 8007410:	fa00 f009 	lsl.w	r0, r0, r9
 8007414:	4310      	orrs	r0, r2
 8007416:	f84a 0b04 	str.w	r0, [sl], #4
 800741a:	f853 2b04 	ldr.w	r2, [r3], #4
 800741e:	459c      	cmp	ip, r3
 8007420:	fa22 f20e 	lsr.w	r2, r2, lr
 8007424:	d8f3      	bhi.n	800740e <__lshift+0x6e>
 8007426:	ebac 0304 	sub.w	r3, ip, r4
 800742a:	3b15      	subs	r3, #21
 800742c:	f023 0303 	bic.w	r3, r3, #3
 8007430:	3304      	adds	r3, #4
 8007432:	f104 0015 	add.w	r0, r4, #21
 8007436:	4584      	cmp	ip, r0
 8007438:	bf38      	it	cc
 800743a:	2304      	movcc	r3, #4
 800743c:	50ca      	str	r2, [r1, r3]
 800743e:	b10a      	cbz	r2, 8007444 <__lshift+0xa4>
 8007440:	f108 0602 	add.w	r6, r8, #2
 8007444:	3e01      	subs	r6, #1
 8007446:	4638      	mov	r0, r7
 8007448:	612e      	str	r6, [r5, #16]
 800744a:	4621      	mov	r1, r4
 800744c:	f7ff fd8e 	bl	8006f6c <_Bfree>
 8007450:	4628      	mov	r0, r5
 8007452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007456:	f842 0f04 	str.w	r0, [r2, #4]!
 800745a:	3301      	adds	r3, #1
 800745c:	e7c5      	b.n	80073ea <__lshift+0x4a>
 800745e:	3904      	subs	r1, #4
 8007460:	f853 2b04 	ldr.w	r2, [r3], #4
 8007464:	f841 2f04 	str.w	r2, [r1, #4]!
 8007468:	459c      	cmp	ip, r3
 800746a:	d8f9      	bhi.n	8007460 <__lshift+0xc0>
 800746c:	e7ea      	b.n	8007444 <__lshift+0xa4>
 800746e:	bf00      	nop
 8007470:	08009895 	.word	0x08009895
 8007474:	080098a6 	.word	0x080098a6

08007478 <__mcmp>:
 8007478:	b530      	push	{r4, r5, lr}
 800747a:	6902      	ldr	r2, [r0, #16]
 800747c:	690c      	ldr	r4, [r1, #16]
 800747e:	1b12      	subs	r2, r2, r4
 8007480:	d10e      	bne.n	80074a0 <__mcmp+0x28>
 8007482:	f100 0314 	add.w	r3, r0, #20
 8007486:	3114      	adds	r1, #20
 8007488:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800748c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007490:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007494:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007498:	42a5      	cmp	r5, r4
 800749a:	d003      	beq.n	80074a4 <__mcmp+0x2c>
 800749c:	d305      	bcc.n	80074aa <__mcmp+0x32>
 800749e:	2201      	movs	r2, #1
 80074a0:	4610      	mov	r0, r2
 80074a2:	bd30      	pop	{r4, r5, pc}
 80074a4:	4283      	cmp	r3, r0
 80074a6:	d3f3      	bcc.n	8007490 <__mcmp+0x18>
 80074a8:	e7fa      	b.n	80074a0 <__mcmp+0x28>
 80074aa:	f04f 32ff 	mov.w	r2, #4294967295
 80074ae:	e7f7      	b.n	80074a0 <__mcmp+0x28>

080074b0 <__mdiff>:
 80074b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074b4:	460c      	mov	r4, r1
 80074b6:	4606      	mov	r6, r0
 80074b8:	4611      	mov	r1, r2
 80074ba:	4620      	mov	r0, r4
 80074bc:	4690      	mov	r8, r2
 80074be:	f7ff ffdb 	bl	8007478 <__mcmp>
 80074c2:	1e05      	subs	r5, r0, #0
 80074c4:	d110      	bne.n	80074e8 <__mdiff+0x38>
 80074c6:	4629      	mov	r1, r5
 80074c8:	4630      	mov	r0, r6
 80074ca:	f7ff fd0f 	bl	8006eec <_Balloc>
 80074ce:	b930      	cbnz	r0, 80074de <__mdiff+0x2e>
 80074d0:	4b3a      	ldr	r3, [pc, #232]	; (80075bc <__mdiff+0x10c>)
 80074d2:	4602      	mov	r2, r0
 80074d4:	f240 2137 	movw	r1, #567	; 0x237
 80074d8:	4839      	ldr	r0, [pc, #228]	; (80075c0 <__mdiff+0x110>)
 80074da:	f001 fc6d 	bl	8008db8 <__assert_func>
 80074de:	2301      	movs	r3, #1
 80074e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80074e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074e8:	bfa4      	itt	ge
 80074ea:	4643      	movge	r3, r8
 80074ec:	46a0      	movge	r8, r4
 80074ee:	4630      	mov	r0, r6
 80074f0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80074f4:	bfa6      	itte	ge
 80074f6:	461c      	movge	r4, r3
 80074f8:	2500      	movge	r5, #0
 80074fa:	2501      	movlt	r5, #1
 80074fc:	f7ff fcf6 	bl	8006eec <_Balloc>
 8007500:	b920      	cbnz	r0, 800750c <__mdiff+0x5c>
 8007502:	4b2e      	ldr	r3, [pc, #184]	; (80075bc <__mdiff+0x10c>)
 8007504:	4602      	mov	r2, r0
 8007506:	f240 2145 	movw	r1, #581	; 0x245
 800750a:	e7e5      	b.n	80074d8 <__mdiff+0x28>
 800750c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007510:	6926      	ldr	r6, [r4, #16]
 8007512:	60c5      	str	r5, [r0, #12]
 8007514:	f104 0914 	add.w	r9, r4, #20
 8007518:	f108 0514 	add.w	r5, r8, #20
 800751c:	f100 0e14 	add.w	lr, r0, #20
 8007520:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007524:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007528:	f108 0210 	add.w	r2, r8, #16
 800752c:	46f2      	mov	sl, lr
 800752e:	2100      	movs	r1, #0
 8007530:	f859 3b04 	ldr.w	r3, [r9], #4
 8007534:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8007538:	fa11 f88b 	uxtah	r8, r1, fp
 800753c:	b299      	uxth	r1, r3
 800753e:	0c1b      	lsrs	r3, r3, #16
 8007540:	eba8 0801 	sub.w	r8, r8, r1
 8007544:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007548:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800754c:	fa1f f888 	uxth.w	r8, r8
 8007550:	1419      	asrs	r1, r3, #16
 8007552:	454e      	cmp	r6, r9
 8007554:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8007558:	f84a 3b04 	str.w	r3, [sl], #4
 800755c:	d8e8      	bhi.n	8007530 <__mdiff+0x80>
 800755e:	1b33      	subs	r3, r6, r4
 8007560:	3b15      	subs	r3, #21
 8007562:	f023 0303 	bic.w	r3, r3, #3
 8007566:	3304      	adds	r3, #4
 8007568:	3415      	adds	r4, #21
 800756a:	42a6      	cmp	r6, r4
 800756c:	bf38      	it	cc
 800756e:	2304      	movcc	r3, #4
 8007570:	441d      	add	r5, r3
 8007572:	4473      	add	r3, lr
 8007574:	469e      	mov	lr, r3
 8007576:	462e      	mov	r6, r5
 8007578:	4566      	cmp	r6, ip
 800757a:	d30e      	bcc.n	800759a <__mdiff+0xea>
 800757c:	f10c 0203 	add.w	r2, ip, #3
 8007580:	1b52      	subs	r2, r2, r5
 8007582:	f022 0203 	bic.w	r2, r2, #3
 8007586:	3d03      	subs	r5, #3
 8007588:	45ac      	cmp	ip, r5
 800758a:	bf38      	it	cc
 800758c:	2200      	movcc	r2, #0
 800758e:	4413      	add	r3, r2
 8007590:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007594:	b17a      	cbz	r2, 80075b6 <__mdiff+0x106>
 8007596:	6107      	str	r7, [r0, #16]
 8007598:	e7a4      	b.n	80074e4 <__mdiff+0x34>
 800759a:	f856 8b04 	ldr.w	r8, [r6], #4
 800759e:	fa11 f288 	uxtah	r2, r1, r8
 80075a2:	1414      	asrs	r4, r2, #16
 80075a4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80075a8:	b292      	uxth	r2, r2
 80075aa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80075ae:	f84e 2b04 	str.w	r2, [lr], #4
 80075b2:	1421      	asrs	r1, r4, #16
 80075b4:	e7e0      	b.n	8007578 <__mdiff+0xc8>
 80075b6:	3f01      	subs	r7, #1
 80075b8:	e7ea      	b.n	8007590 <__mdiff+0xe0>
 80075ba:	bf00      	nop
 80075bc:	08009895 	.word	0x08009895
 80075c0:	080098a6 	.word	0x080098a6

080075c4 <__ulp>:
 80075c4:	b082      	sub	sp, #8
 80075c6:	ed8d 0b00 	vstr	d0, [sp]
 80075ca:	9a01      	ldr	r2, [sp, #4]
 80075cc:	4b0f      	ldr	r3, [pc, #60]	; (800760c <__ulp+0x48>)
 80075ce:	4013      	ands	r3, r2
 80075d0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	dc08      	bgt.n	80075ea <__ulp+0x26>
 80075d8:	425b      	negs	r3, r3
 80075da:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 80075de:	ea4f 5223 	mov.w	r2, r3, asr #20
 80075e2:	da04      	bge.n	80075ee <__ulp+0x2a>
 80075e4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80075e8:	4113      	asrs	r3, r2
 80075ea:	2200      	movs	r2, #0
 80075ec:	e008      	b.n	8007600 <__ulp+0x3c>
 80075ee:	f1a2 0314 	sub.w	r3, r2, #20
 80075f2:	2b1e      	cmp	r3, #30
 80075f4:	bfda      	itte	le
 80075f6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 80075fa:	40da      	lsrle	r2, r3
 80075fc:	2201      	movgt	r2, #1
 80075fe:	2300      	movs	r3, #0
 8007600:	4619      	mov	r1, r3
 8007602:	4610      	mov	r0, r2
 8007604:	ec41 0b10 	vmov	d0, r0, r1
 8007608:	b002      	add	sp, #8
 800760a:	4770      	bx	lr
 800760c:	7ff00000 	.word	0x7ff00000

08007610 <__b2d>:
 8007610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007614:	6906      	ldr	r6, [r0, #16]
 8007616:	f100 0814 	add.w	r8, r0, #20
 800761a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800761e:	1f37      	subs	r7, r6, #4
 8007620:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8007624:	4610      	mov	r0, r2
 8007626:	f7ff fd53 	bl	80070d0 <__hi0bits>
 800762a:	f1c0 0320 	rsb	r3, r0, #32
 800762e:	280a      	cmp	r0, #10
 8007630:	600b      	str	r3, [r1, #0]
 8007632:	491b      	ldr	r1, [pc, #108]	; (80076a0 <__b2d+0x90>)
 8007634:	dc15      	bgt.n	8007662 <__b2d+0x52>
 8007636:	f1c0 0c0b 	rsb	ip, r0, #11
 800763a:	fa22 f30c 	lsr.w	r3, r2, ip
 800763e:	45b8      	cmp	r8, r7
 8007640:	ea43 0501 	orr.w	r5, r3, r1
 8007644:	bf34      	ite	cc
 8007646:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800764a:	2300      	movcs	r3, #0
 800764c:	3015      	adds	r0, #21
 800764e:	fa02 f000 	lsl.w	r0, r2, r0
 8007652:	fa23 f30c 	lsr.w	r3, r3, ip
 8007656:	4303      	orrs	r3, r0
 8007658:	461c      	mov	r4, r3
 800765a:	ec45 4b10 	vmov	d0, r4, r5
 800765e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007662:	45b8      	cmp	r8, r7
 8007664:	bf3a      	itte	cc
 8007666:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800766a:	f1a6 0708 	subcc.w	r7, r6, #8
 800766e:	2300      	movcs	r3, #0
 8007670:	380b      	subs	r0, #11
 8007672:	d012      	beq.n	800769a <__b2d+0x8a>
 8007674:	f1c0 0120 	rsb	r1, r0, #32
 8007678:	fa23 f401 	lsr.w	r4, r3, r1
 800767c:	4082      	lsls	r2, r0
 800767e:	4322      	orrs	r2, r4
 8007680:	4547      	cmp	r7, r8
 8007682:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8007686:	bf8c      	ite	hi
 8007688:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800768c:	2200      	movls	r2, #0
 800768e:	4083      	lsls	r3, r0
 8007690:	40ca      	lsrs	r2, r1
 8007692:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8007696:	4313      	orrs	r3, r2
 8007698:	e7de      	b.n	8007658 <__b2d+0x48>
 800769a:	ea42 0501 	orr.w	r5, r2, r1
 800769e:	e7db      	b.n	8007658 <__b2d+0x48>
 80076a0:	3ff00000 	.word	0x3ff00000

080076a4 <__d2b>:
 80076a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80076a8:	460f      	mov	r7, r1
 80076aa:	2101      	movs	r1, #1
 80076ac:	ec59 8b10 	vmov	r8, r9, d0
 80076b0:	4616      	mov	r6, r2
 80076b2:	f7ff fc1b 	bl	8006eec <_Balloc>
 80076b6:	4604      	mov	r4, r0
 80076b8:	b930      	cbnz	r0, 80076c8 <__d2b+0x24>
 80076ba:	4602      	mov	r2, r0
 80076bc:	4b24      	ldr	r3, [pc, #144]	; (8007750 <__d2b+0xac>)
 80076be:	4825      	ldr	r0, [pc, #148]	; (8007754 <__d2b+0xb0>)
 80076c0:	f240 310f 	movw	r1, #783	; 0x30f
 80076c4:	f001 fb78 	bl	8008db8 <__assert_func>
 80076c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80076cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80076d0:	bb2d      	cbnz	r5, 800771e <__d2b+0x7a>
 80076d2:	9301      	str	r3, [sp, #4]
 80076d4:	f1b8 0300 	subs.w	r3, r8, #0
 80076d8:	d026      	beq.n	8007728 <__d2b+0x84>
 80076da:	4668      	mov	r0, sp
 80076dc:	9300      	str	r3, [sp, #0]
 80076de:	f7ff fd17 	bl	8007110 <__lo0bits>
 80076e2:	e9dd 1200 	ldrd	r1, r2, [sp]
 80076e6:	b1e8      	cbz	r0, 8007724 <__d2b+0x80>
 80076e8:	f1c0 0320 	rsb	r3, r0, #32
 80076ec:	fa02 f303 	lsl.w	r3, r2, r3
 80076f0:	430b      	orrs	r3, r1
 80076f2:	40c2      	lsrs	r2, r0
 80076f4:	6163      	str	r3, [r4, #20]
 80076f6:	9201      	str	r2, [sp, #4]
 80076f8:	9b01      	ldr	r3, [sp, #4]
 80076fa:	61a3      	str	r3, [r4, #24]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	bf14      	ite	ne
 8007700:	2202      	movne	r2, #2
 8007702:	2201      	moveq	r2, #1
 8007704:	6122      	str	r2, [r4, #16]
 8007706:	b1bd      	cbz	r5, 8007738 <__d2b+0x94>
 8007708:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800770c:	4405      	add	r5, r0
 800770e:	603d      	str	r5, [r7, #0]
 8007710:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8007714:	6030      	str	r0, [r6, #0]
 8007716:	4620      	mov	r0, r4
 8007718:	b003      	add	sp, #12
 800771a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800771e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007722:	e7d6      	b.n	80076d2 <__d2b+0x2e>
 8007724:	6161      	str	r1, [r4, #20]
 8007726:	e7e7      	b.n	80076f8 <__d2b+0x54>
 8007728:	a801      	add	r0, sp, #4
 800772a:	f7ff fcf1 	bl	8007110 <__lo0bits>
 800772e:	9b01      	ldr	r3, [sp, #4]
 8007730:	6163      	str	r3, [r4, #20]
 8007732:	3020      	adds	r0, #32
 8007734:	2201      	movs	r2, #1
 8007736:	e7e5      	b.n	8007704 <__d2b+0x60>
 8007738:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800773c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007740:	6038      	str	r0, [r7, #0]
 8007742:	6918      	ldr	r0, [r3, #16]
 8007744:	f7ff fcc4 	bl	80070d0 <__hi0bits>
 8007748:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800774c:	e7e2      	b.n	8007714 <__d2b+0x70>
 800774e:	bf00      	nop
 8007750:	08009895 	.word	0x08009895
 8007754:	080098a6 	.word	0x080098a6

08007758 <__ratio>:
 8007758:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800775c:	4688      	mov	r8, r1
 800775e:	4669      	mov	r1, sp
 8007760:	4681      	mov	r9, r0
 8007762:	f7ff ff55 	bl	8007610 <__b2d>
 8007766:	a901      	add	r1, sp, #4
 8007768:	4640      	mov	r0, r8
 800776a:	ec55 4b10 	vmov	r4, r5, d0
 800776e:	f7ff ff4f 	bl	8007610 <__b2d>
 8007772:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007776:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800777a:	eba3 0c02 	sub.w	ip, r3, r2
 800777e:	e9dd 3200 	ldrd	r3, r2, [sp]
 8007782:	1a9b      	subs	r3, r3, r2
 8007784:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007788:	ec51 0b10 	vmov	r0, r1, d0
 800778c:	2b00      	cmp	r3, #0
 800778e:	bfd6      	itet	le
 8007790:	460a      	movle	r2, r1
 8007792:	462a      	movgt	r2, r5
 8007794:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007798:	468b      	mov	fp, r1
 800779a:	462f      	mov	r7, r5
 800779c:	bfd4      	ite	le
 800779e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 80077a2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80077a6:	4620      	mov	r0, r4
 80077a8:	ee10 2a10 	vmov	r2, s0
 80077ac:	465b      	mov	r3, fp
 80077ae:	4639      	mov	r1, r7
 80077b0:	f7f9 f84c 	bl	800084c <__aeabi_ddiv>
 80077b4:	ec41 0b10 	vmov	d0, r0, r1
 80077b8:	b003      	add	sp, #12
 80077ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080077be <__copybits>:
 80077be:	3901      	subs	r1, #1
 80077c0:	b570      	push	{r4, r5, r6, lr}
 80077c2:	1149      	asrs	r1, r1, #5
 80077c4:	6914      	ldr	r4, [r2, #16]
 80077c6:	3101      	adds	r1, #1
 80077c8:	f102 0314 	add.w	r3, r2, #20
 80077cc:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80077d0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80077d4:	1f05      	subs	r5, r0, #4
 80077d6:	42a3      	cmp	r3, r4
 80077d8:	d30c      	bcc.n	80077f4 <__copybits+0x36>
 80077da:	1aa3      	subs	r3, r4, r2
 80077dc:	3b11      	subs	r3, #17
 80077de:	f023 0303 	bic.w	r3, r3, #3
 80077e2:	3211      	adds	r2, #17
 80077e4:	42a2      	cmp	r2, r4
 80077e6:	bf88      	it	hi
 80077e8:	2300      	movhi	r3, #0
 80077ea:	4418      	add	r0, r3
 80077ec:	2300      	movs	r3, #0
 80077ee:	4288      	cmp	r0, r1
 80077f0:	d305      	bcc.n	80077fe <__copybits+0x40>
 80077f2:	bd70      	pop	{r4, r5, r6, pc}
 80077f4:	f853 6b04 	ldr.w	r6, [r3], #4
 80077f8:	f845 6f04 	str.w	r6, [r5, #4]!
 80077fc:	e7eb      	b.n	80077d6 <__copybits+0x18>
 80077fe:	f840 3b04 	str.w	r3, [r0], #4
 8007802:	e7f4      	b.n	80077ee <__copybits+0x30>

08007804 <__any_on>:
 8007804:	f100 0214 	add.w	r2, r0, #20
 8007808:	6900      	ldr	r0, [r0, #16]
 800780a:	114b      	asrs	r3, r1, #5
 800780c:	4298      	cmp	r0, r3
 800780e:	b510      	push	{r4, lr}
 8007810:	db11      	blt.n	8007836 <__any_on+0x32>
 8007812:	dd0a      	ble.n	800782a <__any_on+0x26>
 8007814:	f011 011f 	ands.w	r1, r1, #31
 8007818:	d007      	beq.n	800782a <__any_on+0x26>
 800781a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800781e:	fa24 f001 	lsr.w	r0, r4, r1
 8007822:	fa00 f101 	lsl.w	r1, r0, r1
 8007826:	428c      	cmp	r4, r1
 8007828:	d10b      	bne.n	8007842 <__any_on+0x3e>
 800782a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800782e:	4293      	cmp	r3, r2
 8007830:	d803      	bhi.n	800783a <__any_on+0x36>
 8007832:	2000      	movs	r0, #0
 8007834:	bd10      	pop	{r4, pc}
 8007836:	4603      	mov	r3, r0
 8007838:	e7f7      	b.n	800782a <__any_on+0x26>
 800783a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800783e:	2900      	cmp	r1, #0
 8007840:	d0f5      	beq.n	800782e <__any_on+0x2a>
 8007842:	2001      	movs	r0, #1
 8007844:	e7f6      	b.n	8007834 <__any_on+0x30>

08007846 <sulp>:
 8007846:	b570      	push	{r4, r5, r6, lr}
 8007848:	4604      	mov	r4, r0
 800784a:	460d      	mov	r5, r1
 800784c:	ec45 4b10 	vmov	d0, r4, r5
 8007850:	4616      	mov	r6, r2
 8007852:	f7ff feb7 	bl	80075c4 <__ulp>
 8007856:	ec51 0b10 	vmov	r0, r1, d0
 800785a:	b17e      	cbz	r6, 800787c <sulp+0x36>
 800785c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007860:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8007864:	2b00      	cmp	r3, #0
 8007866:	dd09      	ble.n	800787c <sulp+0x36>
 8007868:	051b      	lsls	r3, r3, #20
 800786a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800786e:	2400      	movs	r4, #0
 8007870:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8007874:	4622      	mov	r2, r4
 8007876:	462b      	mov	r3, r5
 8007878:	f7f8 febe 	bl	80005f8 <__aeabi_dmul>
 800787c:	bd70      	pop	{r4, r5, r6, pc}
	...

08007880 <_strtod_l>:
 8007880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007884:	ed2d 8b02 	vpush	{d8}
 8007888:	b09b      	sub	sp, #108	; 0x6c
 800788a:	4604      	mov	r4, r0
 800788c:	9213      	str	r2, [sp, #76]	; 0x4c
 800788e:	2200      	movs	r2, #0
 8007890:	9216      	str	r2, [sp, #88]	; 0x58
 8007892:	460d      	mov	r5, r1
 8007894:	f04f 0800 	mov.w	r8, #0
 8007898:	f04f 0900 	mov.w	r9, #0
 800789c:	460a      	mov	r2, r1
 800789e:	9215      	str	r2, [sp, #84]	; 0x54
 80078a0:	7811      	ldrb	r1, [r2, #0]
 80078a2:	292b      	cmp	r1, #43	; 0x2b
 80078a4:	d04c      	beq.n	8007940 <_strtod_l+0xc0>
 80078a6:	d83a      	bhi.n	800791e <_strtod_l+0x9e>
 80078a8:	290d      	cmp	r1, #13
 80078aa:	d834      	bhi.n	8007916 <_strtod_l+0x96>
 80078ac:	2908      	cmp	r1, #8
 80078ae:	d834      	bhi.n	800791a <_strtod_l+0x9a>
 80078b0:	2900      	cmp	r1, #0
 80078b2:	d03d      	beq.n	8007930 <_strtod_l+0xb0>
 80078b4:	2200      	movs	r2, #0
 80078b6:	920a      	str	r2, [sp, #40]	; 0x28
 80078b8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80078ba:	7832      	ldrb	r2, [r6, #0]
 80078bc:	2a30      	cmp	r2, #48	; 0x30
 80078be:	f040 80b4 	bne.w	8007a2a <_strtod_l+0x1aa>
 80078c2:	7872      	ldrb	r2, [r6, #1]
 80078c4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80078c8:	2a58      	cmp	r2, #88	; 0x58
 80078ca:	d170      	bne.n	80079ae <_strtod_l+0x12e>
 80078cc:	9302      	str	r3, [sp, #8]
 80078ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078d0:	9301      	str	r3, [sp, #4]
 80078d2:	ab16      	add	r3, sp, #88	; 0x58
 80078d4:	9300      	str	r3, [sp, #0]
 80078d6:	4a8e      	ldr	r2, [pc, #568]	; (8007b10 <_strtod_l+0x290>)
 80078d8:	ab17      	add	r3, sp, #92	; 0x5c
 80078da:	a915      	add	r1, sp, #84	; 0x54
 80078dc:	4620      	mov	r0, r4
 80078de:	f001 fb07 	bl	8008ef0 <__gethex>
 80078e2:	f010 070f 	ands.w	r7, r0, #15
 80078e6:	4605      	mov	r5, r0
 80078e8:	d005      	beq.n	80078f6 <_strtod_l+0x76>
 80078ea:	2f06      	cmp	r7, #6
 80078ec:	d12a      	bne.n	8007944 <_strtod_l+0xc4>
 80078ee:	3601      	adds	r6, #1
 80078f0:	2300      	movs	r3, #0
 80078f2:	9615      	str	r6, [sp, #84]	; 0x54
 80078f4:	930a      	str	r3, [sp, #40]	; 0x28
 80078f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	f040 857f 	bne.w	80083fc <_strtod_l+0xb7c>
 80078fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007900:	b1db      	cbz	r3, 800793a <_strtod_l+0xba>
 8007902:	4642      	mov	r2, r8
 8007904:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8007908:	ec43 2b10 	vmov	d0, r2, r3
 800790c:	b01b      	add	sp, #108	; 0x6c
 800790e:	ecbd 8b02 	vpop	{d8}
 8007912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007916:	2920      	cmp	r1, #32
 8007918:	d1cc      	bne.n	80078b4 <_strtod_l+0x34>
 800791a:	3201      	adds	r2, #1
 800791c:	e7bf      	b.n	800789e <_strtod_l+0x1e>
 800791e:	292d      	cmp	r1, #45	; 0x2d
 8007920:	d1c8      	bne.n	80078b4 <_strtod_l+0x34>
 8007922:	2101      	movs	r1, #1
 8007924:	910a      	str	r1, [sp, #40]	; 0x28
 8007926:	1c51      	adds	r1, r2, #1
 8007928:	9115      	str	r1, [sp, #84]	; 0x54
 800792a:	7852      	ldrb	r2, [r2, #1]
 800792c:	2a00      	cmp	r2, #0
 800792e:	d1c3      	bne.n	80078b8 <_strtod_l+0x38>
 8007930:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8007932:	9515      	str	r5, [sp, #84]	; 0x54
 8007934:	2b00      	cmp	r3, #0
 8007936:	f040 855f 	bne.w	80083f8 <_strtod_l+0xb78>
 800793a:	4642      	mov	r2, r8
 800793c:	464b      	mov	r3, r9
 800793e:	e7e3      	b.n	8007908 <_strtod_l+0x88>
 8007940:	2100      	movs	r1, #0
 8007942:	e7ef      	b.n	8007924 <_strtod_l+0xa4>
 8007944:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007946:	b13a      	cbz	r2, 8007958 <_strtod_l+0xd8>
 8007948:	2135      	movs	r1, #53	; 0x35
 800794a:	a818      	add	r0, sp, #96	; 0x60
 800794c:	f7ff ff37 	bl	80077be <__copybits>
 8007950:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007952:	4620      	mov	r0, r4
 8007954:	f7ff fb0a 	bl	8006f6c <_Bfree>
 8007958:	3f01      	subs	r7, #1
 800795a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800795c:	2f04      	cmp	r7, #4
 800795e:	d806      	bhi.n	800796e <_strtod_l+0xee>
 8007960:	e8df f007 	tbb	[pc, r7]
 8007964:	201d0314 	.word	0x201d0314
 8007968:	14          	.byte	0x14
 8007969:	00          	.byte	0x00
 800796a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800796e:	05e9      	lsls	r1, r5, #23
 8007970:	bf48      	it	mi
 8007972:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8007976:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800797a:	0d1b      	lsrs	r3, r3, #20
 800797c:	051b      	lsls	r3, r3, #20
 800797e:	2b00      	cmp	r3, #0
 8007980:	d1b9      	bne.n	80078f6 <_strtod_l+0x76>
 8007982:	f7fe fb05 	bl	8005f90 <__errno>
 8007986:	2322      	movs	r3, #34	; 0x22
 8007988:	6003      	str	r3, [r0, #0]
 800798a:	e7b4      	b.n	80078f6 <_strtod_l+0x76>
 800798c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007990:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007994:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007998:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800799c:	e7e7      	b.n	800796e <_strtod_l+0xee>
 800799e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007b18 <_strtod_l+0x298>
 80079a2:	e7e4      	b.n	800796e <_strtod_l+0xee>
 80079a4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80079a8:	f04f 38ff 	mov.w	r8, #4294967295
 80079ac:	e7df      	b.n	800796e <_strtod_l+0xee>
 80079ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80079b0:	1c5a      	adds	r2, r3, #1
 80079b2:	9215      	str	r2, [sp, #84]	; 0x54
 80079b4:	785b      	ldrb	r3, [r3, #1]
 80079b6:	2b30      	cmp	r3, #48	; 0x30
 80079b8:	d0f9      	beq.n	80079ae <_strtod_l+0x12e>
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d09b      	beq.n	80078f6 <_strtod_l+0x76>
 80079be:	2301      	movs	r3, #1
 80079c0:	f04f 0a00 	mov.w	sl, #0
 80079c4:	9304      	str	r3, [sp, #16]
 80079c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80079c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80079ca:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80079ce:	46d3      	mov	fp, sl
 80079d0:	220a      	movs	r2, #10
 80079d2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80079d4:	7806      	ldrb	r6, [r0, #0]
 80079d6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80079da:	b2d9      	uxtb	r1, r3
 80079dc:	2909      	cmp	r1, #9
 80079de:	d926      	bls.n	8007a2e <_strtod_l+0x1ae>
 80079e0:	494c      	ldr	r1, [pc, #304]	; (8007b14 <_strtod_l+0x294>)
 80079e2:	2201      	movs	r2, #1
 80079e4:	f001 f98c 	bl	8008d00 <strncmp>
 80079e8:	2800      	cmp	r0, #0
 80079ea:	d030      	beq.n	8007a4e <_strtod_l+0x1ce>
 80079ec:	2000      	movs	r0, #0
 80079ee:	4632      	mov	r2, r6
 80079f0:	9005      	str	r0, [sp, #20]
 80079f2:	465e      	mov	r6, fp
 80079f4:	4603      	mov	r3, r0
 80079f6:	2a65      	cmp	r2, #101	; 0x65
 80079f8:	d001      	beq.n	80079fe <_strtod_l+0x17e>
 80079fa:	2a45      	cmp	r2, #69	; 0x45
 80079fc:	d113      	bne.n	8007a26 <_strtod_l+0x1a6>
 80079fe:	b91e      	cbnz	r6, 8007a08 <_strtod_l+0x188>
 8007a00:	9a04      	ldr	r2, [sp, #16]
 8007a02:	4302      	orrs	r2, r0
 8007a04:	d094      	beq.n	8007930 <_strtod_l+0xb0>
 8007a06:	2600      	movs	r6, #0
 8007a08:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007a0a:	1c6a      	adds	r2, r5, #1
 8007a0c:	9215      	str	r2, [sp, #84]	; 0x54
 8007a0e:	786a      	ldrb	r2, [r5, #1]
 8007a10:	2a2b      	cmp	r2, #43	; 0x2b
 8007a12:	d074      	beq.n	8007afe <_strtod_l+0x27e>
 8007a14:	2a2d      	cmp	r2, #45	; 0x2d
 8007a16:	d078      	beq.n	8007b0a <_strtod_l+0x28a>
 8007a18:	f04f 0c00 	mov.w	ip, #0
 8007a1c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007a20:	2909      	cmp	r1, #9
 8007a22:	d97f      	bls.n	8007b24 <_strtod_l+0x2a4>
 8007a24:	9515      	str	r5, [sp, #84]	; 0x54
 8007a26:	2700      	movs	r7, #0
 8007a28:	e09e      	b.n	8007b68 <_strtod_l+0x2e8>
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	e7c8      	b.n	80079c0 <_strtod_l+0x140>
 8007a2e:	f1bb 0f08 	cmp.w	fp, #8
 8007a32:	bfd8      	it	le
 8007a34:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8007a36:	f100 0001 	add.w	r0, r0, #1
 8007a3a:	bfda      	itte	le
 8007a3c:	fb02 3301 	mlale	r3, r2, r1, r3
 8007a40:	9309      	strle	r3, [sp, #36]	; 0x24
 8007a42:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8007a46:	f10b 0b01 	add.w	fp, fp, #1
 8007a4a:	9015      	str	r0, [sp, #84]	; 0x54
 8007a4c:	e7c1      	b.n	80079d2 <_strtod_l+0x152>
 8007a4e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a50:	1c5a      	adds	r2, r3, #1
 8007a52:	9215      	str	r2, [sp, #84]	; 0x54
 8007a54:	785a      	ldrb	r2, [r3, #1]
 8007a56:	f1bb 0f00 	cmp.w	fp, #0
 8007a5a:	d037      	beq.n	8007acc <_strtod_l+0x24c>
 8007a5c:	9005      	str	r0, [sp, #20]
 8007a5e:	465e      	mov	r6, fp
 8007a60:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8007a64:	2b09      	cmp	r3, #9
 8007a66:	d912      	bls.n	8007a8e <_strtod_l+0x20e>
 8007a68:	2301      	movs	r3, #1
 8007a6a:	e7c4      	b.n	80079f6 <_strtod_l+0x176>
 8007a6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a6e:	1c5a      	adds	r2, r3, #1
 8007a70:	9215      	str	r2, [sp, #84]	; 0x54
 8007a72:	785a      	ldrb	r2, [r3, #1]
 8007a74:	3001      	adds	r0, #1
 8007a76:	2a30      	cmp	r2, #48	; 0x30
 8007a78:	d0f8      	beq.n	8007a6c <_strtod_l+0x1ec>
 8007a7a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007a7e:	2b08      	cmp	r3, #8
 8007a80:	f200 84c1 	bhi.w	8008406 <_strtod_l+0xb86>
 8007a84:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007a86:	9005      	str	r0, [sp, #20]
 8007a88:	2000      	movs	r0, #0
 8007a8a:	930b      	str	r3, [sp, #44]	; 0x2c
 8007a8c:	4606      	mov	r6, r0
 8007a8e:	3a30      	subs	r2, #48	; 0x30
 8007a90:	f100 0301 	add.w	r3, r0, #1
 8007a94:	d014      	beq.n	8007ac0 <_strtod_l+0x240>
 8007a96:	9905      	ldr	r1, [sp, #20]
 8007a98:	4419      	add	r1, r3
 8007a9a:	9105      	str	r1, [sp, #20]
 8007a9c:	4633      	mov	r3, r6
 8007a9e:	eb00 0c06 	add.w	ip, r0, r6
 8007aa2:	210a      	movs	r1, #10
 8007aa4:	4563      	cmp	r3, ip
 8007aa6:	d113      	bne.n	8007ad0 <_strtod_l+0x250>
 8007aa8:	1833      	adds	r3, r6, r0
 8007aaa:	2b08      	cmp	r3, #8
 8007aac:	f106 0601 	add.w	r6, r6, #1
 8007ab0:	4406      	add	r6, r0
 8007ab2:	dc1a      	bgt.n	8007aea <_strtod_l+0x26a>
 8007ab4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ab6:	230a      	movs	r3, #10
 8007ab8:	fb03 2301 	mla	r3, r3, r1, r2
 8007abc:	9309      	str	r3, [sp, #36]	; 0x24
 8007abe:	2300      	movs	r3, #0
 8007ac0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007ac2:	1c51      	adds	r1, r2, #1
 8007ac4:	9115      	str	r1, [sp, #84]	; 0x54
 8007ac6:	7852      	ldrb	r2, [r2, #1]
 8007ac8:	4618      	mov	r0, r3
 8007aca:	e7c9      	b.n	8007a60 <_strtod_l+0x1e0>
 8007acc:	4658      	mov	r0, fp
 8007ace:	e7d2      	b.n	8007a76 <_strtod_l+0x1f6>
 8007ad0:	2b08      	cmp	r3, #8
 8007ad2:	f103 0301 	add.w	r3, r3, #1
 8007ad6:	dc03      	bgt.n	8007ae0 <_strtod_l+0x260>
 8007ad8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8007ada:	434f      	muls	r7, r1
 8007adc:	9709      	str	r7, [sp, #36]	; 0x24
 8007ade:	e7e1      	b.n	8007aa4 <_strtod_l+0x224>
 8007ae0:	2b10      	cmp	r3, #16
 8007ae2:	bfd8      	it	le
 8007ae4:	fb01 fa0a 	mulle.w	sl, r1, sl
 8007ae8:	e7dc      	b.n	8007aa4 <_strtod_l+0x224>
 8007aea:	2e10      	cmp	r6, #16
 8007aec:	bfdc      	itt	le
 8007aee:	230a      	movle	r3, #10
 8007af0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 8007af4:	e7e3      	b.n	8007abe <_strtod_l+0x23e>
 8007af6:	2300      	movs	r3, #0
 8007af8:	9305      	str	r3, [sp, #20]
 8007afa:	2301      	movs	r3, #1
 8007afc:	e780      	b.n	8007a00 <_strtod_l+0x180>
 8007afe:	f04f 0c00 	mov.w	ip, #0
 8007b02:	1caa      	adds	r2, r5, #2
 8007b04:	9215      	str	r2, [sp, #84]	; 0x54
 8007b06:	78aa      	ldrb	r2, [r5, #2]
 8007b08:	e788      	b.n	8007a1c <_strtod_l+0x19c>
 8007b0a:	f04f 0c01 	mov.w	ip, #1
 8007b0e:	e7f8      	b.n	8007b02 <_strtod_l+0x282>
 8007b10:	08009a00 	.word	0x08009a00
 8007b14:	080099fc 	.word	0x080099fc
 8007b18:	7ff00000 	.word	0x7ff00000
 8007b1c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007b1e:	1c51      	adds	r1, r2, #1
 8007b20:	9115      	str	r1, [sp, #84]	; 0x54
 8007b22:	7852      	ldrb	r2, [r2, #1]
 8007b24:	2a30      	cmp	r2, #48	; 0x30
 8007b26:	d0f9      	beq.n	8007b1c <_strtod_l+0x29c>
 8007b28:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007b2c:	2908      	cmp	r1, #8
 8007b2e:	f63f af7a 	bhi.w	8007a26 <_strtod_l+0x1a6>
 8007b32:	3a30      	subs	r2, #48	; 0x30
 8007b34:	9208      	str	r2, [sp, #32]
 8007b36:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007b38:	920c      	str	r2, [sp, #48]	; 0x30
 8007b3a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007b3c:	1c57      	adds	r7, r2, #1
 8007b3e:	9715      	str	r7, [sp, #84]	; 0x54
 8007b40:	7852      	ldrb	r2, [r2, #1]
 8007b42:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8007b46:	f1be 0f09 	cmp.w	lr, #9
 8007b4a:	d938      	bls.n	8007bbe <_strtod_l+0x33e>
 8007b4c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007b4e:	1a7f      	subs	r7, r7, r1
 8007b50:	2f08      	cmp	r7, #8
 8007b52:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8007b56:	dc03      	bgt.n	8007b60 <_strtod_l+0x2e0>
 8007b58:	9908      	ldr	r1, [sp, #32]
 8007b5a:	428f      	cmp	r7, r1
 8007b5c:	bfa8      	it	ge
 8007b5e:	460f      	movge	r7, r1
 8007b60:	f1bc 0f00 	cmp.w	ip, #0
 8007b64:	d000      	beq.n	8007b68 <_strtod_l+0x2e8>
 8007b66:	427f      	negs	r7, r7
 8007b68:	2e00      	cmp	r6, #0
 8007b6a:	d14f      	bne.n	8007c0c <_strtod_l+0x38c>
 8007b6c:	9904      	ldr	r1, [sp, #16]
 8007b6e:	4301      	orrs	r1, r0
 8007b70:	f47f aec1 	bne.w	80078f6 <_strtod_l+0x76>
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	f47f aedb 	bne.w	8007930 <_strtod_l+0xb0>
 8007b7a:	2a69      	cmp	r2, #105	; 0x69
 8007b7c:	d029      	beq.n	8007bd2 <_strtod_l+0x352>
 8007b7e:	dc26      	bgt.n	8007bce <_strtod_l+0x34e>
 8007b80:	2a49      	cmp	r2, #73	; 0x49
 8007b82:	d026      	beq.n	8007bd2 <_strtod_l+0x352>
 8007b84:	2a4e      	cmp	r2, #78	; 0x4e
 8007b86:	f47f aed3 	bne.w	8007930 <_strtod_l+0xb0>
 8007b8a:	499b      	ldr	r1, [pc, #620]	; (8007df8 <_strtod_l+0x578>)
 8007b8c:	a815      	add	r0, sp, #84	; 0x54
 8007b8e:	f001 fbef 	bl	8009370 <__match>
 8007b92:	2800      	cmp	r0, #0
 8007b94:	f43f aecc 	beq.w	8007930 <_strtod_l+0xb0>
 8007b98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007b9a:	781b      	ldrb	r3, [r3, #0]
 8007b9c:	2b28      	cmp	r3, #40	; 0x28
 8007b9e:	d12f      	bne.n	8007c00 <_strtod_l+0x380>
 8007ba0:	4996      	ldr	r1, [pc, #600]	; (8007dfc <_strtod_l+0x57c>)
 8007ba2:	aa18      	add	r2, sp, #96	; 0x60
 8007ba4:	a815      	add	r0, sp, #84	; 0x54
 8007ba6:	f001 fbf7 	bl	8009398 <__hexnan>
 8007baa:	2805      	cmp	r0, #5
 8007bac:	d128      	bne.n	8007c00 <_strtod_l+0x380>
 8007bae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007bb0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007bb4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8007bb8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8007bbc:	e69b      	b.n	80078f6 <_strtod_l+0x76>
 8007bbe:	9f08      	ldr	r7, [sp, #32]
 8007bc0:	210a      	movs	r1, #10
 8007bc2:	fb01 2107 	mla	r1, r1, r7, r2
 8007bc6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8007bca:	9208      	str	r2, [sp, #32]
 8007bcc:	e7b5      	b.n	8007b3a <_strtod_l+0x2ba>
 8007bce:	2a6e      	cmp	r2, #110	; 0x6e
 8007bd0:	e7d9      	b.n	8007b86 <_strtod_l+0x306>
 8007bd2:	498b      	ldr	r1, [pc, #556]	; (8007e00 <_strtod_l+0x580>)
 8007bd4:	a815      	add	r0, sp, #84	; 0x54
 8007bd6:	f001 fbcb 	bl	8009370 <__match>
 8007bda:	2800      	cmp	r0, #0
 8007bdc:	f43f aea8 	beq.w	8007930 <_strtod_l+0xb0>
 8007be0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007be2:	4988      	ldr	r1, [pc, #544]	; (8007e04 <_strtod_l+0x584>)
 8007be4:	3b01      	subs	r3, #1
 8007be6:	a815      	add	r0, sp, #84	; 0x54
 8007be8:	9315      	str	r3, [sp, #84]	; 0x54
 8007bea:	f001 fbc1 	bl	8009370 <__match>
 8007bee:	b910      	cbnz	r0, 8007bf6 <_strtod_l+0x376>
 8007bf0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007bf2:	3301      	adds	r3, #1
 8007bf4:	9315      	str	r3, [sp, #84]	; 0x54
 8007bf6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8007e14 <_strtod_l+0x594>
 8007bfa:	f04f 0800 	mov.w	r8, #0
 8007bfe:	e67a      	b.n	80078f6 <_strtod_l+0x76>
 8007c00:	4881      	ldr	r0, [pc, #516]	; (8007e08 <_strtod_l+0x588>)
 8007c02:	f001 f8d1 	bl	8008da8 <nan>
 8007c06:	ec59 8b10 	vmov	r8, r9, d0
 8007c0a:	e674      	b.n	80078f6 <_strtod_l+0x76>
 8007c0c:	9b05      	ldr	r3, [sp, #20]
 8007c0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c10:	1afb      	subs	r3, r7, r3
 8007c12:	f1bb 0f00 	cmp.w	fp, #0
 8007c16:	bf08      	it	eq
 8007c18:	46b3      	moveq	fp, r6
 8007c1a:	2e10      	cmp	r6, #16
 8007c1c:	9308      	str	r3, [sp, #32]
 8007c1e:	4635      	mov	r5, r6
 8007c20:	bfa8      	it	ge
 8007c22:	2510      	movge	r5, #16
 8007c24:	f7f8 fc6e 	bl	8000504 <__aeabi_ui2d>
 8007c28:	2e09      	cmp	r6, #9
 8007c2a:	4680      	mov	r8, r0
 8007c2c:	4689      	mov	r9, r1
 8007c2e:	dd13      	ble.n	8007c58 <_strtod_l+0x3d8>
 8007c30:	4b76      	ldr	r3, [pc, #472]	; (8007e0c <_strtod_l+0x58c>)
 8007c32:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007c36:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007c3a:	f7f8 fcdd 	bl	80005f8 <__aeabi_dmul>
 8007c3e:	4680      	mov	r8, r0
 8007c40:	4650      	mov	r0, sl
 8007c42:	4689      	mov	r9, r1
 8007c44:	f7f8 fc5e 	bl	8000504 <__aeabi_ui2d>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	460b      	mov	r3, r1
 8007c4c:	4640      	mov	r0, r8
 8007c4e:	4649      	mov	r1, r9
 8007c50:	f7f8 fb1c 	bl	800028c <__adddf3>
 8007c54:	4680      	mov	r8, r0
 8007c56:	4689      	mov	r9, r1
 8007c58:	2e0f      	cmp	r6, #15
 8007c5a:	dc38      	bgt.n	8007cce <_strtod_l+0x44e>
 8007c5c:	9b08      	ldr	r3, [sp, #32]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f43f ae49 	beq.w	80078f6 <_strtod_l+0x76>
 8007c64:	dd24      	ble.n	8007cb0 <_strtod_l+0x430>
 8007c66:	2b16      	cmp	r3, #22
 8007c68:	dc0b      	bgt.n	8007c82 <_strtod_l+0x402>
 8007c6a:	4968      	ldr	r1, [pc, #416]	; (8007e0c <_strtod_l+0x58c>)
 8007c6c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007c70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c74:	4642      	mov	r2, r8
 8007c76:	464b      	mov	r3, r9
 8007c78:	f7f8 fcbe 	bl	80005f8 <__aeabi_dmul>
 8007c7c:	4680      	mov	r8, r0
 8007c7e:	4689      	mov	r9, r1
 8007c80:	e639      	b.n	80078f6 <_strtod_l+0x76>
 8007c82:	9a08      	ldr	r2, [sp, #32]
 8007c84:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007c88:	4293      	cmp	r3, r2
 8007c8a:	db20      	blt.n	8007cce <_strtod_l+0x44e>
 8007c8c:	4c5f      	ldr	r4, [pc, #380]	; (8007e0c <_strtod_l+0x58c>)
 8007c8e:	f1c6 060f 	rsb	r6, r6, #15
 8007c92:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8007c96:	4642      	mov	r2, r8
 8007c98:	464b      	mov	r3, r9
 8007c9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007c9e:	f7f8 fcab 	bl	80005f8 <__aeabi_dmul>
 8007ca2:	9b08      	ldr	r3, [sp, #32]
 8007ca4:	1b9e      	subs	r6, r3, r6
 8007ca6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007caa:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007cae:	e7e3      	b.n	8007c78 <_strtod_l+0x3f8>
 8007cb0:	9b08      	ldr	r3, [sp, #32]
 8007cb2:	3316      	adds	r3, #22
 8007cb4:	db0b      	blt.n	8007cce <_strtod_l+0x44e>
 8007cb6:	9b05      	ldr	r3, [sp, #20]
 8007cb8:	1bdf      	subs	r7, r3, r7
 8007cba:	4b54      	ldr	r3, [pc, #336]	; (8007e0c <_strtod_l+0x58c>)
 8007cbc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8007cc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007cc4:	4640      	mov	r0, r8
 8007cc6:	4649      	mov	r1, r9
 8007cc8:	f7f8 fdc0 	bl	800084c <__aeabi_ddiv>
 8007ccc:	e7d6      	b.n	8007c7c <_strtod_l+0x3fc>
 8007cce:	9b08      	ldr	r3, [sp, #32]
 8007cd0:	1b75      	subs	r5, r6, r5
 8007cd2:	441d      	add	r5, r3
 8007cd4:	2d00      	cmp	r5, #0
 8007cd6:	dd70      	ble.n	8007dba <_strtod_l+0x53a>
 8007cd8:	f015 030f 	ands.w	r3, r5, #15
 8007cdc:	d00a      	beq.n	8007cf4 <_strtod_l+0x474>
 8007cde:	494b      	ldr	r1, [pc, #300]	; (8007e0c <_strtod_l+0x58c>)
 8007ce0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007ce4:	4642      	mov	r2, r8
 8007ce6:	464b      	mov	r3, r9
 8007ce8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cec:	f7f8 fc84 	bl	80005f8 <__aeabi_dmul>
 8007cf0:	4680      	mov	r8, r0
 8007cf2:	4689      	mov	r9, r1
 8007cf4:	f035 050f 	bics.w	r5, r5, #15
 8007cf8:	d04d      	beq.n	8007d96 <_strtod_l+0x516>
 8007cfa:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8007cfe:	dd22      	ble.n	8007d46 <_strtod_l+0x4c6>
 8007d00:	2500      	movs	r5, #0
 8007d02:	46ab      	mov	fp, r5
 8007d04:	9509      	str	r5, [sp, #36]	; 0x24
 8007d06:	9505      	str	r5, [sp, #20]
 8007d08:	2322      	movs	r3, #34	; 0x22
 8007d0a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8007e14 <_strtod_l+0x594>
 8007d0e:	6023      	str	r3, [r4, #0]
 8007d10:	f04f 0800 	mov.w	r8, #0
 8007d14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	f43f aded 	beq.w	80078f6 <_strtod_l+0x76>
 8007d1c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007d1e:	4620      	mov	r0, r4
 8007d20:	f7ff f924 	bl	8006f6c <_Bfree>
 8007d24:	9905      	ldr	r1, [sp, #20]
 8007d26:	4620      	mov	r0, r4
 8007d28:	f7ff f920 	bl	8006f6c <_Bfree>
 8007d2c:	4659      	mov	r1, fp
 8007d2e:	4620      	mov	r0, r4
 8007d30:	f7ff f91c 	bl	8006f6c <_Bfree>
 8007d34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007d36:	4620      	mov	r0, r4
 8007d38:	f7ff f918 	bl	8006f6c <_Bfree>
 8007d3c:	4629      	mov	r1, r5
 8007d3e:	4620      	mov	r0, r4
 8007d40:	f7ff f914 	bl	8006f6c <_Bfree>
 8007d44:	e5d7      	b.n	80078f6 <_strtod_l+0x76>
 8007d46:	4b32      	ldr	r3, [pc, #200]	; (8007e10 <_strtod_l+0x590>)
 8007d48:	9304      	str	r3, [sp, #16]
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	112d      	asrs	r5, r5, #4
 8007d4e:	4640      	mov	r0, r8
 8007d50:	4649      	mov	r1, r9
 8007d52:	469a      	mov	sl, r3
 8007d54:	2d01      	cmp	r5, #1
 8007d56:	dc21      	bgt.n	8007d9c <_strtod_l+0x51c>
 8007d58:	b10b      	cbz	r3, 8007d5e <_strtod_l+0x4de>
 8007d5a:	4680      	mov	r8, r0
 8007d5c:	4689      	mov	r9, r1
 8007d5e:	492c      	ldr	r1, [pc, #176]	; (8007e10 <_strtod_l+0x590>)
 8007d60:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8007d64:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007d68:	4642      	mov	r2, r8
 8007d6a:	464b      	mov	r3, r9
 8007d6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d70:	f7f8 fc42 	bl	80005f8 <__aeabi_dmul>
 8007d74:	4b27      	ldr	r3, [pc, #156]	; (8007e14 <_strtod_l+0x594>)
 8007d76:	460a      	mov	r2, r1
 8007d78:	400b      	ands	r3, r1
 8007d7a:	4927      	ldr	r1, [pc, #156]	; (8007e18 <_strtod_l+0x598>)
 8007d7c:	428b      	cmp	r3, r1
 8007d7e:	4680      	mov	r8, r0
 8007d80:	d8be      	bhi.n	8007d00 <_strtod_l+0x480>
 8007d82:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8007d86:	428b      	cmp	r3, r1
 8007d88:	bf86      	itte	hi
 8007d8a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8007e1c <_strtod_l+0x59c>
 8007d8e:	f04f 38ff 	movhi.w	r8, #4294967295
 8007d92:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8007d96:	2300      	movs	r3, #0
 8007d98:	9304      	str	r3, [sp, #16]
 8007d9a:	e07b      	b.n	8007e94 <_strtod_l+0x614>
 8007d9c:	07ea      	lsls	r2, r5, #31
 8007d9e:	d505      	bpl.n	8007dac <_strtod_l+0x52c>
 8007da0:	9b04      	ldr	r3, [sp, #16]
 8007da2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007da6:	f7f8 fc27 	bl	80005f8 <__aeabi_dmul>
 8007daa:	2301      	movs	r3, #1
 8007dac:	9a04      	ldr	r2, [sp, #16]
 8007dae:	3208      	adds	r2, #8
 8007db0:	f10a 0a01 	add.w	sl, sl, #1
 8007db4:	106d      	asrs	r5, r5, #1
 8007db6:	9204      	str	r2, [sp, #16]
 8007db8:	e7cc      	b.n	8007d54 <_strtod_l+0x4d4>
 8007dba:	d0ec      	beq.n	8007d96 <_strtod_l+0x516>
 8007dbc:	426d      	negs	r5, r5
 8007dbe:	f015 020f 	ands.w	r2, r5, #15
 8007dc2:	d00a      	beq.n	8007dda <_strtod_l+0x55a>
 8007dc4:	4b11      	ldr	r3, [pc, #68]	; (8007e0c <_strtod_l+0x58c>)
 8007dc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007dca:	4640      	mov	r0, r8
 8007dcc:	4649      	mov	r1, r9
 8007dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dd2:	f7f8 fd3b 	bl	800084c <__aeabi_ddiv>
 8007dd6:	4680      	mov	r8, r0
 8007dd8:	4689      	mov	r9, r1
 8007dda:	112d      	asrs	r5, r5, #4
 8007ddc:	d0db      	beq.n	8007d96 <_strtod_l+0x516>
 8007dde:	2d1f      	cmp	r5, #31
 8007de0:	dd1e      	ble.n	8007e20 <_strtod_l+0x5a0>
 8007de2:	2500      	movs	r5, #0
 8007de4:	46ab      	mov	fp, r5
 8007de6:	9509      	str	r5, [sp, #36]	; 0x24
 8007de8:	9505      	str	r5, [sp, #20]
 8007dea:	2322      	movs	r3, #34	; 0x22
 8007dec:	f04f 0800 	mov.w	r8, #0
 8007df0:	f04f 0900 	mov.w	r9, #0
 8007df4:	6023      	str	r3, [r4, #0]
 8007df6:	e78d      	b.n	8007d14 <_strtod_l+0x494>
 8007df8:	080097ed 	.word	0x080097ed
 8007dfc:	08009a14 	.word	0x08009a14
 8007e00:	080097e5 	.word	0x080097e5
 8007e04:	0800981c 	.word	0x0800981c
 8007e08:	08009ba5 	.word	0x08009ba5
 8007e0c:	08009928 	.word	0x08009928
 8007e10:	08009900 	.word	0x08009900
 8007e14:	7ff00000 	.word	0x7ff00000
 8007e18:	7ca00000 	.word	0x7ca00000
 8007e1c:	7fefffff 	.word	0x7fefffff
 8007e20:	f015 0310 	ands.w	r3, r5, #16
 8007e24:	bf18      	it	ne
 8007e26:	236a      	movne	r3, #106	; 0x6a
 8007e28:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 80081cc <_strtod_l+0x94c>
 8007e2c:	9304      	str	r3, [sp, #16]
 8007e2e:	4640      	mov	r0, r8
 8007e30:	4649      	mov	r1, r9
 8007e32:	2300      	movs	r3, #0
 8007e34:	07ea      	lsls	r2, r5, #31
 8007e36:	d504      	bpl.n	8007e42 <_strtod_l+0x5c2>
 8007e38:	e9da 2300 	ldrd	r2, r3, [sl]
 8007e3c:	f7f8 fbdc 	bl	80005f8 <__aeabi_dmul>
 8007e40:	2301      	movs	r3, #1
 8007e42:	106d      	asrs	r5, r5, #1
 8007e44:	f10a 0a08 	add.w	sl, sl, #8
 8007e48:	d1f4      	bne.n	8007e34 <_strtod_l+0x5b4>
 8007e4a:	b10b      	cbz	r3, 8007e50 <_strtod_l+0x5d0>
 8007e4c:	4680      	mov	r8, r0
 8007e4e:	4689      	mov	r9, r1
 8007e50:	9b04      	ldr	r3, [sp, #16]
 8007e52:	b1bb      	cbz	r3, 8007e84 <_strtod_l+0x604>
 8007e54:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007e58:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	4649      	mov	r1, r9
 8007e60:	dd10      	ble.n	8007e84 <_strtod_l+0x604>
 8007e62:	2b1f      	cmp	r3, #31
 8007e64:	f340 811e 	ble.w	80080a4 <_strtod_l+0x824>
 8007e68:	2b34      	cmp	r3, #52	; 0x34
 8007e6a:	bfde      	ittt	le
 8007e6c:	f04f 33ff 	movle.w	r3, #4294967295
 8007e70:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8007e74:	4093      	lslle	r3, r2
 8007e76:	f04f 0800 	mov.w	r8, #0
 8007e7a:	bfcc      	ite	gt
 8007e7c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007e80:	ea03 0901 	andle.w	r9, r3, r1
 8007e84:	2200      	movs	r2, #0
 8007e86:	2300      	movs	r3, #0
 8007e88:	4640      	mov	r0, r8
 8007e8a:	4649      	mov	r1, r9
 8007e8c:	f7f8 fe1c 	bl	8000ac8 <__aeabi_dcmpeq>
 8007e90:	2800      	cmp	r0, #0
 8007e92:	d1a6      	bne.n	8007de2 <_strtod_l+0x562>
 8007e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007e9a:	4633      	mov	r3, r6
 8007e9c:	465a      	mov	r2, fp
 8007e9e:	4620      	mov	r0, r4
 8007ea0:	f7ff f8cc 	bl	800703c <__s2b>
 8007ea4:	9009      	str	r0, [sp, #36]	; 0x24
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	f43f af2a 	beq.w	8007d00 <_strtod_l+0x480>
 8007eac:	9a08      	ldr	r2, [sp, #32]
 8007eae:	9b05      	ldr	r3, [sp, #20]
 8007eb0:	2a00      	cmp	r2, #0
 8007eb2:	eba3 0307 	sub.w	r3, r3, r7
 8007eb6:	bfa8      	it	ge
 8007eb8:	2300      	movge	r3, #0
 8007eba:	930c      	str	r3, [sp, #48]	; 0x30
 8007ebc:	2500      	movs	r5, #0
 8007ebe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007ec2:	9312      	str	r3, [sp, #72]	; 0x48
 8007ec4:	46ab      	mov	fp, r5
 8007ec6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ec8:	4620      	mov	r0, r4
 8007eca:	6859      	ldr	r1, [r3, #4]
 8007ecc:	f7ff f80e 	bl	8006eec <_Balloc>
 8007ed0:	9005      	str	r0, [sp, #20]
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	f43f af18 	beq.w	8007d08 <_strtod_l+0x488>
 8007ed8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007eda:	691a      	ldr	r2, [r3, #16]
 8007edc:	3202      	adds	r2, #2
 8007ede:	f103 010c 	add.w	r1, r3, #12
 8007ee2:	0092      	lsls	r2, r2, #2
 8007ee4:	300c      	adds	r0, #12
 8007ee6:	f000 ff4f 	bl	8008d88 <memcpy>
 8007eea:	ec49 8b10 	vmov	d0, r8, r9
 8007eee:	aa18      	add	r2, sp, #96	; 0x60
 8007ef0:	a917      	add	r1, sp, #92	; 0x5c
 8007ef2:	4620      	mov	r0, r4
 8007ef4:	f7ff fbd6 	bl	80076a4 <__d2b>
 8007ef8:	ec49 8b18 	vmov	d8, r8, r9
 8007efc:	9016      	str	r0, [sp, #88]	; 0x58
 8007efe:	2800      	cmp	r0, #0
 8007f00:	f43f af02 	beq.w	8007d08 <_strtod_l+0x488>
 8007f04:	2101      	movs	r1, #1
 8007f06:	4620      	mov	r0, r4
 8007f08:	f7ff f930 	bl	800716c <__i2b>
 8007f0c:	4683      	mov	fp, r0
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	f43f aefa 	beq.w	8007d08 <_strtod_l+0x488>
 8007f14:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8007f16:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007f18:	2e00      	cmp	r6, #0
 8007f1a:	bfab      	itete	ge
 8007f1c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8007f1e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007f20:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8007f22:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8007f26:	bfac      	ite	ge
 8007f28:	eb06 0a03 	addge.w	sl, r6, r3
 8007f2c:	1b9f      	sublt	r7, r3, r6
 8007f2e:	9b04      	ldr	r3, [sp, #16]
 8007f30:	1af6      	subs	r6, r6, r3
 8007f32:	4416      	add	r6, r2
 8007f34:	4ba0      	ldr	r3, [pc, #640]	; (80081b8 <_strtod_l+0x938>)
 8007f36:	3e01      	subs	r6, #1
 8007f38:	429e      	cmp	r6, r3
 8007f3a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007f3e:	f280 80c4 	bge.w	80080ca <_strtod_l+0x84a>
 8007f42:	1b9b      	subs	r3, r3, r6
 8007f44:	2b1f      	cmp	r3, #31
 8007f46:	eba2 0203 	sub.w	r2, r2, r3
 8007f4a:	f04f 0101 	mov.w	r1, #1
 8007f4e:	f300 80b0 	bgt.w	80080b2 <_strtod_l+0x832>
 8007f52:	fa01 f303 	lsl.w	r3, r1, r3
 8007f56:	930e      	str	r3, [sp, #56]	; 0x38
 8007f58:	2300      	movs	r3, #0
 8007f5a:	930d      	str	r3, [sp, #52]	; 0x34
 8007f5c:	eb0a 0602 	add.w	r6, sl, r2
 8007f60:	9b04      	ldr	r3, [sp, #16]
 8007f62:	45b2      	cmp	sl, r6
 8007f64:	4417      	add	r7, r2
 8007f66:	441f      	add	r7, r3
 8007f68:	4653      	mov	r3, sl
 8007f6a:	bfa8      	it	ge
 8007f6c:	4633      	movge	r3, r6
 8007f6e:	42bb      	cmp	r3, r7
 8007f70:	bfa8      	it	ge
 8007f72:	463b      	movge	r3, r7
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	bfc2      	ittt	gt
 8007f78:	1af6      	subgt	r6, r6, r3
 8007f7a:	1aff      	subgt	r7, r7, r3
 8007f7c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007f80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	dd17      	ble.n	8007fb6 <_strtod_l+0x736>
 8007f86:	4659      	mov	r1, fp
 8007f88:	461a      	mov	r2, r3
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	f7ff f9ae 	bl	80072ec <__pow5mult>
 8007f90:	4683      	mov	fp, r0
 8007f92:	2800      	cmp	r0, #0
 8007f94:	f43f aeb8 	beq.w	8007d08 <_strtod_l+0x488>
 8007f98:	4601      	mov	r1, r0
 8007f9a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007f9c:	4620      	mov	r0, r4
 8007f9e:	f7ff f8fb 	bl	8007198 <__multiply>
 8007fa2:	900b      	str	r0, [sp, #44]	; 0x2c
 8007fa4:	2800      	cmp	r0, #0
 8007fa6:	f43f aeaf 	beq.w	8007d08 <_strtod_l+0x488>
 8007faa:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007fac:	4620      	mov	r0, r4
 8007fae:	f7fe ffdd 	bl	8006f6c <_Bfree>
 8007fb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007fb4:	9316      	str	r3, [sp, #88]	; 0x58
 8007fb6:	2e00      	cmp	r6, #0
 8007fb8:	f300 808c 	bgt.w	80080d4 <_strtod_l+0x854>
 8007fbc:	9b08      	ldr	r3, [sp, #32]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	dd08      	ble.n	8007fd4 <_strtod_l+0x754>
 8007fc2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8007fc4:	9905      	ldr	r1, [sp, #20]
 8007fc6:	4620      	mov	r0, r4
 8007fc8:	f7ff f990 	bl	80072ec <__pow5mult>
 8007fcc:	9005      	str	r0, [sp, #20]
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	f43f ae9a 	beq.w	8007d08 <_strtod_l+0x488>
 8007fd4:	2f00      	cmp	r7, #0
 8007fd6:	dd08      	ble.n	8007fea <_strtod_l+0x76a>
 8007fd8:	9905      	ldr	r1, [sp, #20]
 8007fda:	463a      	mov	r2, r7
 8007fdc:	4620      	mov	r0, r4
 8007fde:	f7ff f9df 	bl	80073a0 <__lshift>
 8007fe2:	9005      	str	r0, [sp, #20]
 8007fe4:	2800      	cmp	r0, #0
 8007fe6:	f43f ae8f 	beq.w	8007d08 <_strtod_l+0x488>
 8007fea:	f1ba 0f00 	cmp.w	sl, #0
 8007fee:	dd08      	ble.n	8008002 <_strtod_l+0x782>
 8007ff0:	4659      	mov	r1, fp
 8007ff2:	4652      	mov	r2, sl
 8007ff4:	4620      	mov	r0, r4
 8007ff6:	f7ff f9d3 	bl	80073a0 <__lshift>
 8007ffa:	4683      	mov	fp, r0
 8007ffc:	2800      	cmp	r0, #0
 8007ffe:	f43f ae83 	beq.w	8007d08 <_strtod_l+0x488>
 8008002:	9a05      	ldr	r2, [sp, #20]
 8008004:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008006:	4620      	mov	r0, r4
 8008008:	f7ff fa52 	bl	80074b0 <__mdiff>
 800800c:	4605      	mov	r5, r0
 800800e:	2800      	cmp	r0, #0
 8008010:	f43f ae7a 	beq.w	8007d08 <_strtod_l+0x488>
 8008014:	68c3      	ldr	r3, [r0, #12]
 8008016:	930b      	str	r3, [sp, #44]	; 0x2c
 8008018:	2300      	movs	r3, #0
 800801a:	60c3      	str	r3, [r0, #12]
 800801c:	4659      	mov	r1, fp
 800801e:	f7ff fa2b 	bl	8007478 <__mcmp>
 8008022:	2800      	cmp	r0, #0
 8008024:	da60      	bge.n	80080e8 <_strtod_l+0x868>
 8008026:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008028:	ea53 0308 	orrs.w	r3, r3, r8
 800802c:	f040 8084 	bne.w	8008138 <_strtod_l+0x8b8>
 8008030:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008034:	2b00      	cmp	r3, #0
 8008036:	d17f      	bne.n	8008138 <_strtod_l+0x8b8>
 8008038:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800803c:	0d1b      	lsrs	r3, r3, #20
 800803e:	051b      	lsls	r3, r3, #20
 8008040:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008044:	d978      	bls.n	8008138 <_strtod_l+0x8b8>
 8008046:	696b      	ldr	r3, [r5, #20]
 8008048:	b913      	cbnz	r3, 8008050 <_strtod_l+0x7d0>
 800804a:	692b      	ldr	r3, [r5, #16]
 800804c:	2b01      	cmp	r3, #1
 800804e:	dd73      	ble.n	8008138 <_strtod_l+0x8b8>
 8008050:	4629      	mov	r1, r5
 8008052:	2201      	movs	r2, #1
 8008054:	4620      	mov	r0, r4
 8008056:	f7ff f9a3 	bl	80073a0 <__lshift>
 800805a:	4659      	mov	r1, fp
 800805c:	4605      	mov	r5, r0
 800805e:	f7ff fa0b 	bl	8007478 <__mcmp>
 8008062:	2800      	cmp	r0, #0
 8008064:	dd68      	ble.n	8008138 <_strtod_l+0x8b8>
 8008066:	9904      	ldr	r1, [sp, #16]
 8008068:	4a54      	ldr	r2, [pc, #336]	; (80081bc <_strtod_l+0x93c>)
 800806a:	464b      	mov	r3, r9
 800806c:	2900      	cmp	r1, #0
 800806e:	f000 8084 	beq.w	800817a <_strtod_l+0x8fa>
 8008072:	ea02 0109 	and.w	r1, r2, r9
 8008076:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800807a:	dc7e      	bgt.n	800817a <_strtod_l+0x8fa>
 800807c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008080:	f77f aeb3 	ble.w	8007dea <_strtod_l+0x56a>
 8008084:	4b4e      	ldr	r3, [pc, #312]	; (80081c0 <_strtod_l+0x940>)
 8008086:	4640      	mov	r0, r8
 8008088:	4649      	mov	r1, r9
 800808a:	2200      	movs	r2, #0
 800808c:	f7f8 fab4 	bl	80005f8 <__aeabi_dmul>
 8008090:	4b4a      	ldr	r3, [pc, #296]	; (80081bc <_strtod_l+0x93c>)
 8008092:	400b      	ands	r3, r1
 8008094:	4680      	mov	r8, r0
 8008096:	4689      	mov	r9, r1
 8008098:	2b00      	cmp	r3, #0
 800809a:	f47f ae3f 	bne.w	8007d1c <_strtod_l+0x49c>
 800809e:	2322      	movs	r3, #34	; 0x22
 80080a0:	6023      	str	r3, [r4, #0]
 80080a2:	e63b      	b.n	8007d1c <_strtod_l+0x49c>
 80080a4:	f04f 32ff 	mov.w	r2, #4294967295
 80080a8:	fa02 f303 	lsl.w	r3, r2, r3
 80080ac:	ea03 0808 	and.w	r8, r3, r8
 80080b0:	e6e8      	b.n	8007e84 <_strtod_l+0x604>
 80080b2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 80080b6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80080ba:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80080be:	36e2      	adds	r6, #226	; 0xe2
 80080c0:	fa01 f306 	lsl.w	r3, r1, r6
 80080c4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80080c8:	e748      	b.n	8007f5c <_strtod_l+0x6dc>
 80080ca:	2100      	movs	r1, #0
 80080cc:	2301      	movs	r3, #1
 80080ce:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80080d2:	e743      	b.n	8007f5c <_strtod_l+0x6dc>
 80080d4:	9916      	ldr	r1, [sp, #88]	; 0x58
 80080d6:	4632      	mov	r2, r6
 80080d8:	4620      	mov	r0, r4
 80080da:	f7ff f961 	bl	80073a0 <__lshift>
 80080de:	9016      	str	r0, [sp, #88]	; 0x58
 80080e0:	2800      	cmp	r0, #0
 80080e2:	f47f af6b 	bne.w	8007fbc <_strtod_l+0x73c>
 80080e6:	e60f      	b.n	8007d08 <_strtod_l+0x488>
 80080e8:	46ca      	mov	sl, r9
 80080ea:	d171      	bne.n	80081d0 <_strtod_l+0x950>
 80080ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80080ee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80080f2:	b352      	cbz	r2, 800814a <_strtod_l+0x8ca>
 80080f4:	4a33      	ldr	r2, [pc, #204]	; (80081c4 <_strtod_l+0x944>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d12a      	bne.n	8008150 <_strtod_l+0x8d0>
 80080fa:	9b04      	ldr	r3, [sp, #16]
 80080fc:	4641      	mov	r1, r8
 80080fe:	b1fb      	cbz	r3, 8008140 <_strtod_l+0x8c0>
 8008100:	4b2e      	ldr	r3, [pc, #184]	; (80081bc <_strtod_l+0x93c>)
 8008102:	ea09 0303 	and.w	r3, r9, r3
 8008106:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800810a:	f04f 32ff 	mov.w	r2, #4294967295
 800810e:	d81a      	bhi.n	8008146 <_strtod_l+0x8c6>
 8008110:	0d1b      	lsrs	r3, r3, #20
 8008112:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008116:	fa02 f303 	lsl.w	r3, r2, r3
 800811a:	4299      	cmp	r1, r3
 800811c:	d118      	bne.n	8008150 <_strtod_l+0x8d0>
 800811e:	4b2a      	ldr	r3, [pc, #168]	; (80081c8 <_strtod_l+0x948>)
 8008120:	459a      	cmp	sl, r3
 8008122:	d102      	bne.n	800812a <_strtod_l+0x8aa>
 8008124:	3101      	adds	r1, #1
 8008126:	f43f adef 	beq.w	8007d08 <_strtod_l+0x488>
 800812a:	4b24      	ldr	r3, [pc, #144]	; (80081bc <_strtod_l+0x93c>)
 800812c:	ea0a 0303 	and.w	r3, sl, r3
 8008130:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8008134:	f04f 0800 	mov.w	r8, #0
 8008138:	9b04      	ldr	r3, [sp, #16]
 800813a:	2b00      	cmp	r3, #0
 800813c:	d1a2      	bne.n	8008084 <_strtod_l+0x804>
 800813e:	e5ed      	b.n	8007d1c <_strtod_l+0x49c>
 8008140:	f04f 33ff 	mov.w	r3, #4294967295
 8008144:	e7e9      	b.n	800811a <_strtod_l+0x89a>
 8008146:	4613      	mov	r3, r2
 8008148:	e7e7      	b.n	800811a <_strtod_l+0x89a>
 800814a:	ea53 0308 	orrs.w	r3, r3, r8
 800814e:	d08a      	beq.n	8008066 <_strtod_l+0x7e6>
 8008150:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008152:	b1e3      	cbz	r3, 800818e <_strtod_l+0x90e>
 8008154:	ea13 0f0a 	tst.w	r3, sl
 8008158:	d0ee      	beq.n	8008138 <_strtod_l+0x8b8>
 800815a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800815c:	9a04      	ldr	r2, [sp, #16]
 800815e:	4640      	mov	r0, r8
 8008160:	4649      	mov	r1, r9
 8008162:	b1c3      	cbz	r3, 8008196 <_strtod_l+0x916>
 8008164:	f7ff fb6f 	bl	8007846 <sulp>
 8008168:	4602      	mov	r2, r0
 800816a:	460b      	mov	r3, r1
 800816c:	ec51 0b18 	vmov	r0, r1, d8
 8008170:	f7f8 f88c 	bl	800028c <__adddf3>
 8008174:	4680      	mov	r8, r0
 8008176:	4689      	mov	r9, r1
 8008178:	e7de      	b.n	8008138 <_strtod_l+0x8b8>
 800817a:	4013      	ands	r3, r2
 800817c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008180:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8008184:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8008188:	f04f 38ff 	mov.w	r8, #4294967295
 800818c:	e7d4      	b.n	8008138 <_strtod_l+0x8b8>
 800818e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008190:	ea13 0f08 	tst.w	r3, r8
 8008194:	e7e0      	b.n	8008158 <_strtod_l+0x8d8>
 8008196:	f7ff fb56 	bl	8007846 <sulp>
 800819a:	4602      	mov	r2, r0
 800819c:	460b      	mov	r3, r1
 800819e:	ec51 0b18 	vmov	r0, r1, d8
 80081a2:	f7f8 f871 	bl	8000288 <__aeabi_dsub>
 80081a6:	2200      	movs	r2, #0
 80081a8:	2300      	movs	r3, #0
 80081aa:	4680      	mov	r8, r0
 80081ac:	4689      	mov	r9, r1
 80081ae:	f7f8 fc8b 	bl	8000ac8 <__aeabi_dcmpeq>
 80081b2:	2800      	cmp	r0, #0
 80081b4:	d0c0      	beq.n	8008138 <_strtod_l+0x8b8>
 80081b6:	e618      	b.n	8007dea <_strtod_l+0x56a>
 80081b8:	fffffc02 	.word	0xfffffc02
 80081bc:	7ff00000 	.word	0x7ff00000
 80081c0:	39500000 	.word	0x39500000
 80081c4:	000fffff 	.word	0x000fffff
 80081c8:	7fefffff 	.word	0x7fefffff
 80081cc:	08009a28 	.word	0x08009a28
 80081d0:	4659      	mov	r1, fp
 80081d2:	4628      	mov	r0, r5
 80081d4:	f7ff fac0 	bl	8007758 <__ratio>
 80081d8:	ec57 6b10 	vmov	r6, r7, d0
 80081dc:	ee10 0a10 	vmov	r0, s0
 80081e0:	2200      	movs	r2, #0
 80081e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80081e6:	4639      	mov	r1, r7
 80081e8:	f7f8 fc82 	bl	8000af0 <__aeabi_dcmple>
 80081ec:	2800      	cmp	r0, #0
 80081ee:	d071      	beq.n	80082d4 <_strtod_l+0xa54>
 80081f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d17c      	bne.n	80082f0 <_strtod_l+0xa70>
 80081f6:	f1b8 0f00 	cmp.w	r8, #0
 80081fa:	d15a      	bne.n	80082b2 <_strtod_l+0xa32>
 80081fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008200:	2b00      	cmp	r3, #0
 8008202:	d15d      	bne.n	80082c0 <_strtod_l+0xa40>
 8008204:	4b90      	ldr	r3, [pc, #576]	; (8008448 <_strtod_l+0xbc8>)
 8008206:	2200      	movs	r2, #0
 8008208:	4630      	mov	r0, r6
 800820a:	4639      	mov	r1, r7
 800820c:	f7f8 fc66 	bl	8000adc <__aeabi_dcmplt>
 8008210:	2800      	cmp	r0, #0
 8008212:	d15c      	bne.n	80082ce <_strtod_l+0xa4e>
 8008214:	4630      	mov	r0, r6
 8008216:	4639      	mov	r1, r7
 8008218:	4b8c      	ldr	r3, [pc, #560]	; (800844c <_strtod_l+0xbcc>)
 800821a:	2200      	movs	r2, #0
 800821c:	f7f8 f9ec 	bl	80005f8 <__aeabi_dmul>
 8008220:	4606      	mov	r6, r0
 8008222:	460f      	mov	r7, r1
 8008224:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8008228:	9606      	str	r6, [sp, #24]
 800822a:	9307      	str	r3, [sp, #28]
 800822c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008230:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8008234:	4b86      	ldr	r3, [pc, #536]	; (8008450 <_strtod_l+0xbd0>)
 8008236:	ea0a 0303 	and.w	r3, sl, r3
 800823a:	930d      	str	r3, [sp, #52]	; 0x34
 800823c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800823e:	4b85      	ldr	r3, [pc, #532]	; (8008454 <_strtod_l+0xbd4>)
 8008240:	429a      	cmp	r2, r3
 8008242:	f040 8090 	bne.w	8008366 <_strtod_l+0xae6>
 8008246:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800824a:	ec49 8b10 	vmov	d0, r8, r9
 800824e:	f7ff f9b9 	bl	80075c4 <__ulp>
 8008252:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008256:	ec51 0b10 	vmov	r0, r1, d0
 800825a:	f7f8 f9cd 	bl	80005f8 <__aeabi_dmul>
 800825e:	4642      	mov	r2, r8
 8008260:	464b      	mov	r3, r9
 8008262:	f7f8 f813 	bl	800028c <__adddf3>
 8008266:	460b      	mov	r3, r1
 8008268:	4979      	ldr	r1, [pc, #484]	; (8008450 <_strtod_l+0xbd0>)
 800826a:	4a7b      	ldr	r2, [pc, #492]	; (8008458 <_strtod_l+0xbd8>)
 800826c:	4019      	ands	r1, r3
 800826e:	4291      	cmp	r1, r2
 8008270:	4680      	mov	r8, r0
 8008272:	d944      	bls.n	80082fe <_strtod_l+0xa7e>
 8008274:	ee18 2a90 	vmov	r2, s17
 8008278:	4b78      	ldr	r3, [pc, #480]	; (800845c <_strtod_l+0xbdc>)
 800827a:	429a      	cmp	r2, r3
 800827c:	d104      	bne.n	8008288 <_strtod_l+0xa08>
 800827e:	ee18 3a10 	vmov	r3, s16
 8008282:	3301      	adds	r3, #1
 8008284:	f43f ad40 	beq.w	8007d08 <_strtod_l+0x488>
 8008288:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800845c <_strtod_l+0xbdc>
 800828c:	f04f 38ff 	mov.w	r8, #4294967295
 8008290:	9916      	ldr	r1, [sp, #88]	; 0x58
 8008292:	4620      	mov	r0, r4
 8008294:	f7fe fe6a 	bl	8006f6c <_Bfree>
 8008298:	9905      	ldr	r1, [sp, #20]
 800829a:	4620      	mov	r0, r4
 800829c:	f7fe fe66 	bl	8006f6c <_Bfree>
 80082a0:	4659      	mov	r1, fp
 80082a2:	4620      	mov	r0, r4
 80082a4:	f7fe fe62 	bl	8006f6c <_Bfree>
 80082a8:	4629      	mov	r1, r5
 80082aa:	4620      	mov	r0, r4
 80082ac:	f7fe fe5e 	bl	8006f6c <_Bfree>
 80082b0:	e609      	b.n	8007ec6 <_strtod_l+0x646>
 80082b2:	f1b8 0f01 	cmp.w	r8, #1
 80082b6:	d103      	bne.n	80082c0 <_strtod_l+0xa40>
 80082b8:	f1b9 0f00 	cmp.w	r9, #0
 80082bc:	f43f ad95 	beq.w	8007dea <_strtod_l+0x56a>
 80082c0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8008418 <_strtod_l+0xb98>
 80082c4:	4f60      	ldr	r7, [pc, #384]	; (8008448 <_strtod_l+0xbc8>)
 80082c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80082ca:	2600      	movs	r6, #0
 80082cc:	e7ae      	b.n	800822c <_strtod_l+0x9ac>
 80082ce:	4f5f      	ldr	r7, [pc, #380]	; (800844c <_strtod_l+0xbcc>)
 80082d0:	2600      	movs	r6, #0
 80082d2:	e7a7      	b.n	8008224 <_strtod_l+0x9a4>
 80082d4:	4b5d      	ldr	r3, [pc, #372]	; (800844c <_strtod_l+0xbcc>)
 80082d6:	4630      	mov	r0, r6
 80082d8:	4639      	mov	r1, r7
 80082da:	2200      	movs	r2, #0
 80082dc:	f7f8 f98c 	bl	80005f8 <__aeabi_dmul>
 80082e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082e2:	4606      	mov	r6, r0
 80082e4:	460f      	mov	r7, r1
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d09c      	beq.n	8008224 <_strtod_l+0x9a4>
 80082ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80082ee:	e79d      	b.n	800822c <_strtod_l+0x9ac>
 80082f0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8008420 <_strtod_l+0xba0>
 80082f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 80082f8:	ec57 6b17 	vmov	r6, r7, d7
 80082fc:	e796      	b.n	800822c <_strtod_l+0x9ac>
 80082fe:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8008302:	9b04      	ldr	r3, [sp, #16]
 8008304:	46ca      	mov	sl, r9
 8008306:	2b00      	cmp	r3, #0
 8008308:	d1c2      	bne.n	8008290 <_strtod_l+0xa10>
 800830a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800830e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008310:	0d1b      	lsrs	r3, r3, #20
 8008312:	051b      	lsls	r3, r3, #20
 8008314:	429a      	cmp	r2, r3
 8008316:	d1bb      	bne.n	8008290 <_strtod_l+0xa10>
 8008318:	4630      	mov	r0, r6
 800831a:	4639      	mov	r1, r7
 800831c:	f7f8 fccc 	bl	8000cb8 <__aeabi_d2lz>
 8008320:	f7f8 f93c 	bl	800059c <__aeabi_l2d>
 8008324:	4602      	mov	r2, r0
 8008326:	460b      	mov	r3, r1
 8008328:	4630      	mov	r0, r6
 800832a:	4639      	mov	r1, r7
 800832c:	f7f7 ffac 	bl	8000288 <__aeabi_dsub>
 8008330:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008332:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008336:	ea43 0308 	orr.w	r3, r3, r8
 800833a:	4313      	orrs	r3, r2
 800833c:	4606      	mov	r6, r0
 800833e:	460f      	mov	r7, r1
 8008340:	d054      	beq.n	80083ec <_strtod_l+0xb6c>
 8008342:	a339      	add	r3, pc, #228	; (adr r3, 8008428 <_strtod_l+0xba8>)
 8008344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008348:	f7f8 fbc8 	bl	8000adc <__aeabi_dcmplt>
 800834c:	2800      	cmp	r0, #0
 800834e:	f47f ace5 	bne.w	8007d1c <_strtod_l+0x49c>
 8008352:	a337      	add	r3, pc, #220	; (adr r3, 8008430 <_strtod_l+0xbb0>)
 8008354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008358:	4630      	mov	r0, r6
 800835a:	4639      	mov	r1, r7
 800835c:	f7f8 fbdc 	bl	8000b18 <__aeabi_dcmpgt>
 8008360:	2800      	cmp	r0, #0
 8008362:	d095      	beq.n	8008290 <_strtod_l+0xa10>
 8008364:	e4da      	b.n	8007d1c <_strtod_l+0x49c>
 8008366:	9b04      	ldr	r3, [sp, #16]
 8008368:	b333      	cbz	r3, 80083b8 <_strtod_l+0xb38>
 800836a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800836c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008370:	d822      	bhi.n	80083b8 <_strtod_l+0xb38>
 8008372:	a331      	add	r3, pc, #196	; (adr r3, 8008438 <_strtod_l+0xbb8>)
 8008374:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008378:	4630      	mov	r0, r6
 800837a:	4639      	mov	r1, r7
 800837c:	f7f8 fbb8 	bl	8000af0 <__aeabi_dcmple>
 8008380:	b1a0      	cbz	r0, 80083ac <_strtod_l+0xb2c>
 8008382:	4639      	mov	r1, r7
 8008384:	4630      	mov	r0, r6
 8008386:	f7f8 fc0f 	bl	8000ba8 <__aeabi_d2uiz>
 800838a:	2801      	cmp	r0, #1
 800838c:	bf38      	it	cc
 800838e:	2001      	movcc	r0, #1
 8008390:	f7f8 f8b8 	bl	8000504 <__aeabi_ui2d>
 8008394:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008396:	4606      	mov	r6, r0
 8008398:	460f      	mov	r7, r1
 800839a:	bb23      	cbnz	r3, 80083e6 <_strtod_l+0xb66>
 800839c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80083a0:	9010      	str	r0, [sp, #64]	; 0x40
 80083a2:	9311      	str	r3, [sp, #68]	; 0x44
 80083a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80083a8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 80083ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80083ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80083b0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80083b4:	1a9b      	subs	r3, r3, r2
 80083b6:	930f      	str	r3, [sp, #60]	; 0x3c
 80083b8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80083bc:	eeb0 0a48 	vmov.f32	s0, s16
 80083c0:	eef0 0a68 	vmov.f32	s1, s17
 80083c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80083c8:	f7ff f8fc 	bl	80075c4 <__ulp>
 80083cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 80083d0:	ec53 2b10 	vmov	r2, r3, d0
 80083d4:	f7f8 f910 	bl	80005f8 <__aeabi_dmul>
 80083d8:	ec53 2b18 	vmov	r2, r3, d8
 80083dc:	f7f7 ff56 	bl	800028c <__adddf3>
 80083e0:	4680      	mov	r8, r0
 80083e2:	4689      	mov	r9, r1
 80083e4:	e78d      	b.n	8008302 <_strtod_l+0xa82>
 80083e6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80083ea:	e7db      	b.n	80083a4 <_strtod_l+0xb24>
 80083ec:	a314      	add	r3, pc, #80	; (adr r3, 8008440 <_strtod_l+0xbc0>)
 80083ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083f2:	f7f8 fb73 	bl	8000adc <__aeabi_dcmplt>
 80083f6:	e7b3      	b.n	8008360 <_strtod_l+0xae0>
 80083f8:	2300      	movs	r3, #0
 80083fa:	930a      	str	r3, [sp, #40]	; 0x28
 80083fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80083fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8008400:	6013      	str	r3, [r2, #0]
 8008402:	f7ff ba7c 	b.w	80078fe <_strtod_l+0x7e>
 8008406:	2a65      	cmp	r2, #101	; 0x65
 8008408:	f43f ab75 	beq.w	8007af6 <_strtod_l+0x276>
 800840c:	2a45      	cmp	r2, #69	; 0x45
 800840e:	f43f ab72 	beq.w	8007af6 <_strtod_l+0x276>
 8008412:	2301      	movs	r3, #1
 8008414:	f7ff bbaa 	b.w	8007b6c <_strtod_l+0x2ec>
 8008418:	00000000 	.word	0x00000000
 800841c:	bff00000 	.word	0xbff00000
 8008420:	00000000 	.word	0x00000000
 8008424:	3ff00000 	.word	0x3ff00000
 8008428:	94a03595 	.word	0x94a03595
 800842c:	3fdfffff 	.word	0x3fdfffff
 8008430:	35afe535 	.word	0x35afe535
 8008434:	3fe00000 	.word	0x3fe00000
 8008438:	ffc00000 	.word	0xffc00000
 800843c:	41dfffff 	.word	0x41dfffff
 8008440:	94a03595 	.word	0x94a03595
 8008444:	3fcfffff 	.word	0x3fcfffff
 8008448:	3ff00000 	.word	0x3ff00000
 800844c:	3fe00000 	.word	0x3fe00000
 8008450:	7ff00000 	.word	0x7ff00000
 8008454:	7fe00000 	.word	0x7fe00000
 8008458:	7c9fffff 	.word	0x7c9fffff
 800845c:	7fefffff 	.word	0x7fefffff

08008460 <_strtod_r>:
 8008460:	4b01      	ldr	r3, [pc, #4]	; (8008468 <_strtod_r+0x8>)
 8008462:	f7ff ba0d 	b.w	8007880 <_strtod_l>
 8008466:	bf00      	nop
 8008468:	2000007c 	.word	0x2000007c

0800846c <_strtol_l.constprop.0>:
 800846c:	2b01      	cmp	r3, #1
 800846e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008472:	d001      	beq.n	8008478 <_strtol_l.constprop.0+0xc>
 8008474:	2b24      	cmp	r3, #36	; 0x24
 8008476:	d906      	bls.n	8008486 <_strtol_l.constprop.0+0x1a>
 8008478:	f7fd fd8a 	bl	8005f90 <__errno>
 800847c:	2316      	movs	r3, #22
 800847e:	6003      	str	r3, [r0, #0]
 8008480:	2000      	movs	r0, #0
 8008482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008486:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800856c <_strtol_l.constprop.0+0x100>
 800848a:	460d      	mov	r5, r1
 800848c:	462e      	mov	r6, r5
 800848e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008492:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008496:	f017 0708 	ands.w	r7, r7, #8
 800849a:	d1f7      	bne.n	800848c <_strtol_l.constprop.0+0x20>
 800849c:	2c2d      	cmp	r4, #45	; 0x2d
 800849e:	d132      	bne.n	8008506 <_strtol_l.constprop.0+0x9a>
 80084a0:	782c      	ldrb	r4, [r5, #0]
 80084a2:	2701      	movs	r7, #1
 80084a4:	1cb5      	adds	r5, r6, #2
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d05b      	beq.n	8008562 <_strtol_l.constprop.0+0xf6>
 80084aa:	2b10      	cmp	r3, #16
 80084ac:	d109      	bne.n	80084c2 <_strtol_l.constprop.0+0x56>
 80084ae:	2c30      	cmp	r4, #48	; 0x30
 80084b0:	d107      	bne.n	80084c2 <_strtol_l.constprop.0+0x56>
 80084b2:	782c      	ldrb	r4, [r5, #0]
 80084b4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80084b8:	2c58      	cmp	r4, #88	; 0x58
 80084ba:	d14d      	bne.n	8008558 <_strtol_l.constprop.0+0xec>
 80084bc:	786c      	ldrb	r4, [r5, #1]
 80084be:	2310      	movs	r3, #16
 80084c0:	3502      	adds	r5, #2
 80084c2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80084c6:	f108 38ff 	add.w	r8, r8, #4294967295
 80084ca:	f04f 0e00 	mov.w	lr, #0
 80084ce:	fbb8 f9f3 	udiv	r9, r8, r3
 80084d2:	4676      	mov	r6, lr
 80084d4:	fb03 8a19 	mls	sl, r3, r9, r8
 80084d8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80084dc:	f1bc 0f09 	cmp.w	ip, #9
 80084e0:	d816      	bhi.n	8008510 <_strtol_l.constprop.0+0xa4>
 80084e2:	4664      	mov	r4, ip
 80084e4:	42a3      	cmp	r3, r4
 80084e6:	dd24      	ble.n	8008532 <_strtol_l.constprop.0+0xc6>
 80084e8:	f1be 3fff 	cmp.w	lr, #4294967295
 80084ec:	d008      	beq.n	8008500 <_strtol_l.constprop.0+0x94>
 80084ee:	45b1      	cmp	r9, r6
 80084f0:	d31c      	bcc.n	800852c <_strtol_l.constprop.0+0xc0>
 80084f2:	d101      	bne.n	80084f8 <_strtol_l.constprop.0+0x8c>
 80084f4:	45a2      	cmp	sl, r4
 80084f6:	db19      	blt.n	800852c <_strtol_l.constprop.0+0xc0>
 80084f8:	fb06 4603 	mla	r6, r6, r3, r4
 80084fc:	f04f 0e01 	mov.w	lr, #1
 8008500:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008504:	e7e8      	b.n	80084d8 <_strtol_l.constprop.0+0x6c>
 8008506:	2c2b      	cmp	r4, #43	; 0x2b
 8008508:	bf04      	itt	eq
 800850a:	782c      	ldrbeq	r4, [r5, #0]
 800850c:	1cb5      	addeq	r5, r6, #2
 800850e:	e7ca      	b.n	80084a6 <_strtol_l.constprop.0+0x3a>
 8008510:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008514:	f1bc 0f19 	cmp.w	ip, #25
 8008518:	d801      	bhi.n	800851e <_strtol_l.constprop.0+0xb2>
 800851a:	3c37      	subs	r4, #55	; 0x37
 800851c:	e7e2      	b.n	80084e4 <_strtol_l.constprop.0+0x78>
 800851e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008522:	f1bc 0f19 	cmp.w	ip, #25
 8008526:	d804      	bhi.n	8008532 <_strtol_l.constprop.0+0xc6>
 8008528:	3c57      	subs	r4, #87	; 0x57
 800852a:	e7db      	b.n	80084e4 <_strtol_l.constprop.0+0x78>
 800852c:	f04f 3eff 	mov.w	lr, #4294967295
 8008530:	e7e6      	b.n	8008500 <_strtol_l.constprop.0+0x94>
 8008532:	f1be 3fff 	cmp.w	lr, #4294967295
 8008536:	d105      	bne.n	8008544 <_strtol_l.constprop.0+0xd8>
 8008538:	2322      	movs	r3, #34	; 0x22
 800853a:	6003      	str	r3, [r0, #0]
 800853c:	4646      	mov	r6, r8
 800853e:	b942      	cbnz	r2, 8008552 <_strtol_l.constprop.0+0xe6>
 8008540:	4630      	mov	r0, r6
 8008542:	e79e      	b.n	8008482 <_strtol_l.constprop.0+0x16>
 8008544:	b107      	cbz	r7, 8008548 <_strtol_l.constprop.0+0xdc>
 8008546:	4276      	negs	r6, r6
 8008548:	2a00      	cmp	r2, #0
 800854a:	d0f9      	beq.n	8008540 <_strtol_l.constprop.0+0xd4>
 800854c:	f1be 0f00 	cmp.w	lr, #0
 8008550:	d000      	beq.n	8008554 <_strtol_l.constprop.0+0xe8>
 8008552:	1e69      	subs	r1, r5, #1
 8008554:	6011      	str	r1, [r2, #0]
 8008556:	e7f3      	b.n	8008540 <_strtol_l.constprop.0+0xd4>
 8008558:	2430      	movs	r4, #48	; 0x30
 800855a:	2b00      	cmp	r3, #0
 800855c:	d1b1      	bne.n	80084c2 <_strtol_l.constprop.0+0x56>
 800855e:	2308      	movs	r3, #8
 8008560:	e7af      	b.n	80084c2 <_strtol_l.constprop.0+0x56>
 8008562:	2c30      	cmp	r4, #48	; 0x30
 8008564:	d0a5      	beq.n	80084b2 <_strtol_l.constprop.0+0x46>
 8008566:	230a      	movs	r3, #10
 8008568:	e7ab      	b.n	80084c2 <_strtol_l.constprop.0+0x56>
 800856a:	bf00      	nop
 800856c:	08009a51 	.word	0x08009a51

08008570 <_strtol_r>:
 8008570:	f7ff bf7c 	b.w	800846c <_strtol_l.constprop.0>

08008574 <__ssputs_r>:
 8008574:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008578:	688e      	ldr	r6, [r1, #8]
 800857a:	461f      	mov	r7, r3
 800857c:	42be      	cmp	r6, r7
 800857e:	680b      	ldr	r3, [r1, #0]
 8008580:	4682      	mov	sl, r0
 8008582:	460c      	mov	r4, r1
 8008584:	4690      	mov	r8, r2
 8008586:	d82c      	bhi.n	80085e2 <__ssputs_r+0x6e>
 8008588:	898a      	ldrh	r2, [r1, #12]
 800858a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800858e:	d026      	beq.n	80085de <__ssputs_r+0x6a>
 8008590:	6965      	ldr	r5, [r4, #20]
 8008592:	6909      	ldr	r1, [r1, #16]
 8008594:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008598:	eba3 0901 	sub.w	r9, r3, r1
 800859c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80085a0:	1c7b      	adds	r3, r7, #1
 80085a2:	444b      	add	r3, r9
 80085a4:	106d      	asrs	r5, r5, #1
 80085a6:	429d      	cmp	r5, r3
 80085a8:	bf38      	it	cc
 80085aa:	461d      	movcc	r5, r3
 80085ac:	0553      	lsls	r3, r2, #21
 80085ae:	d527      	bpl.n	8008600 <__ssputs_r+0x8c>
 80085b0:	4629      	mov	r1, r5
 80085b2:	f7fe fc0f 	bl	8006dd4 <_malloc_r>
 80085b6:	4606      	mov	r6, r0
 80085b8:	b360      	cbz	r0, 8008614 <__ssputs_r+0xa0>
 80085ba:	6921      	ldr	r1, [r4, #16]
 80085bc:	464a      	mov	r2, r9
 80085be:	f000 fbe3 	bl	8008d88 <memcpy>
 80085c2:	89a3      	ldrh	r3, [r4, #12]
 80085c4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80085c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80085cc:	81a3      	strh	r3, [r4, #12]
 80085ce:	6126      	str	r6, [r4, #16]
 80085d0:	6165      	str	r5, [r4, #20]
 80085d2:	444e      	add	r6, r9
 80085d4:	eba5 0509 	sub.w	r5, r5, r9
 80085d8:	6026      	str	r6, [r4, #0]
 80085da:	60a5      	str	r5, [r4, #8]
 80085dc:	463e      	mov	r6, r7
 80085de:	42be      	cmp	r6, r7
 80085e0:	d900      	bls.n	80085e4 <__ssputs_r+0x70>
 80085e2:	463e      	mov	r6, r7
 80085e4:	6820      	ldr	r0, [r4, #0]
 80085e6:	4632      	mov	r2, r6
 80085e8:	4641      	mov	r1, r8
 80085ea:	f000 fb6f 	bl	8008ccc <memmove>
 80085ee:	68a3      	ldr	r3, [r4, #8]
 80085f0:	1b9b      	subs	r3, r3, r6
 80085f2:	60a3      	str	r3, [r4, #8]
 80085f4:	6823      	ldr	r3, [r4, #0]
 80085f6:	4433      	add	r3, r6
 80085f8:	6023      	str	r3, [r4, #0]
 80085fa:	2000      	movs	r0, #0
 80085fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008600:	462a      	mov	r2, r5
 8008602:	f000 ff76 	bl	80094f2 <_realloc_r>
 8008606:	4606      	mov	r6, r0
 8008608:	2800      	cmp	r0, #0
 800860a:	d1e0      	bne.n	80085ce <__ssputs_r+0x5a>
 800860c:	6921      	ldr	r1, [r4, #16]
 800860e:	4650      	mov	r0, sl
 8008610:	f7fe fb6c 	bl	8006cec <_free_r>
 8008614:	230c      	movs	r3, #12
 8008616:	f8ca 3000 	str.w	r3, [sl]
 800861a:	89a3      	ldrh	r3, [r4, #12]
 800861c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008620:	81a3      	strh	r3, [r4, #12]
 8008622:	f04f 30ff 	mov.w	r0, #4294967295
 8008626:	e7e9      	b.n	80085fc <__ssputs_r+0x88>

08008628 <_svfiprintf_r>:
 8008628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800862c:	4698      	mov	r8, r3
 800862e:	898b      	ldrh	r3, [r1, #12]
 8008630:	061b      	lsls	r3, r3, #24
 8008632:	b09d      	sub	sp, #116	; 0x74
 8008634:	4607      	mov	r7, r0
 8008636:	460d      	mov	r5, r1
 8008638:	4614      	mov	r4, r2
 800863a:	d50e      	bpl.n	800865a <_svfiprintf_r+0x32>
 800863c:	690b      	ldr	r3, [r1, #16]
 800863e:	b963      	cbnz	r3, 800865a <_svfiprintf_r+0x32>
 8008640:	2140      	movs	r1, #64	; 0x40
 8008642:	f7fe fbc7 	bl	8006dd4 <_malloc_r>
 8008646:	6028      	str	r0, [r5, #0]
 8008648:	6128      	str	r0, [r5, #16]
 800864a:	b920      	cbnz	r0, 8008656 <_svfiprintf_r+0x2e>
 800864c:	230c      	movs	r3, #12
 800864e:	603b      	str	r3, [r7, #0]
 8008650:	f04f 30ff 	mov.w	r0, #4294967295
 8008654:	e0d0      	b.n	80087f8 <_svfiprintf_r+0x1d0>
 8008656:	2340      	movs	r3, #64	; 0x40
 8008658:	616b      	str	r3, [r5, #20]
 800865a:	2300      	movs	r3, #0
 800865c:	9309      	str	r3, [sp, #36]	; 0x24
 800865e:	2320      	movs	r3, #32
 8008660:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008664:	f8cd 800c 	str.w	r8, [sp, #12]
 8008668:	2330      	movs	r3, #48	; 0x30
 800866a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8008810 <_svfiprintf_r+0x1e8>
 800866e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008672:	f04f 0901 	mov.w	r9, #1
 8008676:	4623      	mov	r3, r4
 8008678:	469a      	mov	sl, r3
 800867a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800867e:	b10a      	cbz	r2, 8008684 <_svfiprintf_r+0x5c>
 8008680:	2a25      	cmp	r2, #37	; 0x25
 8008682:	d1f9      	bne.n	8008678 <_svfiprintf_r+0x50>
 8008684:	ebba 0b04 	subs.w	fp, sl, r4
 8008688:	d00b      	beq.n	80086a2 <_svfiprintf_r+0x7a>
 800868a:	465b      	mov	r3, fp
 800868c:	4622      	mov	r2, r4
 800868e:	4629      	mov	r1, r5
 8008690:	4638      	mov	r0, r7
 8008692:	f7ff ff6f 	bl	8008574 <__ssputs_r>
 8008696:	3001      	adds	r0, #1
 8008698:	f000 80a9 	beq.w	80087ee <_svfiprintf_r+0x1c6>
 800869c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800869e:	445a      	add	r2, fp
 80086a0:	9209      	str	r2, [sp, #36]	; 0x24
 80086a2:	f89a 3000 	ldrb.w	r3, [sl]
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	f000 80a1 	beq.w	80087ee <_svfiprintf_r+0x1c6>
 80086ac:	2300      	movs	r3, #0
 80086ae:	f04f 32ff 	mov.w	r2, #4294967295
 80086b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80086b6:	f10a 0a01 	add.w	sl, sl, #1
 80086ba:	9304      	str	r3, [sp, #16]
 80086bc:	9307      	str	r3, [sp, #28]
 80086be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80086c2:	931a      	str	r3, [sp, #104]	; 0x68
 80086c4:	4654      	mov	r4, sl
 80086c6:	2205      	movs	r2, #5
 80086c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80086cc:	4850      	ldr	r0, [pc, #320]	; (8008810 <_svfiprintf_r+0x1e8>)
 80086ce:	f7f7 fd7f 	bl	80001d0 <memchr>
 80086d2:	9a04      	ldr	r2, [sp, #16]
 80086d4:	b9d8      	cbnz	r0, 800870e <_svfiprintf_r+0xe6>
 80086d6:	06d0      	lsls	r0, r2, #27
 80086d8:	bf44      	itt	mi
 80086da:	2320      	movmi	r3, #32
 80086dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086e0:	0711      	lsls	r1, r2, #28
 80086e2:	bf44      	itt	mi
 80086e4:	232b      	movmi	r3, #43	; 0x2b
 80086e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80086ea:	f89a 3000 	ldrb.w	r3, [sl]
 80086ee:	2b2a      	cmp	r3, #42	; 0x2a
 80086f0:	d015      	beq.n	800871e <_svfiprintf_r+0xf6>
 80086f2:	9a07      	ldr	r2, [sp, #28]
 80086f4:	4654      	mov	r4, sl
 80086f6:	2000      	movs	r0, #0
 80086f8:	f04f 0c0a 	mov.w	ip, #10
 80086fc:	4621      	mov	r1, r4
 80086fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008702:	3b30      	subs	r3, #48	; 0x30
 8008704:	2b09      	cmp	r3, #9
 8008706:	d94d      	bls.n	80087a4 <_svfiprintf_r+0x17c>
 8008708:	b1b0      	cbz	r0, 8008738 <_svfiprintf_r+0x110>
 800870a:	9207      	str	r2, [sp, #28]
 800870c:	e014      	b.n	8008738 <_svfiprintf_r+0x110>
 800870e:	eba0 0308 	sub.w	r3, r0, r8
 8008712:	fa09 f303 	lsl.w	r3, r9, r3
 8008716:	4313      	orrs	r3, r2
 8008718:	9304      	str	r3, [sp, #16]
 800871a:	46a2      	mov	sl, r4
 800871c:	e7d2      	b.n	80086c4 <_svfiprintf_r+0x9c>
 800871e:	9b03      	ldr	r3, [sp, #12]
 8008720:	1d19      	adds	r1, r3, #4
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	9103      	str	r1, [sp, #12]
 8008726:	2b00      	cmp	r3, #0
 8008728:	bfbb      	ittet	lt
 800872a:	425b      	neglt	r3, r3
 800872c:	f042 0202 	orrlt.w	r2, r2, #2
 8008730:	9307      	strge	r3, [sp, #28]
 8008732:	9307      	strlt	r3, [sp, #28]
 8008734:	bfb8      	it	lt
 8008736:	9204      	strlt	r2, [sp, #16]
 8008738:	7823      	ldrb	r3, [r4, #0]
 800873a:	2b2e      	cmp	r3, #46	; 0x2e
 800873c:	d10c      	bne.n	8008758 <_svfiprintf_r+0x130>
 800873e:	7863      	ldrb	r3, [r4, #1]
 8008740:	2b2a      	cmp	r3, #42	; 0x2a
 8008742:	d134      	bne.n	80087ae <_svfiprintf_r+0x186>
 8008744:	9b03      	ldr	r3, [sp, #12]
 8008746:	1d1a      	adds	r2, r3, #4
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	9203      	str	r2, [sp, #12]
 800874c:	2b00      	cmp	r3, #0
 800874e:	bfb8      	it	lt
 8008750:	f04f 33ff 	movlt.w	r3, #4294967295
 8008754:	3402      	adds	r4, #2
 8008756:	9305      	str	r3, [sp, #20]
 8008758:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008820 <_svfiprintf_r+0x1f8>
 800875c:	7821      	ldrb	r1, [r4, #0]
 800875e:	2203      	movs	r2, #3
 8008760:	4650      	mov	r0, sl
 8008762:	f7f7 fd35 	bl	80001d0 <memchr>
 8008766:	b138      	cbz	r0, 8008778 <_svfiprintf_r+0x150>
 8008768:	9b04      	ldr	r3, [sp, #16]
 800876a:	eba0 000a 	sub.w	r0, r0, sl
 800876e:	2240      	movs	r2, #64	; 0x40
 8008770:	4082      	lsls	r2, r0
 8008772:	4313      	orrs	r3, r2
 8008774:	3401      	adds	r4, #1
 8008776:	9304      	str	r3, [sp, #16]
 8008778:	f814 1b01 	ldrb.w	r1, [r4], #1
 800877c:	4825      	ldr	r0, [pc, #148]	; (8008814 <_svfiprintf_r+0x1ec>)
 800877e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008782:	2206      	movs	r2, #6
 8008784:	f7f7 fd24 	bl	80001d0 <memchr>
 8008788:	2800      	cmp	r0, #0
 800878a:	d038      	beq.n	80087fe <_svfiprintf_r+0x1d6>
 800878c:	4b22      	ldr	r3, [pc, #136]	; (8008818 <_svfiprintf_r+0x1f0>)
 800878e:	bb1b      	cbnz	r3, 80087d8 <_svfiprintf_r+0x1b0>
 8008790:	9b03      	ldr	r3, [sp, #12]
 8008792:	3307      	adds	r3, #7
 8008794:	f023 0307 	bic.w	r3, r3, #7
 8008798:	3308      	adds	r3, #8
 800879a:	9303      	str	r3, [sp, #12]
 800879c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800879e:	4433      	add	r3, r6
 80087a0:	9309      	str	r3, [sp, #36]	; 0x24
 80087a2:	e768      	b.n	8008676 <_svfiprintf_r+0x4e>
 80087a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80087a8:	460c      	mov	r4, r1
 80087aa:	2001      	movs	r0, #1
 80087ac:	e7a6      	b.n	80086fc <_svfiprintf_r+0xd4>
 80087ae:	2300      	movs	r3, #0
 80087b0:	3401      	adds	r4, #1
 80087b2:	9305      	str	r3, [sp, #20]
 80087b4:	4619      	mov	r1, r3
 80087b6:	f04f 0c0a 	mov.w	ip, #10
 80087ba:	4620      	mov	r0, r4
 80087bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80087c0:	3a30      	subs	r2, #48	; 0x30
 80087c2:	2a09      	cmp	r2, #9
 80087c4:	d903      	bls.n	80087ce <_svfiprintf_r+0x1a6>
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d0c6      	beq.n	8008758 <_svfiprintf_r+0x130>
 80087ca:	9105      	str	r1, [sp, #20]
 80087cc:	e7c4      	b.n	8008758 <_svfiprintf_r+0x130>
 80087ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80087d2:	4604      	mov	r4, r0
 80087d4:	2301      	movs	r3, #1
 80087d6:	e7f0      	b.n	80087ba <_svfiprintf_r+0x192>
 80087d8:	ab03      	add	r3, sp, #12
 80087da:	9300      	str	r3, [sp, #0]
 80087dc:	462a      	mov	r2, r5
 80087de:	4b0f      	ldr	r3, [pc, #60]	; (800881c <_svfiprintf_r+0x1f4>)
 80087e0:	a904      	add	r1, sp, #16
 80087e2:	4638      	mov	r0, r7
 80087e4:	f7fc fb50 	bl	8004e88 <_printf_float>
 80087e8:	1c42      	adds	r2, r0, #1
 80087ea:	4606      	mov	r6, r0
 80087ec:	d1d6      	bne.n	800879c <_svfiprintf_r+0x174>
 80087ee:	89ab      	ldrh	r3, [r5, #12]
 80087f0:	065b      	lsls	r3, r3, #25
 80087f2:	f53f af2d 	bmi.w	8008650 <_svfiprintf_r+0x28>
 80087f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087f8:	b01d      	add	sp, #116	; 0x74
 80087fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087fe:	ab03      	add	r3, sp, #12
 8008800:	9300      	str	r3, [sp, #0]
 8008802:	462a      	mov	r2, r5
 8008804:	4b05      	ldr	r3, [pc, #20]	; (800881c <_svfiprintf_r+0x1f4>)
 8008806:	a904      	add	r1, sp, #16
 8008808:	4638      	mov	r0, r7
 800880a:	f7fc fde1 	bl	80053d0 <_printf_i>
 800880e:	e7eb      	b.n	80087e8 <_svfiprintf_r+0x1c0>
 8008810:	08009b51 	.word	0x08009b51
 8008814:	08009b5b 	.word	0x08009b5b
 8008818:	08004e89 	.word	0x08004e89
 800881c:	08008575 	.word	0x08008575
 8008820:	08009b57 	.word	0x08009b57

08008824 <__sfputc_r>:
 8008824:	6893      	ldr	r3, [r2, #8]
 8008826:	3b01      	subs	r3, #1
 8008828:	2b00      	cmp	r3, #0
 800882a:	b410      	push	{r4}
 800882c:	6093      	str	r3, [r2, #8]
 800882e:	da08      	bge.n	8008842 <__sfputc_r+0x1e>
 8008830:	6994      	ldr	r4, [r2, #24]
 8008832:	42a3      	cmp	r3, r4
 8008834:	db01      	blt.n	800883a <__sfputc_r+0x16>
 8008836:	290a      	cmp	r1, #10
 8008838:	d103      	bne.n	8008842 <__sfputc_r+0x1e>
 800883a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800883e:	f7fd bac0 	b.w	8005dc2 <__swbuf_r>
 8008842:	6813      	ldr	r3, [r2, #0]
 8008844:	1c58      	adds	r0, r3, #1
 8008846:	6010      	str	r0, [r2, #0]
 8008848:	7019      	strb	r1, [r3, #0]
 800884a:	4608      	mov	r0, r1
 800884c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008850:	4770      	bx	lr

08008852 <__sfputs_r>:
 8008852:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008854:	4606      	mov	r6, r0
 8008856:	460f      	mov	r7, r1
 8008858:	4614      	mov	r4, r2
 800885a:	18d5      	adds	r5, r2, r3
 800885c:	42ac      	cmp	r4, r5
 800885e:	d101      	bne.n	8008864 <__sfputs_r+0x12>
 8008860:	2000      	movs	r0, #0
 8008862:	e007      	b.n	8008874 <__sfputs_r+0x22>
 8008864:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008868:	463a      	mov	r2, r7
 800886a:	4630      	mov	r0, r6
 800886c:	f7ff ffda 	bl	8008824 <__sfputc_r>
 8008870:	1c43      	adds	r3, r0, #1
 8008872:	d1f3      	bne.n	800885c <__sfputs_r+0xa>
 8008874:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008878 <_vfiprintf_r>:
 8008878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800887c:	460d      	mov	r5, r1
 800887e:	b09d      	sub	sp, #116	; 0x74
 8008880:	4614      	mov	r4, r2
 8008882:	4698      	mov	r8, r3
 8008884:	4606      	mov	r6, r0
 8008886:	b118      	cbz	r0, 8008890 <_vfiprintf_r+0x18>
 8008888:	6a03      	ldr	r3, [r0, #32]
 800888a:	b90b      	cbnz	r3, 8008890 <_vfiprintf_r+0x18>
 800888c:	f7fd f95e 	bl	8005b4c <__sinit>
 8008890:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008892:	07d9      	lsls	r1, r3, #31
 8008894:	d405      	bmi.n	80088a2 <_vfiprintf_r+0x2a>
 8008896:	89ab      	ldrh	r3, [r5, #12]
 8008898:	059a      	lsls	r2, r3, #22
 800889a:	d402      	bmi.n	80088a2 <_vfiprintf_r+0x2a>
 800889c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800889e:	f7fd fba2 	bl	8005fe6 <__retarget_lock_acquire_recursive>
 80088a2:	89ab      	ldrh	r3, [r5, #12]
 80088a4:	071b      	lsls	r3, r3, #28
 80088a6:	d501      	bpl.n	80088ac <_vfiprintf_r+0x34>
 80088a8:	692b      	ldr	r3, [r5, #16]
 80088aa:	b99b      	cbnz	r3, 80088d4 <_vfiprintf_r+0x5c>
 80088ac:	4629      	mov	r1, r5
 80088ae:	4630      	mov	r0, r6
 80088b0:	f7fd fac4 	bl	8005e3c <__swsetup_r>
 80088b4:	b170      	cbz	r0, 80088d4 <_vfiprintf_r+0x5c>
 80088b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80088b8:	07dc      	lsls	r4, r3, #31
 80088ba:	d504      	bpl.n	80088c6 <_vfiprintf_r+0x4e>
 80088bc:	f04f 30ff 	mov.w	r0, #4294967295
 80088c0:	b01d      	add	sp, #116	; 0x74
 80088c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088c6:	89ab      	ldrh	r3, [r5, #12]
 80088c8:	0598      	lsls	r0, r3, #22
 80088ca:	d4f7      	bmi.n	80088bc <_vfiprintf_r+0x44>
 80088cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80088ce:	f7fd fb8b 	bl	8005fe8 <__retarget_lock_release_recursive>
 80088d2:	e7f3      	b.n	80088bc <_vfiprintf_r+0x44>
 80088d4:	2300      	movs	r3, #0
 80088d6:	9309      	str	r3, [sp, #36]	; 0x24
 80088d8:	2320      	movs	r3, #32
 80088da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80088de:	f8cd 800c 	str.w	r8, [sp, #12]
 80088e2:	2330      	movs	r3, #48	; 0x30
 80088e4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008a98 <_vfiprintf_r+0x220>
 80088e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80088ec:	f04f 0901 	mov.w	r9, #1
 80088f0:	4623      	mov	r3, r4
 80088f2:	469a      	mov	sl, r3
 80088f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088f8:	b10a      	cbz	r2, 80088fe <_vfiprintf_r+0x86>
 80088fa:	2a25      	cmp	r2, #37	; 0x25
 80088fc:	d1f9      	bne.n	80088f2 <_vfiprintf_r+0x7a>
 80088fe:	ebba 0b04 	subs.w	fp, sl, r4
 8008902:	d00b      	beq.n	800891c <_vfiprintf_r+0xa4>
 8008904:	465b      	mov	r3, fp
 8008906:	4622      	mov	r2, r4
 8008908:	4629      	mov	r1, r5
 800890a:	4630      	mov	r0, r6
 800890c:	f7ff ffa1 	bl	8008852 <__sfputs_r>
 8008910:	3001      	adds	r0, #1
 8008912:	f000 80a9 	beq.w	8008a68 <_vfiprintf_r+0x1f0>
 8008916:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008918:	445a      	add	r2, fp
 800891a:	9209      	str	r2, [sp, #36]	; 0x24
 800891c:	f89a 3000 	ldrb.w	r3, [sl]
 8008920:	2b00      	cmp	r3, #0
 8008922:	f000 80a1 	beq.w	8008a68 <_vfiprintf_r+0x1f0>
 8008926:	2300      	movs	r3, #0
 8008928:	f04f 32ff 	mov.w	r2, #4294967295
 800892c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008930:	f10a 0a01 	add.w	sl, sl, #1
 8008934:	9304      	str	r3, [sp, #16]
 8008936:	9307      	str	r3, [sp, #28]
 8008938:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800893c:	931a      	str	r3, [sp, #104]	; 0x68
 800893e:	4654      	mov	r4, sl
 8008940:	2205      	movs	r2, #5
 8008942:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008946:	4854      	ldr	r0, [pc, #336]	; (8008a98 <_vfiprintf_r+0x220>)
 8008948:	f7f7 fc42 	bl	80001d0 <memchr>
 800894c:	9a04      	ldr	r2, [sp, #16]
 800894e:	b9d8      	cbnz	r0, 8008988 <_vfiprintf_r+0x110>
 8008950:	06d1      	lsls	r1, r2, #27
 8008952:	bf44      	itt	mi
 8008954:	2320      	movmi	r3, #32
 8008956:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800895a:	0713      	lsls	r3, r2, #28
 800895c:	bf44      	itt	mi
 800895e:	232b      	movmi	r3, #43	; 0x2b
 8008960:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008964:	f89a 3000 	ldrb.w	r3, [sl]
 8008968:	2b2a      	cmp	r3, #42	; 0x2a
 800896a:	d015      	beq.n	8008998 <_vfiprintf_r+0x120>
 800896c:	9a07      	ldr	r2, [sp, #28]
 800896e:	4654      	mov	r4, sl
 8008970:	2000      	movs	r0, #0
 8008972:	f04f 0c0a 	mov.w	ip, #10
 8008976:	4621      	mov	r1, r4
 8008978:	f811 3b01 	ldrb.w	r3, [r1], #1
 800897c:	3b30      	subs	r3, #48	; 0x30
 800897e:	2b09      	cmp	r3, #9
 8008980:	d94d      	bls.n	8008a1e <_vfiprintf_r+0x1a6>
 8008982:	b1b0      	cbz	r0, 80089b2 <_vfiprintf_r+0x13a>
 8008984:	9207      	str	r2, [sp, #28]
 8008986:	e014      	b.n	80089b2 <_vfiprintf_r+0x13a>
 8008988:	eba0 0308 	sub.w	r3, r0, r8
 800898c:	fa09 f303 	lsl.w	r3, r9, r3
 8008990:	4313      	orrs	r3, r2
 8008992:	9304      	str	r3, [sp, #16]
 8008994:	46a2      	mov	sl, r4
 8008996:	e7d2      	b.n	800893e <_vfiprintf_r+0xc6>
 8008998:	9b03      	ldr	r3, [sp, #12]
 800899a:	1d19      	adds	r1, r3, #4
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	9103      	str	r1, [sp, #12]
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	bfbb      	ittet	lt
 80089a4:	425b      	neglt	r3, r3
 80089a6:	f042 0202 	orrlt.w	r2, r2, #2
 80089aa:	9307      	strge	r3, [sp, #28]
 80089ac:	9307      	strlt	r3, [sp, #28]
 80089ae:	bfb8      	it	lt
 80089b0:	9204      	strlt	r2, [sp, #16]
 80089b2:	7823      	ldrb	r3, [r4, #0]
 80089b4:	2b2e      	cmp	r3, #46	; 0x2e
 80089b6:	d10c      	bne.n	80089d2 <_vfiprintf_r+0x15a>
 80089b8:	7863      	ldrb	r3, [r4, #1]
 80089ba:	2b2a      	cmp	r3, #42	; 0x2a
 80089bc:	d134      	bne.n	8008a28 <_vfiprintf_r+0x1b0>
 80089be:	9b03      	ldr	r3, [sp, #12]
 80089c0:	1d1a      	adds	r2, r3, #4
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	9203      	str	r2, [sp, #12]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	bfb8      	it	lt
 80089ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80089ce:	3402      	adds	r4, #2
 80089d0:	9305      	str	r3, [sp, #20]
 80089d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008aa8 <_vfiprintf_r+0x230>
 80089d6:	7821      	ldrb	r1, [r4, #0]
 80089d8:	2203      	movs	r2, #3
 80089da:	4650      	mov	r0, sl
 80089dc:	f7f7 fbf8 	bl	80001d0 <memchr>
 80089e0:	b138      	cbz	r0, 80089f2 <_vfiprintf_r+0x17a>
 80089e2:	9b04      	ldr	r3, [sp, #16]
 80089e4:	eba0 000a 	sub.w	r0, r0, sl
 80089e8:	2240      	movs	r2, #64	; 0x40
 80089ea:	4082      	lsls	r2, r0
 80089ec:	4313      	orrs	r3, r2
 80089ee:	3401      	adds	r4, #1
 80089f0:	9304      	str	r3, [sp, #16]
 80089f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089f6:	4829      	ldr	r0, [pc, #164]	; (8008a9c <_vfiprintf_r+0x224>)
 80089f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80089fc:	2206      	movs	r2, #6
 80089fe:	f7f7 fbe7 	bl	80001d0 <memchr>
 8008a02:	2800      	cmp	r0, #0
 8008a04:	d03f      	beq.n	8008a86 <_vfiprintf_r+0x20e>
 8008a06:	4b26      	ldr	r3, [pc, #152]	; (8008aa0 <_vfiprintf_r+0x228>)
 8008a08:	bb1b      	cbnz	r3, 8008a52 <_vfiprintf_r+0x1da>
 8008a0a:	9b03      	ldr	r3, [sp, #12]
 8008a0c:	3307      	adds	r3, #7
 8008a0e:	f023 0307 	bic.w	r3, r3, #7
 8008a12:	3308      	adds	r3, #8
 8008a14:	9303      	str	r3, [sp, #12]
 8008a16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008a18:	443b      	add	r3, r7
 8008a1a:	9309      	str	r3, [sp, #36]	; 0x24
 8008a1c:	e768      	b.n	80088f0 <_vfiprintf_r+0x78>
 8008a1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a22:	460c      	mov	r4, r1
 8008a24:	2001      	movs	r0, #1
 8008a26:	e7a6      	b.n	8008976 <_vfiprintf_r+0xfe>
 8008a28:	2300      	movs	r3, #0
 8008a2a:	3401      	adds	r4, #1
 8008a2c:	9305      	str	r3, [sp, #20]
 8008a2e:	4619      	mov	r1, r3
 8008a30:	f04f 0c0a 	mov.w	ip, #10
 8008a34:	4620      	mov	r0, r4
 8008a36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a3a:	3a30      	subs	r2, #48	; 0x30
 8008a3c:	2a09      	cmp	r2, #9
 8008a3e:	d903      	bls.n	8008a48 <_vfiprintf_r+0x1d0>
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d0c6      	beq.n	80089d2 <_vfiprintf_r+0x15a>
 8008a44:	9105      	str	r1, [sp, #20]
 8008a46:	e7c4      	b.n	80089d2 <_vfiprintf_r+0x15a>
 8008a48:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a4c:	4604      	mov	r4, r0
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e7f0      	b.n	8008a34 <_vfiprintf_r+0x1bc>
 8008a52:	ab03      	add	r3, sp, #12
 8008a54:	9300      	str	r3, [sp, #0]
 8008a56:	462a      	mov	r2, r5
 8008a58:	4b12      	ldr	r3, [pc, #72]	; (8008aa4 <_vfiprintf_r+0x22c>)
 8008a5a:	a904      	add	r1, sp, #16
 8008a5c:	4630      	mov	r0, r6
 8008a5e:	f7fc fa13 	bl	8004e88 <_printf_float>
 8008a62:	4607      	mov	r7, r0
 8008a64:	1c78      	adds	r0, r7, #1
 8008a66:	d1d6      	bne.n	8008a16 <_vfiprintf_r+0x19e>
 8008a68:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008a6a:	07d9      	lsls	r1, r3, #31
 8008a6c:	d405      	bmi.n	8008a7a <_vfiprintf_r+0x202>
 8008a6e:	89ab      	ldrh	r3, [r5, #12]
 8008a70:	059a      	lsls	r2, r3, #22
 8008a72:	d402      	bmi.n	8008a7a <_vfiprintf_r+0x202>
 8008a74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008a76:	f7fd fab7 	bl	8005fe8 <__retarget_lock_release_recursive>
 8008a7a:	89ab      	ldrh	r3, [r5, #12]
 8008a7c:	065b      	lsls	r3, r3, #25
 8008a7e:	f53f af1d 	bmi.w	80088bc <_vfiprintf_r+0x44>
 8008a82:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a84:	e71c      	b.n	80088c0 <_vfiprintf_r+0x48>
 8008a86:	ab03      	add	r3, sp, #12
 8008a88:	9300      	str	r3, [sp, #0]
 8008a8a:	462a      	mov	r2, r5
 8008a8c:	4b05      	ldr	r3, [pc, #20]	; (8008aa4 <_vfiprintf_r+0x22c>)
 8008a8e:	a904      	add	r1, sp, #16
 8008a90:	4630      	mov	r0, r6
 8008a92:	f7fc fc9d 	bl	80053d0 <_printf_i>
 8008a96:	e7e4      	b.n	8008a62 <_vfiprintf_r+0x1ea>
 8008a98:	08009b51 	.word	0x08009b51
 8008a9c:	08009b5b 	.word	0x08009b5b
 8008aa0:	08004e89 	.word	0x08004e89
 8008aa4:	08008853 	.word	0x08008853
 8008aa8:	08009b57 	.word	0x08009b57

08008aac <__sflush_r>:
 8008aac:	898a      	ldrh	r2, [r1, #12]
 8008aae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ab2:	4605      	mov	r5, r0
 8008ab4:	0710      	lsls	r0, r2, #28
 8008ab6:	460c      	mov	r4, r1
 8008ab8:	d458      	bmi.n	8008b6c <__sflush_r+0xc0>
 8008aba:	684b      	ldr	r3, [r1, #4]
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	dc05      	bgt.n	8008acc <__sflush_r+0x20>
 8008ac0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	dc02      	bgt.n	8008acc <__sflush_r+0x20>
 8008ac6:	2000      	movs	r0, #0
 8008ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008acc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ace:	2e00      	cmp	r6, #0
 8008ad0:	d0f9      	beq.n	8008ac6 <__sflush_r+0x1a>
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008ad8:	682f      	ldr	r7, [r5, #0]
 8008ada:	6a21      	ldr	r1, [r4, #32]
 8008adc:	602b      	str	r3, [r5, #0]
 8008ade:	d032      	beq.n	8008b46 <__sflush_r+0x9a>
 8008ae0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008ae2:	89a3      	ldrh	r3, [r4, #12]
 8008ae4:	075a      	lsls	r2, r3, #29
 8008ae6:	d505      	bpl.n	8008af4 <__sflush_r+0x48>
 8008ae8:	6863      	ldr	r3, [r4, #4]
 8008aea:	1ac0      	subs	r0, r0, r3
 8008aec:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008aee:	b10b      	cbz	r3, 8008af4 <__sflush_r+0x48>
 8008af0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008af2:	1ac0      	subs	r0, r0, r3
 8008af4:	2300      	movs	r3, #0
 8008af6:	4602      	mov	r2, r0
 8008af8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008afa:	6a21      	ldr	r1, [r4, #32]
 8008afc:	4628      	mov	r0, r5
 8008afe:	47b0      	blx	r6
 8008b00:	1c43      	adds	r3, r0, #1
 8008b02:	89a3      	ldrh	r3, [r4, #12]
 8008b04:	d106      	bne.n	8008b14 <__sflush_r+0x68>
 8008b06:	6829      	ldr	r1, [r5, #0]
 8008b08:	291d      	cmp	r1, #29
 8008b0a:	d82b      	bhi.n	8008b64 <__sflush_r+0xb8>
 8008b0c:	4a29      	ldr	r2, [pc, #164]	; (8008bb4 <__sflush_r+0x108>)
 8008b0e:	410a      	asrs	r2, r1
 8008b10:	07d6      	lsls	r6, r2, #31
 8008b12:	d427      	bmi.n	8008b64 <__sflush_r+0xb8>
 8008b14:	2200      	movs	r2, #0
 8008b16:	6062      	str	r2, [r4, #4]
 8008b18:	04d9      	lsls	r1, r3, #19
 8008b1a:	6922      	ldr	r2, [r4, #16]
 8008b1c:	6022      	str	r2, [r4, #0]
 8008b1e:	d504      	bpl.n	8008b2a <__sflush_r+0x7e>
 8008b20:	1c42      	adds	r2, r0, #1
 8008b22:	d101      	bne.n	8008b28 <__sflush_r+0x7c>
 8008b24:	682b      	ldr	r3, [r5, #0]
 8008b26:	b903      	cbnz	r3, 8008b2a <__sflush_r+0x7e>
 8008b28:	6560      	str	r0, [r4, #84]	; 0x54
 8008b2a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b2c:	602f      	str	r7, [r5, #0]
 8008b2e:	2900      	cmp	r1, #0
 8008b30:	d0c9      	beq.n	8008ac6 <__sflush_r+0x1a>
 8008b32:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b36:	4299      	cmp	r1, r3
 8008b38:	d002      	beq.n	8008b40 <__sflush_r+0x94>
 8008b3a:	4628      	mov	r0, r5
 8008b3c:	f7fe f8d6 	bl	8006cec <_free_r>
 8008b40:	2000      	movs	r0, #0
 8008b42:	6360      	str	r0, [r4, #52]	; 0x34
 8008b44:	e7c0      	b.n	8008ac8 <__sflush_r+0x1c>
 8008b46:	2301      	movs	r3, #1
 8008b48:	4628      	mov	r0, r5
 8008b4a:	47b0      	blx	r6
 8008b4c:	1c41      	adds	r1, r0, #1
 8008b4e:	d1c8      	bne.n	8008ae2 <__sflush_r+0x36>
 8008b50:	682b      	ldr	r3, [r5, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d0c5      	beq.n	8008ae2 <__sflush_r+0x36>
 8008b56:	2b1d      	cmp	r3, #29
 8008b58:	d001      	beq.n	8008b5e <__sflush_r+0xb2>
 8008b5a:	2b16      	cmp	r3, #22
 8008b5c:	d101      	bne.n	8008b62 <__sflush_r+0xb6>
 8008b5e:	602f      	str	r7, [r5, #0]
 8008b60:	e7b1      	b.n	8008ac6 <__sflush_r+0x1a>
 8008b62:	89a3      	ldrh	r3, [r4, #12]
 8008b64:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b68:	81a3      	strh	r3, [r4, #12]
 8008b6a:	e7ad      	b.n	8008ac8 <__sflush_r+0x1c>
 8008b6c:	690f      	ldr	r7, [r1, #16]
 8008b6e:	2f00      	cmp	r7, #0
 8008b70:	d0a9      	beq.n	8008ac6 <__sflush_r+0x1a>
 8008b72:	0793      	lsls	r3, r2, #30
 8008b74:	680e      	ldr	r6, [r1, #0]
 8008b76:	bf08      	it	eq
 8008b78:	694b      	ldreq	r3, [r1, #20]
 8008b7a:	600f      	str	r7, [r1, #0]
 8008b7c:	bf18      	it	ne
 8008b7e:	2300      	movne	r3, #0
 8008b80:	eba6 0807 	sub.w	r8, r6, r7
 8008b84:	608b      	str	r3, [r1, #8]
 8008b86:	f1b8 0f00 	cmp.w	r8, #0
 8008b8a:	dd9c      	ble.n	8008ac6 <__sflush_r+0x1a>
 8008b8c:	6a21      	ldr	r1, [r4, #32]
 8008b8e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b90:	4643      	mov	r3, r8
 8008b92:	463a      	mov	r2, r7
 8008b94:	4628      	mov	r0, r5
 8008b96:	47b0      	blx	r6
 8008b98:	2800      	cmp	r0, #0
 8008b9a:	dc06      	bgt.n	8008baa <__sflush_r+0xfe>
 8008b9c:	89a3      	ldrh	r3, [r4, #12]
 8008b9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ba2:	81a3      	strh	r3, [r4, #12]
 8008ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8008ba8:	e78e      	b.n	8008ac8 <__sflush_r+0x1c>
 8008baa:	4407      	add	r7, r0
 8008bac:	eba8 0800 	sub.w	r8, r8, r0
 8008bb0:	e7e9      	b.n	8008b86 <__sflush_r+0xda>
 8008bb2:	bf00      	nop
 8008bb4:	dfbffffe 	.word	0xdfbffffe

08008bb8 <_fflush_r>:
 8008bb8:	b538      	push	{r3, r4, r5, lr}
 8008bba:	690b      	ldr	r3, [r1, #16]
 8008bbc:	4605      	mov	r5, r0
 8008bbe:	460c      	mov	r4, r1
 8008bc0:	b913      	cbnz	r3, 8008bc8 <_fflush_r+0x10>
 8008bc2:	2500      	movs	r5, #0
 8008bc4:	4628      	mov	r0, r5
 8008bc6:	bd38      	pop	{r3, r4, r5, pc}
 8008bc8:	b118      	cbz	r0, 8008bd2 <_fflush_r+0x1a>
 8008bca:	6a03      	ldr	r3, [r0, #32]
 8008bcc:	b90b      	cbnz	r3, 8008bd2 <_fflush_r+0x1a>
 8008bce:	f7fc ffbd 	bl	8005b4c <__sinit>
 8008bd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d0f3      	beq.n	8008bc2 <_fflush_r+0xa>
 8008bda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008bdc:	07d0      	lsls	r0, r2, #31
 8008bde:	d404      	bmi.n	8008bea <_fflush_r+0x32>
 8008be0:	0599      	lsls	r1, r3, #22
 8008be2:	d402      	bmi.n	8008bea <_fflush_r+0x32>
 8008be4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008be6:	f7fd f9fe 	bl	8005fe6 <__retarget_lock_acquire_recursive>
 8008bea:	4628      	mov	r0, r5
 8008bec:	4621      	mov	r1, r4
 8008bee:	f7ff ff5d 	bl	8008aac <__sflush_r>
 8008bf2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008bf4:	07da      	lsls	r2, r3, #31
 8008bf6:	4605      	mov	r5, r0
 8008bf8:	d4e4      	bmi.n	8008bc4 <_fflush_r+0xc>
 8008bfa:	89a3      	ldrh	r3, [r4, #12]
 8008bfc:	059b      	lsls	r3, r3, #22
 8008bfe:	d4e1      	bmi.n	8008bc4 <_fflush_r+0xc>
 8008c00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c02:	f7fd f9f1 	bl	8005fe8 <__retarget_lock_release_recursive>
 8008c06:	e7dd      	b.n	8008bc4 <_fflush_r+0xc>

08008c08 <__swhatbuf_r>:
 8008c08:	b570      	push	{r4, r5, r6, lr}
 8008c0a:	460c      	mov	r4, r1
 8008c0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c10:	2900      	cmp	r1, #0
 8008c12:	b096      	sub	sp, #88	; 0x58
 8008c14:	4615      	mov	r5, r2
 8008c16:	461e      	mov	r6, r3
 8008c18:	da0d      	bge.n	8008c36 <__swhatbuf_r+0x2e>
 8008c1a:	89a3      	ldrh	r3, [r4, #12]
 8008c1c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008c20:	f04f 0100 	mov.w	r1, #0
 8008c24:	bf0c      	ite	eq
 8008c26:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008c2a:	2340      	movne	r3, #64	; 0x40
 8008c2c:	2000      	movs	r0, #0
 8008c2e:	6031      	str	r1, [r6, #0]
 8008c30:	602b      	str	r3, [r5, #0]
 8008c32:	b016      	add	sp, #88	; 0x58
 8008c34:	bd70      	pop	{r4, r5, r6, pc}
 8008c36:	466a      	mov	r2, sp
 8008c38:	f000 f874 	bl	8008d24 <_fstat_r>
 8008c3c:	2800      	cmp	r0, #0
 8008c3e:	dbec      	blt.n	8008c1a <__swhatbuf_r+0x12>
 8008c40:	9901      	ldr	r1, [sp, #4]
 8008c42:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008c46:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008c4a:	4259      	negs	r1, r3
 8008c4c:	4159      	adcs	r1, r3
 8008c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c52:	e7eb      	b.n	8008c2c <__swhatbuf_r+0x24>

08008c54 <__smakebuf_r>:
 8008c54:	898b      	ldrh	r3, [r1, #12]
 8008c56:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c58:	079d      	lsls	r5, r3, #30
 8008c5a:	4606      	mov	r6, r0
 8008c5c:	460c      	mov	r4, r1
 8008c5e:	d507      	bpl.n	8008c70 <__smakebuf_r+0x1c>
 8008c60:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c64:	6023      	str	r3, [r4, #0]
 8008c66:	6123      	str	r3, [r4, #16]
 8008c68:	2301      	movs	r3, #1
 8008c6a:	6163      	str	r3, [r4, #20]
 8008c6c:	b002      	add	sp, #8
 8008c6e:	bd70      	pop	{r4, r5, r6, pc}
 8008c70:	ab01      	add	r3, sp, #4
 8008c72:	466a      	mov	r2, sp
 8008c74:	f7ff ffc8 	bl	8008c08 <__swhatbuf_r>
 8008c78:	9900      	ldr	r1, [sp, #0]
 8008c7a:	4605      	mov	r5, r0
 8008c7c:	4630      	mov	r0, r6
 8008c7e:	f7fe f8a9 	bl	8006dd4 <_malloc_r>
 8008c82:	b948      	cbnz	r0, 8008c98 <__smakebuf_r+0x44>
 8008c84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c88:	059a      	lsls	r2, r3, #22
 8008c8a:	d4ef      	bmi.n	8008c6c <__smakebuf_r+0x18>
 8008c8c:	f023 0303 	bic.w	r3, r3, #3
 8008c90:	f043 0302 	orr.w	r3, r3, #2
 8008c94:	81a3      	strh	r3, [r4, #12]
 8008c96:	e7e3      	b.n	8008c60 <__smakebuf_r+0xc>
 8008c98:	89a3      	ldrh	r3, [r4, #12]
 8008c9a:	6020      	str	r0, [r4, #0]
 8008c9c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ca0:	81a3      	strh	r3, [r4, #12]
 8008ca2:	9b00      	ldr	r3, [sp, #0]
 8008ca4:	6163      	str	r3, [r4, #20]
 8008ca6:	9b01      	ldr	r3, [sp, #4]
 8008ca8:	6120      	str	r0, [r4, #16]
 8008caa:	b15b      	cbz	r3, 8008cc4 <__smakebuf_r+0x70>
 8008cac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cb0:	4630      	mov	r0, r6
 8008cb2:	f000 f849 	bl	8008d48 <_isatty_r>
 8008cb6:	b128      	cbz	r0, 8008cc4 <__smakebuf_r+0x70>
 8008cb8:	89a3      	ldrh	r3, [r4, #12]
 8008cba:	f023 0303 	bic.w	r3, r3, #3
 8008cbe:	f043 0301 	orr.w	r3, r3, #1
 8008cc2:	81a3      	strh	r3, [r4, #12]
 8008cc4:	89a3      	ldrh	r3, [r4, #12]
 8008cc6:	431d      	orrs	r5, r3
 8008cc8:	81a5      	strh	r5, [r4, #12]
 8008cca:	e7cf      	b.n	8008c6c <__smakebuf_r+0x18>

08008ccc <memmove>:
 8008ccc:	4288      	cmp	r0, r1
 8008cce:	b510      	push	{r4, lr}
 8008cd0:	eb01 0402 	add.w	r4, r1, r2
 8008cd4:	d902      	bls.n	8008cdc <memmove+0x10>
 8008cd6:	4284      	cmp	r4, r0
 8008cd8:	4623      	mov	r3, r4
 8008cda:	d807      	bhi.n	8008cec <memmove+0x20>
 8008cdc:	1e43      	subs	r3, r0, #1
 8008cde:	42a1      	cmp	r1, r4
 8008ce0:	d008      	beq.n	8008cf4 <memmove+0x28>
 8008ce2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ce6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008cea:	e7f8      	b.n	8008cde <memmove+0x12>
 8008cec:	4402      	add	r2, r0
 8008cee:	4601      	mov	r1, r0
 8008cf0:	428a      	cmp	r2, r1
 8008cf2:	d100      	bne.n	8008cf6 <memmove+0x2a>
 8008cf4:	bd10      	pop	{r4, pc}
 8008cf6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008cfa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008cfe:	e7f7      	b.n	8008cf0 <memmove+0x24>

08008d00 <strncmp>:
 8008d00:	b510      	push	{r4, lr}
 8008d02:	b16a      	cbz	r2, 8008d20 <strncmp+0x20>
 8008d04:	3901      	subs	r1, #1
 8008d06:	1884      	adds	r4, r0, r2
 8008d08:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d0c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d103      	bne.n	8008d1c <strncmp+0x1c>
 8008d14:	42a0      	cmp	r0, r4
 8008d16:	d001      	beq.n	8008d1c <strncmp+0x1c>
 8008d18:	2a00      	cmp	r2, #0
 8008d1a:	d1f5      	bne.n	8008d08 <strncmp+0x8>
 8008d1c:	1ad0      	subs	r0, r2, r3
 8008d1e:	bd10      	pop	{r4, pc}
 8008d20:	4610      	mov	r0, r2
 8008d22:	e7fc      	b.n	8008d1e <strncmp+0x1e>

08008d24 <_fstat_r>:
 8008d24:	b538      	push	{r3, r4, r5, lr}
 8008d26:	4d07      	ldr	r5, [pc, #28]	; (8008d44 <_fstat_r+0x20>)
 8008d28:	2300      	movs	r3, #0
 8008d2a:	4604      	mov	r4, r0
 8008d2c:	4608      	mov	r0, r1
 8008d2e:	4611      	mov	r1, r2
 8008d30:	602b      	str	r3, [r5, #0]
 8008d32:	f7f8 fe34 	bl	800199e <_fstat>
 8008d36:	1c43      	adds	r3, r0, #1
 8008d38:	d102      	bne.n	8008d40 <_fstat_r+0x1c>
 8008d3a:	682b      	ldr	r3, [r5, #0]
 8008d3c:	b103      	cbz	r3, 8008d40 <_fstat_r+0x1c>
 8008d3e:	6023      	str	r3, [r4, #0]
 8008d40:	bd38      	pop	{r3, r4, r5, pc}
 8008d42:	bf00      	nop
 8008d44:	2000051c 	.word	0x2000051c

08008d48 <_isatty_r>:
 8008d48:	b538      	push	{r3, r4, r5, lr}
 8008d4a:	4d06      	ldr	r5, [pc, #24]	; (8008d64 <_isatty_r+0x1c>)
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	4604      	mov	r4, r0
 8008d50:	4608      	mov	r0, r1
 8008d52:	602b      	str	r3, [r5, #0]
 8008d54:	f7f8 fe33 	bl	80019be <_isatty>
 8008d58:	1c43      	adds	r3, r0, #1
 8008d5a:	d102      	bne.n	8008d62 <_isatty_r+0x1a>
 8008d5c:	682b      	ldr	r3, [r5, #0]
 8008d5e:	b103      	cbz	r3, 8008d62 <_isatty_r+0x1a>
 8008d60:	6023      	str	r3, [r4, #0]
 8008d62:	bd38      	pop	{r3, r4, r5, pc}
 8008d64:	2000051c 	.word	0x2000051c

08008d68 <_sbrk_r>:
 8008d68:	b538      	push	{r3, r4, r5, lr}
 8008d6a:	4d06      	ldr	r5, [pc, #24]	; (8008d84 <_sbrk_r+0x1c>)
 8008d6c:	2300      	movs	r3, #0
 8008d6e:	4604      	mov	r4, r0
 8008d70:	4608      	mov	r0, r1
 8008d72:	602b      	str	r3, [r5, #0]
 8008d74:	f7f8 fe3c 	bl	80019f0 <_sbrk>
 8008d78:	1c43      	adds	r3, r0, #1
 8008d7a:	d102      	bne.n	8008d82 <_sbrk_r+0x1a>
 8008d7c:	682b      	ldr	r3, [r5, #0]
 8008d7e:	b103      	cbz	r3, 8008d82 <_sbrk_r+0x1a>
 8008d80:	6023      	str	r3, [r4, #0]
 8008d82:	bd38      	pop	{r3, r4, r5, pc}
 8008d84:	2000051c 	.word	0x2000051c

08008d88 <memcpy>:
 8008d88:	440a      	add	r2, r1
 8008d8a:	4291      	cmp	r1, r2
 8008d8c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008d90:	d100      	bne.n	8008d94 <memcpy+0xc>
 8008d92:	4770      	bx	lr
 8008d94:	b510      	push	{r4, lr}
 8008d96:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008d9a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008d9e:	4291      	cmp	r1, r2
 8008da0:	d1f9      	bne.n	8008d96 <memcpy+0xe>
 8008da2:	bd10      	pop	{r4, pc}
 8008da4:	0000      	movs	r0, r0
	...

08008da8 <nan>:
 8008da8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8008db0 <nan+0x8>
 8008dac:	4770      	bx	lr
 8008dae:	bf00      	nop
 8008db0:	00000000 	.word	0x00000000
 8008db4:	7ff80000 	.word	0x7ff80000

08008db8 <__assert_func>:
 8008db8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008dba:	4614      	mov	r4, r2
 8008dbc:	461a      	mov	r2, r3
 8008dbe:	4b09      	ldr	r3, [pc, #36]	; (8008de4 <__assert_func+0x2c>)
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4605      	mov	r5, r0
 8008dc4:	68d8      	ldr	r0, [r3, #12]
 8008dc6:	b14c      	cbz	r4, 8008ddc <__assert_func+0x24>
 8008dc8:	4b07      	ldr	r3, [pc, #28]	; (8008de8 <__assert_func+0x30>)
 8008dca:	9100      	str	r1, [sp, #0]
 8008dcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008dd0:	4906      	ldr	r1, [pc, #24]	; (8008dec <__assert_func+0x34>)
 8008dd2:	462b      	mov	r3, r5
 8008dd4:	f000 fbca 	bl	800956c <fiprintf>
 8008dd8:	f000 fbda 	bl	8009590 <abort>
 8008ddc:	4b04      	ldr	r3, [pc, #16]	; (8008df0 <__assert_func+0x38>)
 8008dde:	461c      	mov	r4, r3
 8008de0:	e7f3      	b.n	8008dca <__assert_func+0x12>
 8008de2:	bf00      	nop
 8008de4:	20000078 	.word	0x20000078
 8008de8:	08009b6a 	.word	0x08009b6a
 8008dec:	08009b77 	.word	0x08009b77
 8008df0:	08009ba5 	.word	0x08009ba5

08008df4 <_calloc_r>:
 8008df4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008df6:	fba1 2402 	umull	r2, r4, r1, r2
 8008dfa:	b94c      	cbnz	r4, 8008e10 <_calloc_r+0x1c>
 8008dfc:	4611      	mov	r1, r2
 8008dfe:	9201      	str	r2, [sp, #4]
 8008e00:	f7fd ffe8 	bl	8006dd4 <_malloc_r>
 8008e04:	9a01      	ldr	r2, [sp, #4]
 8008e06:	4605      	mov	r5, r0
 8008e08:	b930      	cbnz	r0, 8008e18 <_calloc_r+0x24>
 8008e0a:	4628      	mov	r0, r5
 8008e0c:	b003      	add	sp, #12
 8008e0e:	bd30      	pop	{r4, r5, pc}
 8008e10:	220c      	movs	r2, #12
 8008e12:	6002      	str	r2, [r0, #0]
 8008e14:	2500      	movs	r5, #0
 8008e16:	e7f8      	b.n	8008e0a <_calloc_r+0x16>
 8008e18:	4621      	mov	r1, r4
 8008e1a:	f7fd f867 	bl	8005eec <memset>
 8008e1e:	e7f4      	b.n	8008e0a <_calloc_r+0x16>

08008e20 <rshift>:
 8008e20:	6903      	ldr	r3, [r0, #16]
 8008e22:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008e26:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008e2a:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008e2e:	f100 0414 	add.w	r4, r0, #20
 8008e32:	dd45      	ble.n	8008ec0 <rshift+0xa0>
 8008e34:	f011 011f 	ands.w	r1, r1, #31
 8008e38:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008e3c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008e40:	d10c      	bne.n	8008e5c <rshift+0x3c>
 8008e42:	f100 0710 	add.w	r7, r0, #16
 8008e46:	4629      	mov	r1, r5
 8008e48:	42b1      	cmp	r1, r6
 8008e4a:	d334      	bcc.n	8008eb6 <rshift+0x96>
 8008e4c:	1a9b      	subs	r3, r3, r2
 8008e4e:	009b      	lsls	r3, r3, #2
 8008e50:	1eea      	subs	r2, r5, #3
 8008e52:	4296      	cmp	r6, r2
 8008e54:	bf38      	it	cc
 8008e56:	2300      	movcc	r3, #0
 8008e58:	4423      	add	r3, r4
 8008e5a:	e015      	b.n	8008e88 <rshift+0x68>
 8008e5c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008e60:	f1c1 0820 	rsb	r8, r1, #32
 8008e64:	40cf      	lsrs	r7, r1
 8008e66:	f105 0e04 	add.w	lr, r5, #4
 8008e6a:	46a1      	mov	r9, r4
 8008e6c:	4576      	cmp	r6, lr
 8008e6e:	46f4      	mov	ip, lr
 8008e70:	d815      	bhi.n	8008e9e <rshift+0x7e>
 8008e72:	1a9a      	subs	r2, r3, r2
 8008e74:	0092      	lsls	r2, r2, #2
 8008e76:	3a04      	subs	r2, #4
 8008e78:	3501      	adds	r5, #1
 8008e7a:	42ae      	cmp	r6, r5
 8008e7c:	bf38      	it	cc
 8008e7e:	2200      	movcc	r2, #0
 8008e80:	18a3      	adds	r3, r4, r2
 8008e82:	50a7      	str	r7, [r4, r2]
 8008e84:	b107      	cbz	r7, 8008e88 <rshift+0x68>
 8008e86:	3304      	adds	r3, #4
 8008e88:	1b1a      	subs	r2, r3, r4
 8008e8a:	42a3      	cmp	r3, r4
 8008e8c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008e90:	bf08      	it	eq
 8008e92:	2300      	moveq	r3, #0
 8008e94:	6102      	str	r2, [r0, #16]
 8008e96:	bf08      	it	eq
 8008e98:	6143      	streq	r3, [r0, #20]
 8008e9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e9e:	f8dc c000 	ldr.w	ip, [ip]
 8008ea2:	fa0c fc08 	lsl.w	ip, ip, r8
 8008ea6:	ea4c 0707 	orr.w	r7, ip, r7
 8008eaa:	f849 7b04 	str.w	r7, [r9], #4
 8008eae:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008eb2:	40cf      	lsrs	r7, r1
 8008eb4:	e7da      	b.n	8008e6c <rshift+0x4c>
 8008eb6:	f851 cb04 	ldr.w	ip, [r1], #4
 8008eba:	f847 cf04 	str.w	ip, [r7, #4]!
 8008ebe:	e7c3      	b.n	8008e48 <rshift+0x28>
 8008ec0:	4623      	mov	r3, r4
 8008ec2:	e7e1      	b.n	8008e88 <rshift+0x68>

08008ec4 <__hexdig_fun>:
 8008ec4:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8008ec8:	2b09      	cmp	r3, #9
 8008eca:	d802      	bhi.n	8008ed2 <__hexdig_fun+0xe>
 8008ecc:	3820      	subs	r0, #32
 8008ece:	b2c0      	uxtb	r0, r0
 8008ed0:	4770      	bx	lr
 8008ed2:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8008ed6:	2b05      	cmp	r3, #5
 8008ed8:	d801      	bhi.n	8008ede <__hexdig_fun+0x1a>
 8008eda:	3847      	subs	r0, #71	; 0x47
 8008edc:	e7f7      	b.n	8008ece <__hexdig_fun+0xa>
 8008ede:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8008ee2:	2b05      	cmp	r3, #5
 8008ee4:	d801      	bhi.n	8008eea <__hexdig_fun+0x26>
 8008ee6:	3827      	subs	r0, #39	; 0x27
 8008ee8:	e7f1      	b.n	8008ece <__hexdig_fun+0xa>
 8008eea:	2000      	movs	r0, #0
 8008eec:	4770      	bx	lr
	...

08008ef0 <__gethex>:
 8008ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef4:	4617      	mov	r7, r2
 8008ef6:	680a      	ldr	r2, [r1, #0]
 8008ef8:	b085      	sub	sp, #20
 8008efa:	f102 0b02 	add.w	fp, r2, #2
 8008efe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8008f02:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8008f06:	4681      	mov	r9, r0
 8008f08:	468a      	mov	sl, r1
 8008f0a:	9302      	str	r3, [sp, #8]
 8008f0c:	32fe      	adds	r2, #254	; 0xfe
 8008f0e:	eb02 030b 	add.w	r3, r2, fp
 8008f12:	46d8      	mov	r8, fp
 8008f14:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008f18:	9301      	str	r3, [sp, #4]
 8008f1a:	2830      	cmp	r0, #48	; 0x30
 8008f1c:	d0f7      	beq.n	8008f0e <__gethex+0x1e>
 8008f1e:	f7ff ffd1 	bl	8008ec4 <__hexdig_fun>
 8008f22:	4604      	mov	r4, r0
 8008f24:	2800      	cmp	r0, #0
 8008f26:	d138      	bne.n	8008f9a <__gethex+0xaa>
 8008f28:	49a7      	ldr	r1, [pc, #668]	; (80091c8 <__gethex+0x2d8>)
 8008f2a:	2201      	movs	r2, #1
 8008f2c:	4640      	mov	r0, r8
 8008f2e:	f7ff fee7 	bl	8008d00 <strncmp>
 8008f32:	4606      	mov	r6, r0
 8008f34:	2800      	cmp	r0, #0
 8008f36:	d169      	bne.n	800900c <__gethex+0x11c>
 8008f38:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008f3c:	465d      	mov	r5, fp
 8008f3e:	f7ff ffc1 	bl	8008ec4 <__hexdig_fun>
 8008f42:	2800      	cmp	r0, #0
 8008f44:	d064      	beq.n	8009010 <__gethex+0x120>
 8008f46:	465a      	mov	r2, fp
 8008f48:	7810      	ldrb	r0, [r2, #0]
 8008f4a:	2830      	cmp	r0, #48	; 0x30
 8008f4c:	4690      	mov	r8, r2
 8008f4e:	f102 0201 	add.w	r2, r2, #1
 8008f52:	d0f9      	beq.n	8008f48 <__gethex+0x58>
 8008f54:	f7ff ffb6 	bl	8008ec4 <__hexdig_fun>
 8008f58:	2301      	movs	r3, #1
 8008f5a:	fab0 f480 	clz	r4, r0
 8008f5e:	0964      	lsrs	r4, r4, #5
 8008f60:	465e      	mov	r6, fp
 8008f62:	9301      	str	r3, [sp, #4]
 8008f64:	4642      	mov	r2, r8
 8008f66:	4615      	mov	r5, r2
 8008f68:	3201      	adds	r2, #1
 8008f6a:	7828      	ldrb	r0, [r5, #0]
 8008f6c:	f7ff ffaa 	bl	8008ec4 <__hexdig_fun>
 8008f70:	2800      	cmp	r0, #0
 8008f72:	d1f8      	bne.n	8008f66 <__gethex+0x76>
 8008f74:	4994      	ldr	r1, [pc, #592]	; (80091c8 <__gethex+0x2d8>)
 8008f76:	2201      	movs	r2, #1
 8008f78:	4628      	mov	r0, r5
 8008f7a:	f7ff fec1 	bl	8008d00 <strncmp>
 8008f7e:	b978      	cbnz	r0, 8008fa0 <__gethex+0xb0>
 8008f80:	b946      	cbnz	r6, 8008f94 <__gethex+0xa4>
 8008f82:	1c6e      	adds	r6, r5, #1
 8008f84:	4632      	mov	r2, r6
 8008f86:	4615      	mov	r5, r2
 8008f88:	3201      	adds	r2, #1
 8008f8a:	7828      	ldrb	r0, [r5, #0]
 8008f8c:	f7ff ff9a 	bl	8008ec4 <__hexdig_fun>
 8008f90:	2800      	cmp	r0, #0
 8008f92:	d1f8      	bne.n	8008f86 <__gethex+0x96>
 8008f94:	1b73      	subs	r3, r6, r5
 8008f96:	009e      	lsls	r6, r3, #2
 8008f98:	e004      	b.n	8008fa4 <__gethex+0xb4>
 8008f9a:	2400      	movs	r4, #0
 8008f9c:	4626      	mov	r6, r4
 8008f9e:	e7e1      	b.n	8008f64 <__gethex+0x74>
 8008fa0:	2e00      	cmp	r6, #0
 8008fa2:	d1f7      	bne.n	8008f94 <__gethex+0xa4>
 8008fa4:	782b      	ldrb	r3, [r5, #0]
 8008fa6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008faa:	2b50      	cmp	r3, #80	; 0x50
 8008fac:	d13d      	bne.n	800902a <__gethex+0x13a>
 8008fae:	786b      	ldrb	r3, [r5, #1]
 8008fb0:	2b2b      	cmp	r3, #43	; 0x2b
 8008fb2:	d02f      	beq.n	8009014 <__gethex+0x124>
 8008fb4:	2b2d      	cmp	r3, #45	; 0x2d
 8008fb6:	d031      	beq.n	800901c <__gethex+0x12c>
 8008fb8:	1c69      	adds	r1, r5, #1
 8008fba:	f04f 0b00 	mov.w	fp, #0
 8008fbe:	7808      	ldrb	r0, [r1, #0]
 8008fc0:	f7ff ff80 	bl	8008ec4 <__hexdig_fun>
 8008fc4:	1e42      	subs	r2, r0, #1
 8008fc6:	b2d2      	uxtb	r2, r2
 8008fc8:	2a18      	cmp	r2, #24
 8008fca:	d82e      	bhi.n	800902a <__gethex+0x13a>
 8008fcc:	f1a0 0210 	sub.w	r2, r0, #16
 8008fd0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008fd4:	f7ff ff76 	bl	8008ec4 <__hexdig_fun>
 8008fd8:	f100 3cff 	add.w	ip, r0, #4294967295
 8008fdc:	fa5f fc8c 	uxtb.w	ip, ip
 8008fe0:	f1bc 0f18 	cmp.w	ip, #24
 8008fe4:	d91d      	bls.n	8009022 <__gethex+0x132>
 8008fe6:	f1bb 0f00 	cmp.w	fp, #0
 8008fea:	d000      	beq.n	8008fee <__gethex+0xfe>
 8008fec:	4252      	negs	r2, r2
 8008fee:	4416      	add	r6, r2
 8008ff0:	f8ca 1000 	str.w	r1, [sl]
 8008ff4:	b1dc      	cbz	r4, 800902e <__gethex+0x13e>
 8008ff6:	9b01      	ldr	r3, [sp, #4]
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	bf14      	ite	ne
 8008ffc:	f04f 0800 	movne.w	r8, #0
 8009000:	f04f 0806 	moveq.w	r8, #6
 8009004:	4640      	mov	r0, r8
 8009006:	b005      	add	sp, #20
 8009008:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800900c:	4645      	mov	r5, r8
 800900e:	4626      	mov	r6, r4
 8009010:	2401      	movs	r4, #1
 8009012:	e7c7      	b.n	8008fa4 <__gethex+0xb4>
 8009014:	f04f 0b00 	mov.w	fp, #0
 8009018:	1ca9      	adds	r1, r5, #2
 800901a:	e7d0      	b.n	8008fbe <__gethex+0xce>
 800901c:	f04f 0b01 	mov.w	fp, #1
 8009020:	e7fa      	b.n	8009018 <__gethex+0x128>
 8009022:	230a      	movs	r3, #10
 8009024:	fb03 0002 	mla	r0, r3, r2, r0
 8009028:	e7d0      	b.n	8008fcc <__gethex+0xdc>
 800902a:	4629      	mov	r1, r5
 800902c:	e7e0      	b.n	8008ff0 <__gethex+0x100>
 800902e:	eba5 0308 	sub.w	r3, r5, r8
 8009032:	3b01      	subs	r3, #1
 8009034:	4621      	mov	r1, r4
 8009036:	2b07      	cmp	r3, #7
 8009038:	dc0a      	bgt.n	8009050 <__gethex+0x160>
 800903a:	4648      	mov	r0, r9
 800903c:	f7fd ff56 	bl	8006eec <_Balloc>
 8009040:	4604      	mov	r4, r0
 8009042:	b940      	cbnz	r0, 8009056 <__gethex+0x166>
 8009044:	4b61      	ldr	r3, [pc, #388]	; (80091cc <__gethex+0x2dc>)
 8009046:	4602      	mov	r2, r0
 8009048:	21e4      	movs	r1, #228	; 0xe4
 800904a:	4861      	ldr	r0, [pc, #388]	; (80091d0 <__gethex+0x2e0>)
 800904c:	f7ff feb4 	bl	8008db8 <__assert_func>
 8009050:	3101      	adds	r1, #1
 8009052:	105b      	asrs	r3, r3, #1
 8009054:	e7ef      	b.n	8009036 <__gethex+0x146>
 8009056:	f100 0a14 	add.w	sl, r0, #20
 800905a:	2300      	movs	r3, #0
 800905c:	495a      	ldr	r1, [pc, #360]	; (80091c8 <__gethex+0x2d8>)
 800905e:	f8cd a004 	str.w	sl, [sp, #4]
 8009062:	469b      	mov	fp, r3
 8009064:	45a8      	cmp	r8, r5
 8009066:	d342      	bcc.n	80090ee <__gethex+0x1fe>
 8009068:	9801      	ldr	r0, [sp, #4]
 800906a:	f840 bb04 	str.w	fp, [r0], #4
 800906e:	eba0 000a 	sub.w	r0, r0, sl
 8009072:	1080      	asrs	r0, r0, #2
 8009074:	6120      	str	r0, [r4, #16]
 8009076:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800907a:	4658      	mov	r0, fp
 800907c:	f7fe f828 	bl	80070d0 <__hi0bits>
 8009080:	683d      	ldr	r5, [r7, #0]
 8009082:	eba8 0000 	sub.w	r0, r8, r0
 8009086:	42a8      	cmp	r0, r5
 8009088:	dd59      	ble.n	800913e <__gethex+0x24e>
 800908a:	eba0 0805 	sub.w	r8, r0, r5
 800908e:	4641      	mov	r1, r8
 8009090:	4620      	mov	r0, r4
 8009092:	f7fe fbb7 	bl	8007804 <__any_on>
 8009096:	4683      	mov	fp, r0
 8009098:	b1b8      	cbz	r0, 80090ca <__gethex+0x1da>
 800909a:	f108 33ff 	add.w	r3, r8, #4294967295
 800909e:	1159      	asrs	r1, r3, #5
 80090a0:	f003 021f 	and.w	r2, r3, #31
 80090a4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80090a8:	f04f 0b01 	mov.w	fp, #1
 80090ac:	fa0b f202 	lsl.w	r2, fp, r2
 80090b0:	420a      	tst	r2, r1
 80090b2:	d00a      	beq.n	80090ca <__gethex+0x1da>
 80090b4:	455b      	cmp	r3, fp
 80090b6:	dd06      	ble.n	80090c6 <__gethex+0x1d6>
 80090b8:	f1a8 0102 	sub.w	r1, r8, #2
 80090bc:	4620      	mov	r0, r4
 80090be:	f7fe fba1 	bl	8007804 <__any_on>
 80090c2:	2800      	cmp	r0, #0
 80090c4:	d138      	bne.n	8009138 <__gethex+0x248>
 80090c6:	f04f 0b02 	mov.w	fp, #2
 80090ca:	4641      	mov	r1, r8
 80090cc:	4620      	mov	r0, r4
 80090ce:	f7ff fea7 	bl	8008e20 <rshift>
 80090d2:	4446      	add	r6, r8
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	42b3      	cmp	r3, r6
 80090d8:	da41      	bge.n	800915e <__gethex+0x26e>
 80090da:	4621      	mov	r1, r4
 80090dc:	4648      	mov	r0, r9
 80090de:	f7fd ff45 	bl	8006f6c <_Bfree>
 80090e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80090e4:	2300      	movs	r3, #0
 80090e6:	6013      	str	r3, [r2, #0]
 80090e8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80090ec:	e78a      	b.n	8009004 <__gethex+0x114>
 80090ee:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80090f2:	2a2e      	cmp	r2, #46	; 0x2e
 80090f4:	d014      	beq.n	8009120 <__gethex+0x230>
 80090f6:	2b20      	cmp	r3, #32
 80090f8:	d106      	bne.n	8009108 <__gethex+0x218>
 80090fa:	9b01      	ldr	r3, [sp, #4]
 80090fc:	f843 bb04 	str.w	fp, [r3], #4
 8009100:	f04f 0b00 	mov.w	fp, #0
 8009104:	9301      	str	r3, [sp, #4]
 8009106:	465b      	mov	r3, fp
 8009108:	7828      	ldrb	r0, [r5, #0]
 800910a:	9303      	str	r3, [sp, #12]
 800910c:	f7ff feda 	bl	8008ec4 <__hexdig_fun>
 8009110:	9b03      	ldr	r3, [sp, #12]
 8009112:	f000 000f 	and.w	r0, r0, #15
 8009116:	4098      	lsls	r0, r3
 8009118:	ea4b 0b00 	orr.w	fp, fp, r0
 800911c:	3304      	adds	r3, #4
 800911e:	e7a1      	b.n	8009064 <__gethex+0x174>
 8009120:	45a8      	cmp	r8, r5
 8009122:	d8e8      	bhi.n	80090f6 <__gethex+0x206>
 8009124:	2201      	movs	r2, #1
 8009126:	4628      	mov	r0, r5
 8009128:	9303      	str	r3, [sp, #12]
 800912a:	f7ff fde9 	bl	8008d00 <strncmp>
 800912e:	4926      	ldr	r1, [pc, #152]	; (80091c8 <__gethex+0x2d8>)
 8009130:	9b03      	ldr	r3, [sp, #12]
 8009132:	2800      	cmp	r0, #0
 8009134:	d1df      	bne.n	80090f6 <__gethex+0x206>
 8009136:	e795      	b.n	8009064 <__gethex+0x174>
 8009138:	f04f 0b03 	mov.w	fp, #3
 800913c:	e7c5      	b.n	80090ca <__gethex+0x1da>
 800913e:	da0b      	bge.n	8009158 <__gethex+0x268>
 8009140:	eba5 0800 	sub.w	r8, r5, r0
 8009144:	4621      	mov	r1, r4
 8009146:	4642      	mov	r2, r8
 8009148:	4648      	mov	r0, r9
 800914a:	f7fe f929 	bl	80073a0 <__lshift>
 800914e:	eba6 0608 	sub.w	r6, r6, r8
 8009152:	4604      	mov	r4, r0
 8009154:	f100 0a14 	add.w	sl, r0, #20
 8009158:	f04f 0b00 	mov.w	fp, #0
 800915c:	e7ba      	b.n	80090d4 <__gethex+0x1e4>
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	42b3      	cmp	r3, r6
 8009162:	dd73      	ble.n	800924c <__gethex+0x35c>
 8009164:	1b9e      	subs	r6, r3, r6
 8009166:	42b5      	cmp	r5, r6
 8009168:	dc34      	bgt.n	80091d4 <__gethex+0x2e4>
 800916a:	68fb      	ldr	r3, [r7, #12]
 800916c:	2b02      	cmp	r3, #2
 800916e:	d023      	beq.n	80091b8 <__gethex+0x2c8>
 8009170:	2b03      	cmp	r3, #3
 8009172:	d025      	beq.n	80091c0 <__gethex+0x2d0>
 8009174:	2b01      	cmp	r3, #1
 8009176:	d115      	bne.n	80091a4 <__gethex+0x2b4>
 8009178:	42b5      	cmp	r5, r6
 800917a:	d113      	bne.n	80091a4 <__gethex+0x2b4>
 800917c:	2d01      	cmp	r5, #1
 800917e:	d10b      	bne.n	8009198 <__gethex+0x2a8>
 8009180:	9a02      	ldr	r2, [sp, #8]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6013      	str	r3, [r2, #0]
 8009186:	2301      	movs	r3, #1
 8009188:	6123      	str	r3, [r4, #16]
 800918a:	f8ca 3000 	str.w	r3, [sl]
 800918e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009190:	f04f 0862 	mov.w	r8, #98	; 0x62
 8009194:	601c      	str	r4, [r3, #0]
 8009196:	e735      	b.n	8009004 <__gethex+0x114>
 8009198:	1e69      	subs	r1, r5, #1
 800919a:	4620      	mov	r0, r4
 800919c:	f7fe fb32 	bl	8007804 <__any_on>
 80091a0:	2800      	cmp	r0, #0
 80091a2:	d1ed      	bne.n	8009180 <__gethex+0x290>
 80091a4:	4621      	mov	r1, r4
 80091a6:	4648      	mov	r0, r9
 80091a8:	f7fd fee0 	bl	8006f6c <_Bfree>
 80091ac:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80091ae:	2300      	movs	r3, #0
 80091b0:	6013      	str	r3, [r2, #0]
 80091b2:	f04f 0850 	mov.w	r8, #80	; 0x50
 80091b6:	e725      	b.n	8009004 <__gethex+0x114>
 80091b8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d1f2      	bne.n	80091a4 <__gethex+0x2b4>
 80091be:	e7df      	b.n	8009180 <__gethex+0x290>
 80091c0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d1dc      	bne.n	8009180 <__gethex+0x290>
 80091c6:	e7ed      	b.n	80091a4 <__gethex+0x2b4>
 80091c8:	080099fc 	.word	0x080099fc
 80091cc:	08009895 	.word	0x08009895
 80091d0:	08009ba6 	.word	0x08009ba6
 80091d4:	f106 38ff 	add.w	r8, r6, #4294967295
 80091d8:	f1bb 0f00 	cmp.w	fp, #0
 80091dc:	d133      	bne.n	8009246 <__gethex+0x356>
 80091de:	f1b8 0f00 	cmp.w	r8, #0
 80091e2:	d004      	beq.n	80091ee <__gethex+0x2fe>
 80091e4:	4641      	mov	r1, r8
 80091e6:	4620      	mov	r0, r4
 80091e8:	f7fe fb0c 	bl	8007804 <__any_on>
 80091ec:	4683      	mov	fp, r0
 80091ee:	ea4f 1268 	mov.w	r2, r8, asr #5
 80091f2:	2301      	movs	r3, #1
 80091f4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80091f8:	f008 081f 	and.w	r8, r8, #31
 80091fc:	fa03 f308 	lsl.w	r3, r3, r8
 8009200:	4213      	tst	r3, r2
 8009202:	4631      	mov	r1, r6
 8009204:	4620      	mov	r0, r4
 8009206:	bf18      	it	ne
 8009208:	f04b 0b02 	orrne.w	fp, fp, #2
 800920c:	1bad      	subs	r5, r5, r6
 800920e:	f7ff fe07 	bl	8008e20 <rshift>
 8009212:	687e      	ldr	r6, [r7, #4]
 8009214:	f04f 0802 	mov.w	r8, #2
 8009218:	f1bb 0f00 	cmp.w	fp, #0
 800921c:	d04a      	beq.n	80092b4 <__gethex+0x3c4>
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	2b02      	cmp	r3, #2
 8009222:	d016      	beq.n	8009252 <__gethex+0x362>
 8009224:	2b03      	cmp	r3, #3
 8009226:	d018      	beq.n	800925a <__gethex+0x36a>
 8009228:	2b01      	cmp	r3, #1
 800922a:	d109      	bne.n	8009240 <__gethex+0x350>
 800922c:	f01b 0f02 	tst.w	fp, #2
 8009230:	d006      	beq.n	8009240 <__gethex+0x350>
 8009232:	f8da 3000 	ldr.w	r3, [sl]
 8009236:	ea4b 0b03 	orr.w	fp, fp, r3
 800923a:	f01b 0f01 	tst.w	fp, #1
 800923e:	d10f      	bne.n	8009260 <__gethex+0x370>
 8009240:	f048 0810 	orr.w	r8, r8, #16
 8009244:	e036      	b.n	80092b4 <__gethex+0x3c4>
 8009246:	f04f 0b01 	mov.w	fp, #1
 800924a:	e7d0      	b.n	80091ee <__gethex+0x2fe>
 800924c:	f04f 0801 	mov.w	r8, #1
 8009250:	e7e2      	b.n	8009218 <__gethex+0x328>
 8009252:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009254:	f1c3 0301 	rsb	r3, r3, #1
 8009258:	930f      	str	r3, [sp, #60]	; 0x3c
 800925a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800925c:	2b00      	cmp	r3, #0
 800925e:	d0ef      	beq.n	8009240 <__gethex+0x350>
 8009260:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009264:	f104 0214 	add.w	r2, r4, #20
 8009268:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800926c:	9301      	str	r3, [sp, #4]
 800926e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8009272:	2300      	movs	r3, #0
 8009274:	4694      	mov	ip, r2
 8009276:	f852 1b04 	ldr.w	r1, [r2], #4
 800927a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800927e:	d01e      	beq.n	80092be <__gethex+0x3ce>
 8009280:	3101      	adds	r1, #1
 8009282:	f8cc 1000 	str.w	r1, [ip]
 8009286:	f1b8 0f02 	cmp.w	r8, #2
 800928a:	f104 0214 	add.w	r2, r4, #20
 800928e:	d13d      	bne.n	800930c <__gethex+0x41c>
 8009290:	683b      	ldr	r3, [r7, #0]
 8009292:	3b01      	subs	r3, #1
 8009294:	42ab      	cmp	r3, r5
 8009296:	d10b      	bne.n	80092b0 <__gethex+0x3c0>
 8009298:	1169      	asrs	r1, r5, #5
 800929a:	2301      	movs	r3, #1
 800929c:	f005 051f 	and.w	r5, r5, #31
 80092a0:	fa03 f505 	lsl.w	r5, r3, r5
 80092a4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80092a8:	421d      	tst	r5, r3
 80092aa:	bf18      	it	ne
 80092ac:	f04f 0801 	movne.w	r8, #1
 80092b0:	f048 0820 	orr.w	r8, r8, #32
 80092b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80092b6:	601c      	str	r4, [r3, #0]
 80092b8:	9b02      	ldr	r3, [sp, #8]
 80092ba:	601e      	str	r6, [r3, #0]
 80092bc:	e6a2      	b.n	8009004 <__gethex+0x114>
 80092be:	4290      	cmp	r0, r2
 80092c0:	f842 3c04 	str.w	r3, [r2, #-4]
 80092c4:	d8d6      	bhi.n	8009274 <__gethex+0x384>
 80092c6:	68a2      	ldr	r2, [r4, #8]
 80092c8:	4593      	cmp	fp, r2
 80092ca:	db17      	blt.n	80092fc <__gethex+0x40c>
 80092cc:	6861      	ldr	r1, [r4, #4]
 80092ce:	4648      	mov	r0, r9
 80092d0:	3101      	adds	r1, #1
 80092d2:	f7fd fe0b 	bl	8006eec <_Balloc>
 80092d6:	4682      	mov	sl, r0
 80092d8:	b918      	cbnz	r0, 80092e2 <__gethex+0x3f2>
 80092da:	4b1b      	ldr	r3, [pc, #108]	; (8009348 <__gethex+0x458>)
 80092dc:	4602      	mov	r2, r0
 80092de:	2184      	movs	r1, #132	; 0x84
 80092e0:	e6b3      	b.n	800904a <__gethex+0x15a>
 80092e2:	6922      	ldr	r2, [r4, #16]
 80092e4:	3202      	adds	r2, #2
 80092e6:	f104 010c 	add.w	r1, r4, #12
 80092ea:	0092      	lsls	r2, r2, #2
 80092ec:	300c      	adds	r0, #12
 80092ee:	f7ff fd4b 	bl	8008d88 <memcpy>
 80092f2:	4621      	mov	r1, r4
 80092f4:	4648      	mov	r0, r9
 80092f6:	f7fd fe39 	bl	8006f6c <_Bfree>
 80092fa:	4654      	mov	r4, sl
 80092fc:	6922      	ldr	r2, [r4, #16]
 80092fe:	1c51      	adds	r1, r2, #1
 8009300:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8009304:	6121      	str	r1, [r4, #16]
 8009306:	2101      	movs	r1, #1
 8009308:	6151      	str	r1, [r2, #20]
 800930a:	e7bc      	b.n	8009286 <__gethex+0x396>
 800930c:	6921      	ldr	r1, [r4, #16]
 800930e:	4559      	cmp	r1, fp
 8009310:	dd0b      	ble.n	800932a <__gethex+0x43a>
 8009312:	2101      	movs	r1, #1
 8009314:	4620      	mov	r0, r4
 8009316:	f7ff fd83 	bl	8008e20 <rshift>
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	3601      	adds	r6, #1
 800931e:	42b3      	cmp	r3, r6
 8009320:	f6ff aedb 	blt.w	80090da <__gethex+0x1ea>
 8009324:	f04f 0801 	mov.w	r8, #1
 8009328:	e7c2      	b.n	80092b0 <__gethex+0x3c0>
 800932a:	f015 051f 	ands.w	r5, r5, #31
 800932e:	d0f9      	beq.n	8009324 <__gethex+0x434>
 8009330:	9b01      	ldr	r3, [sp, #4]
 8009332:	441a      	add	r2, r3
 8009334:	f1c5 0520 	rsb	r5, r5, #32
 8009338:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800933c:	f7fd fec8 	bl	80070d0 <__hi0bits>
 8009340:	42a8      	cmp	r0, r5
 8009342:	dbe6      	blt.n	8009312 <__gethex+0x422>
 8009344:	e7ee      	b.n	8009324 <__gethex+0x434>
 8009346:	bf00      	nop
 8009348:	08009895 	.word	0x08009895

0800934c <L_shift>:
 800934c:	f1c2 0208 	rsb	r2, r2, #8
 8009350:	0092      	lsls	r2, r2, #2
 8009352:	b570      	push	{r4, r5, r6, lr}
 8009354:	f1c2 0620 	rsb	r6, r2, #32
 8009358:	6843      	ldr	r3, [r0, #4]
 800935a:	6804      	ldr	r4, [r0, #0]
 800935c:	fa03 f506 	lsl.w	r5, r3, r6
 8009360:	432c      	orrs	r4, r5
 8009362:	40d3      	lsrs	r3, r2
 8009364:	6004      	str	r4, [r0, #0]
 8009366:	f840 3f04 	str.w	r3, [r0, #4]!
 800936a:	4288      	cmp	r0, r1
 800936c:	d3f4      	bcc.n	8009358 <L_shift+0xc>
 800936e:	bd70      	pop	{r4, r5, r6, pc}

08009370 <__match>:
 8009370:	b530      	push	{r4, r5, lr}
 8009372:	6803      	ldr	r3, [r0, #0]
 8009374:	3301      	adds	r3, #1
 8009376:	f811 4b01 	ldrb.w	r4, [r1], #1
 800937a:	b914      	cbnz	r4, 8009382 <__match+0x12>
 800937c:	6003      	str	r3, [r0, #0]
 800937e:	2001      	movs	r0, #1
 8009380:	bd30      	pop	{r4, r5, pc}
 8009382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009386:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800938a:	2d19      	cmp	r5, #25
 800938c:	bf98      	it	ls
 800938e:	3220      	addls	r2, #32
 8009390:	42a2      	cmp	r2, r4
 8009392:	d0f0      	beq.n	8009376 <__match+0x6>
 8009394:	2000      	movs	r0, #0
 8009396:	e7f3      	b.n	8009380 <__match+0x10>

08009398 <__hexnan>:
 8009398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800939c:	680b      	ldr	r3, [r1, #0]
 800939e:	6801      	ldr	r1, [r0, #0]
 80093a0:	115e      	asrs	r6, r3, #5
 80093a2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 80093a6:	f013 031f 	ands.w	r3, r3, #31
 80093aa:	b087      	sub	sp, #28
 80093ac:	bf18      	it	ne
 80093ae:	3604      	addne	r6, #4
 80093b0:	2500      	movs	r5, #0
 80093b2:	1f37      	subs	r7, r6, #4
 80093b4:	4682      	mov	sl, r0
 80093b6:	4690      	mov	r8, r2
 80093b8:	9301      	str	r3, [sp, #4]
 80093ba:	f846 5c04 	str.w	r5, [r6, #-4]
 80093be:	46b9      	mov	r9, r7
 80093c0:	463c      	mov	r4, r7
 80093c2:	9502      	str	r5, [sp, #8]
 80093c4:	46ab      	mov	fp, r5
 80093c6:	784a      	ldrb	r2, [r1, #1]
 80093c8:	1c4b      	adds	r3, r1, #1
 80093ca:	9303      	str	r3, [sp, #12]
 80093cc:	b342      	cbz	r2, 8009420 <__hexnan+0x88>
 80093ce:	4610      	mov	r0, r2
 80093d0:	9105      	str	r1, [sp, #20]
 80093d2:	9204      	str	r2, [sp, #16]
 80093d4:	f7ff fd76 	bl	8008ec4 <__hexdig_fun>
 80093d8:	2800      	cmp	r0, #0
 80093da:	d14f      	bne.n	800947c <__hexnan+0xe4>
 80093dc:	9a04      	ldr	r2, [sp, #16]
 80093de:	9905      	ldr	r1, [sp, #20]
 80093e0:	2a20      	cmp	r2, #32
 80093e2:	d818      	bhi.n	8009416 <__hexnan+0x7e>
 80093e4:	9b02      	ldr	r3, [sp, #8]
 80093e6:	459b      	cmp	fp, r3
 80093e8:	dd13      	ble.n	8009412 <__hexnan+0x7a>
 80093ea:	454c      	cmp	r4, r9
 80093ec:	d206      	bcs.n	80093fc <__hexnan+0x64>
 80093ee:	2d07      	cmp	r5, #7
 80093f0:	dc04      	bgt.n	80093fc <__hexnan+0x64>
 80093f2:	462a      	mov	r2, r5
 80093f4:	4649      	mov	r1, r9
 80093f6:	4620      	mov	r0, r4
 80093f8:	f7ff ffa8 	bl	800934c <L_shift>
 80093fc:	4544      	cmp	r4, r8
 80093fe:	d950      	bls.n	80094a2 <__hexnan+0x10a>
 8009400:	2300      	movs	r3, #0
 8009402:	f1a4 0904 	sub.w	r9, r4, #4
 8009406:	f844 3c04 	str.w	r3, [r4, #-4]
 800940a:	f8cd b008 	str.w	fp, [sp, #8]
 800940e:	464c      	mov	r4, r9
 8009410:	461d      	mov	r5, r3
 8009412:	9903      	ldr	r1, [sp, #12]
 8009414:	e7d7      	b.n	80093c6 <__hexnan+0x2e>
 8009416:	2a29      	cmp	r2, #41	; 0x29
 8009418:	d155      	bne.n	80094c6 <__hexnan+0x12e>
 800941a:	3102      	adds	r1, #2
 800941c:	f8ca 1000 	str.w	r1, [sl]
 8009420:	f1bb 0f00 	cmp.w	fp, #0
 8009424:	d04f      	beq.n	80094c6 <__hexnan+0x12e>
 8009426:	454c      	cmp	r4, r9
 8009428:	d206      	bcs.n	8009438 <__hexnan+0xa0>
 800942a:	2d07      	cmp	r5, #7
 800942c:	dc04      	bgt.n	8009438 <__hexnan+0xa0>
 800942e:	462a      	mov	r2, r5
 8009430:	4649      	mov	r1, r9
 8009432:	4620      	mov	r0, r4
 8009434:	f7ff ff8a 	bl	800934c <L_shift>
 8009438:	4544      	cmp	r4, r8
 800943a:	d934      	bls.n	80094a6 <__hexnan+0x10e>
 800943c:	f1a8 0204 	sub.w	r2, r8, #4
 8009440:	4623      	mov	r3, r4
 8009442:	f853 1b04 	ldr.w	r1, [r3], #4
 8009446:	f842 1f04 	str.w	r1, [r2, #4]!
 800944a:	429f      	cmp	r7, r3
 800944c:	d2f9      	bcs.n	8009442 <__hexnan+0xaa>
 800944e:	1b3b      	subs	r3, r7, r4
 8009450:	f023 0303 	bic.w	r3, r3, #3
 8009454:	3304      	adds	r3, #4
 8009456:	3e03      	subs	r6, #3
 8009458:	3401      	adds	r4, #1
 800945a:	42a6      	cmp	r6, r4
 800945c:	bf38      	it	cc
 800945e:	2304      	movcc	r3, #4
 8009460:	4443      	add	r3, r8
 8009462:	2200      	movs	r2, #0
 8009464:	f843 2b04 	str.w	r2, [r3], #4
 8009468:	429f      	cmp	r7, r3
 800946a:	d2fb      	bcs.n	8009464 <__hexnan+0xcc>
 800946c:	683b      	ldr	r3, [r7, #0]
 800946e:	b91b      	cbnz	r3, 8009478 <__hexnan+0xe0>
 8009470:	4547      	cmp	r7, r8
 8009472:	d126      	bne.n	80094c2 <__hexnan+0x12a>
 8009474:	2301      	movs	r3, #1
 8009476:	603b      	str	r3, [r7, #0]
 8009478:	2005      	movs	r0, #5
 800947a:	e025      	b.n	80094c8 <__hexnan+0x130>
 800947c:	3501      	adds	r5, #1
 800947e:	2d08      	cmp	r5, #8
 8009480:	f10b 0b01 	add.w	fp, fp, #1
 8009484:	dd06      	ble.n	8009494 <__hexnan+0xfc>
 8009486:	4544      	cmp	r4, r8
 8009488:	d9c3      	bls.n	8009412 <__hexnan+0x7a>
 800948a:	2300      	movs	r3, #0
 800948c:	f844 3c04 	str.w	r3, [r4, #-4]
 8009490:	2501      	movs	r5, #1
 8009492:	3c04      	subs	r4, #4
 8009494:	6822      	ldr	r2, [r4, #0]
 8009496:	f000 000f 	and.w	r0, r0, #15
 800949a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800949e:	6020      	str	r0, [r4, #0]
 80094a0:	e7b7      	b.n	8009412 <__hexnan+0x7a>
 80094a2:	2508      	movs	r5, #8
 80094a4:	e7b5      	b.n	8009412 <__hexnan+0x7a>
 80094a6:	9b01      	ldr	r3, [sp, #4]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d0df      	beq.n	800946c <__hexnan+0xd4>
 80094ac:	f1c3 0320 	rsb	r3, r3, #32
 80094b0:	f04f 32ff 	mov.w	r2, #4294967295
 80094b4:	40da      	lsrs	r2, r3
 80094b6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80094ba:	4013      	ands	r3, r2
 80094bc:	f846 3c04 	str.w	r3, [r6, #-4]
 80094c0:	e7d4      	b.n	800946c <__hexnan+0xd4>
 80094c2:	3f04      	subs	r7, #4
 80094c4:	e7d2      	b.n	800946c <__hexnan+0xd4>
 80094c6:	2004      	movs	r0, #4
 80094c8:	b007      	add	sp, #28
 80094ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080094ce <__ascii_mbtowc>:
 80094ce:	b082      	sub	sp, #8
 80094d0:	b901      	cbnz	r1, 80094d4 <__ascii_mbtowc+0x6>
 80094d2:	a901      	add	r1, sp, #4
 80094d4:	b142      	cbz	r2, 80094e8 <__ascii_mbtowc+0x1a>
 80094d6:	b14b      	cbz	r3, 80094ec <__ascii_mbtowc+0x1e>
 80094d8:	7813      	ldrb	r3, [r2, #0]
 80094da:	600b      	str	r3, [r1, #0]
 80094dc:	7812      	ldrb	r2, [r2, #0]
 80094de:	1e10      	subs	r0, r2, #0
 80094e0:	bf18      	it	ne
 80094e2:	2001      	movne	r0, #1
 80094e4:	b002      	add	sp, #8
 80094e6:	4770      	bx	lr
 80094e8:	4610      	mov	r0, r2
 80094ea:	e7fb      	b.n	80094e4 <__ascii_mbtowc+0x16>
 80094ec:	f06f 0001 	mvn.w	r0, #1
 80094f0:	e7f8      	b.n	80094e4 <__ascii_mbtowc+0x16>

080094f2 <_realloc_r>:
 80094f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80094f6:	4680      	mov	r8, r0
 80094f8:	4614      	mov	r4, r2
 80094fa:	460e      	mov	r6, r1
 80094fc:	b921      	cbnz	r1, 8009508 <_realloc_r+0x16>
 80094fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009502:	4611      	mov	r1, r2
 8009504:	f7fd bc66 	b.w	8006dd4 <_malloc_r>
 8009508:	b92a      	cbnz	r2, 8009516 <_realloc_r+0x24>
 800950a:	f7fd fbef 	bl	8006cec <_free_r>
 800950e:	4625      	mov	r5, r4
 8009510:	4628      	mov	r0, r5
 8009512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009516:	f000 f842 	bl	800959e <_malloc_usable_size_r>
 800951a:	4284      	cmp	r4, r0
 800951c:	4607      	mov	r7, r0
 800951e:	d802      	bhi.n	8009526 <_realloc_r+0x34>
 8009520:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009524:	d812      	bhi.n	800954c <_realloc_r+0x5a>
 8009526:	4621      	mov	r1, r4
 8009528:	4640      	mov	r0, r8
 800952a:	f7fd fc53 	bl	8006dd4 <_malloc_r>
 800952e:	4605      	mov	r5, r0
 8009530:	2800      	cmp	r0, #0
 8009532:	d0ed      	beq.n	8009510 <_realloc_r+0x1e>
 8009534:	42bc      	cmp	r4, r7
 8009536:	4622      	mov	r2, r4
 8009538:	4631      	mov	r1, r6
 800953a:	bf28      	it	cs
 800953c:	463a      	movcs	r2, r7
 800953e:	f7ff fc23 	bl	8008d88 <memcpy>
 8009542:	4631      	mov	r1, r6
 8009544:	4640      	mov	r0, r8
 8009546:	f7fd fbd1 	bl	8006cec <_free_r>
 800954a:	e7e1      	b.n	8009510 <_realloc_r+0x1e>
 800954c:	4635      	mov	r5, r6
 800954e:	e7df      	b.n	8009510 <_realloc_r+0x1e>

08009550 <__ascii_wctomb>:
 8009550:	b149      	cbz	r1, 8009566 <__ascii_wctomb+0x16>
 8009552:	2aff      	cmp	r2, #255	; 0xff
 8009554:	bf85      	ittet	hi
 8009556:	238a      	movhi	r3, #138	; 0x8a
 8009558:	6003      	strhi	r3, [r0, #0]
 800955a:	700a      	strbls	r2, [r1, #0]
 800955c:	f04f 30ff 	movhi.w	r0, #4294967295
 8009560:	bf98      	it	ls
 8009562:	2001      	movls	r0, #1
 8009564:	4770      	bx	lr
 8009566:	4608      	mov	r0, r1
 8009568:	4770      	bx	lr
	...

0800956c <fiprintf>:
 800956c:	b40e      	push	{r1, r2, r3}
 800956e:	b503      	push	{r0, r1, lr}
 8009570:	4601      	mov	r1, r0
 8009572:	ab03      	add	r3, sp, #12
 8009574:	4805      	ldr	r0, [pc, #20]	; (800958c <fiprintf+0x20>)
 8009576:	f853 2b04 	ldr.w	r2, [r3], #4
 800957a:	6800      	ldr	r0, [r0, #0]
 800957c:	9301      	str	r3, [sp, #4]
 800957e:	f7ff f97b 	bl	8008878 <_vfiprintf_r>
 8009582:	b002      	add	sp, #8
 8009584:	f85d eb04 	ldr.w	lr, [sp], #4
 8009588:	b003      	add	sp, #12
 800958a:	4770      	bx	lr
 800958c:	20000078 	.word	0x20000078

08009590 <abort>:
 8009590:	b508      	push	{r3, lr}
 8009592:	2006      	movs	r0, #6
 8009594:	f000 f834 	bl	8009600 <raise>
 8009598:	2001      	movs	r0, #1
 800959a:	f7f8 f9b1 	bl	8001900 <_exit>

0800959e <_malloc_usable_size_r>:
 800959e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095a2:	1f18      	subs	r0, r3, #4
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	bfbc      	itt	lt
 80095a8:	580b      	ldrlt	r3, [r1, r0]
 80095aa:	18c0      	addlt	r0, r0, r3
 80095ac:	4770      	bx	lr

080095ae <_raise_r>:
 80095ae:	291f      	cmp	r1, #31
 80095b0:	b538      	push	{r3, r4, r5, lr}
 80095b2:	4604      	mov	r4, r0
 80095b4:	460d      	mov	r5, r1
 80095b6:	d904      	bls.n	80095c2 <_raise_r+0x14>
 80095b8:	2316      	movs	r3, #22
 80095ba:	6003      	str	r3, [r0, #0]
 80095bc:	f04f 30ff 	mov.w	r0, #4294967295
 80095c0:	bd38      	pop	{r3, r4, r5, pc}
 80095c2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80095c4:	b112      	cbz	r2, 80095cc <_raise_r+0x1e>
 80095c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80095ca:	b94b      	cbnz	r3, 80095e0 <_raise_r+0x32>
 80095cc:	4620      	mov	r0, r4
 80095ce:	f000 f831 	bl	8009634 <_getpid_r>
 80095d2:	462a      	mov	r2, r5
 80095d4:	4601      	mov	r1, r0
 80095d6:	4620      	mov	r0, r4
 80095d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80095dc:	f000 b818 	b.w	8009610 <_kill_r>
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d00a      	beq.n	80095fa <_raise_r+0x4c>
 80095e4:	1c59      	adds	r1, r3, #1
 80095e6:	d103      	bne.n	80095f0 <_raise_r+0x42>
 80095e8:	2316      	movs	r3, #22
 80095ea:	6003      	str	r3, [r0, #0]
 80095ec:	2001      	movs	r0, #1
 80095ee:	e7e7      	b.n	80095c0 <_raise_r+0x12>
 80095f0:	2400      	movs	r4, #0
 80095f2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80095f6:	4628      	mov	r0, r5
 80095f8:	4798      	blx	r3
 80095fa:	2000      	movs	r0, #0
 80095fc:	e7e0      	b.n	80095c0 <_raise_r+0x12>
	...

08009600 <raise>:
 8009600:	4b02      	ldr	r3, [pc, #8]	; (800960c <raise+0xc>)
 8009602:	4601      	mov	r1, r0
 8009604:	6818      	ldr	r0, [r3, #0]
 8009606:	f7ff bfd2 	b.w	80095ae <_raise_r>
 800960a:	bf00      	nop
 800960c:	20000078 	.word	0x20000078

08009610 <_kill_r>:
 8009610:	b538      	push	{r3, r4, r5, lr}
 8009612:	4d07      	ldr	r5, [pc, #28]	; (8009630 <_kill_r+0x20>)
 8009614:	2300      	movs	r3, #0
 8009616:	4604      	mov	r4, r0
 8009618:	4608      	mov	r0, r1
 800961a:	4611      	mov	r1, r2
 800961c:	602b      	str	r3, [r5, #0]
 800961e:	f7f8 f95f 	bl	80018e0 <_kill>
 8009622:	1c43      	adds	r3, r0, #1
 8009624:	d102      	bne.n	800962c <_kill_r+0x1c>
 8009626:	682b      	ldr	r3, [r5, #0]
 8009628:	b103      	cbz	r3, 800962c <_kill_r+0x1c>
 800962a:	6023      	str	r3, [r4, #0]
 800962c:	bd38      	pop	{r3, r4, r5, pc}
 800962e:	bf00      	nop
 8009630:	2000051c 	.word	0x2000051c

08009634 <_getpid_r>:
 8009634:	f7f8 b94c 	b.w	80018d0 <_getpid>

08009638 <_init>:
 8009638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800963a:	bf00      	nop
 800963c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800963e:	bc08      	pop	{r3}
 8009640:	469e      	mov	lr, r3
 8009642:	4770      	bx	lr

08009644 <_fini>:
 8009644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009646:	bf00      	nop
 8009648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800964a:	bc08      	pop	{r3}
 800964c:	469e      	mov	lr, r3
 800964e:	4770      	bx	lr
