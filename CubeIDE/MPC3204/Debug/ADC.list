
ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000074f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000044c  08007688  08007688  00017688  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ad4  08007ad4  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  08007ad4  08007ad4  00017ad4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007adc  08007adc  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007adc  08007adc  00017adc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ae0  08007ae0  00017ae0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08007ae4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000400  200001dc  08007cc0  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005dc  08007cc0  000205dc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000115b9  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000023e4  00000000  00000000  00031808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010e8  00000000  00000000  00033bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d36  00000000  00000000  00034cd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022013  00000000  00000000  00035a0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001394f  00000000  00000000  00057a21  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd5c5  00000000  00000000  0006b370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005964  00000000  00000000  00138938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0013e29c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007670 	.word	0x08007670

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08007670 	.word	0x08007670

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b970 	b.w	8000ea0 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9e08      	ldr	r6, [sp, #32]
 8000bde:	460d      	mov	r5, r1
 8000be0:	4604      	mov	r4, r0
 8000be2:	460f      	mov	r7, r1
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d14a      	bne.n	8000c7e <__udivmoddi4+0xa6>
 8000be8:	428a      	cmp	r2, r1
 8000bea:	4694      	mov	ip, r2
 8000bec:	d965      	bls.n	8000cba <__udivmoddi4+0xe2>
 8000bee:	fab2 f382 	clz	r3, r2
 8000bf2:	b143      	cbz	r3, 8000c06 <__udivmoddi4+0x2e>
 8000bf4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000bf8:	f1c3 0220 	rsb	r2, r3, #32
 8000bfc:	409f      	lsls	r7, r3
 8000bfe:	fa20 f202 	lsr.w	r2, r0, r2
 8000c02:	4317      	orrs	r7, r2
 8000c04:	409c      	lsls	r4, r3
 8000c06:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c0a:	fa1f f58c 	uxth.w	r5, ip
 8000c0e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c12:	0c22      	lsrs	r2, r4, #16
 8000c14:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c18:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c1c:	fb01 f005 	mul.w	r0, r1, r5
 8000c20:	4290      	cmp	r0, r2
 8000c22:	d90a      	bls.n	8000c3a <__udivmoddi4+0x62>
 8000c24:	eb1c 0202 	adds.w	r2, ip, r2
 8000c28:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c2c:	f080 811c 	bcs.w	8000e68 <__udivmoddi4+0x290>
 8000c30:	4290      	cmp	r0, r2
 8000c32:	f240 8119 	bls.w	8000e68 <__udivmoddi4+0x290>
 8000c36:	3902      	subs	r1, #2
 8000c38:	4462      	add	r2, ip
 8000c3a:	1a12      	subs	r2, r2, r0
 8000c3c:	b2a4      	uxth	r4, r4
 8000c3e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c42:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c46:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c4a:	fb00 f505 	mul.w	r5, r0, r5
 8000c4e:	42a5      	cmp	r5, r4
 8000c50:	d90a      	bls.n	8000c68 <__udivmoddi4+0x90>
 8000c52:	eb1c 0404 	adds.w	r4, ip, r4
 8000c56:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c5a:	f080 8107 	bcs.w	8000e6c <__udivmoddi4+0x294>
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	f240 8104 	bls.w	8000e6c <__udivmoddi4+0x294>
 8000c64:	4464      	add	r4, ip
 8000c66:	3802      	subs	r0, #2
 8000c68:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c6c:	1b64      	subs	r4, r4, r5
 8000c6e:	2100      	movs	r1, #0
 8000c70:	b11e      	cbz	r6, 8000c7a <__udivmoddi4+0xa2>
 8000c72:	40dc      	lsrs	r4, r3
 8000c74:	2300      	movs	r3, #0
 8000c76:	e9c6 4300 	strd	r4, r3, [r6]
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	428b      	cmp	r3, r1
 8000c80:	d908      	bls.n	8000c94 <__udivmoddi4+0xbc>
 8000c82:	2e00      	cmp	r6, #0
 8000c84:	f000 80ed 	beq.w	8000e62 <__udivmoddi4+0x28a>
 8000c88:	2100      	movs	r1, #0
 8000c8a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c8e:	4608      	mov	r0, r1
 8000c90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c94:	fab3 f183 	clz	r1, r3
 8000c98:	2900      	cmp	r1, #0
 8000c9a:	d149      	bne.n	8000d30 <__udivmoddi4+0x158>
 8000c9c:	42ab      	cmp	r3, r5
 8000c9e:	d302      	bcc.n	8000ca6 <__udivmoddi4+0xce>
 8000ca0:	4282      	cmp	r2, r0
 8000ca2:	f200 80f8 	bhi.w	8000e96 <__udivmoddi4+0x2be>
 8000ca6:	1a84      	subs	r4, r0, r2
 8000ca8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cac:	2001      	movs	r0, #1
 8000cae:	4617      	mov	r7, r2
 8000cb0:	2e00      	cmp	r6, #0
 8000cb2:	d0e2      	beq.n	8000c7a <__udivmoddi4+0xa2>
 8000cb4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cb8:	e7df      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000cba:	b902      	cbnz	r2, 8000cbe <__udivmoddi4+0xe6>
 8000cbc:	deff      	udf	#255	; 0xff
 8000cbe:	fab2 f382 	clz	r3, r2
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	f040 8090 	bne.w	8000de8 <__udivmoddi4+0x210>
 8000cc8:	1a8a      	subs	r2, r1, r2
 8000cca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cce:	fa1f fe8c 	uxth.w	lr, ip
 8000cd2:	2101      	movs	r1, #1
 8000cd4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000cd8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cdc:	0c22      	lsrs	r2, r4, #16
 8000cde:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000ce2:	fb0e f005 	mul.w	r0, lr, r5
 8000ce6:	4290      	cmp	r0, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x124>
 8000cea:	eb1c 0202 	adds.w	r2, ip, r2
 8000cee:	f105 38ff 	add.w	r8, r5, #4294967295
 8000cf2:	d202      	bcs.n	8000cfa <__udivmoddi4+0x122>
 8000cf4:	4290      	cmp	r0, r2
 8000cf6:	f200 80cb 	bhi.w	8000e90 <__udivmoddi4+0x2b8>
 8000cfa:	4645      	mov	r5, r8
 8000cfc:	1a12      	subs	r2, r2, r0
 8000cfe:	b2a4      	uxth	r4, r4
 8000d00:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d04:	fb07 2210 	mls	r2, r7, r0, r2
 8000d08:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d0c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d10:	45a6      	cmp	lr, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x14e>
 8000d14:	eb1c 0404 	adds.w	r4, ip, r4
 8000d18:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x14c>
 8000d1e:	45a6      	cmp	lr, r4
 8000d20:	f200 80bb 	bhi.w	8000e9a <__udivmoddi4+0x2c2>
 8000d24:	4610      	mov	r0, r2
 8000d26:	eba4 040e 	sub.w	r4, r4, lr
 8000d2a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d2e:	e79f      	b.n	8000c70 <__udivmoddi4+0x98>
 8000d30:	f1c1 0720 	rsb	r7, r1, #32
 8000d34:	408b      	lsls	r3, r1
 8000d36:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d3a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d3e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d42:	fa20 f307 	lsr.w	r3, r0, r7
 8000d46:	40fd      	lsrs	r5, r7
 8000d48:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d4c:	4323      	orrs	r3, r4
 8000d4e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d52:	fa1f fe8c 	uxth.w	lr, ip
 8000d56:	fb09 5518 	mls	r5, r9, r8, r5
 8000d5a:	0c1c      	lsrs	r4, r3, #16
 8000d5c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d60:	fb08 f50e 	mul.w	r5, r8, lr
 8000d64:	42a5      	cmp	r5, r4
 8000d66:	fa02 f201 	lsl.w	r2, r2, r1
 8000d6a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d6e:	d90b      	bls.n	8000d88 <__udivmoddi4+0x1b0>
 8000d70:	eb1c 0404 	adds.w	r4, ip, r4
 8000d74:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d78:	f080 8088 	bcs.w	8000e8c <__udivmoddi4+0x2b4>
 8000d7c:	42a5      	cmp	r5, r4
 8000d7e:	f240 8085 	bls.w	8000e8c <__udivmoddi4+0x2b4>
 8000d82:	f1a8 0802 	sub.w	r8, r8, #2
 8000d86:	4464      	add	r4, ip
 8000d88:	1b64      	subs	r4, r4, r5
 8000d8a:	b29d      	uxth	r5, r3
 8000d8c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000d90:	fb09 4413 	mls	r4, r9, r3, r4
 8000d94:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000d98:	fb03 fe0e 	mul.w	lr, r3, lr
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	d908      	bls.n	8000db2 <__udivmoddi4+0x1da>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000da8:	d26c      	bcs.n	8000e84 <__udivmoddi4+0x2ac>
 8000daa:	45a6      	cmp	lr, r4
 8000dac:	d96a      	bls.n	8000e84 <__udivmoddi4+0x2ac>
 8000dae:	3b02      	subs	r3, #2
 8000db0:	4464      	add	r4, ip
 8000db2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000db6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dba:	eba4 040e 	sub.w	r4, r4, lr
 8000dbe:	42ac      	cmp	r4, r5
 8000dc0:	46c8      	mov	r8, r9
 8000dc2:	46ae      	mov	lr, r5
 8000dc4:	d356      	bcc.n	8000e74 <__udivmoddi4+0x29c>
 8000dc6:	d053      	beq.n	8000e70 <__udivmoddi4+0x298>
 8000dc8:	b156      	cbz	r6, 8000de0 <__udivmoddi4+0x208>
 8000dca:	ebb0 0208 	subs.w	r2, r0, r8
 8000dce:	eb64 040e 	sbc.w	r4, r4, lr
 8000dd2:	fa04 f707 	lsl.w	r7, r4, r7
 8000dd6:	40ca      	lsrs	r2, r1
 8000dd8:	40cc      	lsrs	r4, r1
 8000dda:	4317      	orrs	r7, r2
 8000ddc:	e9c6 7400 	strd	r7, r4, [r6]
 8000de0:	4618      	mov	r0, r3
 8000de2:	2100      	movs	r1, #0
 8000de4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de8:	f1c3 0120 	rsb	r1, r3, #32
 8000dec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000df0:	fa20 f201 	lsr.w	r2, r0, r1
 8000df4:	fa25 f101 	lsr.w	r1, r5, r1
 8000df8:	409d      	lsls	r5, r3
 8000dfa:	432a      	orrs	r2, r5
 8000dfc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e08:	fb07 1510 	mls	r5, r7, r0, r1
 8000e0c:	0c11      	lsrs	r1, r2, #16
 8000e0e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e12:	fb00 f50e 	mul.w	r5, r0, lr
 8000e16:	428d      	cmp	r5, r1
 8000e18:	fa04 f403 	lsl.w	r4, r4, r3
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0x258>
 8000e1e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e22:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e26:	d22f      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e28:	428d      	cmp	r5, r1
 8000e2a:	d92d      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e2c:	3802      	subs	r0, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1b49      	subs	r1, r1, r5
 8000e32:	b292      	uxth	r2, r2
 8000e34:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e38:	fb07 1115 	mls	r1, r7, r5, r1
 8000e3c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e40:	fb05 f10e 	mul.w	r1, r5, lr
 8000e44:	4291      	cmp	r1, r2
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x282>
 8000e48:	eb1c 0202 	adds.w	r2, ip, r2
 8000e4c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e50:	d216      	bcs.n	8000e80 <__udivmoddi4+0x2a8>
 8000e52:	4291      	cmp	r1, r2
 8000e54:	d914      	bls.n	8000e80 <__udivmoddi4+0x2a8>
 8000e56:	3d02      	subs	r5, #2
 8000e58:	4462      	add	r2, ip
 8000e5a:	1a52      	subs	r2, r2, r1
 8000e5c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e60:	e738      	b.n	8000cd4 <__udivmoddi4+0xfc>
 8000e62:	4631      	mov	r1, r6
 8000e64:	4630      	mov	r0, r6
 8000e66:	e708      	b.n	8000c7a <__udivmoddi4+0xa2>
 8000e68:	4639      	mov	r1, r7
 8000e6a:	e6e6      	b.n	8000c3a <__udivmoddi4+0x62>
 8000e6c:	4610      	mov	r0, r2
 8000e6e:	e6fb      	b.n	8000c68 <__udivmoddi4+0x90>
 8000e70:	4548      	cmp	r0, r9
 8000e72:	d2a9      	bcs.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e74:	ebb9 0802 	subs.w	r8, r9, r2
 8000e78:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e7c:	3b01      	subs	r3, #1
 8000e7e:	e7a3      	b.n	8000dc8 <__udivmoddi4+0x1f0>
 8000e80:	4645      	mov	r5, r8
 8000e82:	e7ea      	b.n	8000e5a <__udivmoddi4+0x282>
 8000e84:	462b      	mov	r3, r5
 8000e86:	e794      	b.n	8000db2 <__udivmoddi4+0x1da>
 8000e88:	4640      	mov	r0, r8
 8000e8a:	e7d1      	b.n	8000e30 <__udivmoddi4+0x258>
 8000e8c:	46d0      	mov	r8, sl
 8000e8e:	e77b      	b.n	8000d88 <__udivmoddi4+0x1b0>
 8000e90:	3d02      	subs	r5, #2
 8000e92:	4462      	add	r2, ip
 8000e94:	e732      	b.n	8000cfc <__udivmoddi4+0x124>
 8000e96:	4608      	mov	r0, r1
 8000e98:	e70a      	b.n	8000cb0 <__udivmoddi4+0xd8>
 8000e9a:	4464      	add	r4, ip
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	e742      	b.n	8000d26 <__udivmoddi4+0x14e>

08000ea0 <__aeabi_idiv0>:
 8000ea0:	4770      	bx	lr
 8000ea2:	bf00      	nop

08000ea4 <myprintf>:
void myprintf(const char *fmt, ...);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void myprintf(const char *fmt, ...) {
 8000ea4:	b40f      	push	{r0, r1, r2, r3}
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
  static char buffer[256];
  va_list args;
  va_start(args, fmt);
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	603b      	str	r3, [r7, #0]
  vsnprintf(buffer, sizeof(buffer), fmt, args);
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	693a      	ldr	r2, [r7, #16]
 8000eb6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000eba:	480b      	ldr	r0, [pc, #44]	; (8000ee8 <myprintf+0x44>)
 8000ebc:	f004 fad0 	bl	8005460 <vsniprintf>
  va_end(args);

  int len = strlen(buffer);
 8000ec0:	4809      	ldr	r0, [pc, #36]	; (8000ee8 <myprintf+0x44>)
 8000ec2:	f7ff f9d5 	bl	8000270 <strlen>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)buffer, len, -1);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	f04f 33ff 	mov.w	r3, #4294967295
 8000ed2:	4905      	ldr	r1, [pc, #20]	; (8000ee8 <myprintf+0x44>)
 8000ed4:	4805      	ldr	r0, [pc, #20]	; (8000eec <myprintf+0x48>)
 8000ed6:	f003 f83b 	bl	8003f50 <HAL_UART_Transmit>

}
 8000eda:	bf00      	nop
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000ee4:	b004      	add	sp, #16
 8000ee6:	4770      	bx	lr
 8000ee8:	20000330 	.word	0x20000330
 8000eec:	200002a8 	.word	0x200002a8

08000ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef6:	f000 fca2 	bl	800183e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efa:	f000 f863 	bl	8000fc4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efe:	f000 f96f 	bl	80011e0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000f02:	f000 f93d 	bl	8001180 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000f06:	f000 f8ed 	bl	80010e4 <MX_TIM2_Init>
  MX_SPI1_Init();
 8000f0a:	f000 f8ad 	bl	8001068 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

   myprintf("\r\n~ Datalogger begin ~\r\n\r\n");
 8000f0e:	4822      	ldr	r0, [pc, #136]	; (8000f98 <main+0xa8>)
 8000f10:	f7ff ffc8 	bl	8000ea4 <myprintf>

   HAL_Delay(1000); //a short delay is important to let the SD card settle
 8000f14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f18:	f000 fd06 	bl	8001928 <HAL_Delay>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Notify user writing is finished and drive is unmounted.
	  myprintf("Finished writing!\r\n");
 8000f1c:	481f      	ldr	r0, [pc, #124]	; (8000f9c <main+0xac>)
 8000f1e:	f7ff ffc1 	bl	8000ea4 <myprintf>
	  HAL_Delay(1000);
 8000f22:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000f26:	f000 fcff 	bl	8001928 <HAL_Delay>
	//		start_tim = TIM2->CNT;
	//		end_tim = TIM2->CNT;
	//		myprintf("Execution time = %i us\r\n", end_tim - start_tim);

			// measure ADC value
			if (MCP3204_convert(&hspi1, GPIOB, GPIO_PIN_7, singleEnded, CH0, &ad_MCP3204, msg))
 8000f2a:	4b1d      	ldr	r3, [pc, #116]	; (8000fa0 <main+0xb0>)
 8000f2c:	9302      	str	r3, [sp, #8]
 8000f2e:	4b1d      	ldr	r3, [pc, #116]	; (8000fa4 <main+0xb4>)
 8000f30:	9301      	str	r3, [sp, #4]
 8000f32:	2300      	movs	r3, #0
 8000f34:	9300      	str	r3, [sp, #0]
 8000f36:	2300      	movs	r3, #0
 8000f38:	2280      	movs	r2, #128	; 0x80
 8000f3a:	491b      	ldr	r1, [pc, #108]	; (8000fa8 <main+0xb8>)
 8000f3c:	481b      	ldr	r0, [pc, #108]	; (8000fac <main+0xbc>)
 8000f3e:	f000 f9a1 	bl	8001284 <MCP3204_convert>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d006      	beq.n	8000f56 <main+0x66>
				{
					myprintf("Error during conversion.\n");
 8000f48:	4819      	ldr	r0, [pc, #100]	; (8000fb0 <main+0xc0>)
 8000f4a:	f7ff ffab 	bl	8000ea4 <myprintf>
					myprintf("%s\n",msg);
 8000f4e:	4914      	ldr	r1, [pc, #80]	; (8000fa0 <main+0xb0>)
 8000f50:	4818      	ldr	r0, [pc, #96]	; (8000fb4 <main+0xc4>)
 8000f52:	f7ff ffa7 	bl	8000ea4 <myprintf>

				}

			// bugfixing msg
			myprintf("Time: ,	Data: %.3lf\n\r",  MCP3204_analogValue(ad_MCP3204));
 8000f56:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <main+0xb4>)
 8000f58:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f5c:	f000 fa38 	bl	80013d0 <MCP3204_analogValue>
 8000f60:	ee10 3a10 	vmov	r3, s0
 8000f64:	4618      	mov	r0, r3
 8000f66:	f7ff faef 	bl	8000548 <__aeabi_f2d>
 8000f6a:	4602      	mov	r2, r0
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	4812      	ldr	r0, [pc, #72]	; (8000fb8 <main+0xc8>)
 8000f70:	f7ff ff98 	bl	8000ea4 <myprintf>

			//write data to file
			sprintf(buffer, "	Data: %lf\n\r",  MCP3204_analogValue(ad_MCP3204));
 8000f74:	4b0b      	ldr	r3, [pc, #44]	; (8000fa4 <main+0xb4>)
 8000f76:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f7a:	f000 fa29 	bl	80013d0 <MCP3204_analogValue>
 8000f7e:	ee10 3a10 	vmov	r3, s0
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff fae0 	bl	8000548 <__aeabi_f2d>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	490b      	ldr	r1, [pc, #44]	; (8000fbc <main+0xcc>)
 8000f8e:	480c      	ldr	r0, [pc, #48]	; (8000fc0 <main+0xd0>)
 8000f90:	f004 f9d8 	bl	8005344 <siprintf>
  {
 8000f94:	e7c2      	b.n	8000f1c <main+0x2c>
 8000f96:	bf00      	nop
 8000f98:	08007688 	.word	0x08007688
 8000f9c:	080076a4 	.word	0x080076a4
 8000fa0:	20000430 	.word	0x20000430
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	48000400 	.word	0x48000400
 8000fac:	200001f8 	.word	0x200001f8
 8000fb0:	080076b8 	.word	0x080076b8
 8000fb4:	080076d4 	.word	0x080076d4
 8000fb8:	080076d8 	.word	0x080076d8
 8000fbc:	080076f0 	.word	0x080076f0
 8000fc0:	20000468 	.word	0x20000468

08000fc4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b096      	sub	sp, #88	; 0x58
 8000fc8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fca:	f107 0314 	add.w	r3, r7, #20
 8000fce:	2244      	movs	r2, #68	; 0x44
 8000fd0:	2100      	movs	r1, #0
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f004 fa52 	bl	800547c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd8:	463b      	mov	r3, r7
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
 8000fe4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000fe6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000fea:	f000 ff37 	bl	8001e5c <HAL_PWREx_ControlVoltageScaling>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000ff4:	f000 f940 	bl	8001278 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000ff8:	2310      	movs	r3, #16
 8000ffa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001004:	2360      	movs	r3, #96	; 0x60
 8001006:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001008:	2302      	movs	r3, #2
 800100a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800100c:	2301      	movs	r3, #1
 800100e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8001010:	2301      	movs	r3, #1
 8001012:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001014:	2310      	movs	r3, #16
 8001016:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001018:	2307      	movs	r3, #7
 800101a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800101c:	2302      	movs	r3, #2
 800101e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001020:	2302      	movs	r3, #2
 8001022:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4618      	mov	r0, r3
 800102a:	f000 ff6d 	bl	8001f08 <HAL_RCC_OscConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <SystemClock_Config+0x74>
  {
    Error_Handler();
 8001034:	f000 f920 	bl	8001278 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001038:	230f      	movs	r3, #15
 800103a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800103c:	2303      	movs	r3, #3
 800103e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001040:	2300      	movs	r3, #0
 8001042:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001044:	2300      	movs	r3, #0
 8001046:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001048:	2300      	movs	r3, #0
 800104a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800104c:	463b      	mov	r3, r7
 800104e:	2101      	movs	r1, #1
 8001050:	4618      	mov	r0, r3
 8001052:	f001 fb6d 	bl	8002730 <HAL_RCC_ClockConfig>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	d001      	beq.n	8001060 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800105c:	f000 f90c 	bl	8001278 <Error_Handler>
  }
}
 8001060:	bf00      	nop
 8001062:	3758      	adds	r7, #88	; 0x58
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}

08001068 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800106c:	4b1b      	ldr	r3, [pc, #108]	; (80010dc <MX_SPI1_Init+0x74>)
 800106e:	4a1c      	ldr	r2, [pc, #112]	; (80010e0 <MX_SPI1_Init+0x78>)
 8001070:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001072:	4b1a      	ldr	r3, [pc, #104]	; (80010dc <MX_SPI1_Init+0x74>)
 8001074:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001078:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800107a:	4b18      	ldr	r3, [pc, #96]	; (80010dc <MX_SPI1_Init+0x74>)
 800107c:	2200      	movs	r2, #0
 800107e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001080:	4b16      	ldr	r3, [pc, #88]	; (80010dc <MX_SPI1_Init+0x74>)
 8001082:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001086:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001088:	4b14      	ldr	r3, [pc, #80]	; (80010dc <MX_SPI1_Init+0x74>)
 800108a:	2200      	movs	r2, #0
 800108c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800108e:	4b13      	ldr	r3, [pc, #76]	; (80010dc <MX_SPI1_Init+0x74>)
 8001090:	2200      	movs	r2, #0
 8001092:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001094:	4b11      	ldr	r3, [pc, #68]	; (80010dc <MX_SPI1_Init+0x74>)
 8001096:	f44f 7200 	mov.w	r2, #512	; 0x200
 800109a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 800109c:	4b0f      	ldr	r3, [pc, #60]	; (80010dc <MX_SPI1_Init+0x74>)
 800109e:	2230      	movs	r2, #48	; 0x30
 80010a0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010a2:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <MX_SPI1_Init+0x74>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010a8:	4b0c      	ldr	r3, [pc, #48]	; (80010dc <MX_SPI1_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010ae:	4b0b      	ldr	r3, [pc, #44]	; (80010dc <MX_SPI1_Init+0x74>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80010b4:	4b09      	ldr	r3, [pc, #36]	; (80010dc <MX_SPI1_Init+0x74>)
 80010b6:	2207      	movs	r2, #7
 80010b8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010ba:	4b08      	ldr	r3, [pc, #32]	; (80010dc <MX_SPI1_Init+0x74>)
 80010bc:	2200      	movs	r2, #0
 80010be:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <MX_SPI1_Init+0x74>)
 80010c2:	2208      	movs	r2, #8
 80010c4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010c6:	4805      	ldr	r0, [pc, #20]	; (80010dc <MX_SPI1_Init+0x74>)
 80010c8:	f002 f83e 	bl	8003148 <HAL_SPI_Init>
 80010cc:	4603      	mov	r3, r0
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d001      	beq.n	80010d6 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80010d2:	f000 f8d1 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010d6:	bf00      	nop
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	200001f8 	.word	0x200001f8
 80010e0:	40013000 	.word	0x40013000

080010e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ea:	f107 0310 	add.w	r3, r7, #16
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f8:	1d3b      	adds	r3, r7, #4
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001102:	4b1e      	ldr	r3, [pc, #120]	; (800117c <MX_TIM2_Init+0x98>)
 8001104:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001108:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800110a:	4b1c      	ldr	r3, [pc, #112]	; (800117c <MX_TIM2_Init+0x98>)
 800110c:	2200      	movs	r2, #0
 800110e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001110:	4b1a      	ldr	r3, [pc, #104]	; (800117c <MX_TIM2_Init+0x98>)
 8001112:	2200      	movs	r2, #0
 8001114:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001116:	4b19      	ldr	r3, [pc, #100]	; (800117c <MX_TIM2_Init+0x98>)
 8001118:	f04f 32ff 	mov.w	r2, #4294967295
 800111c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800111e:	4b17      	ldr	r3, [pc, #92]	; (800117c <MX_TIM2_Init+0x98>)
 8001120:	2200      	movs	r2, #0
 8001122:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001124:	4b15      	ldr	r3, [pc, #84]	; (800117c <MX_TIM2_Init+0x98>)
 8001126:	2200      	movs	r2, #0
 8001128:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800112a:	4814      	ldr	r0, [pc, #80]	; (800117c <MX_TIM2_Init+0x98>)
 800112c:	f002 fc32 	bl	8003994 <HAL_TIM_Base_Init>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001136:	f000 f89f 	bl	8001278 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800113a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800113e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001140:	f107 0310 	add.w	r3, r7, #16
 8001144:	4619      	mov	r1, r3
 8001146:	480d      	ldr	r0, [pc, #52]	; (800117c <MX_TIM2_Init+0x98>)
 8001148:	f002 fc7b 	bl	8003a42 <HAL_TIM_ConfigClockSource>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001152:	f000 f891 	bl	8001278 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001156:	2300      	movs	r3, #0
 8001158:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800115a:	2300      	movs	r3, #0
 800115c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	4619      	mov	r1, r3
 8001162:	4806      	ldr	r0, [pc, #24]	; (800117c <MX_TIM2_Init+0x98>)
 8001164:	f002 fe40 	bl	8003de8 <HAL_TIMEx_MasterConfigSynchronization>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800116e:	f000 f883 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001172:	bf00      	nop
 8001174:	3720      	adds	r7, #32
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
 800117a:	bf00      	nop
 800117c:	2000025c 	.word	0x2000025c

08001180 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001184:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <MX_USART2_UART_Init+0x58>)
 8001186:	4a15      	ldr	r2, [pc, #84]	; (80011dc <MX_USART2_UART_Init+0x5c>)
 8001188:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800118a:	4b13      	ldr	r3, [pc, #76]	; (80011d8 <MX_USART2_UART_Init+0x58>)
 800118c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001190:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001192:	4b11      	ldr	r3, [pc, #68]	; (80011d8 <MX_USART2_UART_Init+0x58>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001198:	4b0f      	ldr	r3, [pc, #60]	; (80011d8 <MX_USART2_UART_Init+0x58>)
 800119a:	2200      	movs	r2, #0
 800119c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800119e:	4b0e      	ldr	r3, [pc, #56]	; (80011d8 <MX_USART2_UART_Init+0x58>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80011a4:	4b0c      	ldr	r3, [pc, #48]	; (80011d8 <MX_USART2_UART_Init+0x58>)
 80011a6:	220c      	movs	r2, #12
 80011a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011aa:	4b0b      	ldr	r3, [pc, #44]	; (80011d8 <MX_USART2_UART_Init+0x58>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80011b0:	4b09      	ldr	r3, [pc, #36]	; (80011d8 <MX_USART2_UART_Init+0x58>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011b6:	4b08      	ldr	r3, [pc, #32]	; (80011d8 <MX_USART2_UART_Init+0x58>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011bc:	4b06      	ldr	r3, [pc, #24]	; (80011d8 <MX_USART2_UART_Init+0x58>)
 80011be:	2200      	movs	r2, #0
 80011c0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80011c2:	4805      	ldr	r0, [pc, #20]	; (80011d8 <MX_USART2_UART_Init+0x58>)
 80011c4:	f002 fe76 	bl	8003eb4 <HAL_UART_Init>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80011ce:	f000 f853 	bl	8001278 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	200002a8 	.word	0x200002a8
 80011dc:	40004400 	.word	0x40004400

080011e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b088      	sub	sp, #32
 80011e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e6:	f107 030c 	add.w	r3, r7, #12
 80011ea:	2200      	movs	r2, #0
 80011ec:	601a      	str	r2, [r3, #0]
 80011ee:	605a      	str	r2, [r3, #4]
 80011f0:	609a      	str	r2, [r3, #8]
 80011f2:	60da      	str	r2, [r3, #12]
 80011f4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011f6:	4b1e      	ldr	r3, [pc, #120]	; (8001270 <MX_GPIO_Init+0x90>)
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011fa:	4a1d      	ldr	r2, [pc, #116]	; (8001270 <MX_GPIO_Init+0x90>)
 80011fc:	f043 0301 	orr.w	r3, r3, #1
 8001200:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001202:	4b1b      	ldr	r3, [pc, #108]	; (8001270 <MX_GPIO_Init+0x90>)
 8001204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001206:	f003 0301 	and.w	r3, r3, #1
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800120e:	4b18      	ldr	r3, [pc, #96]	; (8001270 <MX_GPIO_Init+0x90>)
 8001210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001212:	4a17      	ldr	r2, [pc, #92]	; (8001270 <MX_GPIO_Init+0x90>)
 8001214:	f043 0302 	orr.w	r3, r3, #2
 8001218:	64d3      	str	r3, [r2, #76]	; 0x4c
 800121a:	4b15      	ldr	r3, [pc, #84]	; (8001270 <MX_GPIO_Init+0x90>)
 800121c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800121e:	f003 0302 	and.w	r3, r3, #2
 8001222:	607b      	str	r3, [r7, #4]
 8001224:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|ADC_CS_Pin, GPIO_PIN_RESET);
 8001226:	2200      	movs	r2, #0
 8001228:	21c0      	movs	r1, #192	; 0xc0
 800122a:	4812      	ldr	r0, [pc, #72]	; (8001274 <MX_GPIO_Init+0x94>)
 800122c:	f000 fdf0 	bl	8001e10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001230:	2302      	movs	r3, #2
 8001232:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001234:	230b      	movs	r3, #11
 8001236:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001238:	2300      	movs	r3, #0
 800123a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	4619      	mov	r1, r3
 8001242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001246:	f000 fc79 	bl	8001b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin ADC_CS_Pin */
  GPIO_InitStruct.Pin = SD_CS_Pin|ADC_CS_Pin;
 800124a:	23c0      	movs	r3, #192	; 0xc0
 800124c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800124e:	2301      	movs	r3, #1
 8001250:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001256:	2300      	movs	r3, #0
 8001258:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125a:	f107 030c 	add.w	r3, r7, #12
 800125e:	4619      	mov	r1, r3
 8001260:	4804      	ldr	r0, [pc, #16]	; (8001274 <MX_GPIO_Init+0x94>)
 8001262:	f000 fc6b 	bl	8001b3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001266:	bf00      	nop
 8001268:	3720      	adds	r7, #32
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000
 8001274:	48000400 	.word	0x48000400

08001278 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800127c:	b672      	cpsid	i
}
 800127e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001280:	e7fe      	b.n	8001280 <Error_Handler+0x8>
	...

08001284 <MCP3204_convert>:
/*
 * Start the AD conversion process and read the digital value
 * of the analog signal from MCP3204.
 */
int MCP3204_convert(SPI_HandleTypeDef *hspi, GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, inputChannelMode channelMode, inputChannel channel, MCP3204 *ad,char *msg)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08a      	sub	sp, #40	; 0x28
 8001288:	af02      	add	r7, sp, #8
 800128a:	60f8      	str	r0, [r7, #12]
 800128c:	60b9      	str	r1, [r7, #8]
 800128e:	4611      	mov	r1, r2
 8001290:	461a      	mov	r2, r3
 8001292:	460b      	mov	r3, r1
 8001294:	80fb      	strh	r3, [r7, #6]
 8001296:	4613      	mov	r3, r2
 8001298:	717b      	strb	r3, [r7, #5]
	// Cycle ADC (recommended in datasheet)
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 800129a:	88fb      	ldrh	r3, [r7, #6]
 800129c:	2201      	movs	r2, #1
 800129e:	4619      	mov	r1, r3
 80012a0:	68b8      	ldr	r0, [r7, #8]
 80012a2:	f000 fdb5 	bl	8001e10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 80012a6:	88fb      	ldrh	r3, [r7, #6]
 80012a8:	2200      	movs	r2, #0
 80012aa:	4619      	mov	r1, r3
 80012ac:	68b8      	ldr	r0, [r7, #8]
 80012ae:	f000 fdaf 	bl	8001e10 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 80012b2:	88fb      	ldrh	r3, [r7, #6]
 80012b4:	2201      	movs	r2, #1
 80012b6:	4619      	mov	r1, r3
 80012b8:	68b8      	ldr	r0, [r7, #8]
 80012ba:	f000 fda9 	bl	8001e10 <HAL_GPIO_WritePin>

	unsigned char tx[3] = "";
 80012be:	4b42      	ldr	r3, [pc, #264]	; (80013c8 <MCP3204_convert+0x144>)
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	763b      	strb	r3, [r7, #24]
 80012c4:	f107 0319 	add.w	r3, r7, #25
 80012c8:	2200      	movs	r2, #0
 80012ca:	801a      	strh	r2, [r3, #0]
	unsigned char rx[3] = "";
 80012cc:	4b3e      	ldr	r3, [pc, #248]	; (80013c8 <MCP3204_convert+0x144>)
 80012ce:	781b      	ldrb	r3, [r3, #0]
 80012d0:	753b      	strb	r3, [r7, #20]
 80012d2:	f107 0315 	add.w	r3, r7, #21
 80012d6:	2200      	movs	r2, #0
 80012d8:	801a      	strh	r2, [r3, #0]

	/* set the start bit */
	tx[0] |= START_BIT;
 80012da:	7e3b      	ldrb	r3, [r7, #24]
 80012dc:	f043 0304 	orr.w	r3, r3, #4
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	763b      	strb	r3, [r7, #24]

	/* define the channel input mode */
	if (channelMode==singleEnded)
 80012e4:	797b      	ldrb	r3, [r7, #5]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d104      	bne.n	80012f4 <MCP3204_convert+0x70>
		tx[0] |= SINGLE_ENDED;
 80012ea:	7e3b      	ldrb	r3, [r7, #24]
 80012ec:	f043 0302 	orr.w	r3, r3, #2
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	763b      	strb	r3, [r7, #24]
	if (channelMode==differential)
 80012f4:	797b      	ldrb	r3, [r7, #5]
 80012f6:	2b01      	cmp	r3, #1
 80012f8:	d104      	bne.n	8001304 <MCP3204_convert+0x80>
		tx[0] &= DIFFERENTIAL;
 80012fa:	7e3b      	ldrb	r3, [r7, #24]
 80012fc:	f023 0304 	bic.w	r3, r3, #4
 8001300:	b2db      	uxtb	r3, r3
 8001302:	763b      	strb	r3, [r7, #24]

	/* set the input channel/pair */
	// Remains unchanged from original library, may require changing
	switch(channel)
 8001304:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001308:	2b07      	cmp	r3, #7
 800130a:	d828      	bhi.n	800135e <MCP3204_convert+0xda>
 800130c:	a201      	add	r2, pc, #4	; (adr r2, 8001314 <MCP3204_convert+0x90>)
 800130e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001312:	bf00      	nop
 8001314:	08001335 	.word	0x08001335
 8001318:	0800133b 	.word	0x0800133b
 800131c:	08001347 	.word	0x08001347
 8001320:	08001353 	.word	0x08001353
 8001324:	08001335 	.word	0x08001335
 8001328:	0800133b 	.word	0x0800133b
 800132c:	08001347 	.word	0x08001347
 8001330:	08001353 	.word	0x08001353
	{
		case CH0:
		case CH01:
			tx[1] |= CH_0;
 8001334:	7e7b      	ldrb	r3, [r7, #25]
 8001336:	767b      	strb	r3, [r7, #25]
			break;
 8001338:	e011      	b.n	800135e <MCP3204_convert+0xda>
		case CH1:
		case CH10:
			tx[1] |= CH_1;
 800133a:	7e7b      	ldrb	r3, [r7, #25]
 800133c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001340:	b2db      	uxtb	r3, r3
 8001342:	767b      	strb	r3, [r7, #25]
			break;
 8001344:	e00b      	b.n	800135e <MCP3204_convert+0xda>
		case CH2:
		case CH23:
			tx[1] |= CH_2;
 8001346:	7e7b      	ldrb	r3, [r7, #25]
 8001348:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800134c:	b2db      	uxtb	r3, r3
 800134e:	767b      	strb	r3, [r7, #25]
			break;
 8001350:	e005      	b.n	800135e <MCP3204_convert+0xda>
		case CH3:
		case CH32:
			tx[1] |= CH_3;
 8001352:	7e7b      	ldrb	r3, [r7, #25]
 8001354:	f063 033f 	orn	r3, r3, #63	; 0x3f
 8001358:	b2db      	uxtb	r3, r3
 800135a:	767b      	strb	r3, [r7, #25]
			break;
 800135c:	bf00      	nop
	}

	// transmit and receive messages tx and rx respectively
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_RESET);
 800135e:	88fb      	ldrh	r3, [r7, #6]
 8001360:	2200      	movs	r2, #0
 8001362:	4619      	mov	r1, r3
 8001364:	68b8      	ldr	r0, [r7, #8]
 8001366:	f000 fd53 	bl	8001e10 <HAL_GPIO_WritePin>
	HAL_SPI_TransmitReceive(hspi, tx, rx, 6, 100);
 800136a:	f107 0214 	add.w	r2, r7, #20
 800136e:	f107 0118 	add.w	r1, r7, #24
 8001372:	2364      	movs	r3, #100	; 0x64
 8001374:	9300      	str	r3, [sp, #0]
 8001376:	2306      	movs	r3, #6
 8001378:	68f8      	ldr	r0, [r7, #12]
 800137a:	f001 ff88 	bl	800328e <HAL_SPI_TransmitReceive>
	HAL_GPIO_WritePin(GPIOx, GPIO_Pin, GPIO_PIN_SET);
 800137e:	88fb      	ldrh	r3, [r7, #6]
 8001380:	2201      	movs	r2, #1
 8001382:	4619      	mov	r1, r3
 8001384:	68b8      	ldr	r0, [r7, #8]
 8001386:	f000 fd43 	bl	8001e10 <HAL_GPIO_WritePin>

	// recorded bites of importance are 4 LSB of rx[1] and all of rx[2]
	// remove 4 msb from rx[1]
	rx[1] &= 0x0F;
 800138a:	7d7b      	ldrb	r3, [r7, #21]
 800138c:	f003 030f 	and.w	r3, r3, #15
 8001390:	b2db      	uxtb	r3, r3
 8001392:	757b      	strb	r3, [r7, #21]
	uint16_t data = rx[1];
 8001394:	7d7b      	ldrb	r3, [r7, #21]
 8001396:	83fb      	strh	r3, [r7, #30]
	data <<= 8;
 8001398:	8bfb      	ldrh	r3, [r7, #30]
 800139a:	021b      	lsls	r3, r3, #8
 800139c:	83fb      	strh	r3, [r7, #30]
	data |= rx[2];
 800139e:	7dbb      	ldrb	r3, [r7, #22]
 80013a0:	b29a      	uxth	r2, r3
 80013a2:	8bfb      	ldrh	r3, [r7, #30]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	83fb      	strh	r3, [r7, #30]

	// record to adc struct
	ad->digitalValue = data;
 80013a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013aa:	8bfa      	ldrh	r2, [r7, #30]
 80013ac:	801a      	strh	r2, [r3, #0]

	// bugfixing message
	sprintf(msg, "tx: %X, rx: %hX \n\r", tx[0], ad->digitalValue);
 80013ae:	7e3b      	ldrb	r3, [r7, #24]
 80013b0:	461a      	mov	r2, r3
 80013b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013b4:	881b      	ldrh	r3, [r3, #0]
 80013b6:	4905      	ldr	r1, [pc, #20]	; (80013cc <MCP3204_convert+0x148>)
 80013b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80013ba:	f003 ffc3 	bl	8005344 <siprintf>

	return 0;
 80013be:	2300      	movs	r3, #0
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	3720      	adds	r7, #32
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	08007714 	.word	0x08007714
 80013cc:	08007700 	.word	0x08007700

080013d0 <MCP3204_analogValue>:

/*
 * The function calculates the value of the analog input.
 */
float MCP3204_analogValue(MCP3204 ad)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b083      	sub	sp, #12
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	463b      	mov	r3, r7
 80013d8:	e883 0003 	stmia.w	r3, {r0, r1}
	return (ad.digitalValue*ad.referenceVoltage)/4096;
 80013dc:	883b      	ldrh	r3, [r7, #0]
 80013de:	ee07 3a90 	vmov	s15, r3
 80013e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80013e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80013ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80013ee:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001408 <MCP3204_analogValue+0x38>
 80013f2:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80013f6:	eef0 7a66 	vmov.f32	s15, s13
}
 80013fa:	eeb0 0a67 	vmov.f32	s0, s15
 80013fe:	370c      	adds	r7, #12
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr
 8001408:	45800000 	.word	0x45800000

0800140c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001412:	4b0f      	ldr	r3, [pc, #60]	; (8001450 <HAL_MspInit+0x44>)
 8001414:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001416:	4a0e      	ldr	r2, [pc, #56]	; (8001450 <HAL_MspInit+0x44>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6613      	str	r3, [r2, #96]	; 0x60
 800141e:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <HAL_MspInit+0x44>)
 8001420:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	607b      	str	r3, [r7, #4]
 8001428:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800142a:	4b09      	ldr	r3, [pc, #36]	; (8001450 <HAL_MspInit+0x44>)
 800142c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800142e:	4a08      	ldr	r2, [pc, #32]	; (8001450 <HAL_MspInit+0x44>)
 8001430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001434:	6593      	str	r3, [r2, #88]	; 0x58
 8001436:	4b06      	ldr	r3, [pc, #24]	; (8001450 <HAL_MspInit+0x44>)
 8001438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800143a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800143e:	603b      	str	r3, [r7, #0]
 8001440:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001442:	bf00      	nop
 8001444:	370c      	adds	r7, #12
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	40021000 	.word	0x40021000

08001454 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b08a      	sub	sp, #40	; 0x28
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800145c:	f107 0314 	add.w	r3, r7, #20
 8001460:	2200      	movs	r2, #0
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	605a      	str	r2, [r3, #4]
 8001466:	609a      	str	r2, [r3, #8]
 8001468:	60da      	str	r2, [r3, #12]
 800146a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4a17      	ldr	r2, [pc, #92]	; (80014d0 <HAL_SPI_MspInit+0x7c>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d128      	bne.n	80014c8 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001476:	4b17      	ldr	r3, [pc, #92]	; (80014d4 <HAL_SPI_MspInit+0x80>)
 8001478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800147a:	4a16      	ldr	r2, [pc, #88]	; (80014d4 <HAL_SPI_MspInit+0x80>)
 800147c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001480:	6613      	str	r3, [r2, #96]	; 0x60
 8001482:	4b14      	ldr	r3, [pc, #80]	; (80014d4 <HAL_SPI_MspInit+0x80>)
 8001484:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001486:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800148e:	4b11      	ldr	r3, [pc, #68]	; (80014d4 <HAL_SPI_MspInit+0x80>)
 8001490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001492:	4a10      	ldr	r2, [pc, #64]	; (80014d4 <HAL_SPI_MspInit+0x80>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	64d3      	str	r3, [r2, #76]	; 0x4c
 800149a:	4b0e      	ldr	r3, [pc, #56]	; (80014d4 <HAL_SPI_MspInit+0x80>)
 800149c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80014a6:	23e0      	movs	r3, #224	; 0xe0
 80014a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014aa:	2302      	movs	r3, #2
 80014ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ae:	2300      	movs	r3, #0
 80014b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b2:	2303      	movs	r3, #3
 80014b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80014b6:	2305      	movs	r3, #5
 80014b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ba:	f107 0314 	add.w	r3, r7, #20
 80014be:	4619      	mov	r1, r3
 80014c0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014c4:	f000 fb3a 	bl	8001b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80014c8:	bf00      	nop
 80014ca:	3728      	adds	r7, #40	; 0x28
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	40013000 	.word	0x40013000
 80014d4:	40021000 	.word	0x40021000

080014d8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014e8:	d10b      	bne.n	8001502 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <HAL_TIM_Base_MspInit+0x38>)
 80014ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ee:	4a08      	ldr	r2, [pc, #32]	; (8001510 <HAL_TIM_Base_MspInit+0x38>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6593      	str	r3, [r2, #88]	; 0x58
 80014f6:	4b06      	ldr	r3, [pc, #24]	; (8001510 <HAL_TIM_Base_MspInit+0x38>)
 80014f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001502:	bf00      	nop
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000

08001514 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b09e      	sub	sp, #120	; 0x78
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800151c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001520:	2200      	movs	r2, #0
 8001522:	601a      	str	r2, [r3, #0]
 8001524:	605a      	str	r2, [r3, #4]
 8001526:	609a      	str	r2, [r3, #8]
 8001528:	60da      	str	r2, [r3, #12]
 800152a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	2254      	movs	r2, #84	; 0x54
 8001532:	2100      	movs	r1, #0
 8001534:	4618      	mov	r0, r3
 8001536:	f003 ffa1 	bl	800547c <memset>
  if(huart->Instance==USART2)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a28      	ldr	r2, [pc, #160]	; (80015e0 <HAL_UART_MspInit+0xcc>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d148      	bne.n	80015d6 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001544:	2302      	movs	r3, #2
 8001546:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001548:	2300      	movs	r3, #0
 800154a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800154c:	f107 0310 	add.w	r3, r7, #16
 8001550:	4618      	mov	r0, r3
 8001552:	f001 fb11 	bl	8002b78 <HAL_RCCEx_PeriphCLKConfig>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800155c:	f7ff fe8c 	bl	8001278 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001560:	4b20      	ldr	r3, [pc, #128]	; (80015e4 <HAL_UART_MspInit+0xd0>)
 8001562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001564:	4a1f      	ldr	r2, [pc, #124]	; (80015e4 <HAL_UART_MspInit+0xd0>)
 8001566:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800156a:	6593      	str	r3, [r2, #88]	; 0x58
 800156c:	4b1d      	ldr	r3, [pc, #116]	; (80015e4 <HAL_UART_MspInit+0xd0>)
 800156e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001578:	4b1a      	ldr	r3, [pc, #104]	; (80015e4 <HAL_UART_MspInit+0xd0>)
 800157a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800157c:	4a19      	ldr	r2, [pc, #100]	; (80015e4 <HAL_UART_MspInit+0xd0>)
 800157e:	f043 0301 	orr.w	r3, r3, #1
 8001582:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001584:	4b17      	ldr	r3, [pc, #92]	; (80015e4 <HAL_UART_MspInit+0xd0>)
 8001586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001590:	2304      	movs	r3, #4
 8001592:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001594:	2302      	movs	r3, #2
 8001596:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800159c:	2303      	movs	r3, #3
 800159e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015a0:	2307      	movs	r3, #7
 80015a2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015a8:	4619      	mov	r1, r3
 80015aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015ae:	f000 fac5 	bl	8001b3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80015b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80015b6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b8:	2302      	movs	r3, #2
 80015ba:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015bc:	2300      	movs	r3, #0
 80015be:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015c0:	2303      	movs	r3, #3
 80015c2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80015c4:	2303      	movs	r3, #3
 80015c6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80015cc:	4619      	mov	r1, r3
 80015ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015d2:	f000 fab3 	bl	8001b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015d6:	bf00      	nop
 80015d8:	3778      	adds	r7, #120	; 0x78
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	40004400 	.word	0x40004400
 80015e4:	40021000 	.word	0x40021000

080015e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <NMI_Handler+0x4>

080015ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f2:	e7fe      	b.n	80015f2 <HardFault_Handler+0x4>

080015f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <MemManage_Handler+0x4>

080015fa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fe:	e7fe      	b.n	80015fe <BusFault_Handler+0x4>

08001600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <UsageFault_Handler+0x4>

08001606 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001634:	f000 f958 	bl	80018e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}

0800163c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return 1;
 8001640:	2301      	movs	r3, #1
}
 8001642:	4618      	mov	r0, r3
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <_kill>:

int _kill(int pid, int sig)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b082      	sub	sp, #8
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
 8001654:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001656:	f003 ff63 	bl	8005520 <__errno>
 800165a:	4603      	mov	r3, r0
 800165c:	2216      	movs	r2, #22
 800165e:	601a      	str	r2, [r3, #0]
  return -1;
 8001660:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001664:	4618      	mov	r0, r3
 8001666:	3708      	adds	r7, #8
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}

0800166c <_exit>:

void _exit (int status)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b082      	sub	sp, #8
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001674:	f04f 31ff 	mov.w	r1, #4294967295
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff ffe7 	bl	800164c <_kill>
  while (1) {}    /* Make sure we hang here */
 800167e:	e7fe      	b.n	800167e <_exit+0x12>

08001680 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b086      	sub	sp, #24
 8001684:	af00      	add	r7, sp, #0
 8001686:	60f8      	str	r0, [r7, #12]
 8001688:	60b9      	str	r1, [r7, #8]
 800168a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168c:	2300      	movs	r3, #0
 800168e:	617b      	str	r3, [r7, #20]
 8001690:	e00a      	b.n	80016a8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001692:	f3af 8000 	nop.w
 8001696:	4601      	mov	r1, r0
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	1c5a      	adds	r2, r3, #1
 800169c:	60ba      	str	r2, [r7, #8]
 800169e:	b2ca      	uxtb	r2, r1
 80016a0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	3301      	adds	r3, #1
 80016a6:	617b      	str	r3, [r7, #20]
 80016a8:	697a      	ldr	r2, [r7, #20]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	429a      	cmp	r2, r3
 80016ae:	dbf0      	blt.n	8001692 <_read+0x12>
  }

  return len;
 80016b0:	687b      	ldr	r3, [r7, #4]
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3718      	adds	r7, #24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}

080016ba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016ba:	b580      	push	{r7, lr}
 80016bc:	b086      	sub	sp, #24
 80016be:	af00      	add	r7, sp, #0
 80016c0:	60f8      	str	r0, [r7, #12]
 80016c2:	60b9      	str	r1, [r7, #8]
 80016c4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c6:	2300      	movs	r3, #0
 80016c8:	617b      	str	r3, [r7, #20]
 80016ca:	e009      	b.n	80016e0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	1c5a      	adds	r2, r3, #1
 80016d0:	60ba      	str	r2, [r7, #8]
 80016d2:	781b      	ldrb	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016da:	697b      	ldr	r3, [r7, #20]
 80016dc:	3301      	adds	r3, #1
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	697a      	ldr	r2, [r7, #20]
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	dbf1      	blt.n	80016cc <_write+0x12>
  }
  return len;
 80016e8:	687b      	ldr	r3, [r7, #4]
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3718      	adds	r7, #24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <_close>:

int _close(int file)
{
 80016f2:	b480      	push	{r7}
 80016f4:	b083      	sub	sp, #12
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016fe:	4618      	mov	r0, r3
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr

0800170a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800170a:	b480      	push	{r7}
 800170c:	b083      	sub	sp, #12
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
 8001712:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800171a:	605a      	str	r2, [r3, #4]
  return 0;
 800171c:	2300      	movs	r3, #0
}
 800171e:	4618      	mov	r0, r3
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <_isatty>:

int _isatty(int file)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001732:	2301      	movs	r3, #1
}
 8001734:	4618      	mov	r0, r3
 8001736:	370c      	adds	r7, #12
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr

08001740 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001740:	b480      	push	{r7}
 8001742:	b085      	sub	sp, #20
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	3714      	adds	r7, #20
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr
	...

0800175c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001764:	4a14      	ldr	r2, [pc, #80]	; (80017b8 <_sbrk+0x5c>)
 8001766:	4b15      	ldr	r3, [pc, #84]	; (80017bc <_sbrk+0x60>)
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800176c:	697b      	ldr	r3, [r7, #20]
 800176e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001770:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <_sbrk+0x64>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d102      	bne.n	800177e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001778:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <_sbrk+0x64>)
 800177a:	4a12      	ldr	r2, [pc, #72]	; (80017c4 <_sbrk+0x68>)
 800177c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800177e:	4b10      	ldr	r3, [pc, #64]	; (80017c0 <_sbrk+0x64>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	693a      	ldr	r2, [r7, #16]
 8001788:	429a      	cmp	r2, r3
 800178a:	d207      	bcs.n	800179c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800178c:	f003 fec8 	bl	8005520 <__errno>
 8001790:	4603      	mov	r3, r0
 8001792:	220c      	movs	r2, #12
 8001794:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001796:	f04f 33ff 	mov.w	r3, #4294967295
 800179a:	e009      	b.n	80017b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800179c:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <_sbrk+0x64>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017a2:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <_sbrk+0x64>)
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4413      	add	r3, r2
 80017aa:	4a05      	ldr	r2, [pc, #20]	; (80017c0 <_sbrk+0x64>)
 80017ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ae:	68fb      	ldr	r3, [r7, #12]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	3718      	adds	r7, #24
 80017b4:	46bd      	mov	sp, r7
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20010000 	.word	0x20010000
 80017bc:	00000400 	.word	0x00000400
 80017c0:	20000488 	.word	0x20000488
 80017c4:	200005e0 	.word	0x200005e0

080017c8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <SystemInit+0x20>)
 80017ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017d2:	4a05      	ldr	r2, [pc, #20]	; (80017e8 <SystemInit+0x20>)
 80017d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	e000ed00 	.word	0xe000ed00

080017ec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80017ec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001824 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017f0:	f7ff ffea 	bl	80017c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017f4:	480c      	ldr	r0, [pc, #48]	; (8001828 <LoopForever+0x6>)
  ldr r1, =_edata
 80017f6:	490d      	ldr	r1, [pc, #52]	; (800182c <LoopForever+0xa>)
  ldr r2, =_sidata
 80017f8:	4a0d      	ldr	r2, [pc, #52]	; (8001830 <LoopForever+0xe>)
  movs r3, #0
 80017fa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017fc:	e002      	b.n	8001804 <LoopCopyDataInit>

080017fe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017fe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001800:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001802:	3304      	adds	r3, #4

08001804 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001804:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001806:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001808:	d3f9      	bcc.n	80017fe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800180a:	4a0a      	ldr	r2, [pc, #40]	; (8001834 <LoopForever+0x12>)
  ldr r4, =_ebss
 800180c:	4c0a      	ldr	r4, [pc, #40]	; (8001838 <LoopForever+0x16>)
  movs r3, #0
 800180e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001810:	e001      	b.n	8001816 <LoopFillZerobss>

08001812 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001812:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001814:	3204      	adds	r2, #4

08001816 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001816:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001818:	d3fb      	bcc.n	8001812 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800181a:	f003 fe87 	bl	800552c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800181e:	f7ff fb67 	bl	8000ef0 <main>

08001822 <LoopForever>:

LoopForever:
    b LoopForever
 8001822:	e7fe      	b.n	8001822 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001824:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001828:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800182c:	200001dc 	.word	0x200001dc
  ldr r2, =_sidata
 8001830:	08007ae4 	.word	0x08007ae4
  ldr r2, =_sbss
 8001834:	200001dc 	.word	0x200001dc
  ldr r4, =_ebss
 8001838:	200005dc 	.word	0x200005dc

0800183c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800183c:	e7fe      	b.n	800183c <ADC1_IRQHandler>

0800183e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001844:	2300      	movs	r3, #0
 8001846:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001848:	2003      	movs	r0, #3
 800184a:	f000 f943 	bl	8001ad4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800184e:	2000      	movs	r0, #0
 8001850:	f000 f80e 	bl	8001870 <HAL_InitTick>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d002      	beq.n	8001860 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	71fb      	strb	r3, [r7, #7]
 800185e:	e001      	b.n	8001864 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001860:	f7ff fdd4 	bl	800140c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001864:	79fb      	ldrb	r3, [r7, #7]
}
 8001866:	4618      	mov	r0, r3
 8001868:	3708      	adds	r7, #8
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
	...

08001870 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001878:	2300      	movs	r3, #0
 800187a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 800187c:	4b17      	ldr	r3, [pc, #92]	; (80018dc <HAL_InitTick+0x6c>)
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	2b00      	cmp	r3, #0
 8001882:	d023      	beq.n	80018cc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8001884:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <HAL_InitTick+0x70>)
 8001886:	681a      	ldr	r2, [r3, #0]
 8001888:	4b14      	ldr	r3, [pc, #80]	; (80018dc <HAL_InitTick+0x6c>)
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	4619      	mov	r1, r3
 800188e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001892:	fbb3 f3f1 	udiv	r3, r3, r1
 8001896:	fbb2 f3f3 	udiv	r3, r2, r3
 800189a:	4618      	mov	r0, r3
 800189c:	f000 f941 	bl	8001b22 <HAL_SYSTICK_Config>
 80018a0:	4603      	mov	r3, r0
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d10f      	bne.n	80018c6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	2b0f      	cmp	r3, #15
 80018aa:	d809      	bhi.n	80018c0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018ac:	2200      	movs	r2, #0
 80018ae:	6879      	ldr	r1, [r7, #4]
 80018b0:	f04f 30ff 	mov.w	r0, #4294967295
 80018b4:	f000 f919 	bl	8001aea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018b8:	4a0a      	ldr	r2, [pc, #40]	; (80018e4 <HAL_InitTick+0x74>)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6013      	str	r3, [r2, #0]
 80018be:	e007      	b.n	80018d0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	73fb      	strb	r3, [r7, #15]
 80018c4:	e004      	b.n	80018d0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	73fb      	strb	r3, [r7, #15]
 80018ca:	e001      	b.n	80018d0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80018cc:	2301      	movs	r3, #1
 80018ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	3710      	adds	r7, #16
 80018d6:	46bd      	mov	sp, r7
 80018d8:	bd80      	pop	{r7, pc}
 80018da:	bf00      	nop
 80018dc:	20000010 	.word	0x20000010
 80018e0:	20000008 	.word	0x20000008
 80018e4:	2000000c 	.word	0x2000000c

080018e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80018ec:	4b06      	ldr	r3, [pc, #24]	; (8001908 <HAL_IncTick+0x20>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	461a      	mov	r2, r3
 80018f2:	4b06      	ldr	r3, [pc, #24]	; (800190c <HAL_IncTick+0x24>)
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4413      	add	r3, r2
 80018f8:	4a04      	ldr	r2, [pc, #16]	; (800190c <HAL_IncTick+0x24>)
 80018fa:	6013      	str	r3, [r2, #0]
}
 80018fc:	bf00      	nop
 80018fe:	46bd      	mov	sp, r7
 8001900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001904:	4770      	bx	lr
 8001906:	bf00      	nop
 8001908:	20000010 	.word	0x20000010
 800190c:	2000048c 	.word	0x2000048c

08001910 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001910:	b480      	push	{r7}
 8001912:	af00      	add	r7, sp, #0
  return uwTick;
 8001914:	4b03      	ldr	r3, [pc, #12]	; (8001924 <HAL_GetTick+0x14>)
 8001916:	681b      	ldr	r3, [r3, #0]
}
 8001918:	4618      	mov	r0, r3
 800191a:	46bd      	mov	sp, r7
 800191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001920:	4770      	bx	lr
 8001922:	bf00      	nop
 8001924:	2000048c 	.word	0x2000048c

08001928 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b084      	sub	sp, #16
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001930:	f7ff ffee 	bl	8001910 <HAL_GetTick>
 8001934:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001940:	d005      	beq.n	800194e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8001942:	4b0a      	ldr	r3, [pc, #40]	; (800196c <HAL_Delay+0x44>)
 8001944:	781b      	ldrb	r3, [r3, #0]
 8001946:	461a      	mov	r2, r3
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	4413      	add	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800194e:	bf00      	nop
 8001950:	f7ff ffde 	bl	8001910 <HAL_GetTick>
 8001954:	4602      	mov	r2, r0
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	1ad3      	subs	r3, r2, r3
 800195a:	68fa      	ldr	r2, [r7, #12]
 800195c:	429a      	cmp	r2, r3
 800195e:	d8f7      	bhi.n	8001950 <HAL_Delay+0x28>
  {
  }
}
 8001960:	bf00      	nop
 8001962:	bf00      	nop
 8001964:	3710      	adds	r7, #16
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	20000010 	.word	0x20000010

08001970 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001970:	b480      	push	{r7}
 8001972:	b085      	sub	sp, #20
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f003 0307 	and.w	r3, r3, #7
 800197e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001980:	4b0c      	ldr	r3, [pc, #48]	; (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001986:	68ba      	ldr	r2, [r7, #8]
 8001988:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800198c:	4013      	ands	r3, r2
 800198e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001990:	68fb      	ldr	r3, [r7, #12]
 8001992:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001998:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800199c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019a2:	4a04      	ldr	r2, [pc, #16]	; (80019b4 <__NVIC_SetPriorityGrouping+0x44>)
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	60d3      	str	r3, [r2, #12]
}
 80019a8:	bf00      	nop
 80019aa:	3714      	adds	r7, #20
 80019ac:	46bd      	mov	sp, r7
 80019ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b2:	4770      	bx	lr
 80019b4:	e000ed00 	.word	0xe000ed00

080019b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019bc:	4b04      	ldr	r3, [pc, #16]	; (80019d0 <__NVIC_GetPriorityGrouping+0x18>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	0a1b      	lsrs	r3, r3, #8
 80019c2:	f003 0307 	and.w	r3, r3, #7
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ce:	4770      	bx	lr
 80019d0:	e000ed00 	.word	0xe000ed00

080019d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	6039      	str	r1, [r7, #0]
 80019de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	db0a      	blt.n	80019fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	490c      	ldr	r1, [pc, #48]	; (8001a20 <__NVIC_SetPriority+0x4c>)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	0112      	lsls	r2, r2, #4
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	440b      	add	r3, r1
 80019f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019fc:	e00a      	b.n	8001a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4908      	ldr	r1, [pc, #32]	; (8001a24 <__NVIC_SetPriority+0x50>)
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	3b04      	subs	r3, #4
 8001a0c:	0112      	lsls	r2, r2, #4
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	440b      	add	r3, r1
 8001a12:	761a      	strb	r2, [r3, #24]
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	e000e100 	.word	0xe000e100
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b089      	sub	sp, #36	; 0x24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f1c3 0307 	rsb	r3, r3, #7
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	bf28      	it	cs
 8001a46:	2304      	movcs	r3, #4
 8001a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	2b06      	cmp	r3, #6
 8001a50:	d902      	bls.n	8001a58 <NVIC_EncodePriority+0x30>
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3b03      	subs	r3, #3
 8001a56:	e000      	b.n	8001a5a <NVIC_EncodePriority+0x32>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43da      	mvns	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a70:	f04f 31ff 	mov.w	r1, #4294967295
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7a:	43d9      	mvns	r1, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a80:	4313      	orrs	r3, r2
         );
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3724      	adds	r7, #36	; 0x24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
	...

08001a90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001aa0:	d301      	bcc.n	8001aa6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aa2:	2301      	movs	r3, #1
 8001aa4:	e00f      	b.n	8001ac6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <SysTick_Config+0x40>)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aae:	210f      	movs	r1, #15
 8001ab0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ab4:	f7ff ff8e 	bl	80019d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ab8:	4b05      	ldr	r3, [pc, #20]	; (8001ad0 <SysTick_Config+0x40>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001abe:	4b04      	ldr	r3, [pc, #16]	; (8001ad0 <SysTick_Config+0x40>)
 8001ac0:	2207      	movs	r2, #7
 8001ac2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ac4:	2300      	movs	r3, #0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	e000e010 	.word	0xe000e010

08001ad4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f7ff ff47 	bl	8001970 <__NVIC_SetPriorityGrouping>
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}

08001aea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b086      	sub	sp, #24
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	4603      	mov	r3, r0
 8001af2:	60b9      	str	r1, [r7, #8]
 8001af4:	607a      	str	r2, [r7, #4]
 8001af6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001afc:	f7ff ff5c 	bl	80019b8 <__NVIC_GetPriorityGrouping>
 8001b00:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	68b9      	ldr	r1, [r7, #8]
 8001b06:	6978      	ldr	r0, [r7, #20]
 8001b08:	f7ff ff8e 	bl	8001a28 <NVIC_EncodePriority>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b12:	4611      	mov	r1, r2
 8001b14:	4618      	mov	r0, r3
 8001b16:	f7ff ff5d 	bl	80019d4 <__NVIC_SetPriority>
}
 8001b1a:	bf00      	nop
 8001b1c:	3718      	adds	r7, #24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}

08001b22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b22:	b580      	push	{r7, lr}
 8001b24:	b082      	sub	sp, #8
 8001b26:	af00      	add	r7, sp, #0
 8001b28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b2a:	6878      	ldr	r0, [r7, #4]
 8001b2c:	f7ff ffb0 	bl	8001a90 <SysTick_Config>
 8001b30:	4603      	mov	r3, r0
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3708      	adds	r7, #8
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
	...

08001b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b087      	sub	sp, #28
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
 8001b44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b46:	2300      	movs	r3, #0
 8001b48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b4a:	e148      	b.n	8001dde <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	2101      	movs	r1, #1
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	fa01 f303 	lsl.w	r3, r1, r3
 8001b58:	4013      	ands	r3, r2
 8001b5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	f000 813a 	beq.w	8001dd8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d005      	beq.n	8001b7c <HAL_GPIO_Init+0x40>
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f003 0303 	and.w	r3, r3, #3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d130      	bne.n	8001bde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	2203      	movs	r2, #3
 8001b88:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8c:	43db      	mvns	r3, r3
 8001b8e:	693a      	ldr	r2, [r7, #16]
 8001b90:	4013      	ands	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	68da      	ldr	r2, [r3, #12]
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba0:	693a      	ldr	r2, [r7, #16]
 8001ba2:	4313      	orrs	r3, r2
 8001ba4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001bb2:	2201      	movs	r2, #1
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	43db      	mvns	r3, r3
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	091b      	lsrs	r3, r3, #4
 8001bc8:	f003 0201 	and.w	r2, r3, #1
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd2:	693a      	ldr	r2, [r7, #16]
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	693a      	ldr	r2, [r7, #16]
 8001bdc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	685b      	ldr	r3, [r3, #4]
 8001be2:	f003 0303 	and.w	r3, r3, #3
 8001be6:	2b03      	cmp	r3, #3
 8001be8:	d017      	beq.n	8001c1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	68db      	ldr	r3, [r3, #12]
 8001bee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	005b      	lsls	r3, r3, #1
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	689a      	ldr	r2, [r3, #8]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	005b      	lsls	r3, r3, #1
 8001c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4313      	orrs	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	693a      	ldr	r2, [r7, #16]
 8001c18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d123      	bne.n	8001c6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	08da      	lsrs	r2, r3, #3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	3208      	adds	r2, #8
 8001c2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c32:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c34:	697b      	ldr	r3, [r7, #20]
 8001c36:	f003 0307 	and.w	r3, r3, #7
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	220f      	movs	r2, #15
 8001c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c42:	43db      	mvns	r3, r3
 8001c44:	693a      	ldr	r2, [r7, #16]
 8001c46:	4013      	ands	r3, r2
 8001c48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	691a      	ldr	r2, [r3, #16]
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	08da      	lsrs	r2, r3, #3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3208      	adds	r2, #8
 8001c68:	6939      	ldr	r1, [r7, #16]
 8001c6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	2203      	movs	r2, #3
 8001c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	693a      	ldr	r2, [r7, #16]
 8001c82:	4013      	ands	r3, r2
 8001c84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f003 0203 	and.w	r2, r3, #3
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	fa02 f303 	lsl.w	r3, r2, r3
 8001c96:	693a      	ldr	r2, [r7, #16]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	f000 8094 	beq.w	8001dd8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb0:	4b52      	ldr	r3, [pc, #328]	; (8001dfc <HAL_GPIO_Init+0x2c0>)
 8001cb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cb4:	4a51      	ldr	r2, [pc, #324]	; (8001dfc <HAL_GPIO_Init+0x2c0>)
 8001cb6:	f043 0301 	orr.w	r3, r3, #1
 8001cba:	6613      	str	r3, [r2, #96]	; 0x60
 8001cbc:	4b4f      	ldr	r3, [pc, #316]	; (8001dfc <HAL_GPIO_Init+0x2c0>)
 8001cbe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	60bb      	str	r3, [r7, #8]
 8001cc6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cc8:	4a4d      	ldr	r2, [pc, #308]	; (8001e00 <HAL_GPIO_Init+0x2c4>)
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	089b      	lsrs	r3, r3, #2
 8001cce:	3302      	adds	r3, #2
 8001cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	009b      	lsls	r3, r3, #2
 8001cde:	220f      	movs	r2, #15
 8001ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce4:	43db      	mvns	r3, r3
 8001ce6:	693a      	ldr	r2, [r7, #16]
 8001ce8:	4013      	ands	r3, r2
 8001cea:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001cf2:	d00d      	beq.n	8001d10 <HAL_GPIO_Init+0x1d4>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a43      	ldr	r2, [pc, #268]	; (8001e04 <HAL_GPIO_Init+0x2c8>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d007      	beq.n	8001d0c <HAL_GPIO_Init+0x1d0>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a42      	ldr	r2, [pc, #264]	; (8001e08 <HAL_GPIO_Init+0x2cc>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d101      	bne.n	8001d08 <HAL_GPIO_Init+0x1cc>
 8001d04:	2302      	movs	r3, #2
 8001d06:	e004      	b.n	8001d12 <HAL_GPIO_Init+0x1d6>
 8001d08:	2307      	movs	r3, #7
 8001d0a:	e002      	b.n	8001d12 <HAL_GPIO_Init+0x1d6>
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e000      	b.n	8001d12 <HAL_GPIO_Init+0x1d6>
 8001d10:	2300      	movs	r3, #0
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	f002 0203 	and.w	r2, r2, #3
 8001d18:	0092      	lsls	r2, r2, #2
 8001d1a:	4093      	lsls	r3, r2
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d22:	4937      	ldr	r1, [pc, #220]	; (8001e00 <HAL_GPIO_Init+0x2c4>)
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	089b      	lsrs	r3, r3, #2
 8001d28:	3302      	adds	r3, #2
 8001d2a:	693a      	ldr	r2, [r7, #16]
 8001d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001d30:	4b36      	ldr	r3, [pc, #216]	; (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d003      	beq.n	8001d54 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001d54:	4a2d      	ldr	r2, [pc, #180]	; (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001d5a:	4b2c      	ldr	r3, [pc, #176]	; (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	693a      	ldr	r2, [r7, #16]
 8001d66:	4013      	ands	r3, r2
 8001d68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d003      	beq.n	8001d7e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001d76:	693a      	ldr	r2, [r7, #16]
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4313      	orrs	r3, r2
 8001d7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001d7e:	4a23      	ldr	r2, [pc, #140]	; (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001d84:	4b21      	ldr	r3, [pc, #132]	; (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	43db      	mvns	r3, r3
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	4013      	ands	r3, r2
 8001d92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d003      	beq.n	8001da8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001da0:	693a      	ldr	r2, [r7, #16]
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001da8:	4a18      	ldr	r2, [pc, #96]	; (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001dae:	4b17      	ldr	r3, [pc, #92]	; (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	43db      	mvns	r3, r3
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	4013      	ands	r3, r2
 8001dbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d003      	beq.n	8001dd2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001dd2:	4a0e      	ldr	r2, [pc, #56]	; (8001e0c <HAL_GPIO_Init+0x2d0>)
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001dd8:	697b      	ldr	r3, [r7, #20]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	fa22 f303 	lsr.w	r3, r2, r3
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f47f aeaf 	bne.w	8001b4c <HAL_GPIO_Init+0x10>
  }
}
 8001dee:	bf00      	nop
 8001df0:	bf00      	nop
 8001df2:	371c      	adds	r7, #28
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	40010000 	.word	0x40010000
 8001e04:	48000400 	.word	0x48000400
 8001e08:	48000800 	.word	0x48000800
 8001e0c:	40010400 	.word	0x40010400

08001e10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e10:	b480      	push	{r7}
 8001e12:	b083      	sub	sp, #12
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	460b      	mov	r3, r1
 8001e1a:	807b      	strh	r3, [r7, #2]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e20:	787b      	ldrb	r3, [r7, #1]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d003      	beq.n	8001e2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e26:	887a      	ldrh	r2, [r7, #2]
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e2c:	e002      	b.n	8001e34 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e2e:	887a      	ldrh	r2, [r7, #2]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001e44:	4b04      	ldr	r3, [pc, #16]	; (8001e58 <HAL_PWREx_GetVoltageRange+0x18>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
 8001e56:	bf00      	nop
 8001e58:	40007000 	.word	0x40007000

08001e5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b085      	sub	sp, #20
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e6a:	d130      	bne.n	8001ece <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e6c:	4b23      	ldr	r3, [pc, #140]	; (8001efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e78:	d038      	beq.n	8001eec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e7a:	4b20      	ldr	r3, [pc, #128]	; (8001efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e82:	4a1e      	ldr	r2, [pc, #120]	; (8001efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001e84:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e88:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e8a:	4b1d      	ldr	r3, [pc, #116]	; (8001f00 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2232      	movs	r2, #50	; 0x32
 8001e90:	fb02 f303 	mul.w	r3, r2, r3
 8001e94:	4a1b      	ldr	r2, [pc, #108]	; (8001f04 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001e96:	fba2 2303 	umull	r2, r3, r2, r3
 8001e9a:	0c9b      	lsrs	r3, r3, #18
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ea0:	e002      	b.n	8001ea8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001ea8:	4b14      	ldr	r3, [pc, #80]	; (8001efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001eaa:	695b      	ldr	r3, [r3, #20]
 8001eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eb4:	d102      	bne.n	8001ebc <HAL_PWREx_ControlVoltageScaling+0x60>
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d1f2      	bne.n	8001ea2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ebc:	4b0f      	ldr	r3, [pc, #60]	; (8001efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ec4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ec8:	d110      	bne.n	8001eec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e00f      	b.n	8001eee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ece:	4b0b      	ldr	r3, [pc, #44]	; (8001efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001ed6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001eda:	d007      	beq.n	8001eec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001edc:	4b07      	ldr	r3, [pc, #28]	; (8001efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ee4:	4a05      	ldr	r2, [pc, #20]	; (8001efc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ee6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001eea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	40007000 	.word	0x40007000
 8001f00:	20000008 	.word	0x20000008
 8001f04:	431bde83 	.word	0x431bde83

08001f08 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b088      	sub	sp, #32
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d102      	bne.n	8001f1c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001f16:	2301      	movs	r3, #1
 8001f18:	f000 bc02 	b.w	8002720 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f1c:	4b96      	ldr	r3, [pc, #600]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8001f1e:	689b      	ldr	r3, [r3, #8]
 8001f20:	f003 030c 	and.w	r3, r3, #12
 8001f24:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f26:	4b94      	ldr	r3, [pc, #592]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8001f28:	68db      	ldr	r3, [r3, #12]
 8001f2a:	f003 0303 	and.w	r3, r3, #3
 8001f2e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0310 	and.w	r3, r3, #16
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f000 80e4 	beq.w	8002106 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d007      	beq.n	8001f54 <HAL_RCC_OscConfig+0x4c>
 8001f44:	69bb      	ldr	r3, [r7, #24]
 8001f46:	2b0c      	cmp	r3, #12
 8001f48:	f040 808b 	bne.w	8002062 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f4c:	697b      	ldr	r3, [r7, #20]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	f040 8087 	bne.w	8002062 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f54:	4b88      	ldr	r3, [pc, #544]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0302 	and.w	r3, r3, #2
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d005      	beq.n	8001f6c <HAL_RCC_OscConfig+0x64>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e3d9      	b.n	8002720 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6a1a      	ldr	r2, [r3, #32]
 8001f70:	4b81      	ldr	r3, [pc, #516]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0308 	and.w	r3, r3, #8
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d004      	beq.n	8001f86 <HAL_RCC_OscConfig+0x7e>
 8001f7c:	4b7e      	ldr	r3, [pc, #504]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f84:	e005      	b.n	8001f92 <HAL_RCC_OscConfig+0x8a>
 8001f86:	4b7c      	ldr	r3, [pc, #496]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8001f88:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f8c:	091b      	lsrs	r3, r3, #4
 8001f8e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d223      	bcs.n	8001fde <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a1b      	ldr	r3, [r3, #32]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f000 fd8c 	bl	8002ab8 <RCC_SetFlashLatencyFromMSIRange>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d001      	beq.n	8001faa <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e3ba      	b.n	8002720 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001faa:	4b73      	ldr	r3, [pc, #460]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4a72      	ldr	r2, [pc, #456]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8001fb0:	f043 0308 	orr.w	r3, r3, #8
 8001fb4:	6013      	str	r3, [r2, #0]
 8001fb6:	4b70      	ldr	r3, [pc, #448]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6a1b      	ldr	r3, [r3, #32]
 8001fc2:	496d      	ldr	r1, [pc, #436]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fc8:	4b6b      	ldr	r3, [pc, #428]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8001fca:	685b      	ldr	r3, [r3, #4]
 8001fcc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	69db      	ldr	r3, [r3, #28]
 8001fd4:	021b      	lsls	r3, r3, #8
 8001fd6:	4968      	ldr	r1, [pc, #416]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	604b      	str	r3, [r1, #4]
 8001fdc:	e025      	b.n	800202a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fde:	4b66      	ldr	r3, [pc, #408]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a65      	ldr	r2, [pc, #404]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8001fe4:	f043 0308 	orr.w	r3, r3, #8
 8001fe8:	6013      	str	r3, [r2, #0]
 8001fea:	4b63      	ldr	r3, [pc, #396]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	4960      	ldr	r1, [pc, #384]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ffc:	4b5e      	ldr	r3, [pc, #376]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8001ffe:	685b      	ldr	r3, [r3, #4]
 8002000:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	69db      	ldr	r3, [r3, #28]
 8002008:	021b      	lsls	r3, r3, #8
 800200a:	495b      	ldr	r1, [pc, #364]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 800200c:	4313      	orrs	r3, r2
 800200e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002010:	69bb      	ldr	r3, [r7, #24]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d109      	bne.n	800202a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6a1b      	ldr	r3, [r3, #32]
 800201a:	4618      	mov	r0, r3
 800201c:	f000 fd4c 	bl	8002ab8 <RCC_SetFlashLatencyFromMSIRange>
 8002020:	4603      	mov	r3, r0
 8002022:	2b00      	cmp	r3, #0
 8002024:	d001      	beq.n	800202a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e37a      	b.n	8002720 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800202a:	f000 fc81 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 800202e:	4602      	mov	r2, r0
 8002030:	4b51      	ldr	r3, [pc, #324]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	091b      	lsrs	r3, r3, #4
 8002036:	f003 030f 	and.w	r3, r3, #15
 800203a:	4950      	ldr	r1, [pc, #320]	; (800217c <HAL_RCC_OscConfig+0x274>)
 800203c:	5ccb      	ldrb	r3, [r1, r3]
 800203e:	f003 031f 	and.w	r3, r3, #31
 8002042:	fa22 f303 	lsr.w	r3, r2, r3
 8002046:	4a4e      	ldr	r2, [pc, #312]	; (8002180 <HAL_RCC_OscConfig+0x278>)
 8002048:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800204a:	4b4e      	ldr	r3, [pc, #312]	; (8002184 <HAL_RCC_OscConfig+0x27c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff fc0e 	bl	8001870 <HAL_InitTick>
 8002054:	4603      	mov	r3, r0
 8002056:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002058:	7bfb      	ldrb	r3, [r7, #15]
 800205a:	2b00      	cmp	r3, #0
 800205c:	d052      	beq.n	8002104 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800205e:	7bfb      	ldrb	r3, [r7, #15]
 8002060:	e35e      	b.n	8002720 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d032      	beq.n	80020d0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800206a:	4b43      	ldr	r3, [pc, #268]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a42      	ldr	r2, [pc, #264]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002076:	f7ff fc4b 	bl	8001910 <HAL_GetTick>
 800207a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800207c:	e008      	b.n	8002090 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800207e:	f7ff fc47 	bl	8001910 <HAL_GetTick>
 8002082:	4602      	mov	r2, r0
 8002084:	693b      	ldr	r3, [r7, #16]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e347      	b.n	8002720 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002090:	4b39      	ldr	r3, [pc, #228]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d0f0      	beq.n	800207e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800209c:	4b36      	ldr	r3, [pc, #216]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4a35      	ldr	r2, [pc, #212]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 80020a2:	f043 0308 	orr.w	r3, r3, #8
 80020a6:	6013      	str	r3, [r2, #0]
 80020a8:	4b33      	ldr	r3, [pc, #204]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	4930      	ldr	r1, [pc, #192]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 80020b6:	4313      	orrs	r3, r2
 80020b8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020ba:	4b2f      	ldr	r3, [pc, #188]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	69db      	ldr	r3, [r3, #28]
 80020c6:	021b      	lsls	r3, r3, #8
 80020c8:	492b      	ldr	r1, [pc, #172]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 80020ca:	4313      	orrs	r3, r2
 80020cc:	604b      	str	r3, [r1, #4]
 80020ce:	e01a      	b.n	8002106 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80020d0:	4b29      	ldr	r3, [pc, #164]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a28      	ldr	r2, [pc, #160]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 80020d6:	f023 0301 	bic.w	r3, r3, #1
 80020da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020dc:	f7ff fc18 	bl	8001910 <HAL_GetTick>
 80020e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020e2:	e008      	b.n	80020f6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020e4:	f7ff fc14 	bl	8001910 <HAL_GetTick>
 80020e8:	4602      	mov	r2, r0
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	1ad3      	subs	r3, r2, r3
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d901      	bls.n	80020f6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80020f2:	2303      	movs	r3, #3
 80020f4:	e314      	b.n	8002720 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020f6:	4b20      	ldr	r3, [pc, #128]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f003 0302 	and.w	r3, r3, #2
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d1f0      	bne.n	80020e4 <HAL_RCC_OscConfig+0x1dc>
 8002102:	e000      	b.n	8002106 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002104:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d073      	beq.n	80021fa <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	2b08      	cmp	r3, #8
 8002116:	d005      	beq.n	8002124 <HAL_RCC_OscConfig+0x21c>
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	2b0c      	cmp	r3, #12
 800211c:	d10e      	bne.n	800213c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	2b03      	cmp	r3, #3
 8002122:	d10b      	bne.n	800213c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002124:	4b14      	ldr	r3, [pc, #80]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800212c:	2b00      	cmp	r3, #0
 800212e:	d063      	beq.n	80021f8 <HAL_RCC_OscConfig+0x2f0>
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d15f      	bne.n	80021f8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e2f1      	b.n	8002720 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002144:	d106      	bne.n	8002154 <HAL_RCC_OscConfig+0x24c>
 8002146:	4b0c      	ldr	r3, [pc, #48]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a0b      	ldr	r2, [pc, #44]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 800214c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002150:	6013      	str	r3, [r2, #0]
 8002152:	e025      	b.n	80021a0 <HAL_RCC_OscConfig+0x298>
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800215c:	d114      	bne.n	8002188 <HAL_RCC_OscConfig+0x280>
 800215e:	4b06      	ldr	r3, [pc, #24]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a05      	ldr	r2, [pc, #20]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8002164:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	4b03      	ldr	r3, [pc, #12]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4a02      	ldr	r2, [pc, #8]	; (8002178 <HAL_RCC_OscConfig+0x270>)
 8002170:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002174:	6013      	str	r3, [r2, #0]
 8002176:	e013      	b.n	80021a0 <HAL_RCC_OscConfig+0x298>
 8002178:	40021000 	.word	0x40021000
 800217c:	08007718 	.word	0x08007718
 8002180:	20000008 	.word	0x20000008
 8002184:	2000000c 	.word	0x2000000c
 8002188:	4ba0      	ldr	r3, [pc, #640]	; (800240c <HAL_RCC_OscConfig+0x504>)
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4a9f      	ldr	r2, [pc, #636]	; (800240c <HAL_RCC_OscConfig+0x504>)
 800218e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002192:	6013      	str	r3, [r2, #0]
 8002194:	4b9d      	ldr	r3, [pc, #628]	; (800240c <HAL_RCC_OscConfig+0x504>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a9c      	ldr	r2, [pc, #624]	; (800240c <HAL_RCC_OscConfig+0x504>)
 800219a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800219e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d013      	beq.n	80021d0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a8:	f7ff fbb2 	bl	8001910 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021b0:	f7ff fbae 	bl	8001910 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b64      	cmp	r3, #100	; 0x64
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e2ae      	b.n	8002720 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021c2:	4b92      	ldr	r3, [pc, #584]	; (800240c <HAL_RCC_OscConfig+0x504>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d0f0      	beq.n	80021b0 <HAL_RCC_OscConfig+0x2a8>
 80021ce:	e014      	b.n	80021fa <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d0:	f7ff fb9e 	bl	8001910 <HAL_GetTick>
 80021d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021d6:	e008      	b.n	80021ea <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021d8:	f7ff fb9a 	bl	8001910 <HAL_GetTick>
 80021dc:	4602      	mov	r2, r0
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	1ad3      	subs	r3, r2, r3
 80021e2:	2b64      	cmp	r3, #100	; 0x64
 80021e4:	d901      	bls.n	80021ea <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021e6:	2303      	movs	r3, #3
 80021e8:	e29a      	b.n	8002720 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ea:	4b88      	ldr	r3, [pc, #544]	; (800240c <HAL_RCC_OscConfig+0x504>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d1f0      	bne.n	80021d8 <HAL_RCC_OscConfig+0x2d0>
 80021f6:	e000      	b.n	80021fa <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f003 0302 	and.w	r3, r3, #2
 8002202:	2b00      	cmp	r3, #0
 8002204:	d060      	beq.n	80022c8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002206:	69bb      	ldr	r3, [r7, #24]
 8002208:	2b04      	cmp	r3, #4
 800220a:	d005      	beq.n	8002218 <HAL_RCC_OscConfig+0x310>
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	2b0c      	cmp	r3, #12
 8002210:	d119      	bne.n	8002246 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	2b02      	cmp	r3, #2
 8002216:	d116      	bne.n	8002246 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002218:	4b7c      	ldr	r3, [pc, #496]	; (800240c <HAL_RCC_OscConfig+0x504>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <HAL_RCC_OscConfig+0x328>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d101      	bne.n	8002230 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e277      	b.n	8002720 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002230:	4b76      	ldr	r3, [pc, #472]	; (800240c <HAL_RCC_OscConfig+0x504>)
 8002232:	685b      	ldr	r3, [r3, #4]
 8002234:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	691b      	ldr	r3, [r3, #16]
 800223c:	061b      	lsls	r3, r3, #24
 800223e:	4973      	ldr	r1, [pc, #460]	; (800240c <HAL_RCC_OscConfig+0x504>)
 8002240:	4313      	orrs	r3, r2
 8002242:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002244:	e040      	b.n	80022c8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68db      	ldr	r3, [r3, #12]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d023      	beq.n	8002296 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800224e:	4b6f      	ldr	r3, [pc, #444]	; (800240c <HAL_RCC_OscConfig+0x504>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a6e      	ldr	r2, [pc, #440]	; (800240c <HAL_RCC_OscConfig+0x504>)
 8002254:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002258:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800225a:	f7ff fb59 	bl	8001910 <HAL_GetTick>
 800225e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002260:	e008      	b.n	8002274 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002262:	f7ff fb55 	bl	8001910 <HAL_GetTick>
 8002266:	4602      	mov	r2, r0
 8002268:	693b      	ldr	r3, [r7, #16]
 800226a:	1ad3      	subs	r3, r2, r3
 800226c:	2b02      	cmp	r3, #2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e255      	b.n	8002720 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002274:	4b65      	ldr	r3, [pc, #404]	; (800240c <HAL_RCC_OscConfig+0x504>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800227c:	2b00      	cmp	r3, #0
 800227e:	d0f0      	beq.n	8002262 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002280:	4b62      	ldr	r3, [pc, #392]	; (800240c <HAL_RCC_OscConfig+0x504>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	691b      	ldr	r3, [r3, #16]
 800228c:	061b      	lsls	r3, r3, #24
 800228e:	495f      	ldr	r1, [pc, #380]	; (800240c <HAL_RCC_OscConfig+0x504>)
 8002290:	4313      	orrs	r3, r2
 8002292:	604b      	str	r3, [r1, #4]
 8002294:	e018      	b.n	80022c8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002296:	4b5d      	ldr	r3, [pc, #372]	; (800240c <HAL_RCC_OscConfig+0x504>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a5c      	ldr	r2, [pc, #368]	; (800240c <HAL_RCC_OscConfig+0x504>)
 800229c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80022a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a2:	f7ff fb35 	bl	8001910 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022aa:	f7ff fb31 	bl	8001910 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e231      	b.n	8002720 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022bc:	4b53      	ldr	r3, [pc, #332]	; (800240c <HAL_RCC_OscConfig+0x504>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1f0      	bne.n	80022aa <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0308 	and.w	r3, r3, #8
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d03c      	beq.n	800234e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	695b      	ldr	r3, [r3, #20]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d01c      	beq.n	8002316 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022dc:	4b4b      	ldr	r3, [pc, #300]	; (800240c <HAL_RCC_OscConfig+0x504>)
 80022de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022e2:	4a4a      	ldr	r2, [pc, #296]	; (800240c <HAL_RCC_OscConfig+0x504>)
 80022e4:	f043 0301 	orr.w	r3, r3, #1
 80022e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ec:	f7ff fb10 	bl	8001910 <HAL_GetTick>
 80022f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f4:	f7ff fb0c 	bl	8001910 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	693b      	ldr	r3, [r7, #16]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e20c      	b.n	8002720 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002306:	4b41      	ldr	r3, [pc, #260]	; (800240c <HAL_RCC_OscConfig+0x504>)
 8002308:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800230c:	f003 0302 	and.w	r3, r3, #2
 8002310:	2b00      	cmp	r3, #0
 8002312:	d0ef      	beq.n	80022f4 <HAL_RCC_OscConfig+0x3ec>
 8002314:	e01b      	b.n	800234e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002316:	4b3d      	ldr	r3, [pc, #244]	; (800240c <HAL_RCC_OscConfig+0x504>)
 8002318:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800231c:	4a3b      	ldr	r2, [pc, #236]	; (800240c <HAL_RCC_OscConfig+0x504>)
 800231e:	f023 0301 	bic.w	r3, r3, #1
 8002322:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002326:	f7ff faf3 	bl	8001910 <HAL_GetTick>
 800232a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800232c:	e008      	b.n	8002340 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800232e:	f7ff faef 	bl	8001910 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e1ef      	b.n	8002720 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002340:	4b32      	ldr	r3, [pc, #200]	; (800240c <HAL_RCC_OscConfig+0x504>)
 8002342:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002346:	f003 0302 	and.w	r3, r3, #2
 800234a:	2b00      	cmp	r3, #0
 800234c:	d1ef      	bne.n	800232e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0304 	and.w	r3, r3, #4
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 80a6 	beq.w	80024a8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800235c:	2300      	movs	r3, #0
 800235e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002360:	4b2a      	ldr	r3, [pc, #168]	; (800240c <HAL_RCC_OscConfig+0x504>)
 8002362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002364:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d10d      	bne.n	8002388 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800236c:	4b27      	ldr	r3, [pc, #156]	; (800240c <HAL_RCC_OscConfig+0x504>)
 800236e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002370:	4a26      	ldr	r2, [pc, #152]	; (800240c <HAL_RCC_OscConfig+0x504>)
 8002372:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002376:	6593      	str	r3, [r2, #88]	; 0x58
 8002378:	4b24      	ldr	r3, [pc, #144]	; (800240c <HAL_RCC_OscConfig+0x504>)
 800237a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002380:	60bb      	str	r3, [r7, #8]
 8002382:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002384:	2301      	movs	r3, #1
 8002386:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002388:	4b21      	ldr	r3, [pc, #132]	; (8002410 <HAL_RCC_OscConfig+0x508>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002390:	2b00      	cmp	r3, #0
 8002392:	d118      	bne.n	80023c6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002394:	4b1e      	ldr	r3, [pc, #120]	; (8002410 <HAL_RCC_OscConfig+0x508>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a1d      	ldr	r2, [pc, #116]	; (8002410 <HAL_RCC_OscConfig+0x508>)
 800239a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800239e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023a0:	f7ff fab6 	bl	8001910 <HAL_GetTick>
 80023a4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023a6:	e008      	b.n	80023ba <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023a8:	f7ff fab2 	bl	8001910 <HAL_GetTick>
 80023ac:	4602      	mov	r2, r0
 80023ae:	693b      	ldr	r3, [r7, #16]
 80023b0:	1ad3      	subs	r3, r2, r3
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d901      	bls.n	80023ba <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80023b6:	2303      	movs	r3, #3
 80023b8:	e1b2      	b.n	8002720 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023ba:	4b15      	ldr	r3, [pc, #84]	; (8002410 <HAL_RCC_OscConfig+0x508>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d0f0      	beq.n	80023a8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d108      	bne.n	80023e0 <HAL_RCC_OscConfig+0x4d8>
 80023ce:	4b0f      	ldr	r3, [pc, #60]	; (800240c <HAL_RCC_OscConfig+0x504>)
 80023d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d4:	4a0d      	ldr	r2, [pc, #52]	; (800240c <HAL_RCC_OscConfig+0x504>)
 80023d6:	f043 0301 	orr.w	r3, r3, #1
 80023da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023de:	e029      	b.n	8002434 <HAL_RCC_OscConfig+0x52c>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	2b05      	cmp	r3, #5
 80023e6:	d115      	bne.n	8002414 <HAL_RCC_OscConfig+0x50c>
 80023e8:	4b08      	ldr	r3, [pc, #32]	; (800240c <HAL_RCC_OscConfig+0x504>)
 80023ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ee:	4a07      	ldr	r2, [pc, #28]	; (800240c <HAL_RCC_OscConfig+0x504>)
 80023f0:	f043 0304 	orr.w	r3, r3, #4
 80023f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80023f8:	4b04      	ldr	r3, [pc, #16]	; (800240c <HAL_RCC_OscConfig+0x504>)
 80023fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fe:	4a03      	ldr	r2, [pc, #12]	; (800240c <HAL_RCC_OscConfig+0x504>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002408:	e014      	b.n	8002434 <HAL_RCC_OscConfig+0x52c>
 800240a:	bf00      	nop
 800240c:	40021000 	.word	0x40021000
 8002410:	40007000 	.word	0x40007000
 8002414:	4b9a      	ldr	r3, [pc, #616]	; (8002680 <HAL_RCC_OscConfig+0x778>)
 8002416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800241a:	4a99      	ldr	r2, [pc, #612]	; (8002680 <HAL_RCC_OscConfig+0x778>)
 800241c:	f023 0301 	bic.w	r3, r3, #1
 8002420:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002424:	4b96      	ldr	r3, [pc, #600]	; (8002680 <HAL_RCC_OscConfig+0x778>)
 8002426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800242a:	4a95      	ldr	r2, [pc, #596]	; (8002680 <HAL_RCC_OscConfig+0x778>)
 800242c:	f023 0304 	bic.w	r3, r3, #4
 8002430:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d016      	beq.n	800246a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243c:	f7ff fa68 	bl	8001910 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002442:	e00a      	b.n	800245a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002444:	f7ff fa64 	bl	8001910 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002452:	4293      	cmp	r3, r2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e162      	b.n	8002720 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800245a:	4b89      	ldr	r3, [pc, #548]	; (8002680 <HAL_RCC_OscConfig+0x778>)
 800245c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d0ed      	beq.n	8002444 <HAL_RCC_OscConfig+0x53c>
 8002468:	e015      	b.n	8002496 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800246a:	f7ff fa51 	bl	8001910 <HAL_GetTick>
 800246e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002470:	e00a      	b.n	8002488 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002472:	f7ff fa4d 	bl	8001910 <HAL_GetTick>
 8002476:	4602      	mov	r2, r0
 8002478:	693b      	ldr	r3, [r7, #16]
 800247a:	1ad3      	subs	r3, r2, r3
 800247c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002480:	4293      	cmp	r3, r2
 8002482:	d901      	bls.n	8002488 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002484:	2303      	movs	r3, #3
 8002486:	e14b      	b.n	8002720 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002488:	4b7d      	ldr	r3, [pc, #500]	; (8002680 <HAL_RCC_OscConfig+0x778>)
 800248a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1ed      	bne.n	8002472 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002496:	7ffb      	ldrb	r3, [r7, #31]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d105      	bne.n	80024a8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800249c:	4b78      	ldr	r3, [pc, #480]	; (8002680 <HAL_RCC_OscConfig+0x778>)
 800249e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024a0:	4a77      	ldr	r2, [pc, #476]	; (8002680 <HAL_RCC_OscConfig+0x778>)
 80024a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80024a6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0320 	and.w	r3, r3, #32
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d03c      	beq.n	800252e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d01c      	beq.n	80024f6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024bc:	4b70      	ldr	r3, [pc, #448]	; (8002680 <HAL_RCC_OscConfig+0x778>)
 80024be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024c2:	4a6f      	ldr	r2, [pc, #444]	; (8002680 <HAL_RCC_OscConfig+0x778>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024cc:	f7ff fa20 	bl	8001910 <HAL_GetTick>
 80024d0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024d2:	e008      	b.n	80024e6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024d4:	f7ff fa1c 	bl	8001910 <HAL_GetTick>
 80024d8:	4602      	mov	r2, r0
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	1ad3      	subs	r3, r2, r3
 80024de:	2b02      	cmp	r3, #2
 80024e0:	d901      	bls.n	80024e6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80024e2:	2303      	movs	r3, #3
 80024e4:	e11c      	b.n	8002720 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024e6:	4b66      	ldr	r3, [pc, #408]	; (8002680 <HAL_RCC_OscConfig+0x778>)
 80024e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024ec:	f003 0302 	and.w	r3, r3, #2
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d0ef      	beq.n	80024d4 <HAL_RCC_OscConfig+0x5cc>
 80024f4:	e01b      	b.n	800252e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024f6:	4b62      	ldr	r3, [pc, #392]	; (8002680 <HAL_RCC_OscConfig+0x778>)
 80024f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80024fc:	4a60      	ldr	r2, [pc, #384]	; (8002680 <HAL_RCC_OscConfig+0x778>)
 80024fe:	f023 0301 	bic.w	r3, r3, #1
 8002502:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002506:	f7ff fa03 	bl	8001910 <HAL_GetTick>
 800250a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800250c:	e008      	b.n	8002520 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800250e:	f7ff f9ff 	bl	8001910 <HAL_GetTick>
 8002512:	4602      	mov	r2, r0
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	2b02      	cmp	r3, #2
 800251a:	d901      	bls.n	8002520 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800251c:	2303      	movs	r3, #3
 800251e:	e0ff      	b.n	8002720 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002520:	4b57      	ldr	r3, [pc, #348]	; (8002680 <HAL_RCC_OscConfig+0x778>)
 8002522:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002526:	f003 0302 	and.w	r3, r3, #2
 800252a:	2b00      	cmp	r3, #0
 800252c:	d1ef      	bne.n	800250e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002532:	2b00      	cmp	r3, #0
 8002534:	f000 80f3 	beq.w	800271e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800253c:	2b02      	cmp	r3, #2
 800253e:	f040 80c9 	bne.w	80026d4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002542:	4b4f      	ldr	r3, [pc, #316]	; (8002680 <HAL_RCC_OscConfig+0x778>)
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002548:	697b      	ldr	r3, [r7, #20]
 800254a:	f003 0203 	and.w	r2, r3, #3
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002552:	429a      	cmp	r2, r3
 8002554:	d12c      	bne.n	80025b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002556:	697b      	ldr	r3, [r7, #20]
 8002558:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002560:	3b01      	subs	r3, #1
 8002562:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002564:	429a      	cmp	r2, r3
 8002566:	d123      	bne.n	80025b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002572:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002574:	429a      	cmp	r2, r3
 8002576:	d11b      	bne.n	80025b0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002582:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002584:	429a      	cmp	r2, r3
 8002586:	d113      	bne.n	80025b0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002592:	085b      	lsrs	r3, r3, #1
 8002594:	3b01      	subs	r3, #1
 8002596:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002598:	429a      	cmp	r2, r3
 800259a:	d109      	bne.n	80025b0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	085b      	lsrs	r3, r3, #1
 80025a8:	3b01      	subs	r3, #1
 80025aa:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d06b      	beq.n	8002688 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	2b0c      	cmp	r3, #12
 80025b4:	d062      	beq.n	800267c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80025b6:	4b32      	ldr	r3, [pc, #200]	; (8002680 <HAL_RCC_OscConfig+0x778>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d001      	beq.n	80025c6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80025c2:	2301      	movs	r3, #1
 80025c4:	e0ac      	b.n	8002720 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80025c6:	4b2e      	ldr	r3, [pc, #184]	; (8002680 <HAL_RCC_OscConfig+0x778>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a2d      	ldr	r2, [pc, #180]	; (8002680 <HAL_RCC_OscConfig+0x778>)
 80025cc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025d0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025d2:	f7ff f99d 	bl	8001910 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025da:	f7ff f999 	bl	8001910 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e099      	b.n	8002720 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025ec:	4b24      	ldr	r3, [pc, #144]	; (8002680 <HAL_RCC_OscConfig+0x778>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d1f0      	bne.n	80025da <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025f8:	4b21      	ldr	r3, [pc, #132]	; (8002680 <HAL_RCC_OscConfig+0x778>)
 80025fa:	68da      	ldr	r2, [r3, #12]
 80025fc:	4b21      	ldr	r3, [pc, #132]	; (8002684 <HAL_RCC_OscConfig+0x77c>)
 80025fe:	4013      	ands	r3, r2
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002604:	687a      	ldr	r2, [r7, #4]
 8002606:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8002608:	3a01      	subs	r2, #1
 800260a:	0112      	lsls	r2, r2, #4
 800260c:	4311      	orrs	r1, r2
 800260e:	687a      	ldr	r2, [r7, #4]
 8002610:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002612:	0212      	lsls	r2, r2, #8
 8002614:	4311      	orrs	r1, r2
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800261a:	0852      	lsrs	r2, r2, #1
 800261c:	3a01      	subs	r2, #1
 800261e:	0552      	lsls	r2, r2, #21
 8002620:	4311      	orrs	r1, r2
 8002622:	687a      	ldr	r2, [r7, #4]
 8002624:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002626:	0852      	lsrs	r2, r2, #1
 8002628:	3a01      	subs	r2, #1
 800262a:	0652      	lsls	r2, r2, #25
 800262c:	4311      	orrs	r1, r2
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002632:	06d2      	lsls	r2, r2, #27
 8002634:	430a      	orrs	r2, r1
 8002636:	4912      	ldr	r1, [pc, #72]	; (8002680 <HAL_RCC_OscConfig+0x778>)
 8002638:	4313      	orrs	r3, r2
 800263a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800263c:	4b10      	ldr	r3, [pc, #64]	; (8002680 <HAL_RCC_OscConfig+0x778>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a0f      	ldr	r2, [pc, #60]	; (8002680 <HAL_RCC_OscConfig+0x778>)
 8002642:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002646:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002648:	4b0d      	ldr	r3, [pc, #52]	; (8002680 <HAL_RCC_OscConfig+0x778>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	4a0c      	ldr	r2, [pc, #48]	; (8002680 <HAL_RCC_OscConfig+0x778>)
 800264e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002652:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002654:	f7ff f95c 	bl	8001910 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800265c:	f7ff f958 	bl	8001910 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e058      	b.n	8002720 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800266e:	4b04      	ldr	r3, [pc, #16]	; (8002680 <HAL_RCC_OscConfig+0x778>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800267a:	e050      	b.n	800271e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800267c:	2301      	movs	r3, #1
 800267e:	e04f      	b.n	8002720 <HAL_RCC_OscConfig+0x818>
 8002680:	40021000 	.word	0x40021000
 8002684:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002688:	4b27      	ldr	r3, [pc, #156]	; (8002728 <HAL_RCC_OscConfig+0x820>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d144      	bne.n	800271e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002694:	4b24      	ldr	r3, [pc, #144]	; (8002728 <HAL_RCC_OscConfig+0x820>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a23      	ldr	r2, [pc, #140]	; (8002728 <HAL_RCC_OscConfig+0x820>)
 800269a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800269e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80026a0:	4b21      	ldr	r3, [pc, #132]	; (8002728 <HAL_RCC_OscConfig+0x820>)
 80026a2:	68db      	ldr	r3, [r3, #12]
 80026a4:	4a20      	ldr	r2, [pc, #128]	; (8002728 <HAL_RCC_OscConfig+0x820>)
 80026a6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80026aa:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80026ac:	f7ff f930 	bl	8001910 <HAL_GetTick>
 80026b0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026b2:	e008      	b.n	80026c6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026b4:	f7ff f92c 	bl	8001910 <HAL_GetTick>
 80026b8:	4602      	mov	r2, r0
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	1ad3      	subs	r3, r2, r3
 80026be:	2b02      	cmp	r3, #2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e02c      	b.n	8002720 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80026c6:	4b18      	ldr	r3, [pc, #96]	; (8002728 <HAL_RCC_OscConfig+0x820>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d0f0      	beq.n	80026b4 <HAL_RCC_OscConfig+0x7ac>
 80026d2:	e024      	b.n	800271e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026d4:	69bb      	ldr	r3, [r7, #24]
 80026d6:	2b0c      	cmp	r3, #12
 80026d8:	d01f      	beq.n	800271a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026da:	4b13      	ldr	r3, [pc, #76]	; (8002728 <HAL_RCC_OscConfig+0x820>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a12      	ldr	r2, [pc, #72]	; (8002728 <HAL_RCC_OscConfig+0x820>)
 80026e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026e6:	f7ff f913 	bl	8001910 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ee:	f7ff f90f 	bl	8001910 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e00f      	b.n	8002720 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002700:	4b09      	ldr	r3, [pc, #36]	; (8002728 <HAL_RCC_OscConfig+0x820>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1f0      	bne.n	80026ee <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800270c:	4b06      	ldr	r3, [pc, #24]	; (8002728 <HAL_RCC_OscConfig+0x820>)
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	4905      	ldr	r1, [pc, #20]	; (8002728 <HAL_RCC_OscConfig+0x820>)
 8002712:	4b06      	ldr	r3, [pc, #24]	; (800272c <HAL_RCC_OscConfig+0x824>)
 8002714:	4013      	ands	r3, r2
 8002716:	60cb      	str	r3, [r1, #12]
 8002718:	e001      	b.n	800271e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3720      	adds	r7, #32
 8002724:	46bd      	mov	sp, r7
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40021000 	.word	0x40021000
 800272c:	feeefffc 	.word	0xfeeefffc

08002730 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
 8002738:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d101      	bne.n	8002744 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	e0e7      	b.n	8002914 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002744:	4b75      	ldr	r3, [pc, #468]	; (800291c <HAL_RCC_ClockConfig+0x1ec>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0307 	and.w	r3, r3, #7
 800274c:	683a      	ldr	r2, [r7, #0]
 800274e:	429a      	cmp	r2, r3
 8002750:	d910      	bls.n	8002774 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002752:	4b72      	ldr	r3, [pc, #456]	; (800291c <HAL_RCC_ClockConfig+0x1ec>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f023 0207 	bic.w	r2, r3, #7
 800275a:	4970      	ldr	r1, [pc, #448]	; (800291c <HAL_RCC_ClockConfig+0x1ec>)
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	4313      	orrs	r3, r2
 8002760:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002762:	4b6e      	ldr	r3, [pc, #440]	; (800291c <HAL_RCC_ClockConfig+0x1ec>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0307 	and.w	r3, r3, #7
 800276a:	683a      	ldr	r2, [r7, #0]
 800276c:	429a      	cmp	r2, r3
 800276e:	d001      	beq.n	8002774 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e0cf      	b.n	8002914 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d010      	beq.n	80027a2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689a      	ldr	r2, [r3, #8]
 8002784:	4b66      	ldr	r3, [pc, #408]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800278c:	429a      	cmp	r2, r3
 800278e:	d908      	bls.n	80027a2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002790:	4b63      	ldr	r3, [pc, #396]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	689b      	ldr	r3, [r3, #8]
 800279c:	4960      	ldr	r1, [pc, #384]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 800279e:	4313      	orrs	r3, r2
 80027a0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d04c      	beq.n	8002848 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	685b      	ldr	r3, [r3, #4]
 80027b2:	2b03      	cmp	r3, #3
 80027b4:	d107      	bne.n	80027c6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027b6:	4b5a      	ldr	r3, [pc, #360]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d121      	bne.n	8002806 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	e0a6      	b.n	8002914 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	2b02      	cmp	r3, #2
 80027cc:	d107      	bne.n	80027de <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027ce:	4b54      	ldr	r3, [pc, #336]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d115      	bne.n	8002806 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e09a      	b.n	8002914 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d107      	bne.n	80027f6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027e6:	4b4e      	ldr	r3, [pc, #312]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f003 0302 	and.w	r3, r3, #2
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d109      	bne.n	8002806 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80027f2:	2301      	movs	r3, #1
 80027f4:	e08e      	b.n	8002914 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027f6:	4b4a      	ldr	r3, [pc, #296]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d101      	bne.n	8002806 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002802:	2301      	movs	r3, #1
 8002804:	e086      	b.n	8002914 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002806:	4b46      	ldr	r3, [pc, #280]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 8002808:	689b      	ldr	r3, [r3, #8]
 800280a:	f023 0203 	bic.w	r2, r3, #3
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	4943      	ldr	r1, [pc, #268]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 8002814:	4313      	orrs	r3, r2
 8002816:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002818:	f7ff f87a 	bl	8001910 <HAL_GetTick>
 800281c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800281e:	e00a      	b.n	8002836 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002820:	f7ff f876 	bl	8001910 <HAL_GetTick>
 8002824:	4602      	mov	r2, r0
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	1ad3      	subs	r3, r2, r3
 800282a:	f241 3288 	movw	r2, #5000	; 0x1388
 800282e:	4293      	cmp	r3, r2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e06e      	b.n	8002914 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002836:	4b3a      	ldr	r3, [pc, #232]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	f003 020c 	and.w	r2, r3, #12
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685b      	ldr	r3, [r3, #4]
 8002842:	009b      	lsls	r3, r3, #2
 8002844:	429a      	cmp	r2, r3
 8002846:	d1eb      	bne.n	8002820 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f003 0302 	and.w	r3, r3, #2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d010      	beq.n	8002876 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689a      	ldr	r2, [r3, #8]
 8002858:	4b31      	ldr	r3, [pc, #196]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002860:	429a      	cmp	r2, r3
 8002862:	d208      	bcs.n	8002876 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002864:	4b2e      	ldr	r3, [pc, #184]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	492b      	ldr	r1, [pc, #172]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002876:	4b29      	ldr	r3, [pc, #164]	; (800291c <HAL_RCC_ClockConfig+0x1ec>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	429a      	cmp	r2, r3
 8002882:	d210      	bcs.n	80028a6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002884:	4b25      	ldr	r3, [pc, #148]	; (800291c <HAL_RCC_ClockConfig+0x1ec>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f023 0207 	bic.w	r2, r3, #7
 800288c:	4923      	ldr	r1, [pc, #140]	; (800291c <HAL_RCC_ClockConfig+0x1ec>)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	4313      	orrs	r3, r2
 8002892:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002894:	4b21      	ldr	r3, [pc, #132]	; (800291c <HAL_RCC_ClockConfig+0x1ec>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	683a      	ldr	r2, [r7, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d001      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e036      	b.n	8002914 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0304 	and.w	r3, r3, #4
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d008      	beq.n	80028c4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028b2:	4b1b      	ldr	r3, [pc, #108]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	4918      	ldr	r1, [pc, #96]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 80028c0:	4313      	orrs	r3, r2
 80028c2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	f003 0308 	and.w	r3, r3, #8
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d009      	beq.n	80028e4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028d0:	4b13      	ldr	r3, [pc, #76]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	4910      	ldr	r1, [pc, #64]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 80028e0:	4313      	orrs	r3, r2
 80028e2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80028e4:	f000 f824 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 80028e8:	4602      	mov	r2, r0
 80028ea:	4b0d      	ldr	r3, [pc, #52]	; (8002920 <HAL_RCC_ClockConfig+0x1f0>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	091b      	lsrs	r3, r3, #4
 80028f0:	f003 030f 	and.w	r3, r3, #15
 80028f4:	490b      	ldr	r1, [pc, #44]	; (8002924 <HAL_RCC_ClockConfig+0x1f4>)
 80028f6:	5ccb      	ldrb	r3, [r1, r3]
 80028f8:	f003 031f 	and.w	r3, r3, #31
 80028fc:	fa22 f303 	lsr.w	r3, r2, r3
 8002900:	4a09      	ldr	r2, [pc, #36]	; (8002928 <HAL_RCC_ClockConfig+0x1f8>)
 8002902:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002904:	4b09      	ldr	r3, [pc, #36]	; (800292c <HAL_RCC_ClockConfig+0x1fc>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4618      	mov	r0, r3
 800290a:	f7fe ffb1 	bl	8001870 <HAL_InitTick>
 800290e:	4603      	mov	r3, r0
 8002910:	72fb      	strb	r3, [r7, #11]

  return status;
 8002912:	7afb      	ldrb	r3, [r7, #11]
}
 8002914:	4618      	mov	r0, r3
 8002916:	3710      	adds	r7, #16
 8002918:	46bd      	mov	sp, r7
 800291a:	bd80      	pop	{r7, pc}
 800291c:	40022000 	.word	0x40022000
 8002920:	40021000 	.word	0x40021000
 8002924:	08007718 	.word	0x08007718
 8002928:	20000008 	.word	0x20000008
 800292c:	2000000c 	.word	0x2000000c

08002930 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002930:	b480      	push	{r7}
 8002932:	b089      	sub	sp, #36	; 0x24
 8002934:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]
 800293a:	2300      	movs	r3, #0
 800293c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800293e:	4b3e      	ldr	r3, [pc, #248]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002948:	4b3b      	ldr	r3, [pc, #236]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x108>)
 800294a:	68db      	ldr	r3, [r3, #12]
 800294c:	f003 0303 	and.w	r3, r3, #3
 8002950:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002952:	693b      	ldr	r3, [r7, #16]
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <HAL_RCC_GetSysClockFreq+0x34>
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	2b0c      	cmp	r3, #12
 800295c:	d121      	bne.n	80029a2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d11e      	bne.n	80029a2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002964:	4b34      	ldr	r3, [pc, #208]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	2b00      	cmp	r3, #0
 800296e:	d107      	bne.n	8002980 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002970:	4b31      	ldr	r3, [pc, #196]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002972:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002976:	0a1b      	lsrs	r3, r3, #8
 8002978:	f003 030f 	and.w	r3, r3, #15
 800297c:	61fb      	str	r3, [r7, #28]
 800297e:	e005      	b.n	800298c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002980:	4b2d      	ldr	r3, [pc, #180]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	091b      	lsrs	r3, r3, #4
 8002986:	f003 030f 	and.w	r3, r3, #15
 800298a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800298c:	4a2b      	ldr	r2, [pc, #172]	; (8002a3c <HAL_RCC_GetSysClockFreq+0x10c>)
 800298e:	69fb      	ldr	r3, [r7, #28]
 8002990:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002994:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002996:	693b      	ldr	r3, [r7, #16]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d10d      	bne.n	80029b8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029a0:	e00a      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	2b04      	cmp	r3, #4
 80029a6:	d102      	bne.n	80029ae <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029a8:	4b25      	ldr	r3, [pc, #148]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x110>)
 80029aa:	61bb      	str	r3, [r7, #24]
 80029ac:	e004      	b.n	80029b8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d101      	bne.n	80029b8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029b4:	4b23      	ldr	r3, [pc, #140]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x114>)
 80029b6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	2b0c      	cmp	r3, #12
 80029bc:	d134      	bne.n	8002a28 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029be:	4b1e      	ldr	r3, [pc, #120]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x108>)
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d003      	beq.n	80029d6 <HAL_RCC_GetSysClockFreq+0xa6>
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d003      	beq.n	80029dc <HAL_RCC_GetSysClockFreq+0xac>
 80029d4:	e005      	b.n	80029e2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80029d6:	4b1a      	ldr	r3, [pc, #104]	; (8002a40 <HAL_RCC_GetSysClockFreq+0x110>)
 80029d8:	617b      	str	r3, [r7, #20]
      break;
 80029da:	e005      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80029dc:	4b19      	ldr	r3, [pc, #100]	; (8002a44 <HAL_RCC_GetSysClockFreq+0x114>)
 80029de:	617b      	str	r3, [r7, #20]
      break;
 80029e0:	e002      	b.n	80029e8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	617b      	str	r3, [r7, #20]
      break;
 80029e6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029e8:	4b13      	ldr	r3, [pc, #76]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	091b      	lsrs	r3, r3, #4
 80029ee:	f003 0307 	and.w	r3, r3, #7
 80029f2:	3301      	adds	r3, #1
 80029f4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80029f6:	4b10      	ldr	r3, [pc, #64]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x108>)
 80029f8:	68db      	ldr	r3, [r3, #12]
 80029fa:	0a1b      	lsrs	r3, r3, #8
 80029fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002a00:	697a      	ldr	r2, [r7, #20]
 8002a02:	fb03 f202 	mul.w	r2, r3, r2
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a0c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a0e:	4b0a      	ldr	r3, [pc, #40]	; (8002a38 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a10:	68db      	ldr	r3, [r3, #12]
 8002a12:	0e5b      	lsrs	r3, r3, #25
 8002a14:	f003 0303 	and.w	r3, r3, #3
 8002a18:	3301      	adds	r3, #1
 8002a1a:	005b      	lsls	r3, r3, #1
 8002a1c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a1e:	697a      	ldr	r2, [r7, #20]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a26:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a28:	69bb      	ldr	r3, [r7, #24]
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3724      	adds	r7, #36	; 0x24
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a34:	4770      	bx	lr
 8002a36:	bf00      	nop
 8002a38:	40021000 	.word	0x40021000
 8002a3c:	08007730 	.word	0x08007730
 8002a40:	00f42400 	.word	0x00f42400
 8002a44:	007a1200 	.word	0x007a1200

08002a48 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a4c:	4b03      	ldr	r3, [pc, #12]	; (8002a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8002a4e:	681b      	ldr	r3, [r3, #0]
}
 8002a50:	4618      	mov	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr
 8002a5a:	bf00      	nop
 8002a5c:	20000008 	.word	0x20000008

08002a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a64:	f7ff fff0 	bl	8002a48 <HAL_RCC_GetHCLKFreq>
 8002a68:	4602      	mov	r2, r0
 8002a6a:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	0a1b      	lsrs	r3, r3, #8
 8002a70:	f003 0307 	and.w	r3, r3, #7
 8002a74:	4904      	ldr	r1, [pc, #16]	; (8002a88 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a76:	5ccb      	ldrb	r3, [r1, r3]
 8002a78:	f003 031f 	and.w	r3, r3, #31
 8002a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	bd80      	pop	{r7, pc}
 8002a84:	40021000 	.word	0x40021000
 8002a88:	08007728 	.word	0x08007728

08002a8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a90:	f7ff ffda 	bl	8002a48 <HAL_RCC_GetHCLKFreq>
 8002a94:	4602      	mov	r2, r0
 8002a96:	4b06      	ldr	r3, [pc, #24]	; (8002ab0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a98:	689b      	ldr	r3, [r3, #8]
 8002a9a:	0adb      	lsrs	r3, r3, #11
 8002a9c:	f003 0307 	and.w	r3, r3, #7
 8002aa0:	4904      	ldr	r1, [pc, #16]	; (8002ab4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002aa2:	5ccb      	ldrb	r3, [r1, r3]
 8002aa4:	f003 031f 	and.w	r3, r3, #31
 8002aa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	40021000 	.word	0x40021000
 8002ab4:	08007728 	.word	0x08007728

08002ab8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b086      	sub	sp, #24
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002ac4:	4b2a      	ldr	r3, [pc, #168]	; (8002b70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d003      	beq.n	8002ad8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002ad0:	f7ff f9b6 	bl	8001e40 <HAL_PWREx_GetVoltageRange>
 8002ad4:	6178      	str	r0, [r7, #20]
 8002ad6:	e014      	b.n	8002b02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ad8:	4b25      	ldr	r3, [pc, #148]	; (8002b70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ada:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002adc:	4a24      	ldr	r2, [pc, #144]	; (8002b70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ade:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae2:	6593      	str	r3, [r2, #88]	; 0x58
 8002ae4:	4b22      	ldr	r3, [pc, #136]	; (8002b70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002ae6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aec:	60fb      	str	r3, [r7, #12]
 8002aee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002af0:	f7ff f9a6 	bl	8001e40 <HAL_PWREx_GetVoltageRange>
 8002af4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002af6:	4b1e      	ldr	r3, [pc, #120]	; (8002b70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002af8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002afa:	4a1d      	ldr	r2, [pc, #116]	; (8002b70 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002afc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b00:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b08:	d10b      	bne.n	8002b22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2b80      	cmp	r3, #128	; 0x80
 8002b0e:	d919      	bls.n	8002b44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2ba0      	cmp	r3, #160	; 0xa0
 8002b14:	d902      	bls.n	8002b1c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b16:	2302      	movs	r3, #2
 8002b18:	613b      	str	r3, [r7, #16]
 8002b1a:	e013      	b.n	8002b44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	613b      	str	r3, [r7, #16]
 8002b20:	e010      	b.n	8002b44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b80      	cmp	r3, #128	; 0x80
 8002b26:	d902      	bls.n	8002b2e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002b28:	2303      	movs	r3, #3
 8002b2a:	613b      	str	r3, [r7, #16]
 8002b2c:	e00a      	b.n	8002b44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2b80      	cmp	r3, #128	; 0x80
 8002b32:	d102      	bne.n	8002b3a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002b34:	2302      	movs	r3, #2
 8002b36:	613b      	str	r3, [r7, #16]
 8002b38:	e004      	b.n	8002b44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2b70      	cmp	r3, #112	; 0x70
 8002b3e:	d101      	bne.n	8002b44 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b40:	2301      	movs	r3, #1
 8002b42:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b44:	4b0b      	ldr	r3, [pc, #44]	; (8002b74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	f023 0207 	bic.w	r2, r3, #7
 8002b4c:	4909      	ldr	r1, [pc, #36]	; (8002b74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	4313      	orrs	r3, r2
 8002b52:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b54:	4b07      	ldr	r3, [pc, #28]	; (8002b74 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0307 	and.w	r3, r3, #7
 8002b5c:	693a      	ldr	r2, [r7, #16]
 8002b5e:	429a      	cmp	r2, r3
 8002b60:	d001      	beq.n	8002b66 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e000      	b.n	8002b68 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3718      	adds	r7, #24
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}
 8002b70:	40021000 	.word	0x40021000
 8002b74:	40022000 	.word	0x40022000

08002b78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b78:	b580      	push	{r7, lr}
 8002b7a:	b086      	sub	sp, #24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b80:	2300      	movs	r3, #0
 8002b82:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b84:	2300      	movs	r3, #0
 8002b86:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d031      	beq.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b98:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002b9c:	d01a      	beq.n	8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002b9e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002ba2:	d814      	bhi.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d009      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002ba8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002bac:	d10f      	bne.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002bae:	4b5d      	ldr	r3, [pc, #372]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bb0:	68db      	ldr	r3, [r3, #12]
 8002bb2:	4a5c      	ldr	r2, [pc, #368]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bb8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bba:	e00c      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	3304      	adds	r3, #4
 8002bc0:	2100      	movs	r1, #0
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f000 f9ce 	bl	8002f64 <RCCEx_PLLSAI1_Config>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002bcc:	e003      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	74fb      	strb	r3, [r7, #19]
      break;
 8002bd2:	e000      	b.n	8002bd6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002bd4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002bd6:	7cfb      	ldrb	r3, [r7, #19]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d10b      	bne.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bdc:	4b51      	ldr	r3, [pc, #324]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bde:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002be2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bea:	494e      	ldr	r1, [pc, #312]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002bf2:	e001      	b.n	8002bf8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002bf4:	7cfb      	ldrb	r3, [r7, #19]
 8002bf6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	f000 809e 	beq.w	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c06:	2300      	movs	r3, #0
 8002c08:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002c0a:	4b46      	ldr	r3, [pc, #280]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d101      	bne.n	8002c1a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002c16:	2301      	movs	r3, #1
 8002c18:	e000      	b.n	8002c1c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d00d      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c20:	4b40      	ldr	r3, [pc, #256]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c24:	4a3f      	ldr	r2, [pc, #252]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c2a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c2c:	4b3d      	ldr	r3, [pc, #244]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c34:	60bb      	str	r3, [r7, #8]
 8002c36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c3c:	4b3a      	ldr	r3, [pc, #232]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a39      	ldr	r2, [pc, #228]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002c48:	f7fe fe62 	bl	8001910 <HAL_GetTick>
 8002c4c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c4e:	e009      	b.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c50:	f7fe fe5e 	bl	8001910 <HAL_GetTick>
 8002c54:	4602      	mov	r2, r0
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	1ad3      	subs	r3, r2, r3
 8002c5a:	2b02      	cmp	r3, #2
 8002c5c:	d902      	bls.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002c5e:	2303      	movs	r3, #3
 8002c60:	74fb      	strb	r3, [r7, #19]
        break;
 8002c62:	e005      	b.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002c64:	4b30      	ldr	r3, [pc, #192]	; (8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0ef      	beq.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002c70:	7cfb      	ldrb	r3, [r7, #19]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d15a      	bne.n	8002d2c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002c76:	4b2b      	ldr	r3, [pc, #172]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c7c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c80:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002c82:	697b      	ldr	r3, [r7, #20]
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d01e      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c8c:	697a      	ldr	r2, [r7, #20]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	d019      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002c92:	4b24      	ldr	r3, [pc, #144]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002c94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c9c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002c9e:	4b21      	ldr	r3, [pc, #132]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ca4:	4a1f      	ldr	r2, [pc, #124]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ca6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002caa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002cae:	4b1d      	ldr	r3, [pc, #116]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cb4:	4a1b      	ldr	r2, [pc, #108]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002cbe:	4a19      	ldr	r2, [pc, #100]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d016      	beq.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cd0:	f7fe fe1e 	bl	8001910 <HAL_GetTick>
 8002cd4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cd6:	e00b      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cd8:	f7fe fe1a 	bl	8001910 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d902      	bls.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	74fb      	strb	r3, [r7, #19]
            break;
 8002cee:	e006      	b.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002cf0:	4b0c      	ldr	r3, [pc, #48]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002cf6:	f003 0302 	and.w	r3, r3, #2
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d0ec      	beq.n	8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002cfe:	7cfb      	ldrb	r3, [r7, #19]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d10b      	bne.n	8002d1c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d04:	4b07      	ldr	r3, [pc, #28]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d0a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002d12:	4904      	ldr	r1, [pc, #16]	; (8002d24 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d14:	4313      	orrs	r3, r2
 8002d16:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002d1a:	e009      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002d1c:	7cfb      	ldrb	r3, [r7, #19]
 8002d1e:	74bb      	strb	r3, [r7, #18]
 8002d20:	e006      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002d22:	bf00      	nop
 8002d24:	40021000 	.word	0x40021000
 8002d28:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d2c:	7cfb      	ldrb	r3, [r7, #19]
 8002d2e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002d30:	7c7b      	ldrb	r3, [r7, #17]
 8002d32:	2b01      	cmp	r3, #1
 8002d34:	d105      	bne.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d36:	4b8a      	ldr	r3, [pc, #552]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d3a:	4a89      	ldr	r2, [pc, #548]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d40:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0301 	and.w	r3, r3, #1
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d00a      	beq.n	8002d64 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002d4e:	4b84      	ldr	r3, [pc, #528]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d54:	f023 0203 	bic.w	r2, r3, #3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a1b      	ldr	r3, [r3, #32]
 8002d5c:	4980      	ldr	r1, [pc, #512]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0302 	and.w	r3, r3, #2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00a      	beq.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002d70:	4b7b      	ldr	r3, [pc, #492]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d76:	f023 020c 	bic.w	r2, r3, #12
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	4978      	ldr	r1, [pc, #480]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d80:	4313      	orrs	r3, r2
 8002d82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0320 	and.w	r3, r3, #32
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00a      	beq.n	8002da8 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d92:	4b73      	ldr	r3, [pc, #460]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d98:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da0:	496f      	ldr	r1, [pc, #444]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002da2:	4313      	orrs	r3, r2
 8002da4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00a      	beq.n	8002dca <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002db4:	4b6a      	ldr	r3, [pc, #424]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dba:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dc2:	4967      	ldr	r1, [pc, #412]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d00a      	beq.n	8002dec <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002dd6:	4b62      	ldr	r3, [pc, #392]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ddc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002de4:	495e      	ldr	r1, [pc, #376]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002de6:	4313      	orrs	r3, r2
 8002de8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d00a      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002df8:	4b59      	ldr	r3, [pc, #356]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002dfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002dfe:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e06:	4956      	ldr	r1, [pc, #344]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d00a      	beq.n	8002e30 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002e1a:	4b51      	ldr	r3, [pc, #324]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e20:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e28:	494d      	ldr	r1, [pc, #308]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d028      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002e3c:	4b48      	ldr	r3, [pc, #288]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e42:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e4a:	4945      	ldr	r1, [pc, #276]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e56:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002e5a:	d106      	bne.n	8002e6a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e5c:	4b40      	ldr	r3, [pc, #256]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	4a3f      	ldr	r2, [pc, #252]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e62:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002e66:	60d3      	str	r3, [r2, #12]
 8002e68:	e011      	b.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002e72:	d10c      	bne.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	3304      	adds	r3, #4
 8002e78:	2101      	movs	r1, #1
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f000 f872 	bl	8002f64 <RCCEx_PLLSAI1_Config>
 8002e80:	4603      	mov	r3, r0
 8002e82:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e84:	7cfb      	ldrb	r3, [r7, #19]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002e8a:	7cfb      	ldrb	r3, [r7, #19]
 8002e8c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d028      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002e9a:	4b31      	ldr	r3, [pc, #196]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ea8:	492d      	ldr	r1, [pc, #180]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002eb8:	d106      	bne.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002eba:	4b29      	ldr	r3, [pc, #164]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ebc:	68db      	ldr	r3, [r3, #12]
 8002ebe:	4a28      	ldr	r2, [pc, #160]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ec0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002ec4:	60d3      	str	r3, [r2, #12]
 8002ec6:	e011      	b.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ecc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ed0:	d10c      	bne.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	3304      	adds	r3, #4
 8002ed6:	2101      	movs	r1, #1
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f000 f843 	bl	8002f64 <RCCEx_PLLSAI1_Config>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002ee2:	7cfb      	ldrb	r3, [r7, #19]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002ee8:	7cfb      	ldrb	r3, [r7, #19]
 8002eea:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d01c      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ef8:	4b19      	ldr	r3, [pc, #100]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002efa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002efe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f06:	4916      	ldr	r1, [pc, #88]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002f16:	d10c      	bne.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	2102      	movs	r1, #2
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f000 f820 	bl	8002f64 <RCCEx_PLLSAI1_Config>
 8002f24:	4603      	mov	r3, r0
 8002f26:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f28:	7cfb      	ldrb	r3, [r7, #19]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002f2e:	7cfb      	ldrb	r3, [r7, #19]
 8002f30:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d00a      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002f3e:	4b08      	ldr	r3, [pc, #32]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f44:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f4c:	4904      	ldr	r1, [pc, #16]	; (8002f60 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002f54:	7cbb      	ldrb	r3, [r7, #18]
}
 8002f56:	4618      	mov	r0, r3
 8002f58:	3718      	adds	r7, #24
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40021000 	.word	0x40021000

08002f64 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002f72:	4b74      	ldr	r3, [pc, #464]	; (8003144 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d018      	beq.n	8002fb0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002f7e:	4b71      	ldr	r3, [pc, #452]	; (8003144 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	f003 0203 	and.w	r2, r3, #3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d10d      	bne.n	8002faa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
       ||
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d009      	beq.n	8002faa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002f96:	4b6b      	ldr	r3, [pc, #428]	; (8003144 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	091b      	lsrs	r3, r3, #4
 8002f9c:	f003 0307 	and.w	r3, r3, #7
 8002fa0:	1c5a      	adds	r2, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	685b      	ldr	r3, [r3, #4]
       ||
 8002fa6:	429a      	cmp	r2, r3
 8002fa8:	d047      	beq.n	800303a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	73fb      	strb	r3, [r7, #15]
 8002fae:	e044      	b.n	800303a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	2b03      	cmp	r3, #3
 8002fb6:	d018      	beq.n	8002fea <RCCEx_PLLSAI1_Config+0x86>
 8002fb8:	2b03      	cmp	r3, #3
 8002fba:	d825      	bhi.n	8003008 <RCCEx_PLLSAI1_Config+0xa4>
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d002      	beq.n	8002fc6 <RCCEx_PLLSAI1_Config+0x62>
 8002fc0:	2b02      	cmp	r3, #2
 8002fc2:	d009      	beq.n	8002fd8 <RCCEx_PLLSAI1_Config+0x74>
 8002fc4:	e020      	b.n	8003008 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002fc6:	4b5f      	ldr	r3, [pc, #380]	; (8003144 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f003 0302 	and.w	r3, r3, #2
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d11d      	bne.n	800300e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002fd2:	2301      	movs	r3, #1
 8002fd4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fd6:	e01a      	b.n	800300e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002fd8:	4b5a      	ldr	r3, [pc, #360]	; (8003144 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d116      	bne.n	8003012 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002fe8:	e013      	b.n	8003012 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002fea:	4b56      	ldr	r3, [pc, #344]	; (8003144 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d10f      	bne.n	8003016 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002ff6:	4b53      	ldr	r3, [pc, #332]	; (8003144 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d109      	bne.n	8003016 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003006:	e006      	b.n	8003016 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003008:	2301      	movs	r3, #1
 800300a:	73fb      	strb	r3, [r7, #15]
      break;
 800300c:	e004      	b.n	8003018 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800300e:	bf00      	nop
 8003010:	e002      	b.n	8003018 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003012:	bf00      	nop
 8003014:	e000      	b.n	8003018 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003016:	bf00      	nop
    }

    if(status == HAL_OK)
 8003018:	7bfb      	ldrb	r3, [r7, #15]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10d      	bne.n	800303a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800301e:	4b49      	ldr	r3, [pc, #292]	; (8003144 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6819      	ldr	r1, [r3, #0]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	3b01      	subs	r3, #1
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	430b      	orrs	r3, r1
 8003034:	4943      	ldr	r1, [pc, #268]	; (8003144 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003036:	4313      	orrs	r3, r2
 8003038:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800303a:	7bfb      	ldrb	r3, [r7, #15]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d17c      	bne.n	800313a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003040:	4b40      	ldr	r3, [pc, #256]	; (8003144 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a3f      	ldr	r2, [pc, #252]	; (8003144 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003046:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800304a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800304c:	f7fe fc60 	bl	8001910 <HAL_GetTick>
 8003050:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003052:	e009      	b.n	8003068 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003054:	f7fe fc5c 	bl	8001910 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d902      	bls.n	8003068 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	73fb      	strb	r3, [r7, #15]
        break;
 8003066:	e005      	b.n	8003074 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003068:	4b36      	ldr	r3, [pc, #216]	; (8003144 <RCCEx_PLLSAI1_Config+0x1e0>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003070:	2b00      	cmp	r3, #0
 8003072:	d1ef      	bne.n	8003054 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8003074:	7bfb      	ldrb	r3, [r7, #15]
 8003076:	2b00      	cmp	r3, #0
 8003078:	d15f      	bne.n	800313a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d110      	bne.n	80030a2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003080:	4b30      	ldr	r3, [pc, #192]	; (8003144 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003082:	691b      	ldr	r3, [r3, #16]
 8003084:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003088:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	6892      	ldr	r2, [r2, #8]
 8003090:	0211      	lsls	r1, r2, #8
 8003092:	687a      	ldr	r2, [r7, #4]
 8003094:	68d2      	ldr	r2, [r2, #12]
 8003096:	06d2      	lsls	r2, r2, #27
 8003098:	430a      	orrs	r2, r1
 800309a:	492a      	ldr	r1, [pc, #168]	; (8003144 <RCCEx_PLLSAI1_Config+0x1e0>)
 800309c:	4313      	orrs	r3, r2
 800309e:	610b      	str	r3, [r1, #16]
 80030a0:	e027      	b.n	80030f2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	2b01      	cmp	r3, #1
 80030a6:	d112      	bne.n	80030ce <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030a8:	4b26      	ldr	r3, [pc, #152]	; (8003144 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80030b0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030b4:	687a      	ldr	r2, [r7, #4]
 80030b6:	6892      	ldr	r2, [r2, #8]
 80030b8:	0211      	lsls	r1, r2, #8
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	6912      	ldr	r2, [r2, #16]
 80030be:	0852      	lsrs	r2, r2, #1
 80030c0:	3a01      	subs	r2, #1
 80030c2:	0552      	lsls	r2, r2, #21
 80030c4:	430a      	orrs	r2, r1
 80030c6:	491f      	ldr	r1, [pc, #124]	; (8003144 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030c8:	4313      	orrs	r3, r2
 80030ca:	610b      	str	r3, [r1, #16]
 80030cc:	e011      	b.n	80030f2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80030ce:	4b1d      	ldr	r3, [pc, #116]	; (8003144 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030d0:	691b      	ldr	r3, [r3, #16]
 80030d2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80030d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	6892      	ldr	r2, [r2, #8]
 80030de:	0211      	lsls	r1, r2, #8
 80030e0:	687a      	ldr	r2, [r7, #4]
 80030e2:	6952      	ldr	r2, [r2, #20]
 80030e4:	0852      	lsrs	r2, r2, #1
 80030e6:	3a01      	subs	r2, #1
 80030e8:	0652      	lsls	r2, r2, #25
 80030ea:	430a      	orrs	r2, r1
 80030ec:	4915      	ldr	r1, [pc, #84]	; (8003144 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80030f2:	4b14      	ldr	r3, [pc, #80]	; (8003144 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	4a13      	ldr	r2, [pc, #76]	; (8003144 <RCCEx_PLLSAI1_Config+0x1e0>)
 80030f8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80030fc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fe:	f7fe fc07 	bl	8001910 <HAL_GetTick>
 8003102:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003104:	e009      	b.n	800311a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003106:	f7fe fc03 	bl	8001910 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d902      	bls.n	800311a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	73fb      	strb	r3, [r7, #15]
          break;
 8003118:	e005      	b.n	8003126 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800311a:	4b0a      	ldr	r3, [pc, #40]	; (8003144 <RCCEx_PLLSAI1_Config+0x1e0>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0ef      	beq.n	8003106 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8003126:	7bfb      	ldrb	r3, [r7, #15]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d106      	bne.n	800313a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800312c:	4b05      	ldr	r3, [pc, #20]	; (8003144 <RCCEx_PLLSAI1_Config+0x1e0>)
 800312e:	691a      	ldr	r2, [r3, #16]
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	4903      	ldr	r1, [pc, #12]	; (8003144 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003136:	4313      	orrs	r3, r2
 8003138:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800313a:	7bfb      	ldrb	r3, [r7, #15]
}
 800313c:	4618      	mov	r0, r3
 800313e:	3710      	adds	r7, #16
 8003140:	46bd      	mov	sp, r7
 8003142:	bd80      	pop	{r7, pc}
 8003144:	40021000 	.word	0x40021000

08003148 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d101      	bne.n	800315a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003156:	2301      	movs	r3, #1
 8003158:	e095      	b.n	8003286 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	2b00      	cmp	r3, #0
 8003160:	d108      	bne.n	8003174 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800316a:	d009      	beq.n	8003180 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2200      	movs	r2, #0
 8003170:	61da      	str	r2, [r3, #28]
 8003172:	e005      	b.n	8003180 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2200      	movs	r2, #0
 8003178:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800318c:	b2db      	uxtb	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d106      	bne.n	80031a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800319a:	6878      	ldr	r0, [r7, #4]
 800319c:	f7fe f95a 	bl	8001454 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2202      	movs	r2, #2
 80031a4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	681a      	ldr	r2, [r3, #0]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031b6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031c0:	d902      	bls.n	80031c8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80031c2:	2300      	movs	r3, #0
 80031c4:	60fb      	str	r3, [r7, #12]
 80031c6:	e002      	b.n	80031ce <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80031c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031cc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80031d6:	d007      	beq.n	80031e8 <HAL_SPI_Init+0xa0>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031e0:	d002      	beq.n	80031e8 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2200      	movs	r2, #0
 80031e6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80031f8:	431a      	orrs	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	695b      	ldr	r3, [r3, #20]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	431a      	orrs	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003216:	431a      	orrs	r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	69db      	ldr	r3, [r3, #28]
 800321c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003220:	431a      	orrs	r2, r3
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
 8003226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800322a:	ea42 0103 	orr.w	r1, r2, r3
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003232:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	699b      	ldr	r3, [r3, #24]
 8003242:	0c1b      	lsrs	r3, r3, #16
 8003244:	f003 0204 	and.w	r2, r3, #4
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800324c:	f003 0310 	and.w	r3, r3, #16
 8003250:	431a      	orrs	r2, r3
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003256:	f003 0308 	and.w	r3, r3, #8
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	68db      	ldr	r3, [r3, #12]
 8003260:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8003264:	ea42 0103 	orr.w	r1, r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2200      	movs	r2, #0
 800327a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}

0800328e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b08a      	sub	sp, #40	; 0x28
 8003292:	af00      	add	r7, sp, #0
 8003294:	60f8      	str	r0, [r7, #12]
 8003296:	60b9      	str	r1, [r7, #8]
 8003298:	607a      	str	r2, [r7, #4]
 800329a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800329c:	2301      	movs	r3, #1
 800329e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80032a0:	f7fe fb36 	bl	8001910 <HAL_GetTick>
 80032a4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80032ac:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80032b4:	887b      	ldrh	r3, [r7, #2]
 80032b6:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 80032b8:	887b      	ldrh	r3, [r7, #2]
 80032ba:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032bc:	7ffb      	ldrb	r3, [r7, #31]
 80032be:	2b01      	cmp	r3, #1
 80032c0:	d00c      	beq.n	80032dc <HAL_SPI_TransmitReceive+0x4e>
 80032c2:	69bb      	ldr	r3, [r7, #24]
 80032c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80032c8:	d106      	bne.n	80032d8 <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d102      	bne.n	80032d8 <HAL_SPI_TransmitReceive+0x4a>
 80032d2:	7ffb      	ldrb	r3, [r7, #31]
 80032d4:	2b04      	cmp	r3, #4
 80032d6:	d001      	beq.n	80032dc <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80032d8:	2302      	movs	r3, #2
 80032da:	e1f3      	b.n	80036c4 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032dc:	68bb      	ldr	r3, [r7, #8]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d005      	beq.n	80032ee <HAL_SPI_TransmitReceive+0x60>
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d002      	beq.n	80032ee <HAL_SPI_TransmitReceive+0x60>
 80032e8:	887b      	ldrh	r3, [r7, #2]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e1e8      	b.n	80036c4 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80032f8:	2b01      	cmp	r3, #1
 80032fa:	d101      	bne.n	8003300 <HAL_SPI_TransmitReceive+0x72>
 80032fc:	2302      	movs	r3, #2
 80032fe:	e1e1      	b.n	80036c4 <HAL_SPI_TransmitReceive+0x436>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b04      	cmp	r3, #4
 8003312:	d003      	beq.n	800331c <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2205      	movs	r2, #5
 8003318:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2200      	movs	r2, #0
 8003320:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	687a      	ldr	r2, [r7, #4]
 8003326:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	887a      	ldrh	r2, [r7, #2]
 800332c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	887a      	ldrh	r2, [r7, #2]
 8003334:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	68ba      	ldr	r2, [r7, #8]
 800333c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	887a      	ldrh	r2, [r7, #2]
 8003342:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	887a      	ldrh	r2, [r7, #2]
 8003348:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	2200      	movs	r2, #0
 800334e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	2200      	movs	r2, #0
 8003354:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800335e:	d802      	bhi.n	8003366 <HAL_SPI_TransmitReceive+0xd8>
 8003360:	8abb      	ldrh	r3, [r7, #20]
 8003362:	2b01      	cmp	r3, #1
 8003364:	d908      	bls.n	8003378 <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003374:	605a      	str	r2, [r3, #4]
 8003376:	e007      	b.n	8003388 <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685a      	ldr	r2, [r3, #4]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003386:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003392:	2b40      	cmp	r3, #64	; 0x40
 8003394:	d007      	beq.n	80033a6 <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033a4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	68db      	ldr	r3, [r3, #12]
 80033aa:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80033ae:	f240 8083 	bls.w	80034b8 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d002      	beq.n	80033c0 <HAL_SPI_TransmitReceive+0x132>
 80033ba:	8afb      	ldrh	r3, [r7, #22]
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d16f      	bne.n	80034a0 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033c4:	881a      	ldrh	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033d0:	1c9a      	adds	r2, r3, #2
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b01      	subs	r3, #1
 80033de:	b29a      	uxth	r2, r3
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033e4:	e05c      	b.n	80034a0 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d11b      	bne.n	800342c <HAL_SPI_TransmitReceive+0x19e>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033f8:	b29b      	uxth	r3, r3
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d016      	beq.n	800342c <HAL_SPI_TransmitReceive+0x19e>
 80033fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003400:	2b01      	cmp	r3, #1
 8003402:	d113      	bne.n	800342c <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003408:	881a      	ldrh	r2, [r3, #0]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003414:	1c9a      	adds	r2, r3, #2
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800341e:	b29b      	uxth	r3, r3
 8003420:	3b01      	subs	r3, #1
 8003422:	b29a      	uxth	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	f003 0301 	and.w	r3, r3, #1
 8003436:	2b01      	cmp	r3, #1
 8003438:	d11c      	bne.n	8003474 <HAL_SPI_TransmitReceive+0x1e6>
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003440:	b29b      	uxth	r3, r3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d016      	beq.n	8003474 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68da      	ldr	r2, [r3, #12]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003450:	b292      	uxth	r2, r2
 8003452:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003458:	1c9a      	adds	r2, r3, #2
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003464:	b29b      	uxth	r3, r3
 8003466:	3b01      	subs	r3, #1
 8003468:	b29a      	uxth	r2, r3
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003470:	2301      	movs	r3, #1
 8003472:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003474:	f7fe fa4c 	bl	8001910 <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	6a3b      	ldr	r3, [r7, #32]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003480:	429a      	cmp	r2, r3
 8003482:	d80d      	bhi.n	80034a0 <HAL_SPI_TransmitReceive+0x212>
 8003484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003486:	f1b3 3fff 	cmp.w	r3, #4294967295
 800348a:	d009      	beq.n	80034a0 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e111      	b.n	80036c4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034a4:	b29b      	uxth	r3, r3
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d19d      	bne.n	80033e6 <HAL_SPI_TransmitReceive+0x158>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034b0:	b29b      	uxth	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d197      	bne.n	80033e6 <HAL_SPI_TransmitReceive+0x158>
 80034b6:	e0e5      	b.n	8003684 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d003      	beq.n	80034c8 <HAL_SPI_TransmitReceive+0x23a>
 80034c0:	8afb      	ldrh	r3, [r7, #22]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	f040 80d1 	bne.w	800366a <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	2b01      	cmp	r3, #1
 80034d0:	d912      	bls.n	80034f8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d6:	881a      	ldrh	r2, [r3, #0]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034e2:	1c9a      	adds	r2, r3, #2
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034ec:	b29b      	uxth	r3, r3
 80034ee:	3b02      	subs	r3, #2
 80034f0:	b29a      	uxth	r2, r3
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80034f6:	e0b8      	b.n	800366a <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	330c      	adds	r3, #12
 8003502:	7812      	ldrb	r2, [r2, #0]
 8003504:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800350a:	1c5a      	adds	r2, r3, #1
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003514:	b29b      	uxth	r3, r3
 8003516:	3b01      	subs	r3, #1
 8003518:	b29a      	uxth	r2, r3
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800351e:	e0a4      	b.n	800366a <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 0302 	and.w	r3, r3, #2
 800352a:	2b02      	cmp	r3, #2
 800352c:	d134      	bne.n	8003598 <HAL_SPI_TransmitReceive+0x30a>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003532:	b29b      	uxth	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d02f      	beq.n	8003598 <HAL_SPI_TransmitReceive+0x30a>
 8003538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800353a:	2b01      	cmp	r3, #1
 800353c:	d12c      	bne.n	8003598 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003542:	b29b      	uxth	r3, r3
 8003544:	2b01      	cmp	r3, #1
 8003546:	d912      	bls.n	800356e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800354c:	881a      	ldrh	r2, [r3, #0]
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003558:	1c9a      	adds	r2, r3, #2
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003562:	b29b      	uxth	r3, r3
 8003564:	3b02      	subs	r3, #2
 8003566:	b29a      	uxth	r2, r3
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800356c:	e012      	b.n	8003594 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	330c      	adds	r3, #12
 8003578:	7812      	ldrb	r2, [r2, #0]
 800357a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003580:	1c5a      	adds	r2, r3, #1
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800358a:	b29b      	uxth	r3, r3
 800358c:	3b01      	subs	r3, #1
 800358e:	b29a      	uxth	r2, r3
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003594:	2300      	movs	r3, #0
 8003596:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d148      	bne.n	8003638 <HAL_SPI_TransmitReceive+0x3aa>
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035ac:	b29b      	uxth	r3, r3
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d042      	beq.n	8003638 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d923      	bls.n	8003606 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68da      	ldr	r2, [r3, #12]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c8:	b292      	uxth	r2, r2
 80035ca:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d0:	1c9a      	adds	r2, r3, #2
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035dc:	b29b      	uxth	r3, r3
 80035de:	3b02      	subs	r3, #2
 80035e0:	b29a      	uxth	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80035ee:	b29b      	uxth	r3, r3
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d81f      	bhi.n	8003634 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	685a      	ldr	r2, [r3, #4]
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003602:	605a      	str	r2, [r3, #4]
 8003604:	e016      	b.n	8003634 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f103 020c 	add.w	r2, r3, #12
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	7812      	ldrb	r2, [r2, #0]
 8003614:	b2d2      	uxtb	r2, r2
 8003616:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800361c:	1c5a      	adds	r2, r3, #1
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003628:	b29b      	uxth	r3, r3
 800362a:	3b01      	subs	r3, #1
 800362c:	b29a      	uxth	r2, r3
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003634:	2301      	movs	r3, #1
 8003636:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003638:	f7fe f96a 	bl	8001910 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	6a3b      	ldr	r3, [r7, #32]
 8003640:	1ad3      	subs	r3, r2, r3
 8003642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003644:	429a      	cmp	r2, r3
 8003646:	d803      	bhi.n	8003650 <HAL_SPI_TransmitReceive+0x3c2>
 8003648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800364e:	d102      	bne.n	8003656 <HAL_SPI_TransmitReceive+0x3c8>
 8003650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003652:	2b00      	cmp	r3, #0
 8003654:	d109      	bne.n	800366a <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        __HAL_UNLOCK(hspi);
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
        return HAL_TIMEOUT;
 8003666:	2303      	movs	r3, #3
 8003668:	e02c      	b.n	80036c4 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800366e:	b29b      	uxth	r3, r3
 8003670:	2b00      	cmp	r3, #0
 8003672:	f47f af55 	bne.w	8003520 <HAL_SPI_TransmitReceive+0x292>
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800367c:	b29b      	uxth	r3, r3
 800367e:	2b00      	cmp	r3, #0
 8003680:	f47f af4e 	bne.w	8003520 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003684:	6a3a      	ldr	r2, [r7, #32]
 8003686:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f000 f93d 	bl	8003908 <SPI_EndRxTxTransaction>
 800368e:	4603      	mov	r3, r0
 8003690:	2b00      	cmp	r3, #0
 8003692:	d008      	beq.n	80036a6 <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2220      	movs	r2, #32
 8003698:	661a      	str	r2, [r3, #96]	; 0x60
    __HAL_UNLOCK(hspi);
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
    return HAL_ERROR;
 80036a2:	2301      	movs	r3, #1
 80036a4:	e00e      	b.n	80036c4 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e000      	b.n	80036c4 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 80036c2:	2300      	movs	r3, #0
  }
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3728      	adds	r7, #40	; 0x28
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b088      	sub	sp, #32
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	60f8      	str	r0, [r7, #12]
 80036d4:	60b9      	str	r1, [r7, #8]
 80036d6:	603b      	str	r3, [r7, #0]
 80036d8:	4613      	mov	r3, r2
 80036da:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80036dc:	f7fe f918 	bl	8001910 <HAL_GetTick>
 80036e0:	4602      	mov	r2, r0
 80036e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036e4:	1a9b      	subs	r3, r3, r2
 80036e6:	683a      	ldr	r2, [r7, #0]
 80036e8:	4413      	add	r3, r2
 80036ea:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80036ec:	f7fe f910 	bl	8001910 <HAL_GetTick>
 80036f0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80036f2:	4b39      	ldr	r3, [pc, #228]	; (80037d8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	015b      	lsls	r3, r3, #5
 80036f8:	0d1b      	lsrs	r3, r3, #20
 80036fa:	69fa      	ldr	r2, [r7, #28]
 80036fc:	fb02 f303 	mul.w	r3, r2, r3
 8003700:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003702:	e054      	b.n	80037ae <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800370a:	d050      	beq.n	80037ae <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800370c:	f7fe f900 	bl	8001910 <HAL_GetTick>
 8003710:	4602      	mov	r2, r0
 8003712:	69bb      	ldr	r3, [r7, #24]
 8003714:	1ad3      	subs	r3, r2, r3
 8003716:	69fa      	ldr	r2, [r7, #28]
 8003718:	429a      	cmp	r2, r3
 800371a:	d902      	bls.n	8003722 <SPI_WaitFlagStateUntilTimeout+0x56>
 800371c:	69fb      	ldr	r3, [r7, #28]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d13d      	bne.n	800379e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685a      	ldr	r2, [r3, #4]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003730:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800373a:	d111      	bne.n	8003760 <SPI_WaitFlagStateUntilTimeout+0x94>
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003744:	d004      	beq.n	8003750 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800374e:	d107      	bne.n	8003760 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800375e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003764:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003768:	d10f      	bne.n	800378a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	681a      	ldr	r2, [r3, #0]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003778:	601a      	str	r2, [r3, #0]
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003788:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e017      	b.n	80037ce <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800379e:	697b      	ldr	r3, [r7, #20]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80037a4:	2300      	movs	r3, #0
 80037a6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	3b01      	subs	r3, #1
 80037ac:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	4013      	ands	r3, r2
 80037b8:	68ba      	ldr	r2, [r7, #8]
 80037ba:	429a      	cmp	r2, r3
 80037bc:	bf0c      	ite	eq
 80037be:	2301      	moveq	r3, #1
 80037c0:	2300      	movne	r3, #0
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	461a      	mov	r2, r3
 80037c6:	79fb      	ldrb	r3, [r7, #7]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d19b      	bne.n	8003704 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80037cc:	2300      	movs	r3, #0
}
 80037ce:	4618      	mov	r0, r3
 80037d0:	3720      	adds	r7, #32
 80037d2:	46bd      	mov	sp, r7
 80037d4:	bd80      	pop	{r7, pc}
 80037d6:	bf00      	nop
 80037d8:	20000008 	.word	0x20000008

080037dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08a      	sub	sp, #40	; 0x28
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	60f8      	str	r0, [r7, #12]
 80037e4:	60b9      	str	r1, [r7, #8]
 80037e6:	607a      	str	r2, [r7, #4]
 80037e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80037ea:	2300      	movs	r3, #0
 80037ec:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80037ee:	f7fe f88f 	bl	8001910 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037f6:	1a9b      	subs	r3, r3, r2
 80037f8:	683a      	ldr	r2, [r7, #0]
 80037fa:	4413      	add	r3, r2
 80037fc:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80037fe:	f7fe f887 	bl	8001910 <HAL_GetTick>
 8003802:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	330c      	adds	r3, #12
 800380a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800380c:	4b3d      	ldr	r3, [pc, #244]	; (8003904 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	4613      	mov	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4413      	add	r3, r2
 8003816:	00da      	lsls	r2, r3, #3
 8003818:	1ad3      	subs	r3, r2, r3
 800381a:	0d1b      	lsrs	r3, r3, #20
 800381c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800381e:	fb02 f303 	mul.w	r3, r2, r3
 8003822:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003824:	e060      	b.n	80038e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800382c:	d107      	bne.n	800383e <SPI_WaitFifoStateUntilTimeout+0x62>
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d104      	bne.n	800383e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003834:	69fb      	ldr	r3, [r7, #28]
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	b2db      	uxtb	r3, r3
 800383a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800383c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003844:	d050      	beq.n	80038e8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003846:	f7fe f863 	bl	8001910 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	6a3b      	ldr	r3, [r7, #32]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003852:	429a      	cmp	r2, r3
 8003854:	d902      	bls.n	800385c <SPI_WaitFifoStateUntilTimeout+0x80>
 8003856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003858:	2b00      	cmp	r3, #0
 800385a:	d13d      	bne.n	80038d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	685a      	ldr	r2, [r3, #4]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800386a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003874:	d111      	bne.n	800389a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800387e:	d004      	beq.n	800388a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	689b      	ldr	r3, [r3, #8]
 8003884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003888:	d107      	bne.n	800389a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	681a      	ldr	r2, [r3, #0]
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003898:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800389e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038a2:	d10f      	bne.n	80038c4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80038b2:	601a      	str	r2, [r3, #0]
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	681a      	ldr	r2, [r3, #0]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80038c2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80038d4:	2303      	movs	r3, #3
 80038d6:	e010      	b.n	80038fa <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d101      	bne.n	80038e2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80038de:	2300      	movs	r3, #0
 80038e0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	3b01      	subs	r3, #1
 80038e6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689a      	ldr	r2, [r3, #8]
 80038ee:	68bb      	ldr	r3, [r7, #8]
 80038f0:	4013      	ands	r3, r2
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d196      	bne.n	8003826 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3728      	adds	r7, #40	; 0x28
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	20000008 	.word	0x20000008

08003908 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b086      	sub	sp, #24
 800390c:	af02      	add	r7, sp, #8
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	2200      	movs	r2, #0
 800391c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003920:	68f8      	ldr	r0, [r7, #12]
 8003922:	f7ff ff5b 	bl	80037dc <SPI_WaitFifoStateUntilTimeout>
 8003926:	4603      	mov	r3, r0
 8003928:	2b00      	cmp	r3, #0
 800392a:	d007      	beq.n	800393c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003930:	f043 0220 	orr.w	r2, r3, #32
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003938:	2303      	movs	r3, #3
 800393a:	e027      	b.n	800398c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	9300      	str	r3, [sp, #0]
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	2200      	movs	r2, #0
 8003944:	2180      	movs	r1, #128	; 0x80
 8003946:	68f8      	ldr	r0, [r7, #12]
 8003948:	f7ff fec0 	bl	80036cc <SPI_WaitFlagStateUntilTimeout>
 800394c:	4603      	mov	r3, r0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d007      	beq.n	8003962 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003956:	f043 0220 	orr.w	r2, r3, #32
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800395e:	2303      	movs	r3, #3
 8003960:	e014      	b.n	800398c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	9300      	str	r3, [sp, #0]
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	2200      	movs	r2, #0
 800396a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800396e:	68f8      	ldr	r0, [r7, #12]
 8003970:	f7ff ff34 	bl	80037dc <SPI_WaitFifoStateUntilTimeout>
 8003974:	4603      	mov	r3, r0
 8003976:	2b00      	cmp	r3, #0
 8003978:	d007      	beq.n	800398a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800397e:	f043 0220 	orr.w	r2, r3, #32
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003986:	2303      	movs	r3, #3
 8003988:	e000      	b.n	800398c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800398a:	2300      	movs	r3, #0
}
 800398c:	4618      	mov	r0, r3
 800398e:	3710      	adds	r7, #16
 8003990:	46bd      	mov	sp, r7
 8003992:	bd80      	pop	{r7, pc}

08003994 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d101      	bne.n	80039a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039a2:	2301      	movs	r3, #1
 80039a4:	e049      	b.n	8003a3a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d106      	bne.n	80039c0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039ba:	6878      	ldr	r0, [r7, #4]
 80039bc:	f7fd fd8c 	bl	80014d8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2202      	movs	r2, #2
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3304      	adds	r3, #4
 80039d0:	4619      	mov	r1, r3
 80039d2:	4610      	mov	r0, r2
 80039d4:	f000 f8fe 	bl	8003bd4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2201      	movs	r2, #1
 80039fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3708      	adds	r7, #8
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}

08003a42 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a42:	b580      	push	{r7, lr}
 8003a44:	b084      	sub	sp, #16
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	6078      	str	r0, [r7, #4]
 8003a4a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d101      	bne.n	8003a5e <HAL_TIM_ConfigClockSource+0x1c>
 8003a5a:	2302      	movs	r3, #2
 8003a5c:	e0b6      	b.n	8003bcc <HAL_TIM_ConfigClockSource+0x18a>
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2201      	movs	r2, #1
 8003a62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2202      	movs	r2, #2
 8003a6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	689b      	ldr	r3, [r3, #8]
 8003a74:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a7c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a80:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a88:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68ba      	ldr	r2, [r7, #8]
 8003a90:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a9a:	d03e      	beq.n	8003b1a <HAL_TIM_ConfigClockSource+0xd8>
 8003a9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003aa0:	f200 8087 	bhi.w	8003bb2 <HAL_TIM_ConfigClockSource+0x170>
 8003aa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa8:	f000 8086 	beq.w	8003bb8 <HAL_TIM_ConfigClockSource+0x176>
 8003aac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003ab0:	d87f      	bhi.n	8003bb2 <HAL_TIM_ConfigClockSource+0x170>
 8003ab2:	2b70      	cmp	r3, #112	; 0x70
 8003ab4:	d01a      	beq.n	8003aec <HAL_TIM_ConfigClockSource+0xaa>
 8003ab6:	2b70      	cmp	r3, #112	; 0x70
 8003ab8:	d87b      	bhi.n	8003bb2 <HAL_TIM_ConfigClockSource+0x170>
 8003aba:	2b60      	cmp	r3, #96	; 0x60
 8003abc:	d050      	beq.n	8003b60 <HAL_TIM_ConfigClockSource+0x11e>
 8003abe:	2b60      	cmp	r3, #96	; 0x60
 8003ac0:	d877      	bhi.n	8003bb2 <HAL_TIM_ConfigClockSource+0x170>
 8003ac2:	2b50      	cmp	r3, #80	; 0x50
 8003ac4:	d03c      	beq.n	8003b40 <HAL_TIM_ConfigClockSource+0xfe>
 8003ac6:	2b50      	cmp	r3, #80	; 0x50
 8003ac8:	d873      	bhi.n	8003bb2 <HAL_TIM_ConfigClockSource+0x170>
 8003aca:	2b40      	cmp	r3, #64	; 0x40
 8003acc:	d058      	beq.n	8003b80 <HAL_TIM_ConfigClockSource+0x13e>
 8003ace:	2b40      	cmp	r3, #64	; 0x40
 8003ad0:	d86f      	bhi.n	8003bb2 <HAL_TIM_ConfigClockSource+0x170>
 8003ad2:	2b30      	cmp	r3, #48	; 0x30
 8003ad4:	d064      	beq.n	8003ba0 <HAL_TIM_ConfigClockSource+0x15e>
 8003ad6:	2b30      	cmp	r3, #48	; 0x30
 8003ad8:	d86b      	bhi.n	8003bb2 <HAL_TIM_ConfigClockSource+0x170>
 8003ada:	2b20      	cmp	r3, #32
 8003adc:	d060      	beq.n	8003ba0 <HAL_TIM_ConfigClockSource+0x15e>
 8003ade:	2b20      	cmp	r3, #32
 8003ae0:	d867      	bhi.n	8003bb2 <HAL_TIM_ConfigClockSource+0x170>
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d05c      	beq.n	8003ba0 <HAL_TIM_ConfigClockSource+0x15e>
 8003ae6:	2b10      	cmp	r3, #16
 8003ae8:	d05a      	beq.n	8003ba0 <HAL_TIM_ConfigClockSource+0x15e>
 8003aea:	e062      	b.n	8003bb2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003afc:	f000 f954 	bl	8003da8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b0e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	609a      	str	r2, [r3, #8]
      break;
 8003b18:	e04f      	b.n	8003bba <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b2a:	f000 f93d 	bl	8003da8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	689a      	ldr	r2, [r3, #8]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b3c:	609a      	str	r2, [r3, #8]
      break;
 8003b3e:	e03c      	b.n	8003bba <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	f000 f8b1 	bl	8003cb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2150      	movs	r1, #80	; 0x50
 8003b58:	4618      	mov	r0, r3
 8003b5a:	f000 f90a 	bl	8003d72 <TIM_ITRx_SetConfig>
      break;
 8003b5e:	e02c      	b.n	8003bba <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b6c:	461a      	mov	r2, r3
 8003b6e:	f000 f8d0 	bl	8003d12 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2160      	movs	r1, #96	; 0x60
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f000 f8fa 	bl	8003d72 <TIM_ITRx_SetConfig>
      break;
 8003b7e:	e01c      	b.n	8003bba <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b8c:	461a      	mov	r2, r3
 8003b8e:	f000 f891 	bl	8003cb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2140      	movs	r1, #64	; 0x40
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 f8ea 	bl	8003d72 <TIM_ITRx_SetConfig>
      break;
 8003b9e:	e00c      	b.n	8003bba <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4619      	mov	r1, r3
 8003baa:	4610      	mov	r0, r2
 8003bac:	f000 f8e1 	bl	8003d72 <TIM_ITRx_SetConfig>
      break;
 8003bb0:	e003      	b.n	8003bba <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb6:	e000      	b.n	8003bba <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003bb8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2201      	movs	r2, #1
 8003bbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2200      	movs	r2, #0
 8003bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bca:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	3710      	adds	r7, #16
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	bd80      	pop	{r7, pc}

08003bd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bd4:	b480      	push	{r7}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a30      	ldr	r2, [pc, #192]	; (8003ca8 <TIM_Base_SetConfig+0xd4>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d003      	beq.n	8003bf4 <TIM_Base_SetConfig+0x20>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf2:	d108      	bne.n	8003c06 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bfa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	68fa      	ldr	r2, [r7, #12]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a27      	ldr	r2, [pc, #156]	; (8003ca8 <TIM_Base_SetConfig+0xd4>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d00b      	beq.n	8003c26 <TIM_Base_SetConfig+0x52>
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c14:	d007      	beq.n	8003c26 <TIM_Base_SetConfig+0x52>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	4a24      	ldr	r2, [pc, #144]	; (8003cac <TIM_Base_SetConfig+0xd8>)
 8003c1a:	4293      	cmp	r3, r2
 8003c1c:	d003      	beq.n	8003c26 <TIM_Base_SetConfig+0x52>
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	4a23      	ldr	r2, [pc, #140]	; (8003cb0 <TIM_Base_SetConfig+0xdc>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d108      	bne.n	8003c38 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	68db      	ldr	r3, [r3, #12]
 8003c32:	68fa      	ldr	r2, [r7, #12]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	68fa      	ldr	r2, [r7, #12]
 8003c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	689a      	ldr	r2, [r3, #8]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	4a12      	ldr	r2, [pc, #72]	; (8003ca8 <TIM_Base_SetConfig+0xd4>)
 8003c60:	4293      	cmp	r3, r2
 8003c62:	d007      	beq.n	8003c74 <TIM_Base_SetConfig+0xa0>
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	4a11      	ldr	r2, [pc, #68]	; (8003cac <TIM_Base_SetConfig+0xd8>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d003      	beq.n	8003c74 <TIM_Base_SetConfig+0xa0>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	4a10      	ldr	r2, [pc, #64]	; (8003cb0 <TIM_Base_SetConfig+0xdc>)
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d103      	bne.n	8003c7c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	691a      	ldr	r2, [r3, #16]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f003 0301 	and.w	r3, r3, #1
 8003c8a:	2b01      	cmp	r3, #1
 8003c8c:	d105      	bne.n	8003c9a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	f023 0201 	bic.w	r2, r3, #1
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	611a      	str	r2, [r3, #16]
  }
}
 8003c9a:	bf00      	nop
 8003c9c:	3714      	adds	r7, #20
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	40012c00 	.word	0x40012c00
 8003cac:	40014000 	.word	0x40014000
 8003cb0:	40014400 	.word	0x40014400

08003cb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b087      	sub	sp, #28
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	60f8      	str	r0, [r7, #12]
 8003cbc:	60b9      	str	r1, [r7, #8]
 8003cbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a1b      	ldr	r3, [r3, #32]
 8003cca:	f023 0201 	bic.w	r2, r3, #1
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003cde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	011b      	lsls	r3, r3, #4
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003cea:	697b      	ldr	r3, [r7, #20]
 8003cec:	f023 030a 	bic.w	r3, r3, #10
 8003cf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003cf2:	697a      	ldr	r2, [r7, #20]
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	693a      	ldr	r2, [r7, #16]
 8003cfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	697a      	ldr	r2, [r7, #20]
 8003d04:	621a      	str	r2, [r3, #32]
}
 8003d06:	bf00      	nop
 8003d08:	371c      	adds	r7, #28
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d10:	4770      	bx	lr

08003d12 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d12:	b480      	push	{r7}
 8003d14:	b087      	sub	sp, #28
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	60f8      	str	r0, [r7, #12]
 8003d1a:	60b9      	str	r1, [r7, #8]
 8003d1c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6a1b      	ldr	r3, [r3, #32]
 8003d22:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	6a1b      	ldr	r3, [r3, #32]
 8003d28:	f023 0210 	bic.w	r2, r3, #16
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	699b      	ldr	r3, [r3, #24]
 8003d34:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d3c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	031b      	lsls	r3, r3, #12
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d48:	697b      	ldr	r3, [r7, #20]
 8003d4a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003d4e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	011b      	lsls	r3, r3, #4
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	693a      	ldr	r2, [r7, #16]
 8003d5e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	621a      	str	r2, [r3, #32]
}
 8003d66:	bf00      	nop
 8003d68:	371c      	adds	r7, #28
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr

08003d72 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d72:	b480      	push	{r7}
 8003d74:	b085      	sub	sp, #20
 8003d76:	af00      	add	r7, sp, #0
 8003d78:	6078      	str	r0, [r7, #4]
 8003d7a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d88:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d8a:	683a      	ldr	r2, [r7, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4313      	orrs	r3, r2
 8003d90:	f043 0307 	orr.w	r3, r3, #7
 8003d94:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68fa      	ldr	r2, [r7, #12]
 8003d9a:	609a      	str	r2, [r3, #8]
}
 8003d9c:	bf00      	nop
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003da8:	b480      	push	{r7}
 8003daa:	b087      	sub	sp, #28
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	60f8      	str	r0, [r7, #12]
 8003db0:	60b9      	str	r1, [r7, #8]
 8003db2:	607a      	str	r2, [r7, #4]
 8003db4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003dc2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	021a      	lsls	r2, r3, #8
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	431a      	orrs	r2, r3
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	697a      	ldr	r2, [r7, #20]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	609a      	str	r2, [r3, #8]
}
 8003ddc:	bf00      	nop
 8003dde:	371c      	adds	r7, #28
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b085      	sub	sp, #20
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d101      	bne.n	8003e00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003dfc:	2302      	movs	r3, #2
 8003dfe:	e04f      	b.n	8003ea0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2201      	movs	r2, #1
 8003e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2202      	movs	r2, #2
 8003e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689b      	ldr	r3, [r3, #8]
 8003e1e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a21      	ldr	r2, [pc, #132]	; (8003eac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d108      	bne.n	8003e3c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003e30:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	685b      	ldr	r3, [r3, #4]
 8003e36:	68fa      	ldr	r2, [r7, #12]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e42:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68fa      	ldr	r2, [r7, #12]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	4a14      	ldr	r2, [pc, #80]	; (8003eac <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d009      	beq.n	8003e74 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e68:	d004      	beq.n	8003e74 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a10      	ldr	r2, [pc, #64]	; (8003eb0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d10c      	bne.n	8003e8e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e74:	68bb      	ldr	r3, [r7, #8]
 8003e76:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e7a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	68ba      	ldr	r2, [r7, #8]
 8003e8c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e9e:	2300      	movs	r3, #0
}
 8003ea0:	4618      	mov	r0, r3
 8003ea2:	3714      	adds	r7, #20
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eaa:	4770      	bx	lr
 8003eac:	40012c00 	.word	0x40012c00
 8003eb0:	40014000 	.word	0x40014000

08003eb4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d101      	bne.n	8003ec6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ec2:	2301      	movs	r3, #1
 8003ec4:	e040      	b.n	8003f48 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d106      	bne.n	8003edc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f7fd fb1c 	bl	8001514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2224      	movs	r2, #36	; 0x24
 8003ee0:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f022 0201 	bic.w	r2, r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d002      	beq.n	8003f00 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 fade 	bl	80044bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003f00:	6878      	ldr	r0, [r7, #4]
 8003f02:	f000 f8af 	bl	8004064 <UART_SetConfig>
 8003f06:	4603      	mov	r3, r0
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003f0c:	2301      	movs	r3, #1
 8003f0e:	e01b      	b.n	8003f48 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	685a      	ldr	r2, [r3, #4]
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f1e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	689a      	ldr	r2, [r3, #8]
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f2e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681a      	ldr	r2, [r3, #0]
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f042 0201 	orr.w	r2, r2, #1
 8003f3e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003f40:	6878      	ldr	r0, [r7, #4]
 8003f42:	f000 fb5d 	bl	8004600 <UART_CheckIdleState>
 8003f46:	4603      	mov	r3, r0
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	3708      	adds	r7, #8
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08a      	sub	sp, #40	; 0x28
 8003f54:	af02      	add	r7, sp, #8
 8003f56:	60f8      	str	r0, [r7, #12]
 8003f58:	60b9      	str	r1, [r7, #8]
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	4613      	mov	r3, r2
 8003f5e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003f64:	2b20      	cmp	r3, #32
 8003f66:	d178      	bne.n	800405a <HAL_UART_Transmit+0x10a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d002      	beq.n	8003f74 <HAL_UART_Transmit+0x24>
 8003f6e:	88fb      	ldrh	r3, [r7, #6]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d101      	bne.n	8003f78 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003f74:	2301      	movs	r3, #1
 8003f76:	e071      	b.n	800405c <HAL_UART_Transmit+0x10c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	2221      	movs	r2, #33	; 0x21
 8003f84:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003f86:	f7fd fcc3 	bl	8001910 <HAL_GetTick>
 8003f8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	88fa      	ldrh	r2, [r7, #6]
 8003f90:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	88fa      	ldrh	r2, [r7, #6]
 8003f98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	689b      	ldr	r3, [r3, #8]
 8003fa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fa4:	d108      	bne.n	8003fb8 <HAL_UART_Transmit+0x68>
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d104      	bne.n	8003fb8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003fae:	2300      	movs	r3, #0
 8003fb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	61bb      	str	r3, [r7, #24]
 8003fb6:	e003      	b.n	8003fc0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003fc0:	e030      	b.n	8004024 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	2180      	movs	r1, #128	; 0x80
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 fbbf 	bl	8004750 <UART_WaitOnFlagUntilTimeout>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d004      	beq.n	8003fe2 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8003fde:	2303      	movs	r3, #3
 8003fe0:	e03c      	b.n	800405c <HAL_UART_Transmit+0x10c>
      }
      if (pdata8bits == NULL)
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d10b      	bne.n	8004000 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003fe8:	69bb      	ldr	r3, [r7, #24]
 8003fea:	881a      	ldrh	r2, [r3, #0]
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ff4:	b292      	uxth	r2, r2
 8003ff6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	3302      	adds	r3, #2
 8003ffc:	61bb      	str	r3, [r7, #24]
 8003ffe:	e008      	b.n	8004012 <HAL_UART_Transmit+0xc2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004000:	69fb      	ldr	r3, [r7, #28]
 8004002:	781a      	ldrb	r2, [r3, #0]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	b292      	uxth	r2, r2
 800400a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	3301      	adds	r3, #1
 8004010:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004018:	b29b      	uxth	r3, r3
 800401a:	3b01      	subs	r3, #1
 800401c:	b29a      	uxth	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800402a:	b29b      	uxth	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	d1c8      	bne.n	8003fc2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	9300      	str	r3, [sp, #0]
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	2200      	movs	r2, #0
 8004038:	2140      	movs	r1, #64	; 0x40
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 fb88 	bl	8004750 <UART_WaitOnFlagUntilTimeout>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d004      	beq.n	8004050 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2220      	movs	r2, #32
 800404a:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 800404c:	2303      	movs	r3, #3
 800404e:	e005      	b.n	800405c <HAL_UART_Transmit+0x10c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2220      	movs	r2, #32
 8004054:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004056:	2300      	movs	r3, #0
 8004058:	e000      	b.n	800405c <HAL_UART_Transmit+0x10c>
  }
  else
  {
    return HAL_BUSY;
 800405a:	2302      	movs	r3, #2
  }
}
 800405c:	4618      	mov	r0, r3
 800405e:	3720      	adds	r7, #32
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004064:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004068:	b08a      	sub	sp, #40	; 0x28
 800406a:	af00      	add	r7, sp, #0
 800406c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800406e:	2300      	movs	r3, #0
 8004070:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	431a      	orrs	r2, r3
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	695b      	ldr	r3, [r3, #20]
 8004082:	431a      	orrs	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	69db      	ldr	r3, [r3, #28]
 8004088:	4313      	orrs	r3, r2
 800408a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	4bb4      	ldr	r3, [pc, #720]	; (8004364 <UART_SetConfig+0x300>)
 8004094:	4013      	ands	r3, r2
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	6812      	ldr	r2, [r2, #0]
 800409a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800409c:	430b      	orrs	r3, r1
 800409e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	68da      	ldr	r2, [r3, #12]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	430a      	orrs	r2, r1
 80040b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	699b      	ldr	r3, [r3, #24]
 80040ba:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4aa9      	ldr	r2, [pc, #676]	; (8004368 <UART_SetConfig+0x304>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d004      	beq.n	80040d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6a1b      	ldr	r3, [r3, #32]
 80040ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040cc:	4313      	orrs	r3, r2
 80040ce:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80040e0:	430a      	orrs	r2, r1
 80040e2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	4aa0      	ldr	r2, [pc, #640]	; (800436c <UART_SetConfig+0x308>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d126      	bne.n	800413c <UART_SetConfig+0xd8>
 80040ee:	4ba0      	ldr	r3, [pc, #640]	; (8004370 <UART_SetConfig+0x30c>)
 80040f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040f4:	f003 0303 	and.w	r3, r3, #3
 80040f8:	2b03      	cmp	r3, #3
 80040fa:	d81b      	bhi.n	8004134 <UART_SetConfig+0xd0>
 80040fc:	a201      	add	r2, pc, #4	; (adr r2, 8004104 <UART_SetConfig+0xa0>)
 80040fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004102:	bf00      	nop
 8004104:	08004115 	.word	0x08004115
 8004108:	08004125 	.word	0x08004125
 800410c:	0800411d 	.word	0x0800411d
 8004110:	0800412d 	.word	0x0800412d
 8004114:	2301      	movs	r3, #1
 8004116:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800411a:	e080      	b.n	800421e <UART_SetConfig+0x1ba>
 800411c:	2302      	movs	r3, #2
 800411e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004122:	e07c      	b.n	800421e <UART_SetConfig+0x1ba>
 8004124:	2304      	movs	r3, #4
 8004126:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800412a:	e078      	b.n	800421e <UART_SetConfig+0x1ba>
 800412c:	2308      	movs	r3, #8
 800412e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004132:	e074      	b.n	800421e <UART_SetConfig+0x1ba>
 8004134:	2310      	movs	r3, #16
 8004136:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800413a:	e070      	b.n	800421e <UART_SetConfig+0x1ba>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a8c      	ldr	r2, [pc, #560]	; (8004374 <UART_SetConfig+0x310>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d138      	bne.n	80041b8 <UART_SetConfig+0x154>
 8004146:	4b8a      	ldr	r3, [pc, #552]	; (8004370 <UART_SetConfig+0x30c>)
 8004148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800414c:	f003 030c 	and.w	r3, r3, #12
 8004150:	2b0c      	cmp	r3, #12
 8004152:	d82d      	bhi.n	80041b0 <UART_SetConfig+0x14c>
 8004154:	a201      	add	r2, pc, #4	; (adr r2, 800415c <UART_SetConfig+0xf8>)
 8004156:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800415a:	bf00      	nop
 800415c:	08004191 	.word	0x08004191
 8004160:	080041b1 	.word	0x080041b1
 8004164:	080041b1 	.word	0x080041b1
 8004168:	080041b1 	.word	0x080041b1
 800416c:	080041a1 	.word	0x080041a1
 8004170:	080041b1 	.word	0x080041b1
 8004174:	080041b1 	.word	0x080041b1
 8004178:	080041b1 	.word	0x080041b1
 800417c:	08004199 	.word	0x08004199
 8004180:	080041b1 	.word	0x080041b1
 8004184:	080041b1 	.word	0x080041b1
 8004188:	080041b1 	.word	0x080041b1
 800418c:	080041a9 	.word	0x080041a9
 8004190:	2300      	movs	r3, #0
 8004192:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004196:	e042      	b.n	800421e <UART_SetConfig+0x1ba>
 8004198:	2302      	movs	r3, #2
 800419a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800419e:	e03e      	b.n	800421e <UART_SetConfig+0x1ba>
 80041a0:	2304      	movs	r3, #4
 80041a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041a6:	e03a      	b.n	800421e <UART_SetConfig+0x1ba>
 80041a8:	2308      	movs	r3, #8
 80041aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041ae:	e036      	b.n	800421e <UART_SetConfig+0x1ba>
 80041b0:	2310      	movs	r3, #16
 80041b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041b6:	e032      	b.n	800421e <UART_SetConfig+0x1ba>
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	4a6a      	ldr	r2, [pc, #424]	; (8004368 <UART_SetConfig+0x304>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d12a      	bne.n	8004218 <UART_SetConfig+0x1b4>
 80041c2:	4b6b      	ldr	r3, [pc, #428]	; (8004370 <UART_SetConfig+0x30c>)
 80041c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80041cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041d0:	d01a      	beq.n	8004208 <UART_SetConfig+0x1a4>
 80041d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80041d6:	d81b      	bhi.n	8004210 <UART_SetConfig+0x1ac>
 80041d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041dc:	d00c      	beq.n	80041f8 <UART_SetConfig+0x194>
 80041de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041e2:	d815      	bhi.n	8004210 <UART_SetConfig+0x1ac>
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d003      	beq.n	80041f0 <UART_SetConfig+0x18c>
 80041e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80041ec:	d008      	beq.n	8004200 <UART_SetConfig+0x19c>
 80041ee:	e00f      	b.n	8004210 <UART_SetConfig+0x1ac>
 80041f0:	2300      	movs	r3, #0
 80041f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041f6:	e012      	b.n	800421e <UART_SetConfig+0x1ba>
 80041f8:	2302      	movs	r3, #2
 80041fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80041fe:	e00e      	b.n	800421e <UART_SetConfig+0x1ba>
 8004200:	2304      	movs	r3, #4
 8004202:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004206:	e00a      	b.n	800421e <UART_SetConfig+0x1ba>
 8004208:	2308      	movs	r3, #8
 800420a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800420e:	e006      	b.n	800421e <UART_SetConfig+0x1ba>
 8004210:	2310      	movs	r3, #16
 8004212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004216:	e002      	b.n	800421e <UART_SetConfig+0x1ba>
 8004218:	2310      	movs	r3, #16
 800421a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a51      	ldr	r2, [pc, #324]	; (8004368 <UART_SetConfig+0x304>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d17a      	bne.n	800431e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004228:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800422c:	2b08      	cmp	r3, #8
 800422e:	d824      	bhi.n	800427a <UART_SetConfig+0x216>
 8004230:	a201      	add	r2, pc, #4	; (adr r2, 8004238 <UART_SetConfig+0x1d4>)
 8004232:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004236:	bf00      	nop
 8004238:	0800425d 	.word	0x0800425d
 800423c:	0800427b 	.word	0x0800427b
 8004240:	08004265 	.word	0x08004265
 8004244:	0800427b 	.word	0x0800427b
 8004248:	0800426b 	.word	0x0800426b
 800424c:	0800427b 	.word	0x0800427b
 8004250:	0800427b 	.word	0x0800427b
 8004254:	0800427b 	.word	0x0800427b
 8004258:	08004273 	.word	0x08004273
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800425c:	f7fe fc00 	bl	8002a60 <HAL_RCC_GetPCLK1Freq>
 8004260:	61f8      	str	r0, [r7, #28]
        break;
 8004262:	e010      	b.n	8004286 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004264:	4b44      	ldr	r3, [pc, #272]	; (8004378 <UART_SetConfig+0x314>)
 8004266:	61fb      	str	r3, [r7, #28]
        break;
 8004268:	e00d      	b.n	8004286 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800426a:	f7fe fb61 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 800426e:	61f8      	str	r0, [r7, #28]
        break;
 8004270:	e009      	b.n	8004286 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004276:	61fb      	str	r3, [r7, #28]
        break;
 8004278:	e005      	b.n	8004286 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800427a:	2300      	movs	r3, #0
 800427c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004284:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004286:	69fb      	ldr	r3, [r7, #28]
 8004288:	2b00      	cmp	r3, #0
 800428a:	f000 8107 	beq.w	800449c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	685a      	ldr	r2, [r3, #4]
 8004292:	4613      	mov	r3, r2
 8004294:	005b      	lsls	r3, r3, #1
 8004296:	4413      	add	r3, r2
 8004298:	69fa      	ldr	r2, [r7, #28]
 800429a:	429a      	cmp	r2, r3
 800429c:	d305      	bcc.n	80042aa <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	685b      	ldr	r3, [r3, #4]
 80042a2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80042a4:	69fa      	ldr	r2, [r7, #28]
 80042a6:	429a      	cmp	r2, r3
 80042a8:	d903      	bls.n	80042b2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80042aa:	2301      	movs	r3, #1
 80042ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80042b0:	e0f4      	b.n	800449c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	2200      	movs	r2, #0
 80042b6:	461c      	mov	r4, r3
 80042b8:	4615      	mov	r5, r2
 80042ba:	f04f 0200 	mov.w	r2, #0
 80042be:	f04f 0300 	mov.w	r3, #0
 80042c2:	022b      	lsls	r3, r5, #8
 80042c4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80042c8:	0222      	lsls	r2, r4, #8
 80042ca:	68f9      	ldr	r1, [r7, #12]
 80042cc:	6849      	ldr	r1, [r1, #4]
 80042ce:	0849      	lsrs	r1, r1, #1
 80042d0:	2000      	movs	r0, #0
 80042d2:	4688      	mov	r8, r1
 80042d4:	4681      	mov	r9, r0
 80042d6:	eb12 0a08 	adds.w	sl, r2, r8
 80042da:	eb43 0b09 	adc.w	fp, r3, r9
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	685b      	ldr	r3, [r3, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	603b      	str	r3, [r7, #0]
 80042e6:	607a      	str	r2, [r7, #4]
 80042e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80042ec:	4650      	mov	r0, sl
 80042ee:	4659      	mov	r1, fp
 80042f0:	f7fc fc5a 	bl	8000ba8 <__aeabi_uldivmod>
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	4613      	mov	r3, r2
 80042fa:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004302:	d308      	bcc.n	8004316 <UART_SetConfig+0x2b2>
 8004304:	69bb      	ldr	r3, [r7, #24]
 8004306:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800430a:	d204      	bcs.n	8004316 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	69ba      	ldr	r2, [r7, #24]
 8004312:	60da      	str	r2, [r3, #12]
 8004314:	e0c2      	b.n	800449c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8004316:	2301      	movs	r3, #1
 8004318:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800431c:	e0be      	b.n	800449c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	69db      	ldr	r3, [r3, #28]
 8004322:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004326:	d16a      	bne.n	80043fe <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8004328:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800432c:	2b08      	cmp	r3, #8
 800432e:	d834      	bhi.n	800439a <UART_SetConfig+0x336>
 8004330:	a201      	add	r2, pc, #4	; (adr r2, 8004338 <UART_SetConfig+0x2d4>)
 8004332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004336:	bf00      	nop
 8004338:	0800435d 	.word	0x0800435d
 800433c:	0800437d 	.word	0x0800437d
 8004340:	08004385 	.word	0x08004385
 8004344:	0800439b 	.word	0x0800439b
 8004348:	0800438b 	.word	0x0800438b
 800434c:	0800439b 	.word	0x0800439b
 8004350:	0800439b 	.word	0x0800439b
 8004354:	0800439b 	.word	0x0800439b
 8004358:	08004393 	.word	0x08004393
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800435c:	f7fe fb80 	bl	8002a60 <HAL_RCC_GetPCLK1Freq>
 8004360:	61f8      	str	r0, [r7, #28]
        break;
 8004362:	e020      	b.n	80043a6 <UART_SetConfig+0x342>
 8004364:	efff69f3 	.word	0xefff69f3
 8004368:	40008000 	.word	0x40008000
 800436c:	40013800 	.word	0x40013800
 8004370:	40021000 	.word	0x40021000
 8004374:	40004400 	.word	0x40004400
 8004378:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800437c:	f7fe fb86 	bl	8002a8c <HAL_RCC_GetPCLK2Freq>
 8004380:	61f8      	str	r0, [r7, #28]
        break;
 8004382:	e010      	b.n	80043a6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004384:	4b4c      	ldr	r3, [pc, #304]	; (80044b8 <UART_SetConfig+0x454>)
 8004386:	61fb      	str	r3, [r7, #28]
        break;
 8004388:	e00d      	b.n	80043a6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800438a:	f7fe fad1 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 800438e:	61f8      	str	r0, [r7, #28]
        break;
 8004390:	e009      	b.n	80043a6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004392:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004396:	61fb      	str	r3, [r7, #28]
        break;
 8004398:	e005      	b.n	80043a6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800439a:	2300      	movs	r3, #0
 800439c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80043a4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043a6:	69fb      	ldr	r3, [r7, #28]
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d077      	beq.n	800449c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	005a      	lsls	r2, r3, #1
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	085b      	lsrs	r3, r3, #1
 80043b6:	441a      	add	r2, r3
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	685b      	ldr	r3, [r3, #4]
 80043bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043c2:	69bb      	ldr	r3, [r7, #24]
 80043c4:	2b0f      	cmp	r3, #15
 80043c6:	d916      	bls.n	80043f6 <UART_SetConfig+0x392>
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043ce:	d212      	bcs.n	80043f6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043d0:	69bb      	ldr	r3, [r7, #24]
 80043d2:	b29b      	uxth	r3, r3
 80043d4:	f023 030f 	bic.w	r3, r3, #15
 80043d8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043da:	69bb      	ldr	r3, [r7, #24]
 80043dc:	085b      	lsrs	r3, r3, #1
 80043de:	b29b      	uxth	r3, r3
 80043e0:	f003 0307 	and.w	r3, r3, #7
 80043e4:	b29a      	uxth	r2, r3
 80043e6:	8afb      	ldrh	r3, [r7, #22]
 80043e8:	4313      	orrs	r3, r2
 80043ea:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	8afa      	ldrh	r2, [r7, #22]
 80043f2:	60da      	str	r2, [r3, #12]
 80043f4:	e052      	b.n	800449c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80043f6:	2301      	movs	r3, #1
 80043f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80043fc:	e04e      	b.n	800449c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043fe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004402:	2b08      	cmp	r3, #8
 8004404:	d827      	bhi.n	8004456 <UART_SetConfig+0x3f2>
 8004406:	a201      	add	r2, pc, #4	; (adr r2, 800440c <UART_SetConfig+0x3a8>)
 8004408:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800440c:	08004431 	.word	0x08004431
 8004410:	08004439 	.word	0x08004439
 8004414:	08004441 	.word	0x08004441
 8004418:	08004457 	.word	0x08004457
 800441c:	08004447 	.word	0x08004447
 8004420:	08004457 	.word	0x08004457
 8004424:	08004457 	.word	0x08004457
 8004428:	08004457 	.word	0x08004457
 800442c:	0800444f 	.word	0x0800444f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004430:	f7fe fb16 	bl	8002a60 <HAL_RCC_GetPCLK1Freq>
 8004434:	61f8      	str	r0, [r7, #28]
        break;
 8004436:	e014      	b.n	8004462 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004438:	f7fe fb28 	bl	8002a8c <HAL_RCC_GetPCLK2Freq>
 800443c:	61f8      	str	r0, [r7, #28]
        break;
 800443e:	e010      	b.n	8004462 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004440:	4b1d      	ldr	r3, [pc, #116]	; (80044b8 <UART_SetConfig+0x454>)
 8004442:	61fb      	str	r3, [r7, #28]
        break;
 8004444:	e00d      	b.n	8004462 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004446:	f7fe fa73 	bl	8002930 <HAL_RCC_GetSysClockFreq>
 800444a:	61f8      	str	r0, [r7, #28]
        break;
 800444c:	e009      	b.n	8004462 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800444e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004452:	61fb      	str	r3, [r7, #28]
        break;
 8004454:	e005      	b.n	8004462 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8004456:	2300      	movs	r3, #0
 8004458:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800445a:	2301      	movs	r3, #1
 800445c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8004460:	bf00      	nop
    }

    if (pclk != 0U)
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d019      	beq.n	800449c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	085a      	lsrs	r2, r3, #1
 800446e:	69fb      	ldr	r3, [r7, #28]
 8004470:	441a      	add	r2, r3
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	fbb2 f3f3 	udiv	r3, r2, r3
 800447a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800447c:	69bb      	ldr	r3, [r7, #24]
 800447e:	2b0f      	cmp	r3, #15
 8004480:	d909      	bls.n	8004496 <UART_SetConfig+0x432>
 8004482:	69bb      	ldr	r3, [r7, #24]
 8004484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004488:	d205      	bcs.n	8004496 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	b29a      	uxth	r2, r3
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	60da      	str	r2, [r3, #12]
 8004494:	e002      	b.n	800449c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8004496:	2301      	movs	r3, #1
 8004498:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	2200      	movs	r2, #0
 80044a0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2200      	movs	r2, #0
 80044a6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80044a8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	3728      	adds	r7, #40	; 0x28
 80044b0:	46bd      	mov	sp, r7
 80044b2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044b6:	bf00      	nop
 80044b8:	00f42400 	.word	0x00f42400

080044bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c8:	f003 0308 	and.w	r3, r3, #8
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00a      	beq.n	80044e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00a      	beq.n	8004508 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450c:	f003 0302 	and.w	r3, r3, #2
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00a      	beq.n	800452a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452e:	f003 0304 	and.w	r3, r3, #4
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00a      	beq.n	800454c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	685b      	ldr	r3, [r3, #4]
 800453c:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004550:	f003 0310 	and.w	r3, r3, #16
 8004554:	2b00      	cmp	r3, #0
 8004556:	d00a      	beq.n	800456e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	689b      	ldr	r3, [r3, #8]
 800455e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004572:	f003 0320 	and.w	r3, r3, #32
 8004576:	2b00      	cmp	r3, #0
 8004578:	d00a      	beq.n	8004590 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	430a      	orrs	r2, r1
 800458e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004598:	2b00      	cmp	r3, #0
 800459a:	d01a      	beq.n	80045d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	430a      	orrs	r2, r1
 80045b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ba:	d10a      	bne.n	80045d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d00a      	beq.n	80045f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	430a      	orrs	r2, r1
 80045f2:	605a      	str	r2, [r3, #4]
  }
}
 80045f4:	bf00      	nop
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b098      	sub	sp, #96	; 0x60
 8004604:	af02      	add	r7, sp, #8
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004610:	f7fd f97e 	bl	8001910 <HAL_GetTick>
 8004614:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 0308 	and.w	r3, r3, #8
 8004620:	2b08      	cmp	r3, #8
 8004622:	d12e      	bne.n	8004682 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004624:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004628:	9300      	str	r3, [sp, #0]
 800462a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800462c:	2200      	movs	r2, #0
 800462e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004632:	6878      	ldr	r0, [r7, #4]
 8004634:	f000 f88c 	bl	8004750 <UART_WaitOnFlagUntilTimeout>
 8004638:	4603      	mov	r3, r0
 800463a:	2b00      	cmp	r3, #0
 800463c:	d021      	beq.n	8004682 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004646:	e853 3f00 	ldrex	r3, [r3]
 800464a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800464c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800464e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004652:	653b      	str	r3, [r7, #80]	; 0x50
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	461a      	mov	r2, r3
 800465a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800465c:	647b      	str	r3, [r7, #68]	; 0x44
 800465e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004660:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004662:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004664:	e841 2300 	strex	r3, r2, [r1]
 8004668:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800466a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1e6      	bne.n	800463e <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e062      	b.n	8004748 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 0304 	and.w	r3, r3, #4
 800468c:	2b04      	cmp	r3, #4
 800468e:	d149      	bne.n	8004724 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004690:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004698:	2200      	movs	r2, #0
 800469a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f856 	bl	8004750 <UART_WaitOnFlagUntilTimeout>
 80046a4:	4603      	mov	r3, r0
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d03c      	beq.n	8004724 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b2:	e853 3f00 	ldrex	r3, [r3]
 80046b6:	623b      	str	r3, [r7, #32]
   return(result);
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80046be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	461a      	mov	r2, r3
 80046c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046c8:	633b      	str	r3, [r7, #48]	; 0x30
 80046ca:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80046ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046d0:	e841 2300 	strex	r3, r2, [r1]
 80046d4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80046d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1e6      	bne.n	80046aa <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	3308      	adds	r3, #8
 80046e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	e853 3f00 	ldrex	r3, [r3]
 80046ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f023 0301 	bic.w	r3, r3, #1
 80046f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	3308      	adds	r3, #8
 80046fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80046fc:	61fa      	str	r2, [r7, #28]
 80046fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004700:	69b9      	ldr	r1, [r7, #24]
 8004702:	69fa      	ldr	r2, [r7, #28]
 8004704:	e841 2300 	strex	r3, r2, [r1]
 8004708:	617b      	str	r3, [r7, #20]
   return(result);
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	2b00      	cmp	r3, #0
 800470e:	d1e5      	bne.n	80046dc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2220      	movs	r2, #32
 8004714:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2200      	movs	r2, #0
 800471c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004720:	2303      	movs	r3, #3
 8004722:	e011      	b.n	8004748 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2220      	movs	r2, #32
 8004728:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2220      	movs	r2, #32
 800472e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	2200      	movs	r2, #0
 8004742:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3758      	adds	r7, #88	; 0x58
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}

08004750 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004750:	b580      	push	{r7, lr}
 8004752:	b084      	sub	sp, #16
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	603b      	str	r3, [r7, #0]
 800475c:	4613      	mov	r3, r2
 800475e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004760:	e04f      	b.n	8004802 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004762:	69bb      	ldr	r3, [r7, #24]
 8004764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004768:	d04b      	beq.n	8004802 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800476a:	f7fd f8d1 	bl	8001910 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	69ba      	ldr	r2, [r7, #24]
 8004776:	429a      	cmp	r2, r3
 8004778:	d302      	bcc.n	8004780 <UART_WaitOnFlagUntilTimeout+0x30>
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d101      	bne.n	8004784 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e04e      	b.n	8004822 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f003 0304 	and.w	r3, r3, #4
 800478e:	2b00      	cmp	r3, #0
 8004790:	d037      	beq.n	8004802 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	2b80      	cmp	r3, #128	; 0x80
 8004796:	d034      	beq.n	8004802 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004798:	68bb      	ldr	r3, [r7, #8]
 800479a:	2b40      	cmp	r3, #64	; 0x40
 800479c:	d031      	beq.n	8004802 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	69db      	ldr	r3, [r3, #28]
 80047a4:	f003 0308 	and.w	r3, r3, #8
 80047a8:	2b08      	cmp	r3, #8
 80047aa:	d110      	bne.n	80047ce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2208      	movs	r2, #8
 80047b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047b4:	68f8      	ldr	r0, [r7, #12]
 80047b6:	f000 f838 	bl	800482a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	2208      	movs	r2, #8
 80047be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 80047ca:	2301      	movs	r3, #1
 80047cc:	e029      	b.n	8004822 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	69db      	ldr	r3, [r3, #28]
 80047d4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80047dc:	d111      	bne.n	8004802 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80047e6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047e8:	68f8      	ldr	r0, [r7, #12]
 80047ea:	f000 f81e 	bl	800482a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2220      	movs	r2, #32
 80047f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2200      	movs	r2, #0
 80047fa:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80047fe:	2303      	movs	r3, #3
 8004800:	e00f      	b.n	8004822 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	69da      	ldr	r2, [r3, #28]
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	4013      	ands	r3, r2
 800480c:	68ba      	ldr	r2, [r7, #8]
 800480e:	429a      	cmp	r2, r3
 8004810:	bf0c      	ite	eq
 8004812:	2301      	moveq	r3, #1
 8004814:	2300      	movne	r3, #0
 8004816:	b2db      	uxtb	r3, r3
 8004818:	461a      	mov	r2, r3
 800481a:	79fb      	ldrb	r3, [r7, #7]
 800481c:	429a      	cmp	r2, r3
 800481e:	d0a0      	beq.n	8004762 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004820:	2300      	movs	r3, #0
}
 8004822:	4618      	mov	r0, r3
 8004824:	3710      	adds	r7, #16
 8004826:	46bd      	mov	sp, r7
 8004828:	bd80      	pop	{r7, pc}

0800482a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800482a:	b480      	push	{r7}
 800482c:	b095      	sub	sp, #84	; 0x54
 800482e:	af00      	add	r7, sp, #0
 8004830:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004838:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800483a:	e853 3f00 	ldrex	r3, [r3]
 800483e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004842:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	461a      	mov	r2, r3
 800484e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004850:	643b      	str	r3, [r7, #64]	; 0x40
 8004852:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004854:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004856:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004858:	e841 2300 	strex	r3, r2, [r1]
 800485c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800485e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004860:	2b00      	cmp	r3, #0
 8004862:	d1e6      	bne.n	8004832 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3308      	adds	r3, #8
 800486a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486c:	6a3b      	ldr	r3, [r7, #32]
 800486e:	e853 3f00 	ldrex	r3, [r3]
 8004872:	61fb      	str	r3, [r7, #28]
   return(result);
 8004874:	69fb      	ldr	r3, [r7, #28]
 8004876:	f023 0301 	bic.w	r3, r3, #1
 800487a:	64bb      	str	r3, [r7, #72]	; 0x48
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	3308      	adds	r3, #8
 8004882:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004884:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004886:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004888:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800488a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800488c:	e841 2300 	strex	r3, r2, [r1]
 8004890:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004894:	2b00      	cmp	r3, #0
 8004896:	d1e5      	bne.n	8004864 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800489c:	2b01      	cmp	r3, #1
 800489e:	d118      	bne.n	80048d2 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	e853 3f00 	ldrex	r3, [r3]
 80048ac:	60bb      	str	r3, [r7, #8]
   return(result);
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	f023 0310 	bic.w	r3, r3, #16
 80048b4:	647b      	str	r3, [r7, #68]	; 0x44
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	461a      	mov	r2, r3
 80048bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048be:	61bb      	str	r3, [r7, #24]
 80048c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c2:	6979      	ldr	r1, [r7, #20]
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	e841 2300 	strex	r3, r2, [r1]
 80048ca:	613b      	str	r3, [r7, #16]
   return(result);
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d1e6      	bne.n	80048a0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2220      	movs	r2, #32
 80048d6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	2200      	movs	r2, #0
 80048de:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	669a      	str	r2, [r3, #104]	; 0x68
}
 80048e6:	bf00      	nop
 80048e8:	3754      	adds	r7, #84	; 0x54
 80048ea:	46bd      	mov	sp, r7
 80048ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f0:	4770      	bx	lr

080048f2 <__cvt>:
 80048f2:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80048f6:	ec55 4b10 	vmov	r4, r5, d0
 80048fa:	2d00      	cmp	r5, #0
 80048fc:	460e      	mov	r6, r1
 80048fe:	4619      	mov	r1, r3
 8004900:	462b      	mov	r3, r5
 8004902:	bfbb      	ittet	lt
 8004904:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8004908:	461d      	movlt	r5, r3
 800490a:	2300      	movge	r3, #0
 800490c:	232d      	movlt	r3, #45	; 0x2d
 800490e:	700b      	strb	r3, [r1, #0]
 8004910:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004912:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8004916:	4691      	mov	r9, r2
 8004918:	f023 0820 	bic.w	r8, r3, #32
 800491c:	bfbc      	itt	lt
 800491e:	4622      	movlt	r2, r4
 8004920:	4614      	movlt	r4, r2
 8004922:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004926:	d005      	beq.n	8004934 <__cvt+0x42>
 8004928:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800492c:	d100      	bne.n	8004930 <__cvt+0x3e>
 800492e:	3601      	adds	r6, #1
 8004930:	2102      	movs	r1, #2
 8004932:	e000      	b.n	8004936 <__cvt+0x44>
 8004934:	2103      	movs	r1, #3
 8004936:	ab03      	add	r3, sp, #12
 8004938:	9301      	str	r3, [sp, #4]
 800493a:	ab02      	add	r3, sp, #8
 800493c:	9300      	str	r3, [sp, #0]
 800493e:	ec45 4b10 	vmov	d0, r4, r5
 8004942:	4653      	mov	r3, sl
 8004944:	4632      	mov	r2, r6
 8004946:	f000 fea3 	bl	8005690 <_dtoa_r>
 800494a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800494e:	4607      	mov	r7, r0
 8004950:	d102      	bne.n	8004958 <__cvt+0x66>
 8004952:	f019 0f01 	tst.w	r9, #1
 8004956:	d022      	beq.n	800499e <__cvt+0xac>
 8004958:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800495c:	eb07 0906 	add.w	r9, r7, r6
 8004960:	d110      	bne.n	8004984 <__cvt+0x92>
 8004962:	783b      	ldrb	r3, [r7, #0]
 8004964:	2b30      	cmp	r3, #48	; 0x30
 8004966:	d10a      	bne.n	800497e <__cvt+0x8c>
 8004968:	2200      	movs	r2, #0
 800496a:	2300      	movs	r3, #0
 800496c:	4620      	mov	r0, r4
 800496e:	4629      	mov	r1, r5
 8004970:	f7fc f8aa 	bl	8000ac8 <__aeabi_dcmpeq>
 8004974:	b918      	cbnz	r0, 800497e <__cvt+0x8c>
 8004976:	f1c6 0601 	rsb	r6, r6, #1
 800497a:	f8ca 6000 	str.w	r6, [sl]
 800497e:	f8da 3000 	ldr.w	r3, [sl]
 8004982:	4499      	add	r9, r3
 8004984:	2200      	movs	r2, #0
 8004986:	2300      	movs	r3, #0
 8004988:	4620      	mov	r0, r4
 800498a:	4629      	mov	r1, r5
 800498c:	f7fc f89c 	bl	8000ac8 <__aeabi_dcmpeq>
 8004990:	b108      	cbz	r0, 8004996 <__cvt+0xa4>
 8004992:	f8cd 900c 	str.w	r9, [sp, #12]
 8004996:	2230      	movs	r2, #48	; 0x30
 8004998:	9b03      	ldr	r3, [sp, #12]
 800499a:	454b      	cmp	r3, r9
 800499c:	d307      	bcc.n	80049ae <__cvt+0xbc>
 800499e:	9b03      	ldr	r3, [sp, #12]
 80049a0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80049a2:	1bdb      	subs	r3, r3, r7
 80049a4:	4638      	mov	r0, r7
 80049a6:	6013      	str	r3, [r2, #0]
 80049a8:	b004      	add	sp, #16
 80049aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049ae:	1c59      	adds	r1, r3, #1
 80049b0:	9103      	str	r1, [sp, #12]
 80049b2:	701a      	strb	r2, [r3, #0]
 80049b4:	e7f0      	b.n	8004998 <__cvt+0xa6>

080049b6 <__exponent>:
 80049b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80049b8:	4603      	mov	r3, r0
 80049ba:	2900      	cmp	r1, #0
 80049bc:	bfb8      	it	lt
 80049be:	4249      	neglt	r1, r1
 80049c0:	f803 2b02 	strb.w	r2, [r3], #2
 80049c4:	bfb4      	ite	lt
 80049c6:	222d      	movlt	r2, #45	; 0x2d
 80049c8:	222b      	movge	r2, #43	; 0x2b
 80049ca:	2909      	cmp	r1, #9
 80049cc:	7042      	strb	r2, [r0, #1]
 80049ce:	dd2a      	ble.n	8004a26 <__exponent+0x70>
 80049d0:	f10d 0207 	add.w	r2, sp, #7
 80049d4:	4617      	mov	r7, r2
 80049d6:	260a      	movs	r6, #10
 80049d8:	4694      	mov	ip, r2
 80049da:	fb91 f5f6 	sdiv	r5, r1, r6
 80049de:	fb06 1415 	mls	r4, r6, r5, r1
 80049e2:	3430      	adds	r4, #48	; 0x30
 80049e4:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80049e8:	460c      	mov	r4, r1
 80049ea:	2c63      	cmp	r4, #99	; 0x63
 80049ec:	f102 32ff 	add.w	r2, r2, #4294967295
 80049f0:	4629      	mov	r1, r5
 80049f2:	dcf1      	bgt.n	80049d8 <__exponent+0x22>
 80049f4:	3130      	adds	r1, #48	; 0x30
 80049f6:	f1ac 0402 	sub.w	r4, ip, #2
 80049fa:	f802 1c01 	strb.w	r1, [r2, #-1]
 80049fe:	1c41      	adds	r1, r0, #1
 8004a00:	4622      	mov	r2, r4
 8004a02:	42ba      	cmp	r2, r7
 8004a04:	d30a      	bcc.n	8004a1c <__exponent+0x66>
 8004a06:	f10d 0209 	add.w	r2, sp, #9
 8004a0a:	eba2 020c 	sub.w	r2, r2, ip
 8004a0e:	42bc      	cmp	r4, r7
 8004a10:	bf88      	it	hi
 8004a12:	2200      	movhi	r2, #0
 8004a14:	4413      	add	r3, r2
 8004a16:	1a18      	subs	r0, r3, r0
 8004a18:	b003      	add	sp, #12
 8004a1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a1c:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004a20:	f801 5f01 	strb.w	r5, [r1, #1]!
 8004a24:	e7ed      	b.n	8004a02 <__exponent+0x4c>
 8004a26:	2330      	movs	r3, #48	; 0x30
 8004a28:	3130      	adds	r1, #48	; 0x30
 8004a2a:	7083      	strb	r3, [r0, #2]
 8004a2c:	70c1      	strb	r1, [r0, #3]
 8004a2e:	1d03      	adds	r3, r0, #4
 8004a30:	e7f1      	b.n	8004a16 <__exponent+0x60>
	...

08004a34 <_printf_float>:
 8004a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a38:	ed2d 8b02 	vpush	{d8}
 8004a3c:	b08d      	sub	sp, #52	; 0x34
 8004a3e:	460c      	mov	r4, r1
 8004a40:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8004a44:	4616      	mov	r6, r2
 8004a46:	461f      	mov	r7, r3
 8004a48:	4605      	mov	r5, r0
 8004a4a:	f000 fd1f 	bl	800548c <_localeconv_r>
 8004a4e:	f8d0 a000 	ldr.w	sl, [r0]
 8004a52:	4650      	mov	r0, sl
 8004a54:	f7fb fc0c 	bl	8000270 <strlen>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	930a      	str	r3, [sp, #40]	; 0x28
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	9305      	str	r3, [sp, #20]
 8004a60:	f8d8 3000 	ldr.w	r3, [r8]
 8004a64:	f894 b018 	ldrb.w	fp, [r4, #24]
 8004a68:	3307      	adds	r3, #7
 8004a6a:	f023 0307 	bic.w	r3, r3, #7
 8004a6e:	f103 0208 	add.w	r2, r3, #8
 8004a72:	f8c8 2000 	str.w	r2, [r8]
 8004a76:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004a7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004a7e:	9307      	str	r3, [sp, #28]
 8004a80:	f8cd 8018 	str.w	r8, [sp, #24]
 8004a84:	ee08 0a10 	vmov	s16, r0
 8004a88:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004a8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a90:	4b9e      	ldr	r3, [pc, #632]	; (8004d0c <_printf_float+0x2d8>)
 8004a92:	f04f 32ff 	mov.w	r2, #4294967295
 8004a96:	f7fc f849 	bl	8000b2c <__aeabi_dcmpun>
 8004a9a:	bb88      	cbnz	r0, 8004b00 <_printf_float+0xcc>
 8004a9c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004aa0:	4b9a      	ldr	r3, [pc, #616]	; (8004d0c <_printf_float+0x2d8>)
 8004aa2:	f04f 32ff 	mov.w	r2, #4294967295
 8004aa6:	f7fc f823 	bl	8000af0 <__aeabi_dcmple>
 8004aaa:	bb48      	cbnz	r0, 8004b00 <_printf_float+0xcc>
 8004aac:	2200      	movs	r2, #0
 8004aae:	2300      	movs	r3, #0
 8004ab0:	4640      	mov	r0, r8
 8004ab2:	4649      	mov	r1, r9
 8004ab4:	f7fc f812 	bl	8000adc <__aeabi_dcmplt>
 8004ab8:	b110      	cbz	r0, 8004ac0 <_printf_float+0x8c>
 8004aba:	232d      	movs	r3, #45	; 0x2d
 8004abc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ac0:	4a93      	ldr	r2, [pc, #588]	; (8004d10 <_printf_float+0x2dc>)
 8004ac2:	4b94      	ldr	r3, [pc, #592]	; (8004d14 <_printf_float+0x2e0>)
 8004ac4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004ac8:	bf94      	ite	ls
 8004aca:	4690      	movls	r8, r2
 8004acc:	4698      	movhi	r8, r3
 8004ace:	2303      	movs	r3, #3
 8004ad0:	6123      	str	r3, [r4, #16]
 8004ad2:	9b05      	ldr	r3, [sp, #20]
 8004ad4:	f023 0304 	bic.w	r3, r3, #4
 8004ad8:	6023      	str	r3, [r4, #0]
 8004ada:	f04f 0900 	mov.w	r9, #0
 8004ade:	9700      	str	r7, [sp, #0]
 8004ae0:	4633      	mov	r3, r6
 8004ae2:	aa0b      	add	r2, sp, #44	; 0x2c
 8004ae4:	4621      	mov	r1, r4
 8004ae6:	4628      	mov	r0, r5
 8004ae8:	f000 f9da 	bl	8004ea0 <_printf_common>
 8004aec:	3001      	adds	r0, #1
 8004aee:	f040 8090 	bne.w	8004c12 <_printf_float+0x1de>
 8004af2:	f04f 30ff 	mov.w	r0, #4294967295
 8004af6:	b00d      	add	sp, #52	; 0x34
 8004af8:	ecbd 8b02 	vpop	{d8}
 8004afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b00:	4642      	mov	r2, r8
 8004b02:	464b      	mov	r3, r9
 8004b04:	4640      	mov	r0, r8
 8004b06:	4649      	mov	r1, r9
 8004b08:	f7fc f810 	bl	8000b2c <__aeabi_dcmpun>
 8004b0c:	b140      	cbz	r0, 8004b20 <_printf_float+0xec>
 8004b0e:	464b      	mov	r3, r9
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	bfbc      	itt	lt
 8004b14:	232d      	movlt	r3, #45	; 0x2d
 8004b16:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004b1a:	4a7f      	ldr	r2, [pc, #508]	; (8004d18 <_printf_float+0x2e4>)
 8004b1c:	4b7f      	ldr	r3, [pc, #508]	; (8004d1c <_printf_float+0x2e8>)
 8004b1e:	e7d1      	b.n	8004ac4 <_printf_float+0x90>
 8004b20:	6863      	ldr	r3, [r4, #4]
 8004b22:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004b26:	9206      	str	r2, [sp, #24]
 8004b28:	1c5a      	adds	r2, r3, #1
 8004b2a:	d13f      	bne.n	8004bac <_printf_float+0x178>
 8004b2c:	2306      	movs	r3, #6
 8004b2e:	6063      	str	r3, [r4, #4]
 8004b30:	9b05      	ldr	r3, [sp, #20]
 8004b32:	6861      	ldr	r1, [r4, #4]
 8004b34:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004b38:	2300      	movs	r3, #0
 8004b3a:	9303      	str	r3, [sp, #12]
 8004b3c:	ab0a      	add	r3, sp, #40	; 0x28
 8004b3e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004b42:	ab09      	add	r3, sp, #36	; 0x24
 8004b44:	ec49 8b10 	vmov	d0, r8, r9
 8004b48:	9300      	str	r3, [sp, #0]
 8004b4a:	6022      	str	r2, [r4, #0]
 8004b4c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004b50:	4628      	mov	r0, r5
 8004b52:	f7ff fece 	bl	80048f2 <__cvt>
 8004b56:	9b06      	ldr	r3, [sp, #24]
 8004b58:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004b5a:	2b47      	cmp	r3, #71	; 0x47
 8004b5c:	4680      	mov	r8, r0
 8004b5e:	d108      	bne.n	8004b72 <_printf_float+0x13e>
 8004b60:	1cc8      	adds	r0, r1, #3
 8004b62:	db02      	blt.n	8004b6a <_printf_float+0x136>
 8004b64:	6863      	ldr	r3, [r4, #4]
 8004b66:	4299      	cmp	r1, r3
 8004b68:	dd41      	ble.n	8004bee <_printf_float+0x1ba>
 8004b6a:	f1ab 0302 	sub.w	r3, fp, #2
 8004b6e:	fa5f fb83 	uxtb.w	fp, r3
 8004b72:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004b76:	d820      	bhi.n	8004bba <_printf_float+0x186>
 8004b78:	3901      	subs	r1, #1
 8004b7a:	465a      	mov	r2, fp
 8004b7c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b80:	9109      	str	r1, [sp, #36]	; 0x24
 8004b82:	f7ff ff18 	bl	80049b6 <__exponent>
 8004b86:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b88:	1813      	adds	r3, r2, r0
 8004b8a:	2a01      	cmp	r2, #1
 8004b8c:	4681      	mov	r9, r0
 8004b8e:	6123      	str	r3, [r4, #16]
 8004b90:	dc02      	bgt.n	8004b98 <_printf_float+0x164>
 8004b92:	6822      	ldr	r2, [r4, #0]
 8004b94:	07d2      	lsls	r2, r2, #31
 8004b96:	d501      	bpl.n	8004b9c <_printf_float+0x168>
 8004b98:	3301      	adds	r3, #1
 8004b9a:	6123      	str	r3, [r4, #16]
 8004b9c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d09c      	beq.n	8004ade <_printf_float+0xaa>
 8004ba4:	232d      	movs	r3, #45	; 0x2d
 8004ba6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004baa:	e798      	b.n	8004ade <_printf_float+0xaa>
 8004bac:	9a06      	ldr	r2, [sp, #24]
 8004bae:	2a47      	cmp	r2, #71	; 0x47
 8004bb0:	d1be      	bne.n	8004b30 <_printf_float+0xfc>
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d1bc      	bne.n	8004b30 <_printf_float+0xfc>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e7b9      	b.n	8004b2e <_printf_float+0xfa>
 8004bba:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004bbe:	d118      	bne.n	8004bf2 <_printf_float+0x1be>
 8004bc0:	2900      	cmp	r1, #0
 8004bc2:	6863      	ldr	r3, [r4, #4]
 8004bc4:	dd0b      	ble.n	8004bde <_printf_float+0x1aa>
 8004bc6:	6121      	str	r1, [r4, #16]
 8004bc8:	b913      	cbnz	r3, 8004bd0 <_printf_float+0x19c>
 8004bca:	6822      	ldr	r2, [r4, #0]
 8004bcc:	07d0      	lsls	r0, r2, #31
 8004bce:	d502      	bpl.n	8004bd6 <_printf_float+0x1a2>
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	440b      	add	r3, r1
 8004bd4:	6123      	str	r3, [r4, #16]
 8004bd6:	65a1      	str	r1, [r4, #88]	; 0x58
 8004bd8:	f04f 0900 	mov.w	r9, #0
 8004bdc:	e7de      	b.n	8004b9c <_printf_float+0x168>
 8004bde:	b913      	cbnz	r3, 8004be6 <_printf_float+0x1b2>
 8004be0:	6822      	ldr	r2, [r4, #0]
 8004be2:	07d2      	lsls	r2, r2, #31
 8004be4:	d501      	bpl.n	8004bea <_printf_float+0x1b6>
 8004be6:	3302      	adds	r3, #2
 8004be8:	e7f4      	b.n	8004bd4 <_printf_float+0x1a0>
 8004bea:	2301      	movs	r3, #1
 8004bec:	e7f2      	b.n	8004bd4 <_printf_float+0x1a0>
 8004bee:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004bf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bf4:	4299      	cmp	r1, r3
 8004bf6:	db05      	blt.n	8004c04 <_printf_float+0x1d0>
 8004bf8:	6823      	ldr	r3, [r4, #0]
 8004bfa:	6121      	str	r1, [r4, #16]
 8004bfc:	07d8      	lsls	r0, r3, #31
 8004bfe:	d5ea      	bpl.n	8004bd6 <_printf_float+0x1a2>
 8004c00:	1c4b      	adds	r3, r1, #1
 8004c02:	e7e7      	b.n	8004bd4 <_printf_float+0x1a0>
 8004c04:	2900      	cmp	r1, #0
 8004c06:	bfd4      	ite	le
 8004c08:	f1c1 0202 	rsble	r2, r1, #2
 8004c0c:	2201      	movgt	r2, #1
 8004c0e:	4413      	add	r3, r2
 8004c10:	e7e0      	b.n	8004bd4 <_printf_float+0x1a0>
 8004c12:	6823      	ldr	r3, [r4, #0]
 8004c14:	055a      	lsls	r2, r3, #21
 8004c16:	d407      	bmi.n	8004c28 <_printf_float+0x1f4>
 8004c18:	6923      	ldr	r3, [r4, #16]
 8004c1a:	4642      	mov	r2, r8
 8004c1c:	4631      	mov	r1, r6
 8004c1e:	4628      	mov	r0, r5
 8004c20:	47b8      	blx	r7
 8004c22:	3001      	adds	r0, #1
 8004c24:	d12c      	bne.n	8004c80 <_printf_float+0x24c>
 8004c26:	e764      	b.n	8004af2 <_printf_float+0xbe>
 8004c28:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004c2c:	f240 80e0 	bls.w	8004df0 <_printf_float+0x3bc>
 8004c30:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004c34:	2200      	movs	r2, #0
 8004c36:	2300      	movs	r3, #0
 8004c38:	f7fb ff46 	bl	8000ac8 <__aeabi_dcmpeq>
 8004c3c:	2800      	cmp	r0, #0
 8004c3e:	d034      	beq.n	8004caa <_printf_float+0x276>
 8004c40:	4a37      	ldr	r2, [pc, #220]	; (8004d20 <_printf_float+0x2ec>)
 8004c42:	2301      	movs	r3, #1
 8004c44:	4631      	mov	r1, r6
 8004c46:	4628      	mov	r0, r5
 8004c48:	47b8      	blx	r7
 8004c4a:	3001      	adds	r0, #1
 8004c4c:	f43f af51 	beq.w	8004af2 <_printf_float+0xbe>
 8004c50:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004c54:	429a      	cmp	r2, r3
 8004c56:	db02      	blt.n	8004c5e <_printf_float+0x22a>
 8004c58:	6823      	ldr	r3, [r4, #0]
 8004c5a:	07d8      	lsls	r0, r3, #31
 8004c5c:	d510      	bpl.n	8004c80 <_printf_float+0x24c>
 8004c5e:	ee18 3a10 	vmov	r3, s16
 8004c62:	4652      	mov	r2, sl
 8004c64:	4631      	mov	r1, r6
 8004c66:	4628      	mov	r0, r5
 8004c68:	47b8      	blx	r7
 8004c6a:	3001      	adds	r0, #1
 8004c6c:	f43f af41 	beq.w	8004af2 <_printf_float+0xbe>
 8004c70:	f04f 0800 	mov.w	r8, #0
 8004c74:	f104 091a 	add.w	r9, r4, #26
 8004c78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	4543      	cmp	r3, r8
 8004c7e:	dc09      	bgt.n	8004c94 <_printf_float+0x260>
 8004c80:	6823      	ldr	r3, [r4, #0]
 8004c82:	079b      	lsls	r3, r3, #30
 8004c84:	f100 8107 	bmi.w	8004e96 <_printf_float+0x462>
 8004c88:	68e0      	ldr	r0, [r4, #12]
 8004c8a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c8c:	4298      	cmp	r0, r3
 8004c8e:	bfb8      	it	lt
 8004c90:	4618      	movlt	r0, r3
 8004c92:	e730      	b.n	8004af6 <_printf_float+0xc2>
 8004c94:	2301      	movs	r3, #1
 8004c96:	464a      	mov	r2, r9
 8004c98:	4631      	mov	r1, r6
 8004c9a:	4628      	mov	r0, r5
 8004c9c:	47b8      	blx	r7
 8004c9e:	3001      	adds	r0, #1
 8004ca0:	f43f af27 	beq.w	8004af2 <_printf_float+0xbe>
 8004ca4:	f108 0801 	add.w	r8, r8, #1
 8004ca8:	e7e6      	b.n	8004c78 <_printf_float+0x244>
 8004caa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	dc39      	bgt.n	8004d24 <_printf_float+0x2f0>
 8004cb0:	4a1b      	ldr	r2, [pc, #108]	; (8004d20 <_printf_float+0x2ec>)
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	4631      	mov	r1, r6
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	47b8      	blx	r7
 8004cba:	3001      	adds	r0, #1
 8004cbc:	f43f af19 	beq.w	8004af2 <_printf_float+0xbe>
 8004cc0:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	d102      	bne.n	8004cce <_printf_float+0x29a>
 8004cc8:	6823      	ldr	r3, [r4, #0]
 8004cca:	07d9      	lsls	r1, r3, #31
 8004ccc:	d5d8      	bpl.n	8004c80 <_printf_float+0x24c>
 8004cce:	ee18 3a10 	vmov	r3, s16
 8004cd2:	4652      	mov	r2, sl
 8004cd4:	4631      	mov	r1, r6
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	47b8      	blx	r7
 8004cda:	3001      	adds	r0, #1
 8004cdc:	f43f af09 	beq.w	8004af2 <_printf_float+0xbe>
 8004ce0:	f04f 0900 	mov.w	r9, #0
 8004ce4:	f104 0a1a 	add.w	sl, r4, #26
 8004ce8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004cea:	425b      	negs	r3, r3
 8004cec:	454b      	cmp	r3, r9
 8004cee:	dc01      	bgt.n	8004cf4 <_printf_float+0x2c0>
 8004cf0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004cf2:	e792      	b.n	8004c1a <_printf_float+0x1e6>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	4652      	mov	r2, sl
 8004cf8:	4631      	mov	r1, r6
 8004cfa:	4628      	mov	r0, r5
 8004cfc:	47b8      	blx	r7
 8004cfe:	3001      	adds	r0, #1
 8004d00:	f43f aef7 	beq.w	8004af2 <_printf_float+0xbe>
 8004d04:	f109 0901 	add.w	r9, r9, #1
 8004d08:	e7ee      	b.n	8004ce8 <_printf_float+0x2b4>
 8004d0a:	bf00      	nop
 8004d0c:	7fefffff 	.word	0x7fefffff
 8004d10:	08007760 	.word	0x08007760
 8004d14:	08007764 	.word	0x08007764
 8004d18:	08007768 	.word	0x08007768
 8004d1c:	0800776c 	.word	0x0800776c
 8004d20:	08007770 	.word	0x08007770
 8004d24:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d26:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	bfa8      	it	ge
 8004d2c:	461a      	movge	r2, r3
 8004d2e:	2a00      	cmp	r2, #0
 8004d30:	4691      	mov	r9, r2
 8004d32:	dc37      	bgt.n	8004da4 <_printf_float+0x370>
 8004d34:	f04f 0b00 	mov.w	fp, #0
 8004d38:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d3c:	f104 021a 	add.w	r2, r4, #26
 8004d40:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004d42:	9305      	str	r3, [sp, #20]
 8004d44:	eba3 0309 	sub.w	r3, r3, r9
 8004d48:	455b      	cmp	r3, fp
 8004d4a:	dc33      	bgt.n	8004db4 <_printf_float+0x380>
 8004d4c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d50:	429a      	cmp	r2, r3
 8004d52:	db3b      	blt.n	8004dcc <_printf_float+0x398>
 8004d54:	6823      	ldr	r3, [r4, #0]
 8004d56:	07da      	lsls	r2, r3, #31
 8004d58:	d438      	bmi.n	8004dcc <_printf_float+0x398>
 8004d5a:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004d5e:	eba2 0903 	sub.w	r9, r2, r3
 8004d62:	9b05      	ldr	r3, [sp, #20]
 8004d64:	1ad2      	subs	r2, r2, r3
 8004d66:	4591      	cmp	r9, r2
 8004d68:	bfa8      	it	ge
 8004d6a:	4691      	movge	r9, r2
 8004d6c:	f1b9 0f00 	cmp.w	r9, #0
 8004d70:	dc35      	bgt.n	8004dde <_printf_float+0x3aa>
 8004d72:	f04f 0800 	mov.w	r8, #0
 8004d76:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004d7a:	f104 0a1a 	add.w	sl, r4, #26
 8004d7e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d82:	1a9b      	subs	r3, r3, r2
 8004d84:	eba3 0309 	sub.w	r3, r3, r9
 8004d88:	4543      	cmp	r3, r8
 8004d8a:	f77f af79 	ble.w	8004c80 <_printf_float+0x24c>
 8004d8e:	2301      	movs	r3, #1
 8004d90:	4652      	mov	r2, sl
 8004d92:	4631      	mov	r1, r6
 8004d94:	4628      	mov	r0, r5
 8004d96:	47b8      	blx	r7
 8004d98:	3001      	adds	r0, #1
 8004d9a:	f43f aeaa 	beq.w	8004af2 <_printf_float+0xbe>
 8004d9e:	f108 0801 	add.w	r8, r8, #1
 8004da2:	e7ec      	b.n	8004d7e <_printf_float+0x34a>
 8004da4:	4613      	mov	r3, r2
 8004da6:	4631      	mov	r1, r6
 8004da8:	4642      	mov	r2, r8
 8004daa:	4628      	mov	r0, r5
 8004dac:	47b8      	blx	r7
 8004dae:	3001      	adds	r0, #1
 8004db0:	d1c0      	bne.n	8004d34 <_printf_float+0x300>
 8004db2:	e69e      	b.n	8004af2 <_printf_float+0xbe>
 8004db4:	2301      	movs	r3, #1
 8004db6:	4631      	mov	r1, r6
 8004db8:	4628      	mov	r0, r5
 8004dba:	9205      	str	r2, [sp, #20]
 8004dbc:	47b8      	blx	r7
 8004dbe:	3001      	adds	r0, #1
 8004dc0:	f43f ae97 	beq.w	8004af2 <_printf_float+0xbe>
 8004dc4:	9a05      	ldr	r2, [sp, #20]
 8004dc6:	f10b 0b01 	add.w	fp, fp, #1
 8004dca:	e7b9      	b.n	8004d40 <_printf_float+0x30c>
 8004dcc:	ee18 3a10 	vmov	r3, s16
 8004dd0:	4652      	mov	r2, sl
 8004dd2:	4631      	mov	r1, r6
 8004dd4:	4628      	mov	r0, r5
 8004dd6:	47b8      	blx	r7
 8004dd8:	3001      	adds	r0, #1
 8004dda:	d1be      	bne.n	8004d5a <_printf_float+0x326>
 8004ddc:	e689      	b.n	8004af2 <_printf_float+0xbe>
 8004dde:	9a05      	ldr	r2, [sp, #20]
 8004de0:	464b      	mov	r3, r9
 8004de2:	4442      	add	r2, r8
 8004de4:	4631      	mov	r1, r6
 8004de6:	4628      	mov	r0, r5
 8004de8:	47b8      	blx	r7
 8004dea:	3001      	adds	r0, #1
 8004dec:	d1c1      	bne.n	8004d72 <_printf_float+0x33e>
 8004dee:	e680      	b.n	8004af2 <_printf_float+0xbe>
 8004df0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004df2:	2a01      	cmp	r2, #1
 8004df4:	dc01      	bgt.n	8004dfa <_printf_float+0x3c6>
 8004df6:	07db      	lsls	r3, r3, #31
 8004df8:	d53a      	bpl.n	8004e70 <_printf_float+0x43c>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	4642      	mov	r2, r8
 8004dfe:	4631      	mov	r1, r6
 8004e00:	4628      	mov	r0, r5
 8004e02:	47b8      	blx	r7
 8004e04:	3001      	adds	r0, #1
 8004e06:	f43f ae74 	beq.w	8004af2 <_printf_float+0xbe>
 8004e0a:	ee18 3a10 	vmov	r3, s16
 8004e0e:	4652      	mov	r2, sl
 8004e10:	4631      	mov	r1, r6
 8004e12:	4628      	mov	r0, r5
 8004e14:	47b8      	blx	r7
 8004e16:	3001      	adds	r0, #1
 8004e18:	f43f ae6b 	beq.w	8004af2 <_printf_float+0xbe>
 8004e1c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004e20:	2200      	movs	r2, #0
 8004e22:	2300      	movs	r3, #0
 8004e24:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004e28:	f7fb fe4e 	bl	8000ac8 <__aeabi_dcmpeq>
 8004e2c:	b9d8      	cbnz	r0, 8004e66 <_printf_float+0x432>
 8004e2e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004e32:	f108 0201 	add.w	r2, r8, #1
 8004e36:	4631      	mov	r1, r6
 8004e38:	4628      	mov	r0, r5
 8004e3a:	47b8      	blx	r7
 8004e3c:	3001      	adds	r0, #1
 8004e3e:	d10e      	bne.n	8004e5e <_printf_float+0x42a>
 8004e40:	e657      	b.n	8004af2 <_printf_float+0xbe>
 8004e42:	2301      	movs	r3, #1
 8004e44:	4652      	mov	r2, sl
 8004e46:	4631      	mov	r1, r6
 8004e48:	4628      	mov	r0, r5
 8004e4a:	47b8      	blx	r7
 8004e4c:	3001      	adds	r0, #1
 8004e4e:	f43f ae50 	beq.w	8004af2 <_printf_float+0xbe>
 8004e52:	f108 0801 	add.w	r8, r8, #1
 8004e56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004e58:	3b01      	subs	r3, #1
 8004e5a:	4543      	cmp	r3, r8
 8004e5c:	dcf1      	bgt.n	8004e42 <_printf_float+0x40e>
 8004e5e:	464b      	mov	r3, r9
 8004e60:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004e64:	e6da      	b.n	8004c1c <_printf_float+0x1e8>
 8004e66:	f04f 0800 	mov.w	r8, #0
 8004e6a:	f104 0a1a 	add.w	sl, r4, #26
 8004e6e:	e7f2      	b.n	8004e56 <_printf_float+0x422>
 8004e70:	2301      	movs	r3, #1
 8004e72:	4642      	mov	r2, r8
 8004e74:	e7df      	b.n	8004e36 <_printf_float+0x402>
 8004e76:	2301      	movs	r3, #1
 8004e78:	464a      	mov	r2, r9
 8004e7a:	4631      	mov	r1, r6
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	47b8      	blx	r7
 8004e80:	3001      	adds	r0, #1
 8004e82:	f43f ae36 	beq.w	8004af2 <_printf_float+0xbe>
 8004e86:	f108 0801 	add.w	r8, r8, #1
 8004e8a:	68e3      	ldr	r3, [r4, #12]
 8004e8c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e8e:	1a5b      	subs	r3, r3, r1
 8004e90:	4543      	cmp	r3, r8
 8004e92:	dcf0      	bgt.n	8004e76 <_printf_float+0x442>
 8004e94:	e6f8      	b.n	8004c88 <_printf_float+0x254>
 8004e96:	f04f 0800 	mov.w	r8, #0
 8004e9a:	f104 0919 	add.w	r9, r4, #25
 8004e9e:	e7f4      	b.n	8004e8a <_printf_float+0x456>

08004ea0 <_printf_common>:
 8004ea0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ea4:	4616      	mov	r6, r2
 8004ea6:	4699      	mov	r9, r3
 8004ea8:	688a      	ldr	r2, [r1, #8]
 8004eaa:	690b      	ldr	r3, [r1, #16]
 8004eac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004eb0:	4293      	cmp	r3, r2
 8004eb2:	bfb8      	it	lt
 8004eb4:	4613      	movlt	r3, r2
 8004eb6:	6033      	str	r3, [r6, #0]
 8004eb8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ebc:	4607      	mov	r7, r0
 8004ebe:	460c      	mov	r4, r1
 8004ec0:	b10a      	cbz	r2, 8004ec6 <_printf_common+0x26>
 8004ec2:	3301      	adds	r3, #1
 8004ec4:	6033      	str	r3, [r6, #0]
 8004ec6:	6823      	ldr	r3, [r4, #0]
 8004ec8:	0699      	lsls	r1, r3, #26
 8004eca:	bf42      	ittt	mi
 8004ecc:	6833      	ldrmi	r3, [r6, #0]
 8004ece:	3302      	addmi	r3, #2
 8004ed0:	6033      	strmi	r3, [r6, #0]
 8004ed2:	6825      	ldr	r5, [r4, #0]
 8004ed4:	f015 0506 	ands.w	r5, r5, #6
 8004ed8:	d106      	bne.n	8004ee8 <_printf_common+0x48>
 8004eda:	f104 0a19 	add.w	sl, r4, #25
 8004ede:	68e3      	ldr	r3, [r4, #12]
 8004ee0:	6832      	ldr	r2, [r6, #0]
 8004ee2:	1a9b      	subs	r3, r3, r2
 8004ee4:	42ab      	cmp	r3, r5
 8004ee6:	dc26      	bgt.n	8004f36 <_printf_common+0x96>
 8004ee8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004eec:	1e13      	subs	r3, r2, #0
 8004eee:	6822      	ldr	r2, [r4, #0]
 8004ef0:	bf18      	it	ne
 8004ef2:	2301      	movne	r3, #1
 8004ef4:	0692      	lsls	r2, r2, #26
 8004ef6:	d42b      	bmi.n	8004f50 <_printf_common+0xb0>
 8004ef8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004efc:	4649      	mov	r1, r9
 8004efe:	4638      	mov	r0, r7
 8004f00:	47c0      	blx	r8
 8004f02:	3001      	adds	r0, #1
 8004f04:	d01e      	beq.n	8004f44 <_printf_common+0xa4>
 8004f06:	6823      	ldr	r3, [r4, #0]
 8004f08:	6922      	ldr	r2, [r4, #16]
 8004f0a:	f003 0306 	and.w	r3, r3, #6
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	bf02      	ittt	eq
 8004f12:	68e5      	ldreq	r5, [r4, #12]
 8004f14:	6833      	ldreq	r3, [r6, #0]
 8004f16:	1aed      	subeq	r5, r5, r3
 8004f18:	68a3      	ldr	r3, [r4, #8]
 8004f1a:	bf0c      	ite	eq
 8004f1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f20:	2500      	movne	r5, #0
 8004f22:	4293      	cmp	r3, r2
 8004f24:	bfc4      	itt	gt
 8004f26:	1a9b      	subgt	r3, r3, r2
 8004f28:	18ed      	addgt	r5, r5, r3
 8004f2a:	2600      	movs	r6, #0
 8004f2c:	341a      	adds	r4, #26
 8004f2e:	42b5      	cmp	r5, r6
 8004f30:	d11a      	bne.n	8004f68 <_printf_common+0xc8>
 8004f32:	2000      	movs	r0, #0
 8004f34:	e008      	b.n	8004f48 <_printf_common+0xa8>
 8004f36:	2301      	movs	r3, #1
 8004f38:	4652      	mov	r2, sl
 8004f3a:	4649      	mov	r1, r9
 8004f3c:	4638      	mov	r0, r7
 8004f3e:	47c0      	blx	r8
 8004f40:	3001      	adds	r0, #1
 8004f42:	d103      	bne.n	8004f4c <_printf_common+0xac>
 8004f44:	f04f 30ff 	mov.w	r0, #4294967295
 8004f48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004f4c:	3501      	adds	r5, #1
 8004f4e:	e7c6      	b.n	8004ede <_printf_common+0x3e>
 8004f50:	18e1      	adds	r1, r4, r3
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	2030      	movs	r0, #48	; 0x30
 8004f56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004f5a:	4422      	add	r2, r4
 8004f5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004f60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004f64:	3302      	adds	r3, #2
 8004f66:	e7c7      	b.n	8004ef8 <_printf_common+0x58>
 8004f68:	2301      	movs	r3, #1
 8004f6a:	4622      	mov	r2, r4
 8004f6c:	4649      	mov	r1, r9
 8004f6e:	4638      	mov	r0, r7
 8004f70:	47c0      	blx	r8
 8004f72:	3001      	adds	r0, #1
 8004f74:	d0e6      	beq.n	8004f44 <_printf_common+0xa4>
 8004f76:	3601      	adds	r6, #1
 8004f78:	e7d9      	b.n	8004f2e <_printf_common+0x8e>
	...

08004f7c <_printf_i>:
 8004f7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f80:	7e0f      	ldrb	r7, [r1, #24]
 8004f82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f84:	2f78      	cmp	r7, #120	; 0x78
 8004f86:	4691      	mov	r9, r2
 8004f88:	4680      	mov	r8, r0
 8004f8a:	460c      	mov	r4, r1
 8004f8c:	469a      	mov	sl, r3
 8004f8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f92:	d807      	bhi.n	8004fa4 <_printf_i+0x28>
 8004f94:	2f62      	cmp	r7, #98	; 0x62
 8004f96:	d80a      	bhi.n	8004fae <_printf_i+0x32>
 8004f98:	2f00      	cmp	r7, #0
 8004f9a:	f000 80d4 	beq.w	8005146 <_printf_i+0x1ca>
 8004f9e:	2f58      	cmp	r7, #88	; 0x58
 8004fa0:	f000 80c0 	beq.w	8005124 <_printf_i+0x1a8>
 8004fa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fa8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004fac:	e03a      	b.n	8005024 <_printf_i+0xa8>
 8004fae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004fb2:	2b15      	cmp	r3, #21
 8004fb4:	d8f6      	bhi.n	8004fa4 <_printf_i+0x28>
 8004fb6:	a101      	add	r1, pc, #4	; (adr r1, 8004fbc <_printf_i+0x40>)
 8004fb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004fbc:	08005015 	.word	0x08005015
 8004fc0:	08005029 	.word	0x08005029
 8004fc4:	08004fa5 	.word	0x08004fa5
 8004fc8:	08004fa5 	.word	0x08004fa5
 8004fcc:	08004fa5 	.word	0x08004fa5
 8004fd0:	08004fa5 	.word	0x08004fa5
 8004fd4:	08005029 	.word	0x08005029
 8004fd8:	08004fa5 	.word	0x08004fa5
 8004fdc:	08004fa5 	.word	0x08004fa5
 8004fe0:	08004fa5 	.word	0x08004fa5
 8004fe4:	08004fa5 	.word	0x08004fa5
 8004fe8:	0800512d 	.word	0x0800512d
 8004fec:	08005055 	.word	0x08005055
 8004ff0:	080050e7 	.word	0x080050e7
 8004ff4:	08004fa5 	.word	0x08004fa5
 8004ff8:	08004fa5 	.word	0x08004fa5
 8004ffc:	0800514f 	.word	0x0800514f
 8005000:	08004fa5 	.word	0x08004fa5
 8005004:	08005055 	.word	0x08005055
 8005008:	08004fa5 	.word	0x08004fa5
 800500c:	08004fa5 	.word	0x08004fa5
 8005010:	080050ef 	.word	0x080050ef
 8005014:	682b      	ldr	r3, [r5, #0]
 8005016:	1d1a      	adds	r2, r3, #4
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	602a      	str	r2, [r5, #0]
 800501c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005020:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005024:	2301      	movs	r3, #1
 8005026:	e09f      	b.n	8005168 <_printf_i+0x1ec>
 8005028:	6820      	ldr	r0, [r4, #0]
 800502a:	682b      	ldr	r3, [r5, #0]
 800502c:	0607      	lsls	r7, r0, #24
 800502e:	f103 0104 	add.w	r1, r3, #4
 8005032:	6029      	str	r1, [r5, #0]
 8005034:	d501      	bpl.n	800503a <_printf_i+0xbe>
 8005036:	681e      	ldr	r6, [r3, #0]
 8005038:	e003      	b.n	8005042 <_printf_i+0xc6>
 800503a:	0646      	lsls	r6, r0, #25
 800503c:	d5fb      	bpl.n	8005036 <_printf_i+0xba>
 800503e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005042:	2e00      	cmp	r6, #0
 8005044:	da03      	bge.n	800504e <_printf_i+0xd2>
 8005046:	232d      	movs	r3, #45	; 0x2d
 8005048:	4276      	negs	r6, r6
 800504a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800504e:	485a      	ldr	r0, [pc, #360]	; (80051b8 <_printf_i+0x23c>)
 8005050:	230a      	movs	r3, #10
 8005052:	e012      	b.n	800507a <_printf_i+0xfe>
 8005054:	682b      	ldr	r3, [r5, #0]
 8005056:	6820      	ldr	r0, [r4, #0]
 8005058:	1d19      	adds	r1, r3, #4
 800505a:	6029      	str	r1, [r5, #0]
 800505c:	0605      	lsls	r5, r0, #24
 800505e:	d501      	bpl.n	8005064 <_printf_i+0xe8>
 8005060:	681e      	ldr	r6, [r3, #0]
 8005062:	e002      	b.n	800506a <_printf_i+0xee>
 8005064:	0641      	lsls	r1, r0, #25
 8005066:	d5fb      	bpl.n	8005060 <_printf_i+0xe4>
 8005068:	881e      	ldrh	r6, [r3, #0]
 800506a:	4853      	ldr	r0, [pc, #332]	; (80051b8 <_printf_i+0x23c>)
 800506c:	2f6f      	cmp	r7, #111	; 0x6f
 800506e:	bf0c      	ite	eq
 8005070:	2308      	moveq	r3, #8
 8005072:	230a      	movne	r3, #10
 8005074:	2100      	movs	r1, #0
 8005076:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800507a:	6865      	ldr	r5, [r4, #4]
 800507c:	60a5      	str	r5, [r4, #8]
 800507e:	2d00      	cmp	r5, #0
 8005080:	bfa2      	ittt	ge
 8005082:	6821      	ldrge	r1, [r4, #0]
 8005084:	f021 0104 	bicge.w	r1, r1, #4
 8005088:	6021      	strge	r1, [r4, #0]
 800508a:	b90e      	cbnz	r6, 8005090 <_printf_i+0x114>
 800508c:	2d00      	cmp	r5, #0
 800508e:	d04b      	beq.n	8005128 <_printf_i+0x1ac>
 8005090:	4615      	mov	r5, r2
 8005092:	fbb6 f1f3 	udiv	r1, r6, r3
 8005096:	fb03 6711 	mls	r7, r3, r1, r6
 800509a:	5dc7      	ldrb	r7, [r0, r7]
 800509c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80050a0:	4637      	mov	r7, r6
 80050a2:	42bb      	cmp	r3, r7
 80050a4:	460e      	mov	r6, r1
 80050a6:	d9f4      	bls.n	8005092 <_printf_i+0x116>
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d10b      	bne.n	80050c4 <_printf_i+0x148>
 80050ac:	6823      	ldr	r3, [r4, #0]
 80050ae:	07de      	lsls	r6, r3, #31
 80050b0:	d508      	bpl.n	80050c4 <_printf_i+0x148>
 80050b2:	6923      	ldr	r3, [r4, #16]
 80050b4:	6861      	ldr	r1, [r4, #4]
 80050b6:	4299      	cmp	r1, r3
 80050b8:	bfde      	ittt	le
 80050ba:	2330      	movle	r3, #48	; 0x30
 80050bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80050c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80050c4:	1b52      	subs	r2, r2, r5
 80050c6:	6122      	str	r2, [r4, #16]
 80050c8:	f8cd a000 	str.w	sl, [sp]
 80050cc:	464b      	mov	r3, r9
 80050ce:	aa03      	add	r2, sp, #12
 80050d0:	4621      	mov	r1, r4
 80050d2:	4640      	mov	r0, r8
 80050d4:	f7ff fee4 	bl	8004ea0 <_printf_common>
 80050d8:	3001      	adds	r0, #1
 80050da:	d14a      	bne.n	8005172 <_printf_i+0x1f6>
 80050dc:	f04f 30ff 	mov.w	r0, #4294967295
 80050e0:	b004      	add	sp, #16
 80050e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050e6:	6823      	ldr	r3, [r4, #0]
 80050e8:	f043 0320 	orr.w	r3, r3, #32
 80050ec:	6023      	str	r3, [r4, #0]
 80050ee:	4833      	ldr	r0, [pc, #204]	; (80051bc <_printf_i+0x240>)
 80050f0:	2778      	movs	r7, #120	; 0x78
 80050f2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80050f6:	6823      	ldr	r3, [r4, #0]
 80050f8:	6829      	ldr	r1, [r5, #0]
 80050fa:	061f      	lsls	r7, r3, #24
 80050fc:	f851 6b04 	ldr.w	r6, [r1], #4
 8005100:	d402      	bmi.n	8005108 <_printf_i+0x18c>
 8005102:	065f      	lsls	r7, r3, #25
 8005104:	bf48      	it	mi
 8005106:	b2b6      	uxthmi	r6, r6
 8005108:	07df      	lsls	r7, r3, #31
 800510a:	bf48      	it	mi
 800510c:	f043 0320 	orrmi.w	r3, r3, #32
 8005110:	6029      	str	r1, [r5, #0]
 8005112:	bf48      	it	mi
 8005114:	6023      	strmi	r3, [r4, #0]
 8005116:	b91e      	cbnz	r6, 8005120 <_printf_i+0x1a4>
 8005118:	6823      	ldr	r3, [r4, #0]
 800511a:	f023 0320 	bic.w	r3, r3, #32
 800511e:	6023      	str	r3, [r4, #0]
 8005120:	2310      	movs	r3, #16
 8005122:	e7a7      	b.n	8005074 <_printf_i+0xf8>
 8005124:	4824      	ldr	r0, [pc, #144]	; (80051b8 <_printf_i+0x23c>)
 8005126:	e7e4      	b.n	80050f2 <_printf_i+0x176>
 8005128:	4615      	mov	r5, r2
 800512a:	e7bd      	b.n	80050a8 <_printf_i+0x12c>
 800512c:	682b      	ldr	r3, [r5, #0]
 800512e:	6826      	ldr	r6, [r4, #0]
 8005130:	6961      	ldr	r1, [r4, #20]
 8005132:	1d18      	adds	r0, r3, #4
 8005134:	6028      	str	r0, [r5, #0]
 8005136:	0635      	lsls	r5, r6, #24
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	d501      	bpl.n	8005140 <_printf_i+0x1c4>
 800513c:	6019      	str	r1, [r3, #0]
 800513e:	e002      	b.n	8005146 <_printf_i+0x1ca>
 8005140:	0670      	lsls	r0, r6, #25
 8005142:	d5fb      	bpl.n	800513c <_printf_i+0x1c0>
 8005144:	8019      	strh	r1, [r3, #0]
 8005146:	2300      	movs	r3, #0
 8005148:	6123      	str	r3, [r4, #16]
 800514a:	4615      	mov	r5, r2
 800514c:	e7bc      	b.n	80050c8 <_printf_i+0x14c>
 800514e:	682b      	ldr	r3, [r5, #0]
 8005150:	1d1a      	adds	r2, r3, #4
 8005152:	602a      	str	r2, [r5, #0]
 8005154:	681d      	ldr	r5, [r3, #0]
 8005156:	6862      	ldr	r2, [r4, #4]
 8005158:	2100      	movs	r1, #0
 800515a:	4628      	mov	r0, r5
 800515c:	f7fb f838 	bl	80001d0 <memchr>
 8005160:	b108      	cbz	r0, 8005166 <_printf_i+0x1ea>
 8005162:	1b40      	subs	r0, r0, r5
 8005164:	6060      	str	r0, [r4, #4]
 8005166:	6863      	ldr	r3, [r4, #4]
 8005168:	6123      	str	r3, [r4, #16]
 800516a:	2300      	movs	r3, #0
 800516c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005170:	e7aa      	b.n	80050c8 <_printf_i+0x14c>
 8005172:	6923      	ldr	r3, [r4, #16]
 8005174:	462a      	mov	r2, r5
 8005176:	4649      	mov	r1, r9
 8005178:	4640      	mov	r0, r8
 800517a:	47d0      	blx	sl
 800517c:	3001      	adds	r0, #1
 800517e:	d0ad      	beq.n	80050dc <_printf_i+0x160>
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	079b      	lsls	r3, r3, #30
 8005184:	d413      	bmi.n	80051ae <_printf_i+0x232>
 8005186:	68e0      	ldr	r0, [r4, #12]
 8005188:	9b03      	ldr	r3, [sp, #12]
 800518a:	4298      	cmp	r0, r3
 800518c:	bfb8      	it	lt
 800518e:	4618      	movlt	r0, r3
 8005190:	e7a6      	b.n	80050e0 <_printf_i+0x164>
 8005192:	2301      	movs	r3, #1
 8005194:	4632      	mov	r2, r6
 8005196:	4649      	mov	r1, r9
 8005198:	4640      	mov	r0, r8
 800519a:	47d0      	blx	sl
 800519c:	3001      	adds	r0, #1
 800519e:	d09d      	beq.n	80050dc <_printf_i+0x160>
 80051a0:	3501      	adds	r5, #1
 80051a2:	68e3      	ldr	r3, [r4, #12]
 80051a4:	9903      	ldr	r1, [sp, #12]
 80051a6:	1a5b      	subs	r3, r3, r1
 80051a8:	42ab      	cmp	r3, r5
 80051aa:	dcf2      	bgt.n	8005192 <_printf_i+0x216>
 80051ac:	e7eb      	b.n	8005186 <_printf_i+0x20a>
 80051ae:	2500      	movs	r5, #0
 80051b0:	f104 0619 	add.w	r6, r4, #25
 80051b4:	e7f5      	b.n	80051a2 <_printf_i+0x226>
 80051b6:	bf00      	nop
 80051b8:	08007772 	.word	0x08007772
 80051bc:	08007783 	.word	0x08007783

080051c0 <std>:
 80051c0:	2300      	movs	r3, #0
 80051c2:	b510      	push	{r4, lr}
 80051c4:	4604      	mov	r4, r0
 80051c6:	e9c0 3300 	strd	r3, r3, [r0]
 80051ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051ce:	6083      	str	r3, [r0, #8]
 80051d0:	8181      	strh	r1, [r0, #12]
 80051d2:	6643      	str	r3, [r0, #100]	; 0x64
 80051d4:	81c2      	strh	r2, [r0, #14]
 80051d6:	6183      	str	r3, [r0, #24]
 80051d8:	4619      	mov	r1, r3
 80051da:	2208      	movs	r2, #8
 80051dc:	305c      	adds	r0, #92	; 0x5c
 80051de:	f000 f94d 	bl	800547c <memset>
 80051e2:	4b0d      	ldr	r3, [pc, #52]	; (8005218 <std+0x58>)
 80051e4:	6263      	str	r3, [r4, #36]	; 0x24
 80051e6:	4b0d      	ldr	r3, [pc, #52]	; (800521c <std+0x5c>)
 80051e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80051ea:	4b0d      	ldr	r3, [pc, #52]	; (8005220 <std+0x60>)
 80051ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80051ee:	4b0d      	ldr	r3, [pc, #52]	; (8005224 <std+0x64>)
 80051f0:	6323      	str	r3, [r4, #48]	; 0x30
 80051f2:	4b0d      	ldr	r3, [pc, #52]	; (8005228 <std+0x68>)
 80051f4:	6224      	str	r4, [r4, #32]
 80051f6:	429c      	cmp	r4, r3
 80051f8:	d006      	beq.n	8005208 <std+0x48>
 80051fa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80051fe:	4294      	cmp	r4, r2
 8005200:	d002      	beq.n	8005208 <std+0x48>
 8005202:	33d0      	adds	r3, #208	; 0xd0
 8005204:	429c      	cmp	r4, r3
 8005206:	d105      	bne.n	8005214 <std+0x54>
 8005208:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800520c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005210:	f000 b9b0 	b.w	8005574 <__retarget_lock_init_recursive>
 8005214:	bd10      	pop	{r4, pc}
 8005216:	bf00      	nop
 8005218:	08005385 	.word	0x08005385
 800521c:	080053a7 	.word	0x080053a7
 8005220:	080053df 	.word	0x080053df
 8005224:	08005403 	.word	0x08005403
 8005228:	20000490 	.word	0x20000490

0800522c <stdio_exit_handler>:
 800522c:	4a02      	ldr	r2, [pc, #8]	; (8005238 <stdio_exit_handler+0xc>)
 800522e:	4903      	ldr	r1, [pc, #12]	; (800523c <stdio_exit_handler+0x10>)
 8005230:	4803      	ldr	r0, [pc, #12]	; (8005240 <stdio_exit_handler+0x14>)
 8005232:	f000 b869 	b.w	8005308 <_fwalk_sglue>
 8005236:	bf00      	nop
 8005238:	20000014 	.word	0x20000014
 800523c:	08006f29 	.word	0x08006f29
 8005240:	20000020 	.word	0x20000020

08005244 <cleanup_stdio>:
 8005244:	6841      	ldr	r1, [r0, #4]
 8005246:	4b0c      	ldr	r3, [pc, #48]	; (8005278 <cleanup_stdio+0x34>)
 8005248:	4299      	cmp	r1, r3
 800524a:	b510      	push	{r4, lr}
 800524c:	4604      	mov	r4, r0
 800524e:	d001      	beq.n	8005254 <cleanup_stdio+0x10>
 8005250:	f001 fe6a 	bl	8006f28 <_fflush_r>
 8005254:	68a1      	ldr	r1, [r4, #8]
 8005256:	4b09      	ldr	r3, [pc, #36]	; (800527c <cleanup_stdio+0x38>)
 8005258:	4299      	cmp	r1, r3
 800525a:	d002      	beq.n	8005262 <cleanup_stdio+0x1e>
 800525c:	4620      	mov	r0, r4
 800525e:	f001 fe63 	bl	8006f28 <_fflush_r>
 8005262:	68e1      	ldr	r1, [r4, #12]
 8005264:	4b06      	ldr	r3, [pc, #24]	; (8005280 <cleanup_stdio+0x3c>)
 8005266:	4299      	cmp	r1, r3
 8005268:	d004      	beq.n	8005274 <cleanup_stdio+0x30>
 800526a:	4620      	mov	r0, r4
 800526c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005270:	f001 be5a 	b.w	8006f28 <_fflush_r>
 8005274:	bd10      	pop	{r4, pc}
 8005276:	bf00      	nop
 8005278:	20000490 	.word	0x20000490
 800527c:	200004f8 	.word	0x200004f8
 8005280:	20000560 	.word	0x20000560

08005284 <global_stdio_init.part.0>:
 8005284:	b510      	push	{r4, lr}
 8005286:	4b0b      	ldr	r3, [pc, #44]	; (80052b4 <global_stdio_init.part.0+0x30>)
 8005288:	4c0b      	ldr	r4, [pc, #44]	; (80052b8 <global_stdio_init.part.0+0x34>)
 800528a:	4a0c      	ldr	r2, [pc, #48]	; (80052bc <global_stdio_init.part.0+0x38>)
 800528c:	601a      	str	r2, [r3, #0]
 800528e:	4620      	mov	r0, r4
 8005290:	2200      	movs	r2, #0
 8005292:	2104      	movs	r1, #4
 8005294:	f7ff ff94 	bl	80051c0 <std>
 8005298:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800529c:	2201      	movs	r2, #1
 800529e:	2109      	movs	r1, #9
 80052a0:	f7ff ff8e 	bl	80051c0 <std>
 80052a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80052a8:	2202      	movs	r2, #2
 80052aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052ae:	2112      	movs	r1, #18
 80052b0:	f7ff bf86 	b.w	80051c0 <std>
 80052b4:	200005c8 	.word	0x200005c8
 80052b8:	20000490 	.word	0x20000490
 80052bc:	0800522d 	.word	0x0800522d

080052c0 <__sfp_lock_acquire>:
 80052c0:	4801      	ldr	r0, [pc, #4]	; (80052c8 <__sfp_lock_acquire+0x8>)
 80052c2:	f000 b958 	b.w	8005576 <__retarget_lock_acquire_recursive>
 80052c6:	bf00      	nop
 80052c8:	200005d1 	.word	0x200005d1

080052cc <__sfp_lock_release>:
 80052cc:	4801      	ldr	r0, [pc, #4]	; (80052d4 <__sfp_lock_release+0x8>)
 80052ce:	f000 b953 	b.w	8005578 <__retarget_lock_release_recursive>
 80052d2:	bf00      	nop
 80052d4:	200005d1 	.word	0x200005d1

080052d8 <__sinit>:
 80052d8:	b510      	push	{r4, lr}
 80052da:	4604      	mov	r4, r0
 80052dc:	f7ff fff0 	bl	80052c0 <__sfp_lock_acquire>
 80052e0:	6a23      	ldr	r3, [r4, #32]
 80052e2:	b11b      	cbz	r3, 80052ec <__sinit+0x14>
 80052e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052e8:	f7ff bff0 	b.w	80052cc <__sfp_lock_release>
 80052ec:	4b04      	ldr	r3, [pc, #16]	; (8005300 <__sinit+0x28>)
 80052ee:	6223      	str	r3, [r4, #32]
 80052f0:	4b04      	ldr	r3, [pc, #16]	; (8005304 <__sinit+0x2c>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1f5      	bne.n	80052e4 <__sinit+0xc>
 80052f8:	f7ff ffc4 	bl	8005284 <global_stdio_init.part.0>
 80052fc:	e7f2      	b.n	80052e4 <__sinit+0xc>
 80052fe:	bf00      	nop
 8005300:	08005245 	.word	0x08005245
 8005304:	200005c8 	.word	0x200005c8

08005308 <_fwalk_sglue>:
 8005308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800530c:	4607      	mov	r7, r0
 800530e:	4688      	mov	r8, r1
 8005310:	4614      	mov	r4, r2
 8005312:	2600      	movs	r6, #0
 8005314:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005318:	f1b9 0901 	subs.w	r9, r9, #1
 800531c:	d505      	bpl.n	800532a <_fwalk_sglue+0x22>
 800531e:	6824      	ldr	r4, [r4, #0]
 8005320:	2c00      	cmp	r4, #0
 8005322:	d1f7      	bne.n	8005314 <_fwalk_sglue+0xc>
 8005324:	4630      	mov	r0, r6
 8005326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800532a:	89ab      	ldrh	r3, [r5, #12]
 800532c:	2b01      	cmp	r3, #1
 800532e:	d907      	bls.n	8005340 <_fwalk_sglue+0x38>
 8005330:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005334:	3301      	adds	r3, #1
 8005336:	d003      	beq.n	8005340 <_fwalk_sglue+0x38>
 8005338:	4629      	mov	r1, r5
 800533a:	4638      	mov	r0, r7
 800533c:	47c0      	blx	r8
 800533e:	4306      	orrs	r6, r0
 8005340:	3568      	adds	r5, #104	; 0x68
 8005342:	e7e9      	b.n	8005318 <_fwalk_sglue+0x10>

08005344 <siprintf>:
 8005344:	b40e      	push	{r1, r2, r3}
 8005346:	b500      	push	{lr}
 8005348:	b09c      	sub	sp, #112	; 0x70
 800534a:	ab1d      	add	r3, sp, #116	; 0x74
 800534c:	9002      	str	r0, [sp, #8]
 800534e:	9006      	str	r0, [sp, #24]
 8005350:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005354:	4809      	ldr	r0, [pc, #36]	; (800537c <siprintf+0x38>)
 8005356:	9107      	str	r1, [sp, #28]
 8005358:	9104      	str	r1, [sp, #16]
 800535a:	4909      	ldr	r1, [pc, #36]	; (8005380 <siprintf+0x3c>)
 800535c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005360:	9105      	str	r1, [sp, #20]
 8005362:	6800      	ldr	r0, [r0, #0]
 8005364:	9301      	str	r3, [sp, #4]
 8005366:	a902      	add	r1, sp, #8
 8005368:	f001 fc5a 	bl	8006c20 <_svfiprintf_r>
 800536c:	9b02      	ldr	r3, [sp, #8]
 800536e:	2200      	movs	r2, #0
 8005370:	701a      	strb	r2, [r3, #0]
 8005372:	b01c      	add	sp, #112	; 0x70
 8005374:	f85d eb04 	ldr.w	lr, [sp], #4
 8005378:	b003      	add	sp, #12
 800537a:	4770      	bx	lr
 800537c:	2000006c 	.word	0x2000006c
 8005380:	ffff0208 	.word	0xffff0208

08005384 <__sread>:
 8005384:	b510      	push	{r4, lr}
 8005386:	460c      	mov	r4, r1
 8005388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800538c:	f000 f8a4 	bl	80054d8 <_read_r>
 8005390:	2800      	cmp	r0, #0
 8005392:	bfab      	itete	ge
 8005394:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005396:	89a3      	ldrhlt	r3, [r4, #12]
 8005398:	181b      	addge	r3, r3, r0
 800539a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800539e:	bfac      	ite	ge
 80053a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80053a2:	81a3      	strhlt	r3, [r4, #12]
 80053a4:	bd10      	pop	{r4, pc}

080053a6 <__swrite>:
 80053a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80053aa:	461f      	mov	r7, r3
 80053ac:	898b      	ldrh	r3, [r1, #12]
 80053ae:	05db      	lsls	r3, r3, #23
 80053b0:	4605      	mov	r5, r0
 80053b2:	460c      	mov	r4, r1
 80053b4:	4616      	mov	r6, r2
 80053b6:	d505      	bpl.n	80053c4 <__swrite+0x1e>
 80053b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053bc:	2302      	movs	r3, #2
 80053be:	2200      	movs	r2, #0
 80053c0:	f000 f878 	bl	80054b4 <_lseek_r>
 80053c4:	89a3      	ldrh	r3, [r4, #12]
 80053c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80053ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80053ce:	81a3      	strh	r3, [r4, #12]
 80053d0:	4632      	mov	r2, r6
 80053d2:	463b      	mov	r3, r7
 80053d4:	4628      	mov	r0, r5
 80053d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80053da:	f000 b88f 	b.w	80054fc <_write_r>

080053de <__sseek>:
 80053de:	b510      	push	{r4, lr}
 80053e0:	460c      	mov	r4, r1
 80053e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80053e6:	f000 f865 	bl	80054b4 <_lseek_r>
 80053ea:	1c43      	adds	r3, r0, #1
 80053ec:	89a3      	ldrh	r3, [r4, #12]
 80053ee:	bf15      	itete	ne
 80053f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80053f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80053f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80053fa:	81a3      	strheq	r3, [r4, #12]
 80053fc:	bf18      	it	ne
 80053fe:	81a3      	strhne	r3, [r4, #12]
 8005400:	bd10      	pop	{r4, pc}

08005402 <__sclose>:
 8005402:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005406:	f000 b845 	b.w	8005494 <_close_r>

0800540a <_vsniprintf_r>:
 800540a:	b530      	push	{r4, r5, lr}
 800540c:	4614      	mov	r4, r2
 800540e:	2c00      	cmp	r4, #0
 8005410:	b09b      	sub	sp, #108	; 0x6c
 8005412:	4605      	mov	r5, r0
 8005414:	461a      	mov	r2, r3
 8005416:	da05      	bge.n	8005424 <_vsniprintf_r+0x1a>
 8005418:	238b      	movs	r3, #139	; 0x8b
 800541a:	6003      	str	r3, [r0, #0]
 800541c:	f04f 30ff 	mov.w	r0, #4294967295
 8005420:	b01b      	add	sp, #108	; 0x6c
 8005422:	bd30      	pop	{r4, r5, pc}
 8005424:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005428:	f8ad 300c 	strh.w	r3, [sp, #12]
 800542c:	bf14      	ite	ne
 800542e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005432:	4623      	moveq	r3, r4
 8005434:	9302      	str	r3, [sp, #8]
 8005436:	9305      	str	r3, [sp, #20]
 8005438:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800543c:	9100      	str	r1, [sp, #0]
 800543e:	9104      	str	r1, [sp, #16]
 8005440:	f8ad 300e 	strh.w	r3, [sp, #14]
 8005444:	4669      	mov	r1, sp
 8005446:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8005448:	f001 fbea 	bl	8006c20 <_svfiprintf_r>
 800544c:	1c43      	adds	r3, r0, #1
 800544e:	bfbc      	itt	lt
 8005450:	238b      	movlt	r3, #139	; 0x8b
 8005452:	602b      	strlt	r3, [r5, #0]
 8005454:	2c00      	cmp	r4, #0
 8005456:	d0e3      	beq.n	8005420 <_vsniprintf_r+0x16>
 8005458:	9b00      	ldr	r3, [sp, #0]
 800545a:	2200      	movs	r2, #0
 800545c:	701a      	strb	r2, [r3, #0]
 800545e:	e7df      	b.n	8005420 <_vsniprintf_r+0x16>

08005460 <vsniprintf>:
 8005460:	b507      	push	{r0, r1, r2, lr}
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	4613      	mov	r3, r2
 8005466:	460a      	mov	r2, r1
 8005468:	4601      	mov	r1, r0
 800546a:	4803      	ldr	r0, [pc, #12]	; (8005478 <vsniprintf+0x18>)
 800546c:	6800      	ldr	r0, [r0, #0]
 800546e:	f7ff ffcc 	bl	800540a <_vsniprintf_r>
 8005472:	b003      	add	sp, #12
 8005474:	f85d fb04 	ldr.w	pc, [sp], #4
 8005478:	2000006c 	.word	0x2000006c

0800547c <memset>:
 800547c:	4402      	add	r2, r0
 800547e:	4603      	mov	r3, r0
 8005480:	4293      	cmp	r3, r2
 8005482:	d100      	bne.n	8005486 <memset+0xa>
 8005484:	4770      	bx	lr
 8005486:	f803 1b01 	strb.w	r1, [r3], #1
 800548a:	e7f9      	b.n	8005480 <memset+0x4>

0800548c <_localeconv_r>:
 800548c:	4800      	ldr	r0, [pc, #0]	; (8005490 <_localeconv_r+0x4>)
 800548e:	4770      	bx	lr
 8005490:	20000160 	.word	0x20000160

08005494 <_close_r>:
 8005494:	b538      	push	{r3, r4, r5, lr}
 8005496:	4d06      	ldr	r5, [pc, #24]	; (80054b0 <_close_r+0x1c>)
 8005498:	2300      	movs	r3, #0
 800549a:	4604      	mov	r4, r0
 800549c:	4608      	mov	r0, r1
 800549e:	602b      	str	r3, [r5, #0]
 80054a0:	f7fc f927 	bl	80016f2 <_close>
 80054a4:	1c43      	adds	r3, r0, #1
 80054a6:	d102      	bne.n	80054ae <_close_r+0x1a>
 80054a8:	682b      	ldr	r3, [r5, #0]
 80054aa:	b103      	cbz	r3, 80054ae <_close_r+0x1a>
 80054ac:	6023      	str	r3, [r4, #0]
 80054ae:	bd38      	pop	{r3, r4, r5, pc}
 80054b0:	200005cc 	.word	0x200005cc

080054b4 <_lseek_r>:
 80054b4:	b538      	push	{r3, r4, r5, lr}
 80054b6:	4d07      	ldr	r5, [pc, #28]	; (80054d4 <_lseek_r+0x20>)
 80054b8:	4604      	mov	r4, r0
 80054ba:	4608      	mov	r0, r1
 80054bc:	4611      	mov	r1, r2
 80054be:	2200      	movs	r2, #0
 80054c0:	602a      	str	r2, [r5, #0]
 80054c2:	461a      	mov	r2, r3
 80054c4:	f7fc f93c 	bl	8001740 <_lseek>
 80054c8:	1c43      	adds	r3, r0, #1
 80054ca:	d102      	bne.n	80054d2 <_lseek_r+0x1e>
 80054cc:	682b      	ldr	r3, [r5, #0]
 80054ce:	b103      	cbz	r3, 80054d2 <_lseek_r+0x1e>
 80054d0:	6023      	str	r3, [r4, #0]
 80054d2:	bd38      	pop	{r3, r4, r5, pc}
 80054d4:	200005cc 	.word	0x200005cc

080054d8 <_read_r>:
 80054d8:	b538      	push	{r3, r4, r5, lr}
 80054da:	4d07      	ldr	r5, [pc, #28]	; (80054f8 <_read_r+0x20>)
 80054dc:	4604      	mov	r4, r0
 80054de:	4608      	mov	r0, r1
 80054e0:	4611      	mov	r1, r2
 80054e2:	2200      	movs	r2, #0
 80054e4:	602a      	str	r2, [r5, #0]
 80054e6:	461a      	mov	r2, r3
 80054e8:	f7fc f8ca 	bl	8001680 <_read>
 80054ec:	1c43      	adds	r3, r0, #1
 80054ee:	d102      	bne.n	80054f6 <_read_r+0x1e>
 80054f0:	682b      	ldr	r3, [r5, #0]
 80054f2:	b103      	cbz	r3, 80054f6 <_read_r+0x1e>
 80054f4:	6023      	str	r3, [r4, #0]
 80054f6:	bd38      	pop	{r3, r4, r5, pc}
 80054f8:	200005cc 	.word	0x200005cc

080054fc <_write_r>:
 80054fc:	b538      	push	{r3, r4, r5, lr}
 80054fe:	4d07      	ldr	r5, [pc, #28]	; (800551c <_write_r+0x20>)
 8005500:	4604      	mov	r4, r0
 8005502:	4608      	mov	r0, r1
 8005504:	4611      	mov	r1, r2
 8005506:	2200      	movs	r2, #0
 8005508:	602a      	str	r2, [r5, #0]
 800550a:	461a      	mov	r2, r3
 800550c:	f7fc f8d5 	bl	80016ba <_write>
 8005510:	1c43      	adds	r3, r0, #1
 8005512:	d102      	bne.n	800551a <_write_r+0x1e>
 8005514:	682b      	ldr	r3, [r5, #0]
 8005516:	b103      	cbz	r3, 800551a <_write_r+0x1e>
 8005518:	6023      	str	r3, [r4, #0]
 800551a:	bd38      	pop	{r3, r4, r5, pc}
 800551c:	200005cc 	.word	0x200005cc

08005520 <__errno>:
 8005520:	4b01      	ldr	r3, [pc, #4]	; (8005528 <__errno+0x8>)
 8005522:	6818      	ldr	r0, [r3, #0]
 8005524:	4770      	bx	lr
 8005526:	bf00      	nop
 8005528:	2000006c 	.word	0x2000006c

0800552c <__libc_init_array>:
 800552c:	b570      	push	{r4, r5, r6, lr}
 800552e:	4d0d      	ldr	r5, [pc, #52]	; (8005564 <__libc_init_array+0x38>)
 8005530:	4c0d      	ldr	r4, [pc, #52]	; (8005568 <__libc_init_array+0x3c>)
 8005532:	1b64      	subs	r4, r4, r5
 8005534:	10a4      	asrs	r4, r4, #2
 8005536:	2600      	movs	r6, #0
 8005538:	42a6      	cmp	r6, r4
 800553a:	d109      	bne.n	8005550 <__libc_init_array+0x24>
 800553c:	4d0b      	ldr	r5, [pc, #44]	; (800556c <__libc_init_array+0x40>)
 800553e:	4c0c      	ldr	r4, [pc, #48]	; (8005570 <__libc_init_array+0x44>)
 8005540:	f002 f896 	bl	8007670 <_init>
 8005544:	1b64      	subs	r4, r4, r5
 8005546:	10a4      	asrs	r4, r4, #2
 8005548:	2600      	movs	r6, #0
 800554a:	42a6      	cmp	r6, r4
 800554c:	d105      	bne.n	800555a <__libc_init_array+0x2e>
 800554e:	bd70      	pop	{r4, r5, r6, pc}
 8005550:	f855 3b04 	ldr.w	r3, [r5], #4
 8005554:	4798      	blx	r3
 8005556:	3601      	adds	r6, #1
 8005558:	e7ee      	b.n	8005538 <__libc_init_array+0xc>
 800555a:	f855 3b04 	ldr.w	r3, [r5], #4
 800555e:	4798      	blx	r3
 8005560:	3601      	adds	r6, #1
 8005562:	e7f2      	b.n	800554a <__libc_init_array+0x1e>
 8005564:	08007adc 	.word	0x08007adc
 8005568:	08007adc 	.word	0x08007adc
 800556c:	08007adc 	.word	0x08007adc
 8005570:	08007ae0 	.word	0x08007ae0

08005574 <__retarget_lock_init_recursive>:
 8005574:	4770      	bx	lr

08005576 <__retarget_lock_acquire_recursive>:
 8005576:	4770      	bx	lr

08005578 <__retarget_lock_release_recursive>:
 8005578:	4770      	bx	lr

0800557a <quorem>:
 800557a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800557e:	6903      	ldr	r3, [r0, #16]
 8005580:	690c      	ldr	r4, [r1, #16]
 8005582:	42a3      	cmp	r3, r4
 8005584:	4607      	mov	r7, r0
 8005586:	db7e      	blt.n	8005686 <quorem+0x10c>
 8005588:	3c01      	subs	r4, #1
 800558a:	f101 0814 	add.w	r8, r1, #20
 800558e:	f100 0514 	add.w	r5, r0, #20
 8005592:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005596:	9301      	str	r3, [sp, #4]
 8005598:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800559c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80055a0:	3301      	adds	r3, #1
 80055a2:	429a      	cmp	r2, r3
 80055a4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 80055a8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80055ac:	fbb2 f6f3 	udiv	r6, r2, r3
 80055b0:	d331      	bcc.n	8005616 <quorem+0x9c>
 80055b2:	f04f 0e00 	mov.w	lr, #0
 80055b6:	4640      	mov	r0, r8
 80055b8:	46ac      	mov	ip, r5
 80055ba:	46f2      	mov	sl, lr
 80055bc:	f850 2b04 	ldr.w	r2, [r0], #4
 80055c0:	b293      	uxth	r3, r2
 80055c2:	fb06 e303 	mla	r3, r6, r3, lr
 80055c6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80055ca:	0c1a      	lsrs	r2, r3, #16
 80055cc:	b29b      	uxth	r3, r3
 80055ce:	ebaa 0303 	sub.w	r3, sl, r3
 80055d2:	f8dc a000 	ldr.w	sl, [ip]
 80055d6:	fa13 f38a 	uxtah	r3, r3, sl
 80055da:	fb06 220e 	mla	r2, r6, lr, r2
 80055de:	9300      	str	r3, [sp, #0]
 80055e0:	9b00      	ldr	r3, [sp, #0]
 80055e2:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80055e6:	b292      	uxth	r2, r2
 80055e8:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80055ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80055f0:	f8bd 3000 	ldrh.w	r3, [sp]
 80055f4:	4581      	cmp	r9, r0
 80055f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80055fa:	f84c 3b04 	str.w	r3, [ip], #4
 80055fe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005602:	d2db      	bcs.n	80055bc <quorem+0x42>
 8005604:	f855 300b 	ldr.w	r3, [r5, fp]
 8005608:	b92b      	cbnz	r3, 8005616 <quorem+0x9c>
 800560a:	9b01      	ldr	r3, [sp, #4]
 800560c:	3b04      	subs	r3, #4
 800560e:	429d      	cmp	r5, r3
 8005610:	461a      	mov	r2, r3
 8005612:	d32c      	bcc.n	800566e <quorem+0xf4>
 8005614:	613c      	str	r4, [r7, #16]
 8005616:	4638      	mov	r0, r7
 8005618:	f001 f9a8 	bl	800696c <__mcmp>
 800561c:	2800      	cmp	r0, #0
 800561e:	db22      	blt.n	8005666 <quorem+0xec>
 8005620:	3601      	adds	r6, #1
 8005622:	4629      	mov	r1, r5
 8005624:	2000      	movs	r0, #0
 8005626:	f858 2b04 	ldr.w	r2, [r8], #4
 800562a:	f8d1 c000 	ldr.w	ip, [r1]
 800562e:	b293      	uxth	r3, r2
 8005630:	1ac3      	subs	r3, r0, r3
 8005632:	0c12      	lsrs	r2, r2, #16
 8005634:	fa13 f38c 	uxtah	r3, r3, ip
 8005638:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800563c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005640:	b29b      	uxth	r3, r3
 8005642:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005646:	45c1      	cmp	r9, r8
 8005648:	f841 3b04 	str.w	r3, [r1], #4
 800564c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005650:	d2e9      	bcs.n	8005626 <quorem+0xac>
 8005652:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005656:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800565a:	b922      	cbnz	r2, 8005666 <quorem+0xec>
 800565c:	3b04      	subs	r3, #4
 800565e:	429d      	cmp	r5, r3
 8005660:	461a      	mov	r2, r3
 8005662:	d30a      	bcc.n	800567a <quorem+0x100>
 8005664:	613c      	str	r4, [r7, #16]
 8005666:	4630      	mov	r0, r6
 8005668:	b003      	add	sp, #12
 800566a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800566e:	6812      	ldr	r2, [r2, #0]
 8005670:	3b04      	subs	r3, #4
 8005672:	2a00      	cmp	r2, #0
 8005674:	d1ce      	bne.n	8005614 <quorem+0x9a>
 8005676:	3c01      	subs	r4, #1
 8005678:	e7c9      	b.n	800560e <quorem+0x94>
 800567a:	6812      	ldr	r2, [r2, #0]
 800567c:	3b04      	subs	r3, #4
 800567e:	2a00      	cmp	r2, #0
 8005680:	d1f0      	bne.n	8005664 <quorem+0xea>
 8005682:	3c01      	subs	r4, #1
 8005684:	e7eb      	b.n	800565e <quorem+0xe4>
 8005686:	2000      	movs	r0, #0
 8005688:	e7ee      	b.n	8005668 <quorem+0xee>
 800568a:	0000      	movs	r0, r0
 800568c:	0000      	movs	r0, r0
	...

08005690 <_dtoa_r>:
 8005690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005694:	ed2d 8b04 	vpush	{d8-d9}
 8005698:	69c5      	ldr	r5, [r0, #28]
 800569a:	b093      	sub	sp, #76	; 0x4c
 800569c:	ed8d 0b02 	vstr	d0, [sp, #8]
 80056a0:	ec57 6b10 	vmov	r6, r7, d0
 80056a4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80056a8:	9107      	str	r1, [sp, #28]
 80056aa:	4604      	mov	r4, r0
 80056ac:	920a      	str	r2, [sp, #40]	; 0x28
 80056ae:	930d      	str	r3, [sp, #52]	; 0x34
 80056b0:	b975      	cbnz	r5, 80056d0 <_dtoa_r+0x40>
 80056b2:	2010      	movs	r0, #16
 80056b4:	f000 fe2a 	bl	800630c <malloc>
 80056b8:	4602      	mov	r2, r0
 80056ba:	61e0      	str	r0, [r4, #28]
 80056bc:	b920      	cbnz	r0, 80056c8 <_dtoa_r+0x38>
 80056be:	4bae      	ldr	r3, [pc, #696]	; (8005978 <_dtoa_r+0x2e8>)
 80056c0:	21ef      	movs	r1, #239	; 0xef
 80056c2:	48ae      	ldr	r0, [pc, #696]	; (800597c <_dtoa_r+0x2ec>)
 80056c4:	f001 fc90 	bl	8006fe8 <__assert_func>
 80056c8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80056cc:	6005      	str	r5, [r0, #0]
 80056ce:	60c5      	str	r5, [r0, #12]
 80056d0:	69e3      	ldr	r3, [r4, #28]
 80056d2:	6819      	ldr	r1, [r3, #0]
 80056d4:	b151      	cbz	r1, 80056ec <_dtoa_r+0x5c>
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	604a      	str	r2, [r1, #4]
 80056da:	2301      	movs	r3, #1
 80056dc:	4093      	lsls	r3, r2
 80056de:	608b      	str	r3, [r1, #8]
 80056e0:	4620      	mov	r0, r4
 80056e2:	f000 ff07 	bl	80064f4 <_Bfree>
 80056e6:	69e3      	ldr	r3, [r4, #28]
 80056e8:	2200      	movs	r2, #0
 80056ea:	601a      	str	r2, [r3, #0]
 80056ec:	1e3b      	subs	r3, r7, #0
 80056ee:	bfbb      	ittet	lt
 80056f0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 80056f4:	9303      	strlt	r3, [sp, #12]
 80056f6:	2300      	movge	r3, #0
 80056f8:	2201      	movlt	r2, #1
 80056fa:	bfac      	ite	ge
 80056fc:	f8c8 3000 	strge.w	r3, [r8]
 8005700:	f8c8 2000 	strlt.w	r2, [r8]
 8005704:	4b9e      	ldr	r3, [pc, #632]	; (8005980 <_dtoa_r+0x2f0>)
 8005706:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800570a:	ea33 0308 	bics.w	r3, r3, r8
 800570e:	d11b      	bne.n	8005748 <_dtoa_r+0xb8>
 8005710:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005712:	f242 730f 	movw	r3, #9999	; 0x270f
 8005716:	6013      	str	r3, [r2, #0]
 8005718:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800571c:	4333      	orrs	r3, r6
 800571e:	f000 8593 	beq.w	8006248 <_dtoa_r+0xbb8>
 8005722:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005724:	b963      	cbnz	r3, 8005740 <_dtoa_r+0xb0>
 8005726:	4b97      	ldr	r3, [pc, #604]	; (8005984 <_dtoa_r+0x2f4>)
 8005728:	e027      	b.n	800577a <_dtoa_r+0xea>
 800572a:	4b97      	ldr	r3, [pc, #604]	; (8005988 <_dtoa_r+0x2f8>)
 800572c:	9300      	str	r3, [sp, #0]
 800572e:	3308      	adds	r3, #8
 8005730:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005732:	6013      	str	r3, [r2, #0]
 8005734:	9800      	ldr	r0, [sp, #0]
 8005736:	b013      	add	sp, #76	; 0x4c
 8005738:	ecbd 8b04 	vpop	{d8-d9}
 800573c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005740:	4b90      	ldr	r3, [pc, #576]	; (8005984 <_dtoa_r+0x2f4>)
 8005742:	9300      	str	r3, [sp, #0]
 8005744:	3303      	adds	r3, #3
 8005746:	e7f3      	b.n	8005730 <_dtoa_r+0xa0>
 8005748:	ed9d 7b02 	vldr	d7, [sp, #8]
 800574c:	2200      	movs	r2, #0
 800574e:	ec51 0b17 	vmov	r0, r1, d7
 8005752:	eeb0 8a47 	vmov.f32	s16, s14
 8005756:	eef0 8a67 	vmov.f32	s17, s15
 800575a:	2300      	movs	r3, #0
 800575c:	f7fb f9b4 	bl	8000ac8 <__aeabi_dcmpeq>
 8005760:	4681      	mov	r9, r0
 8005762:	b160      	cbz	r0, 800577e <_dtoa_r+0xee>
 8005764:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005766:	2301      	movs	r3, #1
 8005768:	6013      	str	r3, [r2, #0]
 800576a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800576c:	2b00      	cmp	r3, #0
 800576e:	f000 8568 	beq.w	8006242 <_dtoa_r+0xbb2>
 8005772:	4b86      	ldr	r3, [pc, #536]	; (800598c <_dtoa_r+0x2fc>)
 8005774:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005776:	6013      	str	r3, [r2, #0]
 8005778:	3b01      	subs	r3, #1
 800577a:	9300      	str	r3, [sp, #0]
 800577c:	e7da      	b.n	8005734 <_dtoa_r+0xa4>
 800577e:	aa10      	add	r2, sp, #64	; 0x40
 8005780:	a911      	add	r1, sp, #68	; 0x44
 8005782:	4620      	mov	r0, r4
 8005784:	eeb0 0a48 	vmov.f32	s0, s16
 8005788:	eef0 0a68 	vmov.f32	s1, s17
 800578c:	f001 f994 	bl	8006ab8 <__d2b>
 8005790:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005794:	4682      	mov	sl, r0
 8005796:	2d00      	cmp	r5, #0
 8005798:	d07f      	beq.n	800589a <_dtoa_r+0x20a>
 800579a:	ee18 3a90 	vmov	r3, s17
 800579e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80057a2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 80057a6:	ec51 0b18 	vmov	r0, r1, d8
 80057aa:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80057ae:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80057b2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80057b6:	4619      	mov	r1, r3
 80057b8:	2200      	movs	r2, #0
 80057ba:	4b75      	ldr	r3, [pc, #468]	; (8005990 <_dtoa_r+0x300>)
 80057bc:	f7fa fd64 	bl	8000288 <__aeabi_dsub>
 80057c0:	a367      	add	r3, pc, #412	; (adr r3, 8005960 <_dtoa_r+0x2d0>)
 80057c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057c6:	f7fa ff17 	bl	80005f8 <__aeabi_dmul>
 80057ca:	a367      	add	r3, pc, #412	; (adr r3, 8005968 <_dtoa_r+0x2d8>)
 80057cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d0:	f7fa fd5c 	bl	800028c <__adddf3>
 80057d4:	4606      	mov	r6, r0
 80057d6:	4628      	mov	r0, r5
 80057d8:	460f      	mov	r7, r1
 80057da:	f7fa fea3 	bl	8000524 <__aeabi_i2d>
 80057de:	a364      	add	r3, pc, #400	; (adr r3, 8005970 <_dtoa_r+0x2e0>)
 80057e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e4:	f7fa ff08 	bl	80005f8 <__aeabi_dmul>
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	4630      	mov	r0, r6
 80057ee:	4639      	mov	r1, r7
 80057f0:	f7fa fd4c 	bl	800028c <__adddf3>
 80057f4:	4606      	mov	r6, r0
 80057f6:	460f      	mov	r7, r1
 80057f8:	f7fb f9ae 	bl	8000b58 <__aeabi_d2iz>
 80057fc:	2200      	movs	r2, #0
 80057fe:	4683      	mov	fp, r0
 8005800:	2300      	movs	r3, #0
 8005802:	4630      	mov	r0, r6
 8005804:	4639      	mov	r1, r7
 8005806:	f7fb f969 	bl	8000adc <__aeabi_dcmplt>
 800580a:	b148      	cbz	r0, 8005820 <_dtoa_r+0x190>
 800580c:	4658      	mov	r0, fp
 800580e:	f7fa fe89 	bl	8000524 <__aeabi_i2d>
 8005812:	4632      	mov	r2, r6
 8005814:	463b      	mov	r3, r7
 8005816:	f7fb f957 	bl	8000ac8 <__aeabi_dcmpeq>
 800581a:	b908      	cbnz	r0, 8005820 <_dtoa_r+0x190>
 800581c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005820:	f1bb 0f16 	cmp.w	fp, #22
 8005824:	d857      	bhi.n	80058d6 <_dtoa_r+0x246>
 8005826:	4b5b      	ldr	r3, [pc, #364]	; (8005994 <_dtoa_r+0x304>)
 8005828:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800582c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005830:	ec51 0b18 	vmov	r0, r1, d8
 8005834:	f7fb f952 	bl	8000adc <__aeabi_dcmplt>
 8005838:	2800      	cmp	r0, #0
 800583a:	d04e      	beq.n	80058da <_dtoa_r+0x24a>
 800583c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005840:	2300      	movs	r3, #0
 8005842:	930c      	str	r3, [sp, #48]	; 0x30
 8005844:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005846:	1b5b      	subs	r3, r3, r5
 8005848:	1e5a      	subs	r2, r3, #1
 800584a:	bf45      	ittet	mi
 800584c:	f1c3 0301 	rsbmi	r3, r3, #1
 8005850:	9305      	strmi	r3, [sp, #20]
 8005852:	2300      	movpl	r3, #0
 8005854:	2300      	movmi	r3, #0
 8005856:	9206      	str	r2, [sp, #24]
 8005858:	bf54      	ite	pl
 800585a:	9305      	strpl	r3, [sp, #20]
 800585c:	9306      	strmi	r3, [sp, #24]
 800585e:	f1bb 0f00 	cmp.w	fp, #0
 8005862:	db3c      	blt.n	80058de <_dtoa_r+0x24e>
 8005864:	9b06      	ldr	r3, [sp, #24]
 8005866:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800586a:	445b      	add	r3, fp
 800586c:	9306      	str	r3, [sp, #24]
 800586e:	2300      	movs	r3, #0
 8005870:	9308      	str	r3, [sp, #32]
 8005872:	9b07      	ldr	r3, [sp, #28]
 8005874:	2b09      	cmp	r3, #9
 8005876:	d868      	bhi.n	800594a <_dtoa_r+0x2ba>
 8005878:	2b05      	cmp	r3, #5
 800587a:	bfc4      	itt	gt
 800587c:	3b04      	subgt	r3, #4
 800587e:	9307      	strgt	r3, [sp, #28]
 8005880:	9b07      	ldr	r3, [sp, #28]
 8005882:	f1a3 0302 	sub.w	r3, r3, #2
 8005886:	bfcc      	ite	gt
 8005888:	2500      	movgt	r5, #0
 800588a:	2501      	movle	r5, #1
 800588c:	2b03      	cmp	r3, #3
 800588e:	f200 8085 	bhi.w	800599c <_dtoa_r+0x30c>
 8005892:	e8df f003 	tbb	[pc, r3]
 8005896:	3b2e      	.short	0x3b2e
 8005898:	5839      	.short	0x5839
 800589a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800589e:	441d      	add	r5, r3
 80058a0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 80058a4:	2b20      	cmp	r3, #32
 80058a6:	bfc1      	itttt	gt
 80058a8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80058ac:	fa08 f803 	lslgt.w	r8, r8, r3
 80058b0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 80058b4:	fa26 f303 	lsrgt.w	r3, r6, r3
 80058b8:	bfd6      	itet	le
 80058ba:	f1c3 0320 	rsble	r3, r3, #32
 80058be:	ea48 0003 	orrgt.w	r0, r8, r3
 80058c2:	fa06 f003 	lslle.w	r0, r6, r3
 80058c6:	f7fa fe1d 	bl	8000504 <__aeabi_ui2d>
 80058ca:	2201      	movs	r2, #1
 80058cc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 80058d0:	3d01      	subs	r5, #1
 80058d2:	920e      	str	r2, [sp, #56]	; 0x38
 80058d4:	e76f      	b.n	80057b6 <_dtoa_r+0x126>
 80058d6:	2301      	movs	r3, #1
 80058d8:	e7b3      	b.n	8005842 <_dtoa_r+0x1b2>
 80058da:	900c      	str	r0, [sp, #48]	; 0x30
 80058dc:	e7b2      	b.n	8005844 <_dtoa_r+0x1b4>
 80058de:	9b05      	ldr	r3, [sp, #20]
 80058e0:	eba3 030b 	sub.w	r3, r3, fp
 80058e4:	9305      	str	r3, [sp, #20]
 80058e6:	f1cb 0300 	rsb	r3, fp, #0
 80058ea:	9308      	str	r3, [sp, #32]
 80058ec:	2300      	movs	r3, #0
 80058ee:	930b      	str	r3, [sp, #44]	; 0x2c
 80058f0:	e7bf      	b.n	8005872 <_dtoa_r+0x1e2>
 80058f2:	2300      	movs	r3, #0
 80058f4:	9309      	str	r3, [sp, #36]	; 0x24
 80058f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	dc52      	bgt.n	80059a2 <_dtoa_r+0x312>
 80058fc:	2301      	movs	r3, #1
 80058fe:	9301      	str	r3, [sp, #4]
 8005900:	9304      	str	r3, [sp, #16]
 8005902:	461a      	mov	r2, r3
 8005904:	920a      	str	r2, [sp, #40]	; 0x28
 8005906:	e00b      	b.n	8005920 <_dtoa_r+0x290>
 8005908:	2301      	movs	r3, #1
 800590a:	e7f3      	b.n	80058f4 <_dtoa_r+0x264>
 800590c:	2300      	movs	r3, #0
 800590e:	9309      	str	r3, [sp, #36]	; 0x24
 8005910:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005912:	445b      	add	r3, fp
 8005914:	9301      	str	r3, [sp, #4]
 8005916:	3301      	adds	r3, #1
 8005918:	2b01      	cmp	r3, #1
 800591a:	9304      	str	r3, [sp, #16]
 800591c:	bfb8      	it	lt
 800591e:	2301      	movlt	r3, #1
 8005920:	69e0      	ldr	r0, [r4, #28]
 8005922:	2100      	movs	r1, #0
 8005924:	2204      	movs	r2, #4
 8005926:	f102 0614 	add.w	r6, r2, #20
 800592a:	429e      	cmp	r6, r3
 800592c:	d93d      	bls.n	80059aa <_dtoa_r+0x31a>
 800592e:	6041      	str	r1, [r0, #4]
 8005930:	4620      	mov	r0, r4
 8005932:	f000 fd9f 	bl	8006474 <_Balloc>
 8005936:	9000      	str	r0, [sp, #0]
 8005938:	2800      	cmp	r0, #0
 800593a:	d139      	bne.n	80059b0 <_dtoa_r+0x320>
 800593c:	4b16      	ldr	r3, [pc, #88]	; (8005998 <_dtoa_r+0x308>)
 800593e:	4602      	mov	r2, r0
 8005940:	f240 11af 	movw	r1, #431	; 0x1af
 8005944:	e6bd      	b.n	80056c2 <_dtoa_r+0x32>
 8005946:	2301      	movs	r3, #1
 8005948:	e7e1      	b.n	800590e <_dtoa_r+0x27e>
 800594a:	2501      	movs	r5, #1
 800594c:	2300      	movs	r3, #0
 800594e:	9307      	str	r3, [sp, #28]
 8005950:	9509      	str	r5, [sp, #36]	; 0x24
 8005952:	f04f 33ff 	mov.w	r3, #4294967295
 8005956:	9301      	str	r3, [sp, #4]
 8005958:	9304      	str	r3, [sp, #16]
 800595a:	2200      	movs	r2, #0
 800595c:	2312      	movs	r3, #18
 800595e:	e7d1      	b.n	8005904 <_dtoa_r+0x274>
 8005960:	636f4361 	.word	0x636f4361
 8005964:	3fd287a7 	.word	0x3fd287a7
 8005968:	8b60c8b3 	.word	0x8b60c8b3
 800596c:	3fc68a28 	.word	0x3fc68a28
 8005970:	509f79fb 	.word	0x509f79fb
 8005974:	3fd34413 	.word	0x3fd34413
 8005978:	080077a1 	.word	0x080077a1
 800597c:	080077b8 	.word	0x080077b8
 8005980:	7ff00000 	.word	0x7ff00000
 8005984:	0800779d 	.word	0x0800779d
 8005988:	08007794 	.word	0x08007794
 800598c:	08007771 	.word	0x08007771
 8005990:	3ff80000 	.word	0x3ff80000
 8005994:	080078a8 	.word	0x080078a8
 8005998:	08007810 	.word	0x08007810
 800599c:	2301      	movs	r3, #1
 800599e:	9309      	str	r3, [sp, #36]	; 0x24
 80059a0:	e7d7      	b.n	8005952 <_dtoa_r+0x2c2>
 80059a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059a4:	9301      	str	r3, [sp, #4]
 80059a6:	9304      	str	r3, [sp, #16]
 80059a8:	e7ba      	b.n	8005920 <_dtoa_r+0x290>
 80059aa:	3101      	adds	r1, #1
 80059ac:	0052      	lsls	r2, r2, #1
 80059ae:	e7ba      	b.n	8005926 <_dtoa_r+0x296>
 80059b0:	69e3      	ldr	r3, [r4, #28]
 80059b2:	9a00      	ldr	r2, [sp, #0]
 80059b4:	601a      	str	r2, [r3, #0]
 80059b6:	9b04      	ldr	r3, [sp, #16]
 80059b8:	2b0e      	cmp	r3, #14
 80059ba:	f200 80a8 	bhi.w	8005b0e <_dtoa_r+0x47e>
 80059be:	2d00      	cmp	r5, #0
 80059c0:	f000 80a5 	beq.w	8005b0e <_dtoa_r+0x47e>
 80059c4:	f1bb 0f00 	cmp.w	fp, #0
 80059c8:	dd38      	ble.n	8005a3c <_dtoa_r+0x3ac>
 80059ca:	4bc0      	ldr	r3, [pc, #768]	; (8005ccc <_dtoa_r+0x63c>)
 80059cc:	f00b 020f 	and.w	r2, fp, #15
 80059d0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059d4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 80059d8:	e9d3 6700 	ldrd	r6, r7, [r3]
 80059dc:	ea4f 182b 	mov.w	r8, fp, asr #4
 80059e0:	d019      	beq.n	8005a16 <_dtoa_r+0x386>
 80059e2:	4bbb      	ldr	r3, [pc, #748]	; (8005cd0 <_dtoa_r+0x640>)
 80059e4:	ec51 0b18 	vmov	r0, r1, d8
 80059e8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80059ec:	f7fa ff2e 	bl	800084c <__aeabi_ddiv>
 80059f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80059f4:	f008 080f 	and.w	r8, r8, #15
 80059f8:	2503      	movs	r5, #3
 80059fa:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8005cd0 <_dtoa_r+0x640>
 80059fe:	f1b8 0f00 	cmp.w	r8, #0
 8005a02:	d10a      	bne.n	8005a1a <_dtoa_r+0x38a>
 8005a04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a08:	4632      	mov	r2, r6
 8005a0a:	463b      	mov	r3, r7
 8005a0c:	f7fa ff1e 	bl	800084c <__aeabi_ddiv>
 8005a10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a14:	e02b      	b.n	8005a6e <_dtoa_r+0x3de>
 8005a16:	2502      	movs	r5, #2
 8005a18:	e7ef      	b.n	80059fa <_dtoa_r+0x36a>
 8005a1a:	f018 0f01 	tst.w	r8, #1
 8005a1e:	d008      	beq.n	8005a32 <_dtoa_r+0x3a2>
 8005a20:	4630      	mov	r0, r6
 8005a22:	4639      	mov	r1, r7
 8005a24:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005a28:	f7fa fde6 	bl	80005f8 <__aeabi_dmul>
 8005a2c:	3501      	adds	r5, #1
 8005a2e:	4606      	mov	r6, r0
 8005a30:	460f      	mov	r7, r1
 8005a32:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005a36:	f109 0908 	add.w	r9, r9, #8
 8005a3a:	e7e0      	b.n	80059fe <_dtoa_r+0x36e>
 8005a3c:	f000 809f 	beq.w	8005b7e <_dtoa_r+0x4ee>
 8005a40:	f1cb 0600 	rsb	r6, fp, #0
 8005a44:	4ba1      	ldr	r3, [pc, #644]	; (8005ccc <_dtoa_r+0x63c>)
 8005a46:	4fa2      	ldr	r7, [pc, #648]	; (8005cd0 <_dtoa_r+0x640>)
 8005a48:	f006 020f 	and.w	r2, r6, #15
 8005a4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a54:	ec51 0b18 	vmov	r0, r1, d8
 8005a58:	f7fa fdce 	bl	80005f8 <__aeabi_dmul>
 8005a5c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a60:	1136      	asrs	r6, r6, #4
 8005a62:	2300      	movs	r3, #0
 8005a64:	2502      	movs	r5, #2
 8005a66:	2e00      	cmp	r6, #0
 8005a68:	d17e      	bne.n	8005b68 <_dtoa_r+0x4d8>
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d1d0      	bne.n	8005a10 <_dtoa_r+0x380>
 8005a6e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005a70:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005a74:	2b00      	cmp	r3, #0
 8005a76:	f000 8084 	beq.w	8005b82 <_dtoa_r+0x4f2>
 8005a7a:	4b96      	ldr	r3, [pc, #600]	; (8005cd4 <_dtoa_r+0x644>)
 8005a7c:	2200      	movs	r2, #0
 8005a7e:	4640      	mov	r0, r8
 8005a80:	4649      	mov	r1, r9
 8005a82:	f7fb f82b 	bl	8000adc <__aeabi_dcmplt>
 8005a86:	2800      	cmp	r0, #0
 8005a88:	d07b      	beq.n	8005b82 <_dtoa_r+0x4f2>
 8005a8a:	9b04      	ldr	r3, [sp, #16]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d078      	beq.n	8005b82 <_dtoa_r+0x4f2>
 8005a90:	9b01      	ldr	r3, [sp, #4]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	dd39      	ble.n	8005b0a <_dtoa_r+0x47a>
 8005a96:	4b90      	ldr	r3, [pc, #576]	; (8005cd8 <_dtoa_r+0x648>)
 8005a98:	2200      	movs	r2, #0
 8005a9a:	4640      	mov	r0, r8
 8005a9c:	4649      	mov	r1, r9
 8005a9e:	f7fa fdab 	bl	80005f8 <__aeabi_dmul>
 8005aa2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005aa6:	9e01      	ldr	r6, [sp, #4]
 8005aa8:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005aac:	3501      	adds	r5, #1
 8005aae:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005ab2:	4628      	mov	r0, r5
 8005ab4:	f7fa fd36 	bl	8000524 <__aeabi_i2d>
 8005ab8:	4642      	mov	r2, r8
 8005aba:	464b      	mov	r3, r9
 8005abc:	f7fa fd9c 	bl	80005f8 <__aeabi_dmul>
 8005ac0:	4b86      	ldr	r3, [pc, #536]	; (8005cdc <_dtoa_r+0x64c>)
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f7fa fbe2 	bl	800028c <__adddf3>
 8005ac8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005acc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005ad0:	9303      	str	r3, [sp, #12]
 8005ad2:	2e00      	cmp	r6, #0
 8005ad4:	d158      	bne.n	8005b88 <_dtoa_r+0x4f8>
 8005ad6:	4b82      	ldr	r3, [pc, #520]	; (8005ce0 <_dtoa_r+0x650>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	4640      	mov	r0, r8
 8005adc:	4649      	mov	r1, r9
 8005ade:	f7fa fbd3 	bl	8000288 <__aeabi_dsub>
 8005ae2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005ae6:	4680      	mov	r8, r0
 8005ae8:	4689      	mov	r9, r1
 8005aea:	f7fb f815 	bl	8000b18 <__aeabi_dcmpgt>
 8005aee:	2800      	cmp	r0, #0
 8005af0:	f040 8296 	bne.w	8006020 <_dtoa_r+0x990>
 8005af4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005af8:	4640      	mov	r0, r8
 8005afa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005afe:	4649      	mov	r1, r9
 8005b00:	f7fa ffec 	bl	8000adc <__aeabi_dcmplt>
 8005b04:	2800      	cmp	r0, #0
 8005b06:	f040 8289 	bne.w	800601c <_dtoa_r+0x98c>
 8005b0a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005b0e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	f2c0 814e 	blt.w	8005db2 <_dtoa_r+0x722>
 8005b16:	f1bb 0f0e 	cmp.w	fp, #14
 8005b1a:	f300 814a 	bgt.w	8005db2 <_dtoa_r+0x722>
 8005b1e:	4b6b      	ldr	r3, [pc, #428]	; (8005ccc <_dtoa_r+0x63c>)
 8005b20:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005b24:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005b28:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f280 80dc 	bge.w	8005ce8 <_dtoa_r+0x658>
 8005b30:	9b04      	ldr	r3, [sp, #16]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	f300 80d8 	bgt.w	8005ce8 <_dtoa_r+0x658>
 8005b38:	f040 826f 	bne.w	800601a <_dtoa_r+0x98a>
 8005b3c:	4b68      	ldr	r3, [pc, #416]	; (8005ce0 <_dtoa_r+0x650>)
 8005b3e:	2200      	movs	r2, #0
 8005b40:	4640      	mov	r0, r8
 8005b42:	4649      	mov	r1, r9
 8005b44:	f7fa fd58 	bl	80005f8 <__aeabi_dmul>
 8005b48:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005b4c:	f7fa ffda 	bl	8000b04 <__aeabi_dcmpge>
 8005b50:	9e04      	ldr	r6, [sp, #16]
 8005b52:	4637      	mov	r7, r6
 8005b54:	2800      	cmp	r0, #0
 8005b56:	f040 8245 	bne.w	8005fe4 <_dtoa_r+0x954>
 8005b5a:	9d00      	ldr	r5, [sp, #0]
 8005b5c:	2331      	movs	r3, #49	; 0x31
 8005b5e:	f805 3b01 	strb.w	r3, [r5], #1
 8005b62:	f10b 0b01 	add.w	fp, fp, #1
 8005b66:	e241      	b.n	8005fec <_dtoa_r+0x95c>
 8005b68:	07f2      	lsls	r2, r6, #31
 8005b6a:	d505      	bpl.n	8005b78 <_dtoa_r+0x4e8>
 8005b6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b70:	f7fa fd42 	bl	80005f8 <__aeabi_dmul>
 8005b74:	3501      	adds	r5, #1
 8005b76:	2301      	movs	r3, #1
 8005b78:	1076      	asrs	r6, r6, #1
 8005b7a:	3708      	adds	r7, #8
 8005b7c:	e773      	b.n	8005a66 <_dtoa_r+0x3d6>
 8005b7e:	2502      	movs	r5, #2
 8005b80:	e775      	b.n	8005a6e <_dtoa_r+0x3de>
 8005b82:	9e04      	ldr	r6, [sp, #16]
 8005b84:	465f      	mov	r7, fp
 8005b86:	e792      	b.n	8005aae <_dtoa_r+0x41e>
 8005b88:	9900      	ldr	r1, [sp, #0]
 8005b8a:	4b50      	ldr	r3, [pc, #320]	; (8005ccc <_dtoa_r+0x63c>)
 8005b8c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005b90:	4431      	add	r1, r6
 8005b92:	9102      	str	r1, [sp, #8]
 8005b94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005b96:	eeb0 9a47 	vmov.f32	s18, s14
 8005b9a:	eef0 9a67 	vmov.f32	s19, s15
 8005b9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005ba2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005ba6:	2900      	cmp	r1, #0
 8005ba8:	d044      	beq.n	8005c34 <_dtoa_r+0x5a4>
 8005baa:	494e      	ldr	r1, [pc, #312]	; (8005ce4 <_dtoa_r+0x654>)
 8005bac:	2000      	movs	r0, #0
 8005bae:	f7fa fe4d 	bl	800084c <__aeabi_ddiv>
 8005bb2:	ec53 2b19 	vmov	r2, r3, d9
 8005bb6:	f7fa fb67 	bl	8000288 <__aeabi_dsub>
 8005bba:	9d00      	ldr	r5, [sp, #0]
 8005bbc:	ec41 0b19 	vmov	d9, r0, r1
 8005bc0:	4649      	mov	r1, r9
 8005bc2:	4640      	mov	r0, r8
 8005bc4:	f7fa ffc8 	bl	8000b58 <__aeabi_d2iz>
 8005bc8:	4606      	mov	r6, r0
 8005bca:	f7fa fcab 	bl	8000524 <__aeabi_i2d>
 8005bce:	4602      	mov	r2, r0
 8005bd0:	460b      	mov	r3, r1
 8005bd2:	4640      	mov	r0, r8
 8005bd4:	4649      	mov	r1, r9
 8005bd6:	f7fa fb57 	bl	8000288 <__aeabi_dsub>
 8005bda:	3630      	adds	r6, #48	; 0x30
 8005bdc:	f805 6b01 	strb.w	r6, [r5], #1
 8005be0:	ec53 2b19 	vmov	r2, r3, d9
 8005be4:	4680      	mov	r8, r0
 8005be6:	4689      	mov	r9, r1
 8005be8:	f7fa ff78 	bl	8000adc <__aeabi_dcmplt>
 8005bec:	2800      	cmp	r0, #0
 8005bee:	d164      	bne.n	8005cba <_dtoa_r+0x62a>
 8005bf0:	4642      	mov	r2, r8
 8005bf2:	464b      	mov	r3, r9
 8005bf4:	4937      	ldr	r1, [pc, #220]	; (8005cd4 <_dtoa_r+0x644>)
 8005bf6:	2000      	movs	r0, #0
 8005bf8:	f7fa fb46 	bl	8000288 <__aeabi_dsub>
 8005bfc:	ec53 2b19 	vmov	r2, r3, d9
 8005c00:	f7fa ff6c 	bl	8000adc <__aeabi_dcmplt>
 8005c04:	2800      	cmp	r0, #0
 8005c06:	f040 80b6 	bne.w	8005d76 <_dtoa_r+0x6e6>
 8005c0a:	9b02      	ldr	r3, [sp, #8]
 8005c0c:	429d      	cmp	r5, r3
 8005c0e:	f43f af7c 	beq.w	8005b0a <_dtoa_r+0x47a>
 8005c12:	4b31      	ldr	r3, [pc, #196]	; (8005cd8 <_dtoa_r+0x648>)
 8005c14:	ec51 0b19 	vmov	r0, r1, d9
 8005c18:	2200      	movs	r2, #0
 8005c1a:	f7fa fced 	bl	80005f8 <__aeabi_dmul>
 8005c1e:	4b2e      	ldr	r3, [pc, #184]	; (8005cd8 <_dtoa_r+0x648>)
 8005c20:	ec41 0b19 	vmov	d9, r0, r1
 8005c24:	2200      	movs	r2, #0
 8005c26:	4640      	mov	r0, r8
 8005c28:	4649      	mov	r1, r9
 8005c2a:	f7fa fce5 	bl	80005f8 <__aeabi_dmul>
 8005c2e:	4680      	mov	r8, r0
 8005c30:	4689      	mov	r9, r1
 8005c32:	e7c5      	b.n	8005bc0 <_dtoa_r+0x530>
 8005c34:	ec51 0b17 	vmov	r0, r1, d7
 8005c38:	f7fa fcde 	bl	80005f8 <__aeabi_dmul>
 8005c3c:	9b02      	ldr	r3, [sp, #8]
 8005c3e:	9d00      	ldr	r5, [sp, #0]
 8005c40:	930f      	str	r3, [sp, #60]	; 0x3c
 8005c42:	ec41 0b19 	vmov	d9, r0, r1
 8005c46:	4649      	mov	r1, r9
 8005c48:	4640      	mov	r0, r8
 8005c4a:	f7fa ff85 	bl	8000b58 <__aeabi_d2iz>
 8005c4e:	4606      	mov	r6, r0
 8005c50:	f7fa fc68 	bl	8000524 <__aeabi_i2d>
 8005c54:	3630      	adds	r6, #48	; 0x30
 8005c56:	4602      	mov	r2, r0
 8005c58:	460b      	mov	r3, r1
 8005c5a:	4640      	mov	r0, r8
 8005c5c:	4649      	mov	r1, r9
 8005c5e:	f7fa fb13 	bl	8000288 <__aeabi_dsub>
 8005c62:	f805 6b01 	strb.w	r6, [r5], #1
 8005c66:	9b02      	ldr	r3, [sp, #8]
 8005c68:	429d      	cmp	r5, r3
 8005c6a:	4680      	mov	r8, r0
 8005c6c:	4689      	mov	r9, r1
 8005c6e:	f04f 0200 	mov.w	r2, #0
 8005c72:	d124      	bne.n	8005cbe <_dtoa_r+0x62e>
 8005c74:	4b1b      	ldr	r3, [pc, #108]	; (8005ce4 <_dtoa_r+0x654>)
 8005c76:	ec51 0b19 	vmov	r0, r1, d9
 8005c7a:	f7fa fb07 	bl	800028c <__adddf3>
 8005c7e:	4602      	mov	r2, r0
 8005c80:	460b      	mov	r3, r1
 8005c82:	4640      	mov	r0, r8
 8005c84:	4649      	mov	r1, r9
 8005c86:	f7fa ff47 	bl	8000b18 <__aeabi_dcmpgt>
 8005c8a:	2800      	cmp	r0, #0
 8005c8c:	d173      	bne.n	8005d76 <_dtoa_r+0x6e6>
 8005c8e:	ec53 2b19 	vmov	r2, r3, d9
 8005c92:	4914      	ldr	r1, [pc, #80]	; (8005ce4 <_dtoa_r+0x654>)
 8005c94:	2000      	movs	r0, #0
 8005c96:	f7fa faf7 	bl	8000288 <__aeabi_dsub>
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	460b      	mov	r3, r1
 8005c9e:	4640      	mov	r0, r8
 8005ca0:	4649      	mov	r1, r9
 8005ca2:	f7fa ff1b 	bl	8000adc <__aeabi_dcmplt>
 8005ca6:	2800      	cmp	r0, #0
 8005ca8:	f43f af2f 	beq.w	8005b0a <_dtoa_r+0x47a>
 8005cac:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8005cae:	1e6b      	subs	r3, r5, #1
 8005cb0:	930f      	str	r3, [sp, #60]	; 0x3c
 8005cb2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8005cb6:	2b30      	cmp	r3, #48	; 0x30
 8005cb8:	d0f8      	beq.n	8005cac <_dtoa_r+0x61c>
 8005cba:	46bb      	mov	fp, r7
 8005cbc:	e04a      	b.n	8005d54 <_dtoa_r+0x6c4>
 8005cbe:	4b06      	ldr	r3, [pc, #24]	; (8005cd8 <_dtoa_r+0x648>)
 8005cc0:	f7fa fc9a 	bl	80005f8 <__aeabi_dmul>
 8005cc4:	4680      	mov	r8, r0
 8005cc6:	4689      	mov	r9, r1
 8005cc8:	e7bd      	b.n	8005c46 <_dtoa_r+0x5b6>
 8005cca:	bf00      	nop
 8005ccc:	080078a8 	.word	0x080078a8
 8005cd0:	08007880 	.word	0x08007880
 8005cd4:	3ff00000 	.word	0x3ff00000
 8005cd8:	40240000 	.word	0x40240000
 8005cdc:	401c0000 	.word	0x401c0000
 8005ce0:	40140000 	.word	0x40140000
 8005ce4:	3fe00000 	.word	0x3fe00000
 8005ce8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005cec:	9d00      	ldr	r5, [sp, #0]
 8005cee:	4642      	mov	r2, r8
 8005cf0:	464b      	mov	r3, r9
 8005cf2:	4630      	mov	r0, r6
 8005cf4:	4639      	mov	r1, r7
 8005cf6:	f7fa fda9 	bl	800084c <__aeabi_ddiv>
 8005cfa:	f7fa ff2d 	bl	8000b58 <__aeabi_d2iz>
 8005cfe:	9001      	str	r0, [sp, #4]
 8005d00:	f7fa fc10 	bl	8000524 <__aeabi_i2d>
 8005d04:	4642      	mov	r2, r8
 8005d06:	464b      	mov	r3, r9
 8005d08:	f7fa fc76 	bl	80005f8 <__aeabi_dmul>
 8005d0c:	4602      	mov	r2, r0
 8005d0e:	460b      	mov	r3, r1
 8005d10:	4630      	mov	r0, r6
 8005d12:	4639      	mov	r1, r7
 8005d14:	f7fa fab8 	bl	8000288 <__aeabi_dsub>
 8005d18:	9e01      	ldr	r6, [sp, #4]
 8005d1a:	9f04      	ldr	r7, [sp, #16]
 8005d1c:	3630      	adds	r6, #48	; 0x30
 8005d1e:	f805 6b01 	strb.w	r6, [r5], #1
 8005d22:	9e00      	ldr	r6, [sp, #0]
 8005d24:	1bae      	subs	r6, r5, r6
 8005d26:	42b7      	cmp	r7, r6
 8005d28:	4602      	mov	r2, r0
 8005d2a:	460b      	mov	r3, r1
 8005d2c:	d134      	bne.n	8005d98 <_dtoa_r+0x708>
 8005d2e:	f7fa faad 	bl	800028c <__adddf3>
 8005d32:	4642      	mov	r2, r8
 8005d34:	464b      	mov	r3, r9
 8005d36:	4606      	mov	r6, r0
 8005d38:	460f      	mov	r7, r1
 8005d3a:	f7fa feed 	bl	8000b18 <__aeabi_dcmpgt>
 8005d3e:	b9c8      	cbnz	r0, 8005d74 <_dtoa_r+0x6e4>
 8005d40:	4642      	mov	r2, r8
 8005d42:	464b      	mov	r3, r9
 8005d44:	4630      	mov	r0, r6
 8005d46:	4639      	mov	r1, r7
 8005d48:	f7fa febe 	bl	8000ac8 <__aeabi_dcmpeq>
 8005d4c:	b110      	cbz	r0, 8005d54 <_dtoa_r+0x6c4>
 8005d4e:	9b01      	ldr	r3, [sp, #4]
 8005d50:	07db      	lsls	r3, r3, #31
 8005d52:	d40f      	bmi.n	8005d74 <_dtoa_r+0x6e4>
 8005d54:	4651      	mov	r1, sl
 8005d56:	4620      	mov	r0, r4
 8005d58:	f000 fbcc 	bl	80064f4 <_Bfree>
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005d60:	702b      	strb	r3, [r5, #0]
 8005d62:	f10b 0301 	add.w	r3, fp, #1
 8005d66:	6013      	str	r3, [r2, #0]
 8005d68:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	f43f ace2 	beq.w	8005734 <_dtoa_r+0xa4>
 8005d70:	601d      	str	r5, [r3, #0]
 8005d72:	e4df      	b.n	8005734 <_dtoa_r+0xa4>
 8005d74:	465f      	mov	r7, fp
 8005d76:	462b      	mov	r3, r5
 8005d78:	461d      	mov	r5, r3
 8005d7a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005d7e:	2a39      	cmp	r2, #57	; 0x39
 8005d80:	d106      	bne.n	8005d90 <_dtoa_r+0x700>
 8005d82:	9a00      	ldr	r2, [sp, #0]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	d1f7      	bne.n	8005d78 <_dtoa_r+0x6e8>
 8005d88:	9900      	ldr	r1, [sp, #0]
 8005d8a:	2230      	movs	r2, #48	; 0x30
 8005d8c:	3701      	adds	r7, #1
 8005d8e:	700a      	strb	r2, [r1, #0]
 8005d90:	781a      	ldrb	r2, [r3, #0]
 8005d92:	3201      	adds	r2, #1
 8005d94:	701a      	strb	r2, [r3, #0]
 8005d96:	e790      	b.n	8005cba <_dtoa_r+0x62a>
 8005d98:	4ba3      	ldr	r3, [pc, #652]	; (8006028 <_dtoa_r+0x998>)
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f7fa fc2c 	bl	80005f8 <__aeabi_dmul>
 8005da0:	2200      	movs	r2, #0
 8005da2:	2300      	movs	r3, #0
 8005da4:	4606      	mov	r6, r0
 8005da6:	460f      	mov	r7, r1
 8005da8:	f7fa fe8e 	bl	8000ac8 <__aeabi_dcmpeq>
 8005dac:	2800      	cmp	r0, #0
 8005dae:	d09e      	beq.n	8005cee <_dtoa_r+0x65e>
 8005db0:	e7d0      	b.n	8005d54 <_dtoa_r+0x6c4>
 8005db2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005db4:	2a00      	cmp	r2, #0
 8005db6:	f000 80ca 	beq.w	8005f4e <_dtoa_r+0x8be>
 8005dba:	9a07      	ldr	r2, [sp, #28]
 8005dbc:	2a01      	cmp	r2, #1
 8005dbe:	f300 80ad 	bgt.w	8005f1c <_dtoa_r+0x88c>
 8005dc2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005dc4:	2a00      	cmp	r2, #0
 8005dc6:	f000 80a5 	beq.w	8005f14 <_dtoa_r+0x884>
 8005dca:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005dce:	9e08      	ldr	r6, [sp, #32]
 8005dd0:	9d05      	ldr	r5, [sp, #20]
 8005dd2:	9a05      	ldr	r2, [sp, #20]
 8005dd4:	441a      	add	r2, r3
 8005dd6:	9205      	str	r2, [sp, #20]
 8005dd8:	9a06      	ldr	r2, [sp, #24]
 8005dda:	2101      	movs	r1, #1
 8005ddc:	441a      	add	r2, r3
 8005dde:	4620      	mov	r0, r4
 8005de0:	9206      	str	r2, [sp, #24]
 8005de2:	f000 fc3d 	bl	8006660 <__i2b>
 8005de6:	4607      	mov	r7, r0
 8005de8:	b165      	cbz	r5, 8005e04 <_dtoa_r+0x774>
 8005dea:	9b06      	ldr	r3, [sp, #24]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	dd09      	ble.n	8005e04 <_dtoa_r+0x774>
 8005df0:	42ab      	cmp	r3, r5
 8005df2:	9a05      	ldr	r2, [sp, #20]
 8005df4:	bfa8      	it	ge
 8005df6:	462b      	movge	r3, r5
 8005df8:	1ad2      	subs	r2, r2, r3
 8005dfa:	9205      	str	r2, [sp, #20]
 8005dfc:	9a06      	ldr	r2, [sp, #24]
 8005dfe:	1aed      	subs	r5, r5, r3
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	9306      	str	r3, [sp, #24]
 8005e04:	9b08      	ldr	r3, [sp, #32]
 8005e06:	b1f3      	cbz	r3, 8005e46 <_dtoa_r+0x7b6>
 8005e08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	f000 80a3 	beq.w	8005f56 <_dtoa_r+0x8c6>
 8005e10:	2e00      	cmp	r6, #0
 8005e12:	dd10      	ble.n	8005e36 <_dtoa_r+0x7a6>
 8005e14:	4639      	mov	r1, r7
 8005e16:	4632      	mov	r2, r6
 8005e18:	4620      	mov	r0, r4
 8005e1a:	f000 fce1 	bl	80067e0 <__pow5mult>
 8005e1e:	4652      	mov	r2, sl
 8005e20:	4601      	mov	r1, r0
 8005e22:	4607      	mov	r7, r0
 8005e24:	4620      	mov	r0, r4
 8005e26:	f000 fc31 	bl	800668c <__multiply>
 8005e2a:	4651      	mov	r1, sl
 8005e2c:	4680      	mov	r8, r0
 8005e2e:	4620      	mov	r0, r4
 8005e30:	f000 fb60 	bl	80064f4 <_Bfree>
 8005e34:	46c2      	mov	sl, r8
 8005e36:	9b08      	ldr	r3, [sp, #32]
 8005e38:	1b9a      	subs	r2, r3, r6
 8005e3a:	d004      	beq.n	8005e46 <_dtoa_r+0x7b6>
 8005e3c:	4651      	mov	r1, sl
 8005e3e:	4620      	mov	r0, r4
 8005e40:	f000 fcce 	bl	80067e0 <__pow5mult>
 8005e44:	4682      	mov	sl, r0
 8005e46:	2101      	movs	r1, #1
 8005e48:	4620      	mov	r0, r4
 8005e4a:	f000 fc09 	bl	8006660 <__i2b>
 8005e4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	4606      	mov	r6, r0
 8005e54:	f340 8081 	ble.w	8005f5a <_dtoa_r+0x8ca>
 8005e58:	461a      	mov	r2, r3
 8005e5a:	4601      	mov	r1, r0
 8005e5c:	4620      	mov	r0, r4
 8005e5e:	f000 fcbf 	bl	80067e0 <__pow5mult>
 8005e62:	9b07      	ldr	r3, [sp, #28]
 8005e64:	2b01      	cmp	r3, #1
 8005e66:	4606      	mov	r6, r0
 8005e68:	dd7a      	ble.n	8005f60 <_dtoa_r+0x8d0>
 8005e6a:	f04f 0800 	mov.w	r8, #0
 8005e6e:	6933      	ldr	r3, [r6, #16]
 8005e70:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8005e74:	6918      	ldr	r0, [r3, #16]
 8005e76:	f000 fba5 	bl	80065c4 <__hi0bits>
 8005e7a:	f1c0 0020 	rsb	r0, r0, #32
 8005e7e:	9b06      	ldr	r3, [sp, #24]
 8005e80:	4418      	add	r0, r3
 8005e82:	f010 001f 	ands.w	r0, r0, #31
 8005e86:	f000 8094 	beq.w	8005fb2 <_dtoa_r+0x922>
 8005e8a:	f1c0 0320 	rsb	r3, r0, #32
 8005e8e:	2b04      	cmp	r3, #4
 8005e90:	f340 8085 	ble.w	8005f9e <_dtoa_r+0x90e>
 8005e94:	9b05      	ldr	r3, [sp, #20]
 8005e96:	f1c0 001c 	rsb	r0, r0, #28
 8005e9a:	4403      	add	r3, r0
 8005e9c:	9305      	str	r3, [sp, #20]
 8005e9e:	9b06      	ldr	r3, [sp, #24]
 8005ea0:	4403      	add	r3, r0
 8005ea2:	4405      	add	r5, r0
 8005ea4:	9306      	str	r3, [sp, #24]
 8005ea6:	9b05      	ldr	r3, [sp, #20]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	dd05      	ble.n	8005eb8 <_dtoa_r+0x828>
 8005eac:	4651      	mov	r1, sl
 8005eae:	461a      	mov	r2, r3
 8005eb0:	4620      	mov	r0, r4
 8005eb2:	f000 fcef 	bl	8006894 <__lshift>
 8005eb6:	4682      	mov	sl, r0
 8005eb8:	9b06      	ldr	r3, [sp, #24]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	dd05      	ble.n	8005eca <_dtoa_r+0x83a>
 8005ebe:	4631      	mov	r1, r6
 8005ec0:	461a      	mov	r2, r3
 8005ec2:	4620      	mov	r0, r4
 8005ec4:	f000 fce6 	bl	8006894 <__lshift>
 8005ec8:	4606      	mov	r6, r0
 8005eca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d072      	beq.n	8005fb6 <_dtoa_r+0x926>
 8005ed0:	4631      	mov	r1, r6
 8005ed2:	4650      	mov	r0, sl
 8005ed4:	f000 fd4a 	bl	800696c <__mcmp>
 8005ed8:	2800      	cmp	r0, #0
 8005eda:	da6c      	bge.n	8005fb6 <_dtoa_r+0x926>
 8005edc:	2300      	movs	r3, #0
 8005ede:	4651      	mov	r1, sl
 8005ee0:	220a      	movs	r2, #10
 8005ee2:	4620      	mov	r0, r4
 8005ee4:	f000 fb28 	bl	8006538 <__multadd>
 8005ee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005eea:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005eee:	4682      	mov	sl, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	f000 81b0 	beq.w	8006256 <_dtoa_r+0xbc6>
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	4639      	mov	r1, r7
 8005efa:	220a      	movs	r2, #10
 8005efc:	4620      	mov	r0, r4
 8005efe:	f000 fb1b 	bl	8006538 <__multadd>
 8005f02:	9b01      	ldr	r3, [sp, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	4607      	mov	r7, r0
 8005f08:	f300 8096 	bgt.w	8006038 <_dtoa_r+0x9a8>
 8005f0c:	9b07      	ldr	r3, [sp, #28]
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	dc59      	bgt.n	8005fc6 <_dtoa_r+0x936>
 8005f12:	e091      	b.n	8006038 <_dtoa_r+0x9a8>
 8005f14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005f16:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005f1a:	e758      	b.n	8005dce <_dtoa_r+0x73e>
 8005f1c:	9b04      	ldr	r3, [sp, #16]
 8005f1e:	1e5e      	subs	r6, r3, #1
 8005f20:	9b08      	ldr	r3, [sp, #32]
 8005f22:	42b3      	cmp	r3, r6
 8005f24:	bfbf      	itttt	lt
 8005f26:	9b08      	ldrlt	r3, [sp, #32]
 8005f28:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8005f2a:	9608      	strlt	r6, [sp, #32]
 8005f2c:	1af3      	sublt	r3, r6, r3
 8005f2e:	bfb4      	ite	lt
 8005f30:	18d2      	addlt	r2, r2, r3
 8005f32:	1b9e      	subge	r6, r3, r6
 8005f34:	9b04      	ldr	r3, [sp, #16]
 8005f36:	bfbc      	itt	lt
 8005f38:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8005f3a:	2600      	movlt	r6, #0
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	bfb7      	itett	lt
 8005f40:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8005f44:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8005f48:	1a9d      	sublt	r5, r3, r2
 8005f4a:	2300      	movlt	r3, #0
 8005f4c:	e741      	b.n	8005dd2 <_dtoa_r+0x742>
 8005f4e:	9e08      	ldr	r6, [sp, #32]
 8005f50:	9d05      	ldr	r5, [sp, #20]
 8005f52:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8005f54:	e748      	b.n	8005de8 <_dtoa_r+0x758>
 8005f56:	9a08      	ldr	r2, [sp, #32]
 8005f58:	e770      	b.n	8005e3c <_dtoa_r+0x7ac>
 8005f5a:	9b07      	ldr	r3, [sp, #28]
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	dc19      	bgt.n	8005f94 <_dtoa_r+0x904>
 8005f60:	9b02      	ldr	r3, [sp, #8]
 8005f62:	b9bb      	cbnz	r3, 8005f94 <_dtoa_r+0x904>
 8005f64:	9b03      	ldr	r3, [sp, #12]
 8005f66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005f6a:	b99b      	cbnz	r3, 8005f94 <_dtoa_r+0x904>
 8005f6c:	9b03      	ldr	r3, [sp, #12]
 8005f6e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f72:	0d1b      	lsrs	r3, r3, #20
 8005f74:	051b      	lsls	r3, r3, #20
 8005f76:	b183      	cbz	r3, 8005f9a <_dtoa_r+0x90a>
 8005f78:	9b05      	ldr	r3, [sp, #20]
 8005f7a:	3301      	adds	r3, #1
 8005f7c:	9305      	str	r3, [sp, #20]
 8005f7e:	9b06      	ldr	r3, [sp, #24]
 8005f80:	3301      	adds	r3, #1
 8005f82:	9306      	str	r3, [sp, #24]
 8005f84:	f04f 0801 	mov.w	r8, #1
 8005f88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	f47f af6f 	bne.w	8005e6e <_dtoa_r+0x7de>
 8005f90:	2001      	movs	r0, #1
 8005f92:	e774      	b.n	8005e7e <_dtoa_r+0x7ee>
 8005f94:	f04f 0800 	mov.w	r8, #0
 8005f98:	e7f6      	b.n	8005f88 <_dtoa_r+0x8f8>
 8005f9a:	4698      	mov	r8, r3
 8005f9c:	e7f4      	b.n	8005f88 <_dtoa_r+0x8f8>
 8005f9e:	d082      	beq.n	8005ea6 <_dtoa_r+0x816>
 8005fa0:	9a05      	ldr	r2, [sp, #20]
 8005fa2:	331c      	adds	r3, #28
 8005fa4:	441a      	add	r2, r3
 8005fa6:	9205      	str	r2, [sp, #20]
 8005fa8:	9a06      	ldr	r2, [sp, #24]
 8005faa:	441a      	add	r2, r3
 8005fac:	441d      	add	r5, r3
 8005fae:	9206      	str	r2, [sp, #24]
 8005fb0:	e779      	b.n	8005ea6 <_dtoa_r+0x816>
 8005fb2:	4603      	mov	r3, r0
 8005fb4:	e7f4      	b.n	8005fa0 <_dtoa_r+0x910>
 8005fb6:	9b04      	ldr	r3, [sp, #16]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	dc37      	bgt.n	800602c <_dtoa_r+0x99c>
 8005fbc:	9b07      	ldr	r3, [sp, #28]
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	dd34      	ble.n	800602c <_dtoa_r+0x99c>
 8005fc2:	9b04      	ldr	r3, [sp, #16]
 8005fc4:	9301      	str	r3, [sp, #4]
 8005fc6:	9b01      	ldr	r3, [sp, #4]
 8005fc8:	b963      	cbnz	r3, 8005fe4 <_dtoa_r+0x954>
 8005fca:	4631      	mov	r1, r6
 8005fcc:	2205      	movs	r2, #5
 8005fce:	4620      	mov	r0, r4
 8005fd0:	f000 fab2 	bl	8006538 <__multadd>
 8005fd4:	4601      	mov	r1, r0
 8005fd6:	4606      	mov	r6, r0
 8005fd8:	4650      	mov	r0, sl
 8005fda:	f000 fcc7 	bl	800696c <__mcmp>
 8005fde:	2800      	cmp	r0, #0
 8005fe0:	f73f adbb 	bgt.w	8005b5a <_dtoa_r+0x4ca>
 8005fe4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005fe6:	9d00      	ldr	r5, [sp, #0]
 8005fe8:	ea6f 0b03 	mvn.w	fp, r3
 8005fec:	f04f 0800 	mov.w	r8, #0
 8005ff0:	4631      	mov	r1, r6
 8005ff2:	4620      	mov	r0, r4
 8005ff4:	f000 fa7e 	bl	80064f4 <_Bfree>
 8005ff8:	2f00      	cmp	r7, #0
 8005ffa:	f43f aeab 	beq.w	8005d54 <_dtoa_r+0x6c4>
 8005ffe:	f1b8 0f00 	cmp.w	r8, #0
 8006002:	d005      	beq.n	8006010 <_dtoa_r+0x980>
 8006004:	45b8      	cmp	r8, r7
 8006006:	d003      	beq.n	8006010 <_dtoa_r+0x980>
 8006008:	4641      	mov	r1, r8
 800600a:	4620      	mov	r0, r4
 800600c:	f000 fa72 	bl	80064f4 <_Bfree>
 8006010:	4639      	mov	r1, r7
 8006012:	4620      	mov	r0, r4
 8006014:	f000 fa6e 	bl	80064f4 <_Bfree>
 8006018:	e69c      	b.n	8005d54 <_dtoa_r+0x6c4>
 800601a:	2600      	movs	r6, #0
 800601c:	4637      	mov	r7, r6
 800601e:	e7e1      	b.n	8005fe4 <_dtoa_r+0x954>
 8006020:	46bb      	mov	fp, r7
 8006022:	4637      	mov	r7, r6
 8006024:	e599      	b.n	8005b5a <_dtoa_r+0x4ca>
 8006026:	bf00      	nop
 8006028:	40240000 	.word	0x40240000
 800602c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800602e:	2b00      	cmp	r3, #0
 8006030:	f000 80c8 	beq.w	80061c4 <_dtoa_r+0xb34>
 8006034:	9b04      	ldr	r3, [sp, #16]
 8006036:	9301      	str	r3, [sp, #4]
 8006038:	2d00      	cmp	r5, #0
 800603a:	dd05      	ble.n	8006048 <_dtoa_r+0x9b8>
 800603c:	4639      	mov	r1, r7
 800603e:	462a      	mov	r2, r5
 8006040:	4620      	mov	r0, r4
 8006042:	f000 fc27 	bl	8006894 <__lshift>
 8006046:	4607      	mov	r7, r0
 8006048:	f1b8 0f00 	cmp.w	r8, #0
 800604c:	d05b      	beq.n	8006106 <_dtoa_r+0xa76>
 800604e:	6879      	ldr	r1, [r7, #4]
 8006050:	4620      	mov	r0, r4
 8006052:	f000 fa0f 	bl	8006474 <_Balloc>
 8006056:	4605      	mov	r5, r0
 8006058:	b928      	cbnz	r0, 8006066 <_dtoa_r+0x9d6>
 800605a:	4b83      	ldr	r3, [pc, #524]	; (8006268 <_dtoa_r+0xbd8>)
 800605c:	4602      	mov	r2, r0
 800605e:	f240 21ef 	movw	r1, #751	; 0x2ef
 8006062:	f7ff bb2e 	b.w	80056c2 <_dtoa_r+0x32>
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	3202      	adds	r2, #2
 800606a:	0092      	lsls	r2, r2, #2
 800606c:	f107 010c 	add.w	r1, r7, #12
 8006070:	300c      	adds	r0, #12
 8006072:	f000 ffab 	bl	8006fcc <memcpy>
 8006076:	2201      	movs	r2, #1
 8006078:	4629      	mov	r1, r5
 800607a:	4620      	mov	r0, r4
 800607c:	f000 fc0a 	bl	8006894 <__lshift>
 8006080:	9b00      	ldr	r3, [sp, #0]
 8006082:	3301      	adds	r3, #1
 8006084:	9304      	str	r3, [sp, #16]
 8006086:	e9dd 2300 	ldrd	r2, r3, [sp]
 800608a:	4413      	add	r3, r2
 800608c:	9308      	str	r3, [sp, #32]
 800608e:	9b02      	ldr	r3, [sp, #8]
 8006090:	f003 0301 	and.w	r3, r3, #1
 8006094:	46b8      	mov	r8, r7
 8006096:	9306      	str	r3, [sp, #24]
 8006098:	4607      	mov	r7, r0
 800609a:	9b04      	ldr	r3, [sp, #16]
 800609c:	4631      	mov	r1, r6
 800609e:	3b01      	subs	r3, #1
 80060a0:	4650      	mov	r0, sl
 80060a2:	9301      	str	r3, [sp, #4]
 80060a4:	f7ff fa69 	bl	800557a <quorem>
 80060a8:	4641      	mov	r1, r8
 80060aa:	9002      	str	r0, [sp, #8]
 80060ac:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80060b0:	4650      	mov	r0, sl
 80060b2:	f000 fc5b 	bl	800696c <__mcmp>
 80060b6:	463a      	mov	r2, r7
 80060b8:	9005      	str	r0, [sp, #20]
 80060ba:	4631      	mov	r1, r6
 80060bc:	4620      	mov	r0, r4
 80060be:	f000 fc71 	bl	80069a4 <__mdiff>
 80060c2:	68c2      	ldr	r2, [r0, #12]
 80060c4:	4605      	mov	r5, r0
 80060c6:	bb02      	cbnz	r2, 800610a <_dtoa_r+0xa7a>
 80060c8:	4601      	mov	r1, r0
 80060ca:	4650      	mov	r0, sl
 80060cc:	f000 fc4e 	bl	800696c <__mcmp>
 80060d0:	4602      	mov	r2, r0
 80060d2:	4629      	mov	r1, r5
 80060d4:	4620      	mov	r0, r4
 80060d6:	9209      	str	r2, [sp, #36]	; 0x24
 80060d8:	f000 fa0c 	bl	80064f4 <_Bfree>
 80060dc:	9b07      	ldr	r3, [sp, #28]
 80060de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80060e0:	9d04      	ldr	r5, [sp, #16]
 80060e2:	ea43 0102 	orr.w	r1, r3, r2
 80060e6:	9b06      	ldr	r3, [sp, #24]
 80060e8:	4319      	orrs	r1, r3
 80060ea:	d110      	bne.n	800610e <_dtoa_r+0xa7e>
 80060ec:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80060f0:	d029      	beq.n	8006146 <_dtoa_r+0xab6>
 80060f2:	9b05      	ldr	r3, [sp, #20]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	dd02      	ble.n	80060fe <_dtoa_r+0xa6e>
 80060f8:	9b02      	ldr	r3, [sp, #8]
 80060fa:	f103 0931 	add.w	r9, r3, #49	; 0x31
 80060fe:	9b01      	ldr	r3, [sp, #4]
 8006100:	f883 9000 	strb.w	r9, [r3]
 8006104:	e774      	b.n	8005ff0 <_dtoa_r+0x960>
 8006106:	4638      	mov	r0, r7
 8006108:	e7ba      	b.n	8006080 <_dtoa_r+0x9f0>
 800610a:	2201      	movs	r2, #1
 800610c:	e7e1      	b.n	80060d2 <_dtoa_r+0xa42>
 800610e:	9b05      	ldr	r3, [sp, #20]
 8006110:	2b00      	cmp	r3, #0
 8006112:	db04      	blt.n	800611e <_dtoa_r+0xa8e>
 8006114:	9907      	ldr	r1, [sp, #28]
 8006116:	430b      	orrs	r3, r1
 8006118:	9906      	ldr	r1, [sp, #24]
 800611a:	430b      	orrs	r3, r1
 800611c:	d120      	bne.n	8006160 <_dtoa_r+0xad0>
 800611e:	2a00      	cmp	r2, #0
 8006120:	dded      	ble.n	80060fe <_dtoa_r+0xa6e>
 8006122:	4651      	mov	r1, sl
 8006124:	2201      	movs	r2, #1
 8006126:	4620      	mov	r0, r4
 8006128:	f000 fbb4 	bl	8006894 <__lshift>
 800612c:	4631      	mov	r1, r6
 800612e:	4682      	mov	sl, r0
 8006130:	f000 fc1c 	bl	800696c <__mcmp>
 8006134:	2800      	cmp	r0, #0
 8006136:	dc03      	bgt.n	8006140 <_dtoa_r+0xab0>
 8006138:	d1e1      	bne.n	80060fe <_dtoa_r+0xa6e>
 800613a:	f019 0f01 	tst.w	r9, #1
 800613e:	d0de      	beq.n	80060fe <_dtoa_r+0xa6e>
 8006140:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006144:	d1d8      	bne.n	80060f8 <_dtoa_r+0xa68>
 8006146:	9a01      	ldr	r2, [sp, #4]
 8006148:	2339      	movs	r3, #57	; 0x39
 800614a:	7013      	strb	r3, [r2, #0]
 800614c:	462b      	mov	r3, r5
 800614e:	461d      	mov	r5, r3
 8006150:	3b01      	subs	r3, #1
 8006152:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8006156:	2a39      	cmp	r2, #57	; 0x39
 8006158:	d06c      	beq.n	8006234 <_dtoa_r+0xba4>
 800615a:	3201      	adds	r2, #1
 800615c:	701a      	strb	r2, [r3, #0]
 800615e:	e747      	b.n	8005ff0 <_dtoa_r+0x960>
 8006160:	2a00      	cmp	r2, #0
 8006162:	dd07      	ble.n	8006174 <_dtoa_r+0xae4>
 8006164:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006168:	d0ed      	beq.n	8006146 <_dtoa_r+0xab6>
 800616a:	9a01      	ldr	r2, [sp, #4]
 800616c:	f109 0301 	add.w	r3, r9, #1
 8006170:	7013      	strb	r3, [r2, #0]
 8006172:	e73d      	b.n	8005ff0 <_dtoa_r+0x960>
 8006174:	9b04      	ldr	r3, [sp, #16]
 8006176:	9a08      	ldr	r2, [sp, #32]
 8006178:	f803 9c01 	strb.w	r9, [r3, #-1]
 800617c:	4293      	cmp	r3, r2
 800617e:	d043      	beq.n	8006208 <_dtoa_r+0xb78>
 8006180:	4651      	mov	r1, sl
 8006182:	2300      	movs	r3, #0
 8006184:	220a      	movs	r2, #10
 8006186:	4620      	mov	r0, r4
 8006188:	f000 f9d6 	bl	8006538 <__multadd>
 800618c:	45b8      	cmp	r8, r7
 800618e:	4682      	mov	sl, r0
 8006190:	f04f 0300 	mov.w	r3, #0
 8006194:	f04f 020a 	mov.w	r2, #10
 8006198:	4641      	mov	r1, r8
 800619a:	4620      	mov	r0, r4
 800619c:	d107      	bne.n	80061ae <_dtoa_r+0xb1e>
 800619e:	f000 f9cb 	bl	8006538 <__multadd>
 80061a2:	4680      	mov	r8, r0
 80061a4:	4607      	mov	r7, r0
 80061a6:	9b04      	ldr	r3, [sp, #16]
 80061a8:	3301      	adds	r3, #1
 80061aa:	9304      	str	r3, [sp, #16]
 80061ac:	e775      	b.n	800609a <_dtoa_r+0xa0a>
 80061ae:	f000 f9c3 	bl	8006538 <__multadd>
 80061b2:	4639      	mov	r1, r7
 80061b4:	4680      	mov	r8, r0
 80061b6:	2300      	movs	r3, #0
 80061b8:	220a      	movs	r2, #10
 80061ba:	4620      	mov	r0, r4
 80061bc:	f000 f9bc 	bl	8006538 <__multadd>
 80061c0:	4607      	mov	r7, r0
 80061c2:	e7f0      	b.n	80061a6 <_dtoa_r+0xb16>
 80061c4:	9b04      	ldr	r3, [sp, #16]
 80061c6:	9301      	str	r3, [sp, #4]
 80061c8:	9d00      	ldr	r5, [sp, #0]
 80061ca:	4631      	mov	r1, r6
 80061cc:	4650      	mov	r0, sl
 80061ce:	f7ff f9d4 	bl	800557a <quorem>
 80061d2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 80061d6:	9b00      	ldr	r3, [sp, #0]
 80061d8:	f805 9b01 	strb.w	r9, [r5], #1
 80061dc:	1aea      	subs	r2, r5, r3
 80061de:	9b01      	ldr	r3, [sp, #4]
 80061e0:	4293      	cmp	r3, r2
 80061e2:	dd07      	ble.n	80061f4 <_dtoa_r+0xb64>
 80061e4:	4651      	mov	r1, sl
 80061e6:	2300      	movs	r3, #0
 80061e8:	220a      	movs	r2, #10
 80061ea:	4620      	mov	r0, r4
 80061ec:	f000 f9a4 	bl	8006538 <__multadd>
 80061f0:	4682      	mov	sl, r0
 80061f2:	e7ea      	b.n	80061ca <_dtoa_r+0xb3a>
 80061f4:	9b01      	ldr	r3, [sp, #4]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	bfc8      	it	gt
 80061fa:	461d      	movgt	r5, r3
 80061fc:	9b00      	ldr	r3, [sp, #0]
 80061fe:	bfd8      	it	le
 8006200:	2501      	movle	r5, #1
 8006202:	441d      	add	r5, r3
 8006204:	f04f 0800 	mov.w	r8, #0
 8006208:	4651      	mov	r1, sl
 800620a:	2201      	movs	r2, #1
 800620c:	4620      	mov	r0, r4
 800620e:	f000 fb41 	bl	8006894 <__lshift>
 8006212:	4631      	mov	r1, r6
 8006214:	4682      	mov	sl, r0
 8006216:	f000 fba9 	bl	800696c <__mcmp>
 800621a:	2800      	cmp	r0, #0
 800621c:	dc96      	bgt.n	800614c <_dtoa_r+0xabc>
 800621e:	d102      	bne.n	8006226 <_dtoa_r+0xb96>
 8006220:	f019 0f01 	tst.w	r9, #1
 8006224:	d192      	bne.n	800614c <_dtoa_r+0xabc>
 8006226:	462b      	mov	r3, r5
 8006228:	461d      	mov	r5, r3
 800622a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800622e:	2a30      	cmp	r2, #48	; 0x30
 8006230:	d0fa      	beq.n	8006228 <_dtoa_r+0xb98>
 8006232:	e6dd      	b.n	8005ff0 <_dtoa_r+0x960>
 8006234:	9a00      	ldr	r2, [sp, #0]
 8006236:	429a      	cmp	r2, r3
 8006238:	d189      	bne.n	800614e <_dtoa_r+0xabe>
 800623a:	f10b 0b01 	add.w	fp, fp, #1
 800623e:	2331      	movs	r3, #49	; 0x31
 8006240:	e796      	b.n	8006170 <_dtoa_r+0xae0>
 8006242:	4b0a      	ldr	r3, [pc, #40]	; (800626c <_dtoa_r+0xbdc>)
 8006244:	f7ff ba99 	b.w	800577a <_dtoa_r+0xea>
 8006248:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800624a:	2b00      	cmp	r3, #0
 800624c:	f47f aa6d 	bne.w	800572a <_dtoa_r+0x9a>
 8006250:	4b07      	ldr	r3, [pc, #28]	; (8006270 <_dtoa_r+0xbe0>)
 8006252:	f7ff ba92 	b.w	800577a <_dtoa_r+0xea>
 8006256:	9b01      	ldr	r3, [sp, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	dcb5      	bgt.n	80061c8 <_dtoa_r+0xb38>
 800625c:	9b07      	ldr	r3, [sp, #28]
 800625e:	2b02      	cmp	r3, #2
 8006260:	f73f aeb1 	bgt.w	8005fc6 <_dtoa_r+0x936>
 8006264:	e7b0      	b.n	80061c8 <_dtoa_r+0xb38>
 8006266:	bf00      	nop
 8006268:	08007810 	.word	0x08007810
 800626c:	08007770 	.word	0x08007770
 8006270:	08007794 	.word	0x08007794

08006274 <_free_r>:
 8006274:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006276:	2900      	cmp	r1, #0
 8006278:	d044      	beq.n	8006304 <_free_r+0x90>
 800627a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800627e:	9001      	str	r0, [sp, #4]
 8006280:	2b00      	cmp	r3, #0
 8006282:	f1a1 0404 	sub.w	r4, r1, #4
 8006286:	bfb8      	it	lt
 8006288:	18e4      	addlt	r4, r4, r3
 800628a:	f000 f8e7 	bl	800645c <__malloc_lock>
 800628e:	4a1e      	ldr	r2, [pc, #120]	; (8006308 <_free_r+0x94>)
 8006290:	9801      	ldr	r0, [sp, #4]
 8006292:	6813      	ldr	r3, [r2, #0]
 8006294:	b933      	cbnz	r3, 80062a4 <_free_r+0x30>
 8006296:	6063      	str	r3, [r4, #4]
 8006298:	6014      	str	r4, [r2, #0]
 800629a:	b003      	add	sp, #12
 800629c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80062a0:	f000 b8e2 	b.w	8006468 <__malloc_unlock>
 80062a4:	42a3      	cmp	r3, r4
 80062a6:	d908      	bls.n	80062ba <_free_r+0x46>
 80062a8:	6825      	ldr	r5, [r4, #0]
 80062aa:	1961      	adds	r1, r4, r5
 80062ac:	428b      	cmp	r3, r1
 80062ae:	bf01      	itttt	eq
 80062b0:	6819      	ldreq	r1, [r3, #0]
 80062b2:	685b      	ldreq	r3, [r3, #4]
 80062b4:	1949      	addeq	r1, r1, r5
 80062b6:	6021      	streq	r1, [r4, #0]
 80062b8:	e7ed      	b.n	8006296 <_free_r+0x22>
 80062ba:	461a      	mov	r2, r3
 80062bc:	685b      	ldr	r3, [r3, #4]
 80062be:	b10b      	cbz	r3, 80062c4 <_free_r+0x50>
 80062c0:	42a3      	cmp	r3, r4
 80062c2:	d9fa      	bls.n	80062ba <_free_r+0x46>
 80062c4:	6811      	ldr	r1, [r2, #0]
 80062c6:	1855      	adds	r5, r2, r1
 80062c8:	42a5      	cmp	r5, r4
 80062ca:	d10b      	bne.n	80062e4 <_free_r+0x70>
 80062cc:	6824      	ldr	r4, [r4, #0]
 80062ce:	4421      	add	r1, r4
 80062d0:	1854      	adds	r4, r2, r1
 80062d2:	42a3      	cmp	r3, r4
 80062d4:	6011      	str	r1, [r2, #0]
 80062d6:	d1e0      	bne.n	800629a <_free_r+0x26>
 80062d8:	681c      	ldr	r4, [r3, #0]
 80062da:	685b      	ldr	r3, [r3, #4]
 80062dc:	6053      	str	r3, [r2, #4]
 80062de:	440c      	add	r4, r1
 80062e0:	6014      	str	r4, [r2, #0]
 80062e2:	e7da      	b.n	800629a <_free_r+0x26>
 80062e4:	d902      	bls.n	80062ec <_free_r+0x78>
 80062e6:	230c      	movs	r3, #12
 80062e8:	6003      	str	r3, [r0, #0]
 80062ea:	e7d6      	b.n	800629a <_free_r+0x26>
 80062ec:	6825      	ldr	r5, [r4, #0]
 80062ee:	1961      	adds	r1, r4, r5
 80062f0:	428b      	cmp	r3, r1
 80062f2:	bf04      	itt	eq
 80062f4:	6819      	ldreq	r1, [r3, #0]
 80062f6:	685b      	ldreq	r3, [r3, #4]
 80062f8:	6063      	str	r3, [r4, #4]
 80062fa:	bf04      	itt	eq
 80062fc:	1949      	addeq	r1, r1, r5
 80062fe:	6021      	streq	r1, [r4, #0]
 8006300:	6054      	str	r4, [r2, #4]
 8006302:	e7ca      	b.n	800629a <_free_r+0x26>
 8006304:	b003      	add	sp, #12
 8006306:	bd30      	pop	{r4, r5, pc}
 8006308:	200005d4 	.word	0x200005d4

0800630c <malloc>:
 800630c:	4b02      	ldr	r3, [pc, #8]	; (8006318 <malloc+0xc>)
 800630e:	4601      	mov	r1, r0
 8006310:	6818      	ldr	r0, [r3, #0]
 8006312:	f000 b823 	b.w	800635c <_malloc_r>
 8006316:	bf00      	nop
 8006318:	2000006c 	.word	0x2000006c

0800631c <sbrk_aligned>:
 800631c:	b570      	push	{r4, r5, r6, lr}
 800631e:	4e0e      	ldr	r6, [pc, #56]	; (8006358 <sbrk_aligned+0x3c>)
 8006320:	460c      	mov	r4, r1
 8006322:	6831      	ldr	r1, [r6, #0]
 8006324:	4605      	mov	r5, r0
 8006326:	b911      	cbnz	r1, 800632e <sbrk_aligned+0x12>
 8006328:	f000 fe40 	bl	8006fac <_sbrk_r>
 800632c:	6030      	str	r0, [r6, #0]
 800632e:	4621      	mov	r1, r4
 8006330:	4628      	mov	r0, r5
 8006332:	f000 fe3b 	bl	8006fac <_sbrk_r>
 8006336:	1c43      	adds	r3, r0, #1
 8006338:	d00a      	beq.n	8006350 <sbrk_aligned+0x34>
 800633a:	1cc4      	adds	r4, r0, #3
 800633c:	f024 0403 	bic.w	r4, r4, #3
 8006340:	42a0      	cmp	r0, r4
 8006342:	d007      	beq.n	8006354 <sbrk_aligned+0x38>
 8006344:	1a21      	subs	r1, r4, r0
 8006346:	4628      	mov	r0, r5
 8006348:	f000 fe30 	bl	8006fac <_sbrk_r>
 800634c:	3001      	adds	r0, #1
 800634e:	d101      	bne.n	8006354 <sbrk_aligned+0x38>
 8006350:	f04f 34ff 	mov.w	r4, #4294967295
 8006354:	4620      	mov	r0, r4
 8006356:	bd70      	pop	{r4, r5, r6, pc}
 8006358:	200005d8 	.word	0x200005d8

0800635c <_malloc_r>:
 800635c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006360:	1ccd      	adds	r5, r1, #3
 8006362:	f025 0503 	bic.w	r5, r5, #3
 8006366:	3508      	adds	r5, #8
 8006368:	2d0c      	cmp	r5, #12
 800636a:	bf38      	it	cc
 800636c:	250c      	movcc	r5, #12
 800636e:	2d00      	cmp	r5, #0
 8006370:	4607      	mov	r7, r0
 8006372:	db01      	blt.n	8006378 <_malloc_r+0x1c>
 8006374:	42a9      	cmp	r1, r5
 8006376:	d905      	bls.n	8006384 <_malloc_r+0x28>
 8006378:	230c      	movs	r3, #12
 800637a:	603b      	str	r3, [r7, #0]
 800637c:	2600      	movs	r6, #0
 800637e:	4630      	mov	r0, r6
 8006380:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006384:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006458 <_malloc_r+0xfc>
 8006388:	f000 f868 	bl	800645c <__malloc_lock>
 800638c:	f8d8 3000 	ldr.w	r3, [r8]
 8006390:	461c      	mov	r4, r3
 8006392:	bb5c      	cbnz	r4, 80063ec <_malloc_r+0x90>
 8006394:	4629      	mov	r1, r5
 8006396:	4638      	mov	r0, r7
 8006398:	f7ff ffc0 	bl	800631c <sbrk_aligned>
 800639c:	1c43      	adds	r3, r0, #1
 800639e:	4604      	mov	r4, r0
 80063a0:	d155      	bne.n	800644e <_malloc_r+0xf2>
 80063a2:	f8d8 4000 	ldr.w	r4, [r8]
 80063a6:	4626      	mov	r6, r4
 80063a8:	2e00      	cmp	r6, #0
 80063aa:	d145      	bne.n	8006438 <_malloc_r+0xdc>
 80063ac:	2c00      	cmp	r4, #0
 80063ae:	d048      	beq.n	8006442 <_malloc_r+0xe6>
 80063b0:	6823      	ldr	r3, [r4, #0]
 80063b2:	4631      	mov	r1, r6
 80063b4:	4638      	mov	r0, r7
 80063b6:	eb04 0903 	add.w	r9, r4, r3
 80063ba:	f000 fdf7 	bl	8006fac <_sbrk_r>
 80063be:	4581      	cmp	r9, r0
 80063c0:	d13f      	bne.n	8006442 <_malloc_r+0xe6>
 80063c2:	6821      	ldr	r1, [r4, #0]
 80063c4:	1a6d      	subs	r5, r5, r1
 80063c6:	4629      	mov	r1, r5
 80063c8:	4638      	mov	r0, r7
 80063ca:	f7ff ffa7 	bl	800631c <sbrk_aligned>
 80063ce:	3001      	adds	r0, #1
 80063d0:	d037      	beq.n	8006442 <_malloc_r+0xe6>
 80063d2:	6823      	ldr	r3, [r4, #0]
 80063d4:	442b      	add	r3, r5
 80063d6:	6023      	str	r3, [r4, #0]
 80063d8:	f8d8 3000 	ldr.w	r3, [r8]
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d038      	beq.n	8006452 <_malloc_r+0xf6>
 80063e0:	685a      	ldr	r2, [r3, #4]
 80063e2:	42a2      	cmp	r2, r4
 80063e4:	d12b      	bne.n	800643e <_malloc_r+0xe2>
 80063e6:	2200      	movs	r2, #0
 80063e8:	605a      	str	r2, [r3, #4]
 80063ea:	e00f      	b.n	800640c <_malloc_r+0xb0>
 80063ec:	6822      	ldr	r2, [r4, #0]
 80063ee:	1b52      	subs	r2, r2, r5
 80063f0:	d41f      	bmi.n	8006432 <_malloc_r+0xd6>
 80063f2:	2a0b      	cmp	r2, #11
 80063f4:	d917      	bls.n	8006426 <_malloc_r+0xca>
 80063f6:	1961      	adds	r1, r4, r5
 80063f8:	42a3      	cmp	r3, r4
 80063fa:	6025      	str	r5, [r4, #0]
 80063fc:	bf18      	it	ne
 80063fe:	6059      	strne	r1, [r3, #4]
 8006400:	6863      	ldr	r3, [r4, #4]
 8006402:	bf08      	it	eq
 8006404:	f8c8 1000 	streq.w	r1, [r8]
 8006408:	5162      	str	r2, [r4, r5]
 800640a:	604b      	str	r3, [r1, #4]
 800640c:	4638      	mov	r0, r7
 800640e:	f104 060b 	add.w	r6, r4, #11
 8006412:	f000 f829 	bl	8006468 <__malloc_unlock>
 8006416:	f026 0607 	bic.w	r6, r6, #7
 800641a:	1d23      	adds	r3, r4, #4
 800641c:	1af2      	subs	r2, r6, r3
 800641e:	d0ae      	beq.n	800637e <_malloc_r+0x22>
 8006420:	1b9b      	subs	r3, r3, r6
 8006422:	50a3      	str	r3, [r4, r2]
 8006424:	e7ab      	b.n	800637e <_malloc_r+0x22>
 8006426:	42a3      	cmp	r3, r4
 8006428:	6862      	ldr	r2, [r4, #4]
 800642a:	d1dd      	bne.n	80063e8 <_malloc_r+0x8c>
 800642c:	f8c8 2000 	str.w	r2, [r8]
 8006430:	e7ec      	b.n	800640c <_malloc_r+0xb0>
 8006432:	4623      	mov	r3, r4
 8006434:	6864      	ldr	r4, [r4, #4]
 8006436:	e7ac      	b.n	8006392 <_malloc_r+0x36>
 8006438:	4634      	mov	r4, r6
 800643a:	6876      	ldr	r6, [r6, #4]
 800643c:	e7b4      	b.n	80063a8 <_malloc_r+0x4c>
 800643e:	4613      	mov	r3, r2
 8006440:	e7cc      	b.n	80063dc <_malloc_r+0x80>
 8006442:	230c      	movs	r3, #12
 8006444:	603b      	str	r3, [r7, #0]
 8006446:	4638      	mov	r0, r7
 8006448:	f000 f80e 	bl	8006468 <__malloc_unlock>
 800644c:	e797      	b.n	800637e <_malloc_r+0x22>
 800644e:	6025      	str	r5, [r4, #0]
 8006450:	e7dc      	b.n	800640c <_malloc_r+0xb0>
 8006452:	605b      	str	r3, [r3, #4]
 8006454:	deff      	udf	#255	; 0xff
 8006456:	bf00      	nop
 8006458:	200005d4 	.word	0x200005d4

0800645c <__malloc_lock>:
 800645c:	4801      	ldr	r0, [pc, #4]	; (8006464 <__malloc_lock+0x8>)
 800645e:	f7ff b88a 	b.w	8005576 <__retarget_lock_acquire_recursive>
 8006462:	bf00      	nop
 8006464:	200005d0 	.word	0x200005d0

08006468 <__malloc_unlock>:
 8006468:	4801      	ldr	r0, [pc, #4]	; (8006470 <__malloc_unlock+0x8>)
 800646a:	f7ff b885 	b.w	8005578 <__retarget_lock_release_recursive>
 800646e:	bf00      	nop
 8006470:	200005d0 	.word	0x200005d0

08006474 <_Balloc>:
 8006474:	b570      	push	{r4, r5, r6, lr}
 8006476:	69c6      	ldr	r6, [r0, #28]
 8006478:	4604      	mov	r4, r0
 800647a:	460d      	mov	r5, r1
 800647c:	b976      	cbnz	r6, 800649c <_Balloc+0x28>
 800647e:	2010      	movs	r0, #16
 8006480:	f7ff ff44 	bl	800630c <malloc>
 8006484:	4602      	mov	r2, r0
 8006486:	61e0      	str	r0, [r4, #28]
 8006488:	b920      	cbnz	r0, 8006494 <_Balloc+0x20>
 800648a:	4b18      	ldr	r3, [pc, #96]	; (80064ec <_Balloc+0x78>)
 800648c:	4818      	ldr	r0, [pc, #96]	; (80064f0 <_Balloc+0x7c>)
 800648e:	216b      	movs	r1, #107	; 0x6b
 8006490:	f000 fdaa 	bl	8006fe8 <__assert_func>
 8006494:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006498:	6006      	str	r6, [r0, #0]
 800649a:	60c6      	str	r6, [r0, #12]
 800649c:	69e6      	ldr	r6, [r4, #28]
 800649e:	68f3      	ldr	r3, [r6, #12]
 80064a0:	b183      	cbz	r3, 80064c4 <_Balloc+0x50>
 80064a2:	69e3      	ldr	r3, [r4, #28]
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80064aa:	b9b8      	cbnz	r0, 80064dc <_Balloc+0x68>
 80064ac:	2101      	movs	r1, #1
 80064ae:	fa01 f605 	lsl.w	r6, r1, r5
 80064b2:	1d72      	adds	r2, r6, #5
 80064b4:	0092      	lsls	r2, r2, #2
 80064b6:	4620      	mov	r0, r4
 80064b8:	f000 fdb4 	bl	8007024 <_calloc_r>
 80064bc:	b160      	cbz	r0, 80064d8 <_Balloc+0x64>
 80064be:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80064c2:	e00e      	b.n	80064e2 <_Balloc+0x6e>
 80064c4:	2221      	movs	r2, #33	; 0x21
 80064c6:	2104      	movs	r1, #4
 80064c8:	4620      	mov	r0, r4
 80064ca:	f000 fdab 	bl	8007024 <_calloc_r>
 80064ce:	69e3      	ldr	r3, [r4, #28]
 80064d0:	60f0      	str	r0, [r6, #12]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d1e4      	bne.n	80064a2 <_Balloc+0x2e>
 80064d8:	2000      	movs	r0, #0
 80064da:	bd70      	pop	{r4, r5, r6, pc}
 80064dc:	6802      	ldr	r2, [r0, #0]
 80064de:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80064e2:	2300      	movs	r3, #0
 80064e4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80064e8:	e7f7      	b.n	80064da <_Balloc+0x66>
 80064ea:	bf00      	nop
 80064ec:	080077a1 	.word	0x080077a1
 80064f0:	08007821 	.word	0x08007821

080064f4 <_Bfree>:
 80064f4:	b570      	push	{r4, r5, r6, lr}
 80064f6:	69c6      	ldr	r6, [r0, #28]
 80064f8:	4605      	mov	r5, r0
 80064fa:	460c      	mov	r4, r1
 80064fc:	b976      	cbnz	r6, 800651c <_Bfree+0x28>
 80064fe:	2010      	movs	r0, #16
 8006500:	f7ff ff04 	bl	800630c <malloc>
 8006504:	4602      	mov	r2, r0
 8006506:	61e8      	str	r0, [r5, #28]
 8006508:	b920      	cbnz	r0, 8006514 <_Bfree+0x20>
 800650a:	4b09      	ldr	r3, [pc, #36]	; (8006530 <_Bfree+0x3c>)
 800650c:	4809      	ldr	r0, [pc, #36]	; (8006534 <_Bfree+0x40>)
 800650e:	218f      	movs	r1, #143	; 0x8f
 8006510:	f000 fd6a 	bl	8006fe8 <__assert_func>
 8006514:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006518:	6006      	str	r6, [r0, #0]
 800651a:	60c6      	str	r6, [r0, #12]
 800651c:	b13c      	cbz	r4, 800652e <_Bfree+0x3a>
 800651e:	69eb      	ldr	r3, [r5, #28]
 8006520:	6862      	ldr	r2, [r4, #4]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006528:	6021      	str	r1, [r4, #0]
 800652a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800652e:	bd70      	pop	{r4, r5, r6, pc}
 8006530:	080077a1 	.word	0x080077a1
 8006534:	08007821 	.word	0x08007821

08006538 <__multadd>:
 8006538:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800653c:	690d      	ldr	r5, [r1, #16]
 800653e:	4607      	mov	r7, r0
 8006540:	460c      	mov	r4, r1
 8006542:	461e      	mov	r6, r3
 8006544:	f101 0c14 	add.w	ip, r1, #20
 8006548:	2000      	movs	r0, #0
 800654a:	f8dc 3000 	ldr.w	r3, [ip]
 800654e:	b299      	uxth	r1, r3
 8006550:	fb02 6101 	mla	r1, r2, r1, r6
 8006554:	0c1e      	lsrs	r6, r3, #16
 8006556:	0c0b      	lsrs	r3, r1, #16
 8006558:	fb02 3306 	mla	r3, r2, r6, r3
 800655c:	b289      	uxth	r1, r1
 800655e:	3001      	adds	r0, #1
 8006560:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006564:	4285      	cmp	r5, r0
 8006566:	f84c 1b04 	str.w	r1, [ip], #4
 800656a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800656e:	dcec      	bgt.n	800654a <__multadd+0x12>
 8006570:	b30e      	cbz	r6, 80065b6 <__multadd+0x7e>
 8006572:	68a3      	ldr	r3, [r4, #8]
 8006574:	42ab      	cmp	r3, r5
 8006576:	dc19      	bgt.n	80065ac <__multadd+0x74>
 8006578:	6861      	ldr	r1, [r4, #4]
 800657a:	4638      	mov	r0, r7
 800657c:	3101      	adds	r1, #1
 800657e:	f7ff ff79 	bl	8006474 <_Balloc>
 8006582:	4680      	mov	r8, r0
 8006584:	b928      	cbnz	r0, 8006592 <__multadd+0x5a>
 8006586:	4602      	mov	r2, r0
 8006588:	4b0c      	ldr	r3, [pc, #48]	; (80065bc <__multadd+0x84>)
 800658a:	480d      	ldr	r0, [pc, #52]	; (80065c0 <__multadd+0x88>)
 800658c:	21ba      	movs	r1, #186	; 0xba
 800658e:	f000 fd2b 	bl	8006fe8 <__assert_func>
 8006592:	6922      	ldr	r2, [r4, #16]
 8006594:	3202      	adds	r2, #2
 8006596:	f104 010c 	add.w	r1, r4, #12
 800659a:	0092      	lsls	r2, r2, #2
 800659c:	300c      	adds	r0, #12
 800659e:	f000 fd15 	bl	8006fcc <memcpy>
 80065a2:	4621      	mov	r1, r4
 80065a4:	4638      	mov	r0, r7
 80065a6:	f7ff ffa5 	bl	80064f4 <_Bfree>
 80065aa:	4644      	mov	r4, r8
 80065ac:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80065b0:	3501      	adds	r5, #1
 80065b2:	615e      	str	r6, [r3, #20]
 80065b4:	6125      	str	r5, [r4, #16]
 80065b6:	4620      	mov	r0, r4
 80065b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80065bc:	08007810 	.word	0x08007810
 80065c0:	08007821 	.word	0x08007821

080065c4 <__hi0bits>:
 80065c4:	0c03      	lsrs	r3, r0, #16
 80065c6:	041b      	lsls	r3, r3, #16
 80065c8:	b9d3      	cbnz	r3, 8006600 <__hi0bits+0x3c>
 80065ca:	0400      	lsls	r0, r0, #16
 80065cc:	2310      	movs	r3, #16
 80065ce:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80065d2:	bf04      	itt	eq
 80065d4:	0200      	lsleq	r0, r0, #8
 80065d6:	3308      	addeq	r3, #8
 80065d8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80065dc:	bf04      	itt	eq
 80065de:	0100      	lsleq	r0, r0, #4
 80065e0:	3304      	addeq	r3, #4
 80065e2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80065e6:	bf04      	itt	eq
 80065e8:	0080      	lsleq	r0, r0, #2
 80065ea:	3302      	addeq	r3, #2
 80065ec:	2800      	cmp	r0, #0
 80065ee:	db05      	blt.n	80065fc <__hi0bits+0x38>
 80065f0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80065f4:	f103 0301 	add.w	r3, r3, #1
 80065f8:	bf08      	it	eq
 80065fa:	2320      	moveq	r3, #32
 80065fc:	4618      	mov	r0, r3
 80065fe:	4770      	bx	lr
 8006600:	2300      	movs	r3, #0
 8006602:	e7e4      	b.n	80065ce <__hi0bits+0xa>

08006604 <__lo0bits>:
 8006604:	6803      	ldr	r3, [r0, #0]
 8006606:	f013 0207 	ands.w	r2, r3, #7
 800660a:	d00c      	beq.n	8006626 <__lo0bits+0x22>
 800660c:	07d9      	lsls	r1, r3, #31
 800660e:	d422      	bmi.n	8006656 <__lo0bits+0x52>
 8006610:	079a      	lsls	r2, r3, #30
 8006612:	bf49      	itett	mi
 8006614:	085b      	lsrmi	r3, r3, #1
 8006616:	089b      	lsrpl	r3, r3, #2
 8006618:	6003      	strmi	r3, [r0, #0]
 800661a:	2201      	movmi	r2, #1
 800661c:	bf5c      	itt	pl
 800661e:	6003      	strpl	r3, [r0, #0]
 8006620:	2202      	movpl	r2, #2
 8006622:	4610      	mov	r0, r2
 8006624:	4770      	bx	lr
 8006626:	b299      	uxth	r1, r3
 8006628:	b909      	cbnz	r1, 800662e <__lo0bits+0x2a>
 800662a:	0c1b      	lsrs	r3, r3, #16
 800662c:	2210      	movs	r2, #16
 800662e:	b2d9      	uxtb	r1, r3
 8006630:	b909      	cbnz	r1, 8006636 <__lo0bits+0x32>
 8006632:	3208      	adds	r2, #8
 8006634:	0a1b      	lsrs	r3, r3, #8
 8006636:	0719      	lsls	r1, r3, #28
 8006638:	bf04      	itt	eq
 800663a:	091b      	lsreq	r3, r3, #4
 800663c:	3204      	addeq	r2, #4
 800663e:	0799      	lsls	r1, r3, #30
 8006640:	bf04      	itt	eq
 8006642:	089b      	lsreq	r3, r3, #2
 8006644:	3202      	addeq	r2, #2
 8006646:	07d9      	lsls	r1, r3, #31
 8006648:	d403      	bmi.n	8006652 <__lo0bits+0x4e>
 800664a:	085b      	lsrs	r3, r3, #1
 800664c:	f102 0201 	add.w	r2, r2, #1
 8006650:	d003      	beq.n	800665a <__lo0bits+0x56>
 8006652:	6003      	str	r3, [r0, #0]
 8006654:	e7e5      	b.n	8006622 <__lo0bits+0x1e>
 8006656:	2200      	movs	r2, #0
 8006658:	e7e3      	b.n	8006622 <__lo0bits+0x1e>
 800665a:	2220      	movs	r2, #32
 800665c:	e7e1      	b.n	8006622 <__lo0bits+0x1e>
	...

08006660 <__i2b>:
 8006660:	b510      	push	{r4, lr}
 8006662:	460c      	mov	r4, r1
 8006664:	2101      	movs	r1, #1
 8006666:	f7ff ff05 	bl	8006474 <_Balloc>
 800666a:	4602      	mov	r2, r0
 800666c:	b928      	cbnz	r0, 800667a <__i2b+0x1a>
 800666e:	4b05      	ldr	r3, [pc, #20]	; (8006684 <__i2b+0x24>)
 8006670:	4805      	ldr	r0, [pc, #20]	; (8006688 <__i2b+0x28>)
 8006672:	f240 1145 	movw	r1, #325	; 0x145
 8006676:	f000 fcb7 	bl	8006fe8 <__assert_func>
 800667a:	2301      	movs	r3, #1
 800667c:	6144      	str	r4, [r0, #20]
 800667e:	6103      	str	r3, [r0, #16]
 8006680:	bd10      	pop	{r4, pc}
 8006682:	bf00      	nop
 8006684:	08007810 	.word	0x08007810
 8006688:	08007821 	.word	0x08007821

0800668c <__multiply>:
 800668c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006690:	4691      	mov	r9, r2
 8006692:	690a      	ldr	r2, [r1, #16]
 8006694:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006698:	429a      	cmp	r2, r3
 800669a:	bfb8      	it	lt
 800669c:	460b      	movlt	r3, r1
 800669e:	460c      	mov	r4, r1
 80066a0:	bfbc      	itt	lt
 80066a2:	464c      	movlt	r4, r9
 80066a4:	4699      	movlt	r9, r3
 80066a6:	6927      	ldr	r7, [r4, #16]
 80066a8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80066ac:	68a3      	ldr	r3, [r4, #8]
 80066ae:	6861      	ldr	r1, [r4, #4]
 80066b0:	eb07 060a 	add.w	r6, r7, sl
 80066b4:	42b3      	cmp	r3, r6
 80066b6:	b085      	sub	sp, #20
 80066b8:	bfb8      	it	lt
 80066ba:	3101      	addlt	r1, #1
 80066bc:	f7ff feda 	bl	8006474 <_Balloc>
 80066c0:	b930      	cbnz	r0, 80066d0 <__multiply+0x44>
 80066c2:	4602      	mov	r2, r0
 80066c4:	4b44      	ldr	r3, [pc, #272]	; (80067d8 <__multiply+0x14c>)
 80066c6:	4845      	ldr	r0, [pc, #276]	; (80067dc <__multiply+0x150>)
 80066c8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 80066cc:	f000 fc8c 	bl	8006fe8 <__assert_func>
 80066d0:	f100 0514 	add.w	r5, r0, #20
 80066d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80066d8:	462b      	mov	r3, r5
 80066da:	2200      	movs	r2, #0
 80066dc:	4543      	cmp	r3, r8
 80066de:	d321      	bcc.n	8006724 <__multiply+0x98>
 80066e0:	f104 0314 	add.w	r3, r4, #20
 80066e4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80066e8:	f109 0314 	add.w	r3, r9, #20
 80066ec:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80066f0:	9202      	str	r2, [sp, #8]
 80066f2:	1b3a      	subs	r2, r7, r4
 80066f4:	3a15      	subs	r2, #21
 80066f6:	f022 0203 	bic.w	r2, r2, #3
 80066fa:	3204      	adds	r2, #4
 80066fc:	f104 0115 	add.w	r1, r4, #21
 8006700:	428f      	cmp	r7, r1
 8006702:	bf38      	it	cc
 8006704:	2204      	movcc	r2, #4
 8006706:	9201      	str	r2, [sp, #4]
 8006708:	9a02      	ldr	r2, [sp, #8]
 800670a:	9303      	str	r3, [sp, #12]
 800670c:	429a      	cmp	r2, r3
 800670e:	d80c      	bhi.n	800672a <__multiply+0x9e>
 8006710:	2e00      	cmp	r6, #0
 8006712:	dd03      	ble.n	800671c <__multiply+0x90>
 8006714:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006718:	2b00      	cmp	r3, #0
 800671a:	d05b      	beq.n	80067d4 <__multiply+0x148>
 800671c:	6106      	str	r6, [r0, #16]
 800671e:	b005      	add	sp, #20
 8006720:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006724:	f843 2b04 	str.w	r2, [r3], #4
 8006728:	e7d8      	b.n	80066dc <__multiply+0x50>
 800672a:	f8b3 a000 	ldrh.w	sl, [r3]
 800672e:	f1ba 0f00 	cmp.w	sl, #0
 8006732:	d024      	beq.n	800677e <__multiply+0xf2>
 8006734:	f104 0e14 	add.w	lr, r4, #20
 8006738:	46a9      	mov	r9, r5
 800673a:	f04f 0c00 	mov.w	ip, #0
 800673e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006742:	f8d9 1000 	ldr.w	r1, [r9]
 8006746:	fa1f fb82 	uxth.w	fp, r2
 800674a:	b289      	uxth	r1, r1
 800674c:	fb0a 110b 	mla	r1, sl, fp, r1
 8006750:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006754:	f8d9 2000 	ldr.w	r2, [r9]
 8006758:	4461      	add	r1, ip
 800675a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800675e:	fb0a c20b 	mla	r2, sl, fp, ip
 8006762:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006766:	b289      	uxth	r1, r1
 8006768:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800676c:	4577      	cmp	r7, lr
 800676e:	f849 1b04 	str.w	r1, [r9], #4
 8006772:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006776:	d8e2      	bhi.n	800673e <__multiply+0xb2>
 8006778:	9a01      	ldr	r2, [sp, #4]
 800677a:	f845 c002 	str.w	ip, [r5, r2]
 800677e:	9a03      	ldr	r2, [sp, #12]
 8006780:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006784:	3304      	adds	r3, #4
 8006786:	f1b9 0f00 	cmp.w	r9, #0
 800678a:	d021      	beq.n	80067d0 <__multiply+0x144>
 800678c:	6829      	ldr	r1, [r5, #0]
 800678e:	f104 0c14 	add.w	ip, r4, #20
 8006792:	46ae      	mov	lr, r5
 8006794:	f04f 0a00 	mov.w	sl, #0
 8006798:	f8bc b000 	ldrh.w	fp, [ip]
 800679c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80067a0:	fb09 220b 	mla	r2, r9, fp, r2
 80067a4:	4452      	add	r2, sl
 80067a6:	b289      	uxth	r1, r1
 80067a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80067ac:	f84e 1b04 	str.w	r1, [lr], #4
 80067b0:	f85c 1b04 	ldr.w	r1, [ip], #4
 80067b4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80067b8:	f8be 1000 	ldrh.w	r1, [lr]
 80067bc:	fb09 110a 	mla	r1, r9, sl, r1
 80067c0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 80067c4:	4567      	cmp	r7, ip
 80067c6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 80067ca:	d8e5      	bhi.n	8006798 <__multiply+0x10c>
 80067cc:	9a01      	ldr	r2, [sp, #4]
 80067ce:	50a9      	str	r1, [r5, r2]
 80067d0:	3504      	adds	r5, #4
 80067d2:	e799      	b.n	8006708 <__multiply+0x7c>
 80067d4:	3e01      	subs	r6, #1
 80067d6:	e79b      	b.n	8006710 <__multiply+0x84>
 80067d8:	08007810 	.word	0x08007810
 80067dc:	08007821 	.word	0x08007821

080067e0 <__pow5mult>:
 80067e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80067e4:	4615      	mov	r5, r2
 80067e6:	f012 0203 	ands.w	r2, r2, #3
 80067ea:	4606      	mov	r6, r0
 80067ec:	460f      	mov	r7, r1
 80067ee:	d007      	beq.n	8006800 <__pow5mult+0x20>
 80067f0:	4c25      	ldr	r4, [pc, #148]	; (8006888 <__pow5mult+0xa8>)
 80067f2:	3a01      	subs	r2, #1
 80067f4:	2300      	movs	r3, #0
 80067f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80067fa:	f7ff fe9d 	bl	8006538 <__multadd>
 80067fe:	4607      	mov	r7, r0
 8006800:	10ad      	asrs	r5, r5, #2
 8006802:	d03d      	beq.n	8006880 <__pow5mult+0xa0>
 8006804:	69f4      	ldr	r4, [r6, #28]
 8006806:	b97c      	cbnz	r4, 8006828 <__pow5mult+0x48>
 8006808:	2010      	movs	r0, #16
 800680a:	f7ff fd7f 	bl	800630c <malloc>
 800680e:	4602      	mov	r2, r0
 8006810:	61f0      	str	r0, [r6, #28]
 8006812:	b928      	cbnz	r0, 8006820 <__pow5mult+0x40>
 8006814:	4b1d      	ldr	r3, [pc, #116]	; (800688c <__pow5mult+0xac>)
 8006816:	481e      	ldr	r0, [pc, #120]	; (8006890 <__pow5mult+0xb0>)
 8006818:	f240 11b3 	movw	r1, #435	; 0x1b3
 800681c:	f000 fbe4 	bl	8006fe8 <__assert_func>
 8006820:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006824:	6004      	str	r4, [r0, #0]
 8006826:	60c4      	str	r4, [r0, #12]
 8006828:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800682c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006830:	b94c      	cbnz	r4, 8006846 <__pow5mult+0x66>
 8006832:	f240 2171 	movw	r1, #625	; 0x271
 8006836:	4630      	mov	r0, r6
 8006838:	f7ff ff12 	bl	8006660 <__i2b>
 800683c:	2300      	movs	r3, #0
 800683e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006842:	4604      	mov	r4, r0
 8006844:	6003      	str	r3, [r0, #0]
 8006846:	f04f 0900 	mov.w	r9, #0
 800684a:	07eb      	lsls	r3, r5, #31
 800684c:	d50a      	bpl.n	8006864 <__pow5mult+0x84>
 800684e:	4639      	mov	r1, r7
 8006850:	4622      	mov	r2, r4
 8006852:	4630      	mov	r0, r6
 8006854:	f7ff ff1a 	bl	800668c <__multiply>
 8006858:	4639      	mov	r1, r7
 800685a:	4680      	mov	r8, r0
 800685c:	4630      	mov	r0, r6
 800685e:	f7ff fe49 	bl	80064f4 <_Bfree>
 8006862:	4647      	mov	r7, r8
 8006864:	106d      	asrs	r5, r5, #1
 8006866:	d00b      	beq.n	8006880 <__pow5mult+0xa0>
 8006868:	6820      	ldr	r0, [r4, #0]
 800686a:	b938      	cbnz	r0, 800687c <__pow5mult+0x9c>
 800686c:	4622      	mov	r2, r4
 800686e:	4621      	mov	r1, r4
 8006870:	4630      	mov	r0, r6
 8006872:	f7ff ff0b 	bl	800668c <__multiply>
 8006876:	6020      	str	r0, [r4, #0]
 8006878:	f8c0 9000 	str.w	r9, [r0]
 800687c:	4604      	mov	r4, r0
 800687e:	e7e4      	b.n	800684a <__pow5mult+0x6a>
 8006880:	4638      	mov	r0, r7
 8006882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006886:	bf00      	nop
 8006888:	08007970 	.word	0x08007970
 800688c:	080077a1 	.word	0x080077a1
 8006890:	08007821 	.word	0x08007821

08006894 <__lshift>:
 8006894:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006898:	460c      	mov	r4, r1
 800689a:	6849      	ldr	r1, [r1, #4]
 800689c:	6923      	ldr	r3, [r4, #16]
 800689e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80068a2:	68a3      	ldr	r3, [r4, #8]
 80068a4:	4607      	mov	r7, r0
 80068a6:	4691      	mov	r9, r2
 80068a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80068ac:	f108 0601 	add.w	r6, r8, #1
 80068b0:	42b3      	cmp	r3, r6
 80068b2:	db0b      	blt.n	80068cc <__lshift+0x38>
 80068b4:	4638      	mov	r0, r7
 80068b6:	f7ff fddd 	bl	8006474 <_Balloc>
 80068ba:	4605      	mov	r5, r0
 80068bc:	b948      	cbnz	r0, 80068d2 <__lshift+0x3e>
 80068be:	4602      	mov	r2, r0
 80068c0:	4b28      	ldr	r3, [pc, #160]	; (8006964 <__lshift+0xd0>)
 80068c2:	4829      	ldr	r0, [pc, #164]	; (8006968 <__lshift+0xd4>)
 80068c4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 80068c8:	f000 fb8e 	bl	8006fe8 <__assert_func>
 80068cc:	3101      	adds	r1, #1
 80068ce:	005b      	lsls	r3, r3, #1
 80068d0:	e7ee      	b.n	80068b0 <__lshift+0x1c>
 80068d2:	2300      	movs	r3, #0
 80068d4:	f100 0114 	add.w	r1, r0, #20
 80068d8:	f100 0210 	add.w	r2, r0, #16
 80068dc:	4618      	mov	r0, r3
 80068de:	4553      	cmp	r3, sl
 80068e0:	db33      	blt.n	800694a <__lshift+0xb6>
 80068e2:	6920      	ldr	r0, [r4, #16]
 80068e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80068e8:	f104 0314 	add.w	r3, r4, #20
 80068ec:	f019 091f 	ands.w	r9, r9, #31
 80068f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80068f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80068f8:	d02b      	beq.n	8006952 <__lshift+0xbe>
 80068fa:	f1c9 0e20 	rsb	lr, r9, #32
 80068fe:	468a      	mov	sl, r1
 8006900:	2200      	movs	r2, #0
 8006902:	6818      	ldr	r0, [r3, #0]
 8006904:	fa00 f009 	lsl.w	r0, r0, r9
 8006908:	4310      	orrs	r0, r2
 800690a:	f84a 0b04 	str.w	r0, [sl], #4
 800690e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006912:	459c      	cmp	ip, r3
 8006914:	fa22 f20e 	lsr.w	r2, r2, lr
 8006918:	d8f3      	bhi.n	8006902 <__lshift+0x6e>
 800691a:	ebac 0304 	sub.w	r3, ip, r4
 800691e:	3b15      	subs	r3, #21
 8006920:	f023 0303 	bic.w	r3, r3, #3
 8006924:	3304      	adds	r3, #4
 8006926:	f104 0015 	add.w	r0, r4, #21
 800692a:	4584      	cmp	ip, r0
 800692c:	bf38      	it	cc
 800692e:	2304      	movcc	r3, #4
 8006930:	50ca      	str	r2, [r1, r3]
 8006932:	b10a      	cbz	r2, 8006938 <__lshift+0xa4>
 8006934:	f108 0602 	add.w	r6, r8, #2
 8006938:	3e01      	subs	r6, #1
 800693a:	4638      	mov	r0, r7
 800693c:	612e      	str	r6, [r5, #16]
 800693e:	4621      	mov	r1, r4
 8006940:	f7ff fdd8 	bl	80064f4 <_Bfree>
 8006944:	4628      	mov	r0, r5
 8006946:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800694a:	f842 0f04 	str.w	r0, [r2, #4]!
 800694e:	3301      	adds	r3, #1
 8006950:	e7c5      	b.n	80068de <__lshift+0x4a>
 8006952:	3904      	subs	r1, #4
 8006954:	f853 2b04 	ldr.w	r2, [r3], #4
 8006958:	f841 2f04 	str.w	r2, [r1, #4]!
 800695c:	459c      	cmp	ip, r3
 800695e:	d8f9      	bhi.n	8006954 <__lshift+0xc0>
 8006960:	e7ea      	b.n	8006938 <__lshift+0xa4>
 8006962:	bf00      	nop
 8006964:	08007810 	.word	0x08007810
 8006968:	08007821 	.word	0x08007821

0800696c <__mcmp>:
 800696c:	b530      	push	{r4, r5, lr}
 800696e:	6902      	ldr	r2, [r0, #16]
 8006970:	690c      	ldr	r4, [r1, #16]
 8006972:	1b12      	subs	r2, r2, r4
 8006974:	d10e      	bne.n	8006994 <__mcmp+0x28>
 8006976:	f100 0314 	add.w	r3, r0, #20
 800697a:	3114      	adds	r1, #20
 800697c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006980:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006984:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006988:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800698c:	42a5      	cmp	r5, r4
 800698e:	d003      	beq.n	8006998 <__mcmp+0x2c>
 8006990:	d305      	bcc.n	800699e <__mcmp+0x32>
 8006992:	2201      	movs	r2, #1
 8006994:	4610      	mov	r0, r2
 8006996:	bd30      	pop	{r4, r5, pc}
 8006998:	4283      	cmp	r3, r0
 800699a:	d3f3      	bcc.n	8006984 <__mcmp+0x18>
 800699c:	e7fa      	b.n	8006994 <__mcmp+0x28>
 800699e:	f04f 32ff 	mov.w	r2, #4294967295
 80069a2:	e7f7      	b.n	8006994 <__mcmp+0x28>

080069a4 <__mdiff>:
 80069a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069a8:	460c      	mov	r4, r1
 80069aa:	4606      	mov	r6, r0
 80069ac:	4611      	mov	r1, r2
 80069ae:	4620      	mov	r0, r4
 80069b0:	4690      	mov	r8, r2
 80069b2:	f7ff ffdb 	bl	800696c <__mcmp>
 80069b6:	1e05      	subs	r5, r0, #0
 80069b8:	d110      	bne.n	80069dc <__mdiff+0x38>
 80069ba:	4629      	mov	r1, r5
 80069bc:	4630      	mov	r0, r6
 80069be:	f7ff fd59 	bl	8006474 <_Balloc>
 80069c2:	b930      	cbnz	r0, 80069d2 <__mdiff+0x2e>
 80069c4:	4b3a      	ldr	r3, [pc, #232]	; (8006ab0 <__mdiff+0x10c>)
 80069c6:	4602      	mov	r2, r0
 80069c8:	f240 2137 	movw	r1, #567	; 0x237
 80069cc:	4839      	ldr	r0, [pc, #228]	; (8006ab4 <__mdiff+0x110>)
 80069ce:	f000 fb0b 	bl	8006fe8 <__assert_func>
 80069d2:	2301      	movs	r3, #1
 80069d4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80069d8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80069dc:	bfa4      	itt	ge
 80069de:	4643      	movge	r3, r8
 80069e0:	46a0      	movge	r8, r4
 80069e2:	4630      	mov	r0, r6
 80069e4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80069e8:	bfa6      	itte	ge
 80069ea:	461c      	movge	r4, r3
 80069ec:	2500      	movge	r5, #0
 80069ee:	2501      	movlt	r5, #1
 80069f0:	f7ff fd40 	bl	8006474 <_Balloc>
 80069f4:	b920      	cbnz	r0, 8006a00 <__mdiff+0x5c>
 80069f6:	4b2e      	ldr	r3, [pc, #184]	; (8006ab0 <__mdiff+0x10c>)
 80069f8:	4602      	mov	r2, r0
 80069fa:	f240 2145 	movw	r1, #581	; 0x245
 80069fe:	e7e5      	b.n	80069cc <__mdiff+0x28>
 8006a00:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006a04:	6926      	ldr	r6, [r4, #16]
 8006a06:	60c5      	str	r5, [r0, #12]
 8006a08:	f104 0914 	add.w	r9, r4, #20
 8006a0c:	f108 0514 	add.w	r5, r8, #20
 8006a10:	f100 0e14 	add.w	lr, r0, #20
 8006a14:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006a18:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006a1c:	f108 0210 	add.w	r2, r8, #16
 8006a20:	46f2      	mov	sl, lr
 8006a22:	2100      	movs	r1, #0
 8006a24:	f859 3b04 	ldr.w	r3, [r9], #4
 8006a28:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006a2c:	fa11 f88b 	uxtah	r8, r1, fp
 8006a30:	b299      	uxth	r1, r3
 8006a32:	0c1b      	lsrs	r3, r3, #16
 8006a34:	eba8 0801 	sub.w	r8, r8, r1
 8006a38:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006a3c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006a40:	fa1f f888 	uxth.w	r8, r8
 8006a44:	1419      	asrs	r1, r3, #16
 8006a46:	454e      	cmp	r6, r9
 8006a48:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006a4c:	f84a 3b04 	str.w	r3, [sl], #4
 8006a50:	d8e8      	bhi.n	8006a24 <__mdiff+0x80>
 8006a52:	1b33      	subs	r3, r6, r4
 8006a54:	3b15      	subs	r3, #21
 8006a56:	f023 0303 	bic.w	r3, r3, #3
 8006a5a:	3304      	adds	r3, #4
 8006a5c:	3415      	adds	r4, #21
 8006a5e:	42a6      	cmp	r6, r4
 8006a60:	bf38      	it	cc
 8006a62:	2304      	movcc	r3, #4
 8006a64:	441d      	add	r5, r3
 8006a66:	4473      	add	r3, lr
 8006a68:	469e      	mov	lr, r3
 8006a6a:	462e      	mov	r6, r5
 8006a6c:	4566      	cmp	r6, ip
 8006a6e:	d30e      	bcc.n	8006a8e <__mdiff+0xea>
 8006a70:	f10c 0203 	add.w	r2, ip, #3
 8006a74:	1b52      	subs	r2, r2, r5
 8006a76:	f022 0203 	bic.w	r2, r2, #3
 8006a7a:	3d03      	subs	r5, #3
 8006a7c:	45ac      	cmp	ip, r5
 8006a7e:	bf38      	it	cc
 8006a80:	2200      	movcc	r2, #0
 8006a82:	4413      	add	r3, r2
 8006a84:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006a88:	b17a      	cbz	r2, 8006aaa <__mdiff+0x106>
 8006a8a:	6107      	str	r7, [r0, #16]
 8006a8c:	e7a4      	b.n	80069d8 <__mdiff+0x34>
 8006a8e:	f856 8b04 	ldr.w	r8, [r6], #4
 8006a92:	fa11 f288 	uxtah	r2, r1, r8
 8006a96:	1414      	asrs	r4, r2, #16
 8006a98:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006a9c:	b292      	uxth	r2, r2
 8006a9e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006aa2:	f84e 2b04 	str.w	r2, [lr], #4
 8006aa6:	1421      	asrs	r1, r4, #16
 8006aa8:	e7e0      	b.n	8006a6c <__mdiff+0xc8>
 8006aaa:	3f01      	subs	r7, #1
 8006aac:	e7ea      	b.n	8006a84 <__mdiff+0xe0>
 8006aae:	bf00      	nop
 8006ab0:	08007810 	.word	0x08007810
 8006ab4:	08007821 	.word	0x08007821

08006ab8 <__d2b>:
 8006ab8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006abc:	460f      	mov	r7, r1
 8006abe:	2101      	movs	r1, #1
 8006ac0:	ec59 8b10 	vmov	r8, r9, d0
 8006ac4:	4616      	mov	r6, r2
 8006ac6:	f7ff fcd5 	bl	8006474 <_Balloc>
 8006aca:	4604      	mov	r4, r0
 8006acc:	b930      	cbnz	r0, 8006adc <__d2b+0x24>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	4b24      	ldr	r3, [pc, #144]	; (8006b64 <__d2b+0xac>)
 8006ad2:	4825      	ldr	r0, [pc, #148]	; (8006b68 <__d2b+0xb0>)
 8006ad4:	f240 310f 	movw	r1, #783	; 0x30f
 8006ad8:	f000 fa86 	bl	8006fe8 <__assert_func>
 8006adc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006ae0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006ae4:	bb2d      	cbnz	r5, 8006b32 <__d2b+0x7a>
 8006ae6:	9301      	str	r3, [sp, #4]
 8006ae8:	f1b8 0300 	subs.w	r3, r8, #0
 8006aec:	d026      	beq.n	8006b3c <__d2b+0x84>
 8006aee:	4668      	mov	r0, sp
 8006af0:	9300      	str	r3, [sp, #0]
 8006af2:	f7ff fd87 	bl	8006604 <__lo0bits>
 8006af6:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006afa:	b1e8      	cbz	r0, 8006b38 <__d2b+0x80>
 8006afc:	f1c0 0320 	rsb	r3, r0, #32
 8006b00:	fa02 f303 	lsl.w	r3, r2, r3
 8006b04:	430b      	orrs	r3, r1
 8006b06:	40c2      	lsrs	r2, r0
 8006b08:	6163      	str	r3, [r4, #20]
 8006b0a:	9201      	str	r2, [sp, #4]
 8006b0c:	9b01      	ldr	r3, [sp, #4]
 8006b0e:	61a3      	str	r3, [r4, #24]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	bf14      	ite	ne
 8006b14:	2202      	movne	r2, #2
 8006b16:	2201      	moveq	r2, #1
 8006b18:	6122      	str	r2, [r4, #16]
 8006b1a:	b1bd      	cbz	r5, 8006b4c <__d2b+0x94>
 8006b1c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006b20:	4405      	add	r5, r0
 8006b22:	603d      	str	r5, [r7, #0]
 8006b24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b28:	6030      	str	r0, [r6, #0]
 8006b2a:	4620      	mov	r0, r4
 8006b2c:	b003      	add	sp, #12
 8006b2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006b32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b36:	e7d6      	b.n	8006ae6 <__d2b+0x2e>
 8006b38:	6161      	str	r1, [r4, #20]
 8006b3a:	e7e7      	b.n	8006b0c <__d2b+0x54>
 8006b3c:	a801      	add	r0, sp, #4
 8006b3e:	f7ff fd61 	bl	8006604 <__lo0bits>
 8006b42:	9b01      	ldr	r3, [sp, #4]
 8006b44:	6163      	str	r3, [r4, #20]
 8006b46:	3020      	adds	r0, #32
 8006b48:	2201      	movs	r2, #1
 8006b4a:	e7e5      	b.n	8006b18 <__d2b+0x60>
 8006b4c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006b50:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b54:	6038      	str	r0, [r7, #0]
 8006b56:	6918      	ldr	r0, [r3, #16]
 8006b58:	f7ff fd34 	bl	80065c4 <__hi0bits>
 8006b5c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006b60:	e7e2      	b.n	8006b28 <__d2b+0x70>
 8006b62:	bf00      	nop
 8006b64:	08007810 	.word	0x08007810
 8006b68:	08007821 	.word	0x08007821

08006b6c <__ssputs_r>:
 8006b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b70:	688e      	ldr	r6, [r1, #8]
 8006b72:	461f      	mov	r7, r3
 8006b74:	42be      	cmp	r6, r7
 8006b76:	680b      	ldr	r3, [r1, #0]
 8006b78:	4682      	mov	sl, r0
 8006b7a:	460c      	mov	r4, r1
 8006b7c:	4690      	mov	r8, r2
 8006b7e:	d82c      	bhi.n	8006bda <__ssputs_r+0x6e>
 8006b80:	898a      	ldrh	r2, [r1, #12]
 8006b82:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006b86:	d026      	beq.n	8006bd6 <__ssputs_r+0x6a>
 8006b88:	6965      	ldr	r5, [r4, #20]
 8006b8a:	6909      	ldr	r1, [r1, #16]
 8006b8c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006b90:	eba3 0901 	sub.w	r9, r3, r1
 8006b94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006b98:	1c7b      	adds	r3, r7, #1
 8006b9a:	444b      	add	r3, r9
 8006b9c:	106d      	asrs	r5, r5, #1
 8006b9e:	429d      	cmp	r5, r3
 8006ba0:	bf38      	it	cc
 8006ba2:	461d      	movcc	r5, r3
 8006ba4:	0553      	lsls	r3, r2, #21
 8006ba6:	d527      	bpl.n	8006bf8 <__ssputs_r+0x8c>
 8006ba8:	4629      	mov	r1, r5
 8006baa:	f7ff fbd7 	bl	800635c <_malloc_r>
 8006bae:	4606      	mov	r6, r0
 8006bb0:	b360      	cbz	r0, 8006c0c <__ssputs_r+0xa0>
 8006bb2:	6921      	ldr	r1, [r4, #16]
 8006bb4:	464a      	mov	r2, r9
 8006bb6:	f000 fa09 	bl	8006fcc <memcpy>
 8006bba:	89a3      	ldrh	r3, [r4, #12]
 8006bbc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bc4:	81a3      	strh	r3, [r4, #12]
 8006bc6:	6126      	str	r6, [r4, #16]
 8006bc8:	6165      	str	r5, [r4, #20]
 8006bca:	444e      	add	r6, r9
 8006bcc:	eba5 0509 	sub.w	r5, r5, r9
 8006bd0:	6026      	str	r6, [r4, #0]
 8006bd2:	60a5      	str	r5, [r4, #8]
 8006bd4:	463e      	mov	r6, r7
 8006bd6:	42be      	cmp	r6, r7
 8006bd8:	d900      	bls.n	8006bdc <__ssputs_r+0x70>
 8006bda:	463e      	mov	r6, r7
 8006bdc:	6820      	ldr	r0, [r4, #0]
 8006bde:	4632      	mov	r2, r6
 8006be0:	4641      	mov	r1, r8
 8006be2:	f000 f9c9 	bl	8006f78 <memmove>
 8006be6:	68a3      	ldr	r3, [r4, #8]
 8006be8:	1b9b      	subs	r3, r3, r6
 8006bea:	60a3      	str	r3, [r4, #8]
 8006bec:	6823      	ldr	r3, [r4, #0]
 8006bee:	4433      	add	r3, r6
 8006bf0:	6023      	str	r3, [r4, #0]
 8006bf2:	2000      	movs	r0, #0
 8006bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006bf8:	462a      	mov	r2, r5
 8006bfa:	f000 fa3b 	bl	8007074 <_realloc_r>
 8006bfe:	4606      	mov	r6, r0
 8006c00:	2800      	cmp	r0, #0
 8006c02:	d1e0      	bne.n	8006bc6 <__ssputs_r+0x5a>
 8006c04:	6921      	ldr	r1, [r4, #16]
 8006c06:	4650      	mov	r0, sl
 8006c08:	f7ff fb34 	bl	8006274 <_free_r>
 8006c0c:	230c      	movs	r3, #12
 8006c0e:	f8ca 3000 	str.w	r3, [sl]
 8006c12:	89a3      	ldrh	r3, [r4, #12]
 8006c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c18:	81a3      	strh	r3, [r4, #12]
 8006c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8006c1e:	e7e9      	b.n	8006bf4 <__ssputs_r+0x88>

08006c20 <_svfiprintf_r>:
 8006c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c24:	4698      	mov	r8, r3
 8006c26:	898b      	ldrh	r3, [r1, #12]
 8006c28:	061b      	lsls	r3, r3, #24
 8006c2a:	b09d      	sub	sp, #116	; 0x74
 8006c2c:	4607      	mov	r7, r0
 8006c2e:	460d      	mov	r5, r1
 8006c30:	4614      	mov	r4, r2
 8006c32:	d50e      	bpl.n	8006c52 <_svfiprintf_r+0x32>
 8006c34:	690b      	ldr	r3, [r1, #16]
 8006c36:	b963      	cbnz	r3, 8006c52 <_svfiprintf_r+0x32>
 8006c38:	2140      	movs	r1, #64	; 0x40
 8006c3a:	f7ff fb8f 	bl	800635c <_malloc_r>
 8006c3e:	6028      	str	r0, [r5, #0]
 8006c40:	6128      	str	r0, [r5, #16]
 8006c42:	b920      	cbnz	r0, 8006c4e <_svfiprintf_r+0x2e>
 8006c44:	230c      	movs	r3, #12
 8006c46:	603b      	str	r3, [r7, #0]
 8006c48:	f04f 30ff 	mov.w	r0, #4294967295
 8006c4c:	e0d0      	b.n	8006df0 <_svfiprintf_r+0x1d0>
 8006c4e:	2340      	movs	r3, #64	; 0x40
 8006c50:	616b      	str	r3, [r5, #20]
 8006c52:	2300      	movs	r3, #0
 8006c54:	9309      	str	r3, [sp, #36]	; 0x24
 8006c56:	2320      	movs	r3, #32
 8006c58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006c5c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c60:	2330      	movs	r3, #48	; 0x30
 8006c62:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8006e08 <_svfiprintf_r+0x1e8>
 8006c66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006c6a:	f04f 0901 	mov.w	r9, #1
 8006c6e:	4623      	mov	r3, r4
 8006c70:	469a      	mov	sl, r3
 8006c72:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006c76:	b10a      	cbz	r2, 8006c7c <_svfiprintf_r+0x5c>
 8006c78:	2a25      	cmp	r2, #37	; 0x25
 8006c7a:	d1f9      	bne.n	8006c70 <_svfiprintf_r+0x50>
 8006c7c:	ebba 0b04 	subs.w	fp, sl, r4
 8006c80:	d00b      	beq.n	8006c9a <_svfiprintf_r+0x7a>
 8006c82:	465b      	mov	r3, fp
 8006c84:	4622      	mov	r2, r4
 8006c86:	4629      	mov	r1, r5
 8006c88:	4638      	mov	r0, r7
 8006c8a:	f7ff ff6f 	bl	8006b6c <__ssputs_r>
 8006c8e:	3001      	adds	r0, #1
 8006c90:	f000 80a9 	beq.w	8006de6 <_svfiprintf_r+0x1c6>
 8006c94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c96:	445a      	add	r2, fp
 8006c98:	9209      	str	r2, [sp, #36]	; 0x24
 8006c9a:	f89a 3000 	ldrb.w	r3, [sl]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	f000 80a1 	beq.w	8006de6 <_svfiprintf_r+0x1c6>
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	f04f 32ff 	mov.w	r2, #4294967295
 8006caa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cae:	f10a 0a01 	add.w	sl, sl, #1
 8006cb2:	9304      	str	r3, [sp, #16]
 8006cb4:	9307      	str	r3, [sp, #28]
 8006cb6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006cba:	931a      	str	r3, [sp, #104]	; 0x68
 8006cbc:	4654      	mov	r4, sl
 8006cbe:	2205      	movs	r2, #5
 8006cc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cc4:	4850      	ldr	r0, [pc, #320]	; (8006e08 <_svfiprintf_r+0x1e8>)
 8006cc6:	f7f9 fa83 	bl	80001d0 <memchr>
 8006cca:	9a04      	ldr	r2, [sp, #16]
 8006ccc:	b9d8      	cbnz	r0, 8006d06 <_svfiprintf_r+0xe6>
 8006cce:	06d0      	lsls	r0, r2, #27
 8006cd0:	bf44      	itt	mi
 8006cd2:	2320      	movmi	r3, #32
 8006cd4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006cd8:	0711      	lsls	r1, r2, #28
 8006cda:	bf44      	itt	mi
 8006cdc:	232b      	movmi	r3, #43	; 0x2b
 8006cde:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ce2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ce6:	2b2a      	cmp	r3, #42	; 0x2a
 8006ce8:	d015      	beq.n	8006d16 <_svfiprintf_r+0xf6>
 8006cea:	9a07      	ldr	r2, [sp, #28]
 8006cec:	4654      	mov	r4, sl
 8006cee:	2000      	movs	r0, #0
 8006cf0:	f04f 0c0a 	mov.w	ip, #10
 8006cf4:	4621      	mov	r1, r4
 8006cf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006cfa:	3b30      	subs	r3, #48	; 0x30
 8006cfc:	2b09      	cmp	r3, #9
 8006cfe:	d94d      	bls.n	8006d9c <_svfiprintf_r+0x17c>
 8006d00:	b1b0      	cbz	r0, 8006d30 <_svfiprintf_r+0x110>
 8006d02:	9207      	str	r2, [sp, #28]
 8006d04:	e014      	b.n	8006d30 <_svfiprintf_r+0x110>
 8006d06:	eba0 0308 	sub.w	r3, r0, r8
 8006d0a:	fa09 f303 	lsl.w	r3, r9, r3
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	9304      	str	r3, [sp, #16]
 8006d12:	46a2      	mov	sl, r4
 8006d14:	e7d2      	b.n	8006cbc <_svfiprintf_r+0x9c>
 8006d16:	9b03      	ldr	r3, [sp, #12]
 8006d18:	1d19      	adds	r1, r3, #4
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	9103      	str	r1, [sp, #12]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	bfbb      	ittet	lt
 8006d22:	425b      	neglt	r3, r3
 8006d24:	f042 0202 	orrlt.w	r2, r2, #2
 8006d28:	9307      	strge	r3, [sp, #28]
 8006d2a:	9307      	strlt	r3, [sp, #28]
 8006d2c:	bfb8      	it	lt
 8006d2e:	9204      	strlt	r2, [sp, #16]
 8006d30:	7823      	ldrb	r3, [r4, #0]
 8006d32:	2b2e      	cmp	r3, #46	; 0x2e
 8006d34:	d10c      	bne.n	8006d50 <_svfiprintf_r+0x130>
 8006d36:	7863      	ldrb	r3, [r4, #1]
 8006d38:	2b2a      	cmp	r3, #42	; 0x2a
 8006d3a:	d134      	bne.n	8006da6 <_svfiprintf_r+0x186>
 8006d3c:	9b03      	ldr	r3, [sp, #12]
 8006d3e:	1d1a      	adds	r2, r3, #4
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	9203      	str	r2, [sp, #12]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	bfb8      	it	lt
 8006d48:	f04f 33ff 	movlt.w	r3, #4294967295
 8006d4c:	3402      	adds	r4, #2
 8006d4e:	9305      	str	r3, [sp, #20]
 8006d50:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8006e18 <_svfiprintf_r+0x1f8>
 8006d54:	7821      	ldrb	r1, [r4, #0]
 8006d56:	2203      	movs	r2, #3
 8006d58:	4650      	mov	r0, sl
 8006d5a:	f7f9 fa39 	bl	80001d0 <memchr>
 8006d5e:	b138      	cbz	r0, 8006d70 <_svfiprintf_r+0x150>
 8006d60:	9b04      	ldr	r3, [sp, #16]
 8006d62:	eba0 000a 	sub.w	r0, r0, sl
 8006d66:	2240      	movs	r2, #64	; 0x40
 8006d68:	4082      	lsls	r2, r0
 8006d6a:	4313      	orrs	r3, r2
 8006d6c:	3401      	adds	r4, #1
 8006d6e:	9304      	str	r3, [sp, #16]
 8006d70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d74:	4825      	ldr	r0, [pc, #148]	; (8006e0c <_svfiprintf_r+0x1ec>)
 8006d76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006d7a:	2206      	movs	r2, #6
 8006d7c:	f7f9 fa28 	bl	80001d0 <memchr>
 8006d80:	2800      	cmp	r0, #0
 8006d82:	d038      	beq.n	8006df6 <_svfiprintf_r+0x1d6>
 8006d84:	4b22      	ldr	r3, [pc, #136]	; (8006e10 <_svfiprintf_r+0x1f0>)
 8006d86:	bb1b      	cbnz	r3, 8006dd0 <_svfiprintf_r+0x1b0>
 8006d88:	9b03      	ldr	r3, [sp, #12]
 8006d8a:	3307      	adds	r3, #7
 8006d8c:	f023 0307 	bic.w	r3, r3, #7
 8006d90:	3308      	adds	r3, #8
 8006d92:	9303      	str	r3, [sp, #12]
 8006d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006d96:	4433      	add	r3, r6
 8006d98:	9309      	str	r3, [sp, #36]	; 0x24
 8006d9a:	e768      	b.n	8006c6e <_svfiprintf_r+0x4e>
 8006d9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8006da0:	460c      	mov	r4, r1
 8006da2:	2001      	movs	r0, #1
 8006da4:	e7a6      	b.n	8006cf4 <_svfiprintf_r+0xd4>
 8006da6:	2300      	movs	r3, #0
 8006da8:	3401      	adds	r4, #1
 8006daa:	9305      	str	r3, [sp, #20]
 8006dac:	4619      	mov	r1, r3
 8006dae:	f04f 0c0a 	mov.w	ip, #10
 8006db2:	4620      	mov	r0, r4
 8006db4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006db8:	3a30      	subs	r2, #48	; 0x30
 8006dba:	2a09      	cmp	r2, #9
 8006dbc:	d903      	bls.n	8006dc6 <_svfiprintf_r+0x1a6>
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d0c6      	beq.n	8006d50 <_svfiprintf_r+0x130>
 8006dc2:	9105      	str	r1, [sp, #20]
 8006dc4:	e7c4      	b.n	8006d50 <_svfiprintf_r+0x130>
 8006dc6:	fb0c 2101 	mla	r1, ip, r1, r2
 8006dca:	4604      	mov	r4, r0
 8006dcc:	2301      	movs	r3, #1
 8006dce:	e7f0      	b.n	8006db2 <_svfiprintf_r+0x192>
 8006dd0:	ab03      	add	r3, sp, #12
 8006dd2:	9300      	str	r3, [sp, #0]
 8006dd4:	462a      	mov	r2, r5
 8006dd6:	4b0f      	ldr	r3, [pc, #60]	; (8006e14 <_svfiprintf_r+0x1f4>)
 8006dd8:	a904      	add	r1, sp, #16
 8006dda:	4638      	mov	r0, r7
 8006ddc:	f7fd fe2a 	bl	8004a34 <_printf_float>
 8006de0:	1c42      	adds	r2, r0, #1
 8006de2:	4606      	mov	r6, r0
 8006de4:	d1d6      	bne.n	8006d94 <_svfiprintf_r+0x174>
 8006de6:	89ab      	ldrh	r3, [r5, #12]
 8006de8:	065b      	lsls	r3, r3, #25
 8006dea:	f53f af2d 	bmi.w	8006c48 <_svfiprintf_r+0x28>
 8006dee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006df0:	b01d      	add	sp, #116	; 0x74
 8006df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006df6:	ab03      	add	r3, sp, #12
 8006df8:	9300      	str	r3, [sp, #0]
 8006dfa:	462a      	mov	r2, r5
 8006dfc:	4b05      	ldr	r3, [pc, #20]	; (8006e14 <_svfiprintf_r+0x1f4>)
 8006dfe:	a904      	add	r1, sp, #16
 8006e00:	4638      	mov	r0, r7
 8006e02:	f7fe f8bb 	bl	8004f7c <_printf_i>
 8006e06:	e7eb      	b.n	8006de0 <_svfiprintf_r+0x1c0>
 8006e08:	0800797c 	.word	0x0800797c
 8006e0c:	08007986 	.word	0x08007986
 8006e10:	08004a35 	.word	0x08004a35
 8006e14:	08006b6d 	.word	0x08006b6d
 8006e18:	08007982 	.word	0x08007982

08006e1c <__sflush_r>:
 8006e1c:	898a      	ldrh	r2, [r1, #12]
 8006e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e22:	4605      	mov	r5, r0
 8006e24:	0710      	lsls	r0, r2, #28
 8006e26:	460c      	mov	r4, r1
 8006e28:	d458      	bmi.n	8006edc <__sflush_r+0xc0>
 8006e2a:	684b      	ldr	r3, [r1, #4]
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	dc05      	bgt.n	8006e3c <__sflush_r+0x20>
 8006e30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	dc02      	bgt.n	8006e3c <__sflush_r+0x20>
 8006e36:	2000      	movs	r0, #0
 8006e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e3e:	2e00      	cmp	r6, #0
 8006e40:	d0f9      	beq.n	8006e36 <__sflush_r+0x1a>
 8006e42:	2300      	movs	r3, #0
 8006e44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006e48:	682f      	ldr	r7, [r5, #0]
 8006e4a:	6a21      	ldr	r1, [r4, #32]
 8006e4c:	602b      	str	r3, [r5, #0]
 8006e4e:	d032      	beq.n	8006eb6 <__sflush_r+0x9a>
 8006e50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006e52:	89a3      	ldrh	r3, [r4, #12]
 8006e54:	075a      	lsls	r2, r3, #29
 8006e56:	d505      	bpl.n	8006e64 <__sflush_r+0x48>
 8006e58:	6863      	ldr	r3, [r4, #4]
 8006e5a:	1ac0      	subs	r0, r0, r3
 8006e5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006e5e:	b10b      	cbz	r3, 8006e64 <__sflush_r+0x48>
 8006e60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006e62:	1ac0      	subs	r0, r0, r3
 8006e64:	2300      	movs	r3, #0
 8006e66:	4602      	mov	r2, r0
 8006e68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006e6a:	6a21      	ldr	r1, [r4, #32]
 8006e6c:	4628      	mov	r0, r5
 8006e6e:	47b0      	blx	r6
 8006e70:	1c43      	adds	r3, r0, #1
 8006e72:	89a3      	ldrh	r3, [r4, #12]
 8006e74:	d106      	bne.n	8006e84 <__sflush_r+0x68>
 8006e76:	6829      	ldr	r1, [r5, #0]
 8006e78:	291d      	cmp	r1, #29
 8006e7a:	d82b      	bhi.n	8006ed4 <__sflush_r+0xb8>
 8006e7c:	4a29      	ldr	r2, [pc, #164]	; (8006f24 <__sflush_r+0x108>)
 8006e7e:	410a      	asrs	r2, r1
 8006e80:	07d6      	lsls	r6, r2, #31
 8006e82:	d427      	bmi.n	8006ed4 <__sflush_r+0xb8>
 8006e84:	2200      	movs	r2, #0
 8006e86:	6062      	str	r2, [r4, #4]
 8006e88:	04d9      	lsls	r1, r3, #19
 8006e8a:	6922      	ldr	r2, [r4, #16]
 8006e8c:	6022      	str	r2, [r4, #0]
 8006e8e:	d504      	bpl.n	8006e9a <__sflush_r+0x7e>
 8006e90:	1c42      	adds	r2, r0, #1
 8006e92:	d101      	bne.n	8006e98 <__sflush_r+0x7c>
 8006e94:	682b      	ldr	r3, [r5, #0]
 8006e96:	b903      	cbnz	r3, 8006e9a <__sflush_r+0x7e>
 8006e98:	6560      	str	r0, [r4, #84]	; 0x54
 8006e9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006e9c:	602f      	str	r7, [r5, #0]
 8006e9e:	2900      	cmp	r1, #0
 8006ea0:	d0c9      	beq.n	8006e36 <__sflush_r+0x1a>
 8006ea2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ea6:	4299      	cmp	r1, r3
 8006ea8:	d002      	beq.n	8006eb0 <__sflush_r+0x94>
 8006eaa:	4628      	mov	r0, r5
 8006eac:	f7ff f9e2 	bl	8006274 <_free_r>
 8006eb0:	2000      	movs	r0, #0
 8006eb2:	6360      	str	r0, [r4, #52]	; 0x34
 8006eb4:	e7c0      	b.n	8006e38 <__sflush_r+0x1c>
 8006eb6:	2301      	movs	r3, #1
 8006eb8:	4628      	mov	r0, r5
 8006eba:	47b0      	blx	r6
 8006ebc:	1c41      	adds	r1, r0, #1
 8006ebe:	d1c8      	bne.n	8006e52 <__sflush_r+0x36>
 8006ec0:	682b      	ldr	r3, [r5, #0]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d0c5      	beq.n	8006e52 <__sflush_r+0x36>
 8006ec6:	2b1d      	cmp	r3, #29
 8006ec8:	d001      	beq.n	8006ece <__sflush_r+0xb2>
 8006eca:	2b16      	cmp	r3, #22
 8006ecc:	d101      	bne.n	8006ed2 <__sflush_r+0xb6>
 8006ece:	602f      	str	r7, [r5, #0]
 8006ed0:	e7b1      	b.n	8006e36 <__sflush_r+0x1a>
 8006ed2:	89a3      	ldrh	r3, [r4, #12]
 8006ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006ed8:	81a3      	strh	r3, [r4, #12]
 8006eda:	e7ad      	b.n	8006e38 <__sflush_r+0x1c>
 8006edc:	690f      	ldr	r7, [r1, #16]
 8006ede:	2f00      	cmp	r7, #0
 8006ee0:	d0a9      	beq.n	8006e36 <__sflush_r+0x1a>
 8006ee2:	0793      	lsls	r3, r2, #30
 8006ee4:	680e      	ldr	r6, [r1, #0]
 8006ee6:	bf08      	it	eq
 8006ee8:	694b      	ldreq	r3, [r1, #20]
 8006eea:	600f      	str	r7, [r1, #0]
 8006eec:	bf18      	it	ne
 8006eee:	2300      	movne	r3, #0
 8006ef0:	eba6 0807 	sub.w	r8, r6, r7
 8006ef4:	608b      	str	r3, [r1, #8]
 8006ef6:	f1b8 0f00 	cmp.w	r8, #0
 8006efa:	dd9c      	ble.n	8006e36 <__sflush_r+0x1a>
 8006efc:	6a21      	ldr	r1, [r4, #32]
 8006efe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006f00:	4643      	mov	r3, r8
 8006f02:	463a      	mov	r2, r7
 8006f04:	4628      	mov	r0, r5
 8006f06:	47b0      	blx	r6
 8006f08:	2800      	cmp	r0, #0
 8006f0a:	dc06      	bgt.n	8006f1a <__sflush_r+0xfe>
 8006f0c:	89a3      	ldrh	r3, [r4, #12]
 8006f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f12:	81a3      	strh	r3, [r4, #12]
 8006f14:	f04f 30ff 	mov.w	r0, #4294967295
 8006f18:	e78e      	b.n	8006e38 <__sflush_r+0x1c>
 8006f1a:	4407      	add	r7, r0
 8006f1c:	eba8 0800 	sub.w	r8, r8, r0
 8006f20:	e7e9      	b.n	8006ef6 <__sflush_r+0xda>
 8006f22:	bf00      	nop
 8006f24:	dfbffffe 	.word	0xdfbffffe

08006f28 <_fflush_r>:
 8006f28:	b538      	push	{r3, r4, r5, lr}
 8006f2a:	690b      	ldr	r3, [r1, #16]
 8006f2c:	4605      	mov	r5, r0
 8006f2e:	460c      	mov	r4, r1
 8006f30:	b913      	cbnz	r3, 8006f38 <_fflush_r+0x10>
 8006f32:	2500      	movs	r5, #0
 8006f34:	4628      	mov	r0, r5
 8006f36:	bd38      	pop	{r3, r4, r5, pc}
 8006f38:	b118      	cbz	r0, 8006f42 <_fflush_r+0x1a>
 8006f3a:	6a03      	ldr	r3, [r0, #32]
 8006f3c:	b90b      	cbnz	r3, 8006f42 <_fflush_r+0x1a>
 8006f3e:	f7fe f9cb 	bl	80052d8 <__sinit>
 8006f42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d0f3      	beq.n	8006f32 <_fflush_r+0xa>
 8006f4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006f4c:	07d0      	lsls	r0, r2, #31
 8006f4e:	d404      	bmi.n	8006f5a <_fflush_r+0x32>
 8006f50:	0599      	lsls	r1, r3, #22
 8006f52:	d402      	bmi.n	8006f5a <_fflush_r+0x32>
 8006f54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f56:	f7fe fb0e 	bl	8005576 <__retarget_lock_acquire_recursive>
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	4621      	mov	r1, r4
 8006f5e:	f7ff ff5d 	bl	8006e1c <__sflush_r>
 8006f62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006f64:	07da      	lsls	r2, r3, #31
 8006f66:	4605      	mov	r5, r0
 8006f68:	d4e4      	bmi.n	8006f34 <_fflush_r+0xc>
 8006f6a:	89a3      	ldrh	r3, [r4, #12]
 8006f6c:	059b      	lsls	r3, r3, #22
 8006f6e:	d4e1      	bmi.n	8006f34 <_fflush_r+0xc>
 8006f70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006f72:	f7fe fb01 	bl	8005578 <__retarget_lock_release_recursive>
 8006f76:	e7dd      	b.n	8006f34 <_fflush_r+0xc>

08006f78 <memmove>:
 8006f78:	4288      	cmp	r0, r1
 8006f7a:	b510      	push	{r4, lr}
 8006f7c:	eb01 0402 	add.w	r4, r1, r2
 8006f80:	d902      	bls.n	8006f88 <memmove+0x10>
 8006f82:	4284      	cmp	r4, r0
 8006f84:	4623      	mov	r3, r4
 8006f86:	d807      	bhi.n	8006f98 <memmove+0x20>
 8006f88:	1e43      	subs	r3, r0, #1
 8006f8a:	42a1      	cmp	r1, r4
 8006f8c:	d008      	beq.n	8006fa0 <memmove+0x28>
 8006f8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006f92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006f96:	e7f8      	b.n	8006f8a <memmove+0x12>
 8006f98:	4402      	add	r2, r0
 8006f9a:	4601      	mov	r1, r0
 8006f9c:	428a      	cmp	r2, r1
 8006f9e:	d100      	bne.n	8006fa2 <memmove+0x2a>
 8006fa0:	bd10      	pop	{r4, pc}
 8006fa2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006fa6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006faa:	e7f7      	b.n	8006f9c <memmove+0x24>

08006fac <_sbrk_r>:
 8006fac:	b538      	push	{r3, r4, r5, lr}
 8006fae:	4d06      	ldr	r5, [pc, #24]	; (8006fc8 <_sbrk_r+0x1c>)
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	4604      	mov	r4, r0
 8006fb4:	4608      	mov	r0, r1
 8006fb6:	602b      	str	r3, [r5, #0]
 8006fb8:	f7fa fbd0 	bl	800175c <_sbrk>
 8006fbc:	1c43      	adds	r3, r0, #1
 8006fbe:	d102      	bne.n	8006fc6 <_sbrk_r+0x1a>
 8006fc0:	682b      	ldr	r3, [r5, #0]
 8006fc2:	b103      	cbz	r3, 8006fc6 <_sbrk_r+0x1a>
 8006fc4:	6023      	str	r3, [r4, #0]
 8006fc6:	bd38      	pop	{r3, r4, r5, pc}
 8006fc8:	200005cc 	.word	0x200005cc

08006fcc <memcpy>:
 8006fcc:	440a      	add	r2, r1
 8006fce:	4291      	cmp	r1, r2
 8006fd0:	f100 33ff 	add.w	r3, r0, #4294967295
 8006fd4:	d100      	bne.n	8006fd8 <memcpy+0xc>
 8006fd6:	4770      	bx	lr
 8006fd8:	b510      	push	{r4, lr}
 8006fda:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006fde:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006fe2:	4291      	cmp	r1, r2
 8006fe4:	d1f9      	bne.n	8006fda <memcpy+0xe>
 8006fe6:	bd10      	pop	{r4, pc}

08006fe8 <__assert_func>:
 8006fe8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006fea:	4614      	mov	r4, r2
 8006fec:	461a      	mov	r2, r3
 8006fee:	4b09      	ldr	r3, [pc, #36]	; (8007014 <__assert_func+0x2c>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	4605      	mov	r5, r0
 8006ff4:	68d8      	ldr	r0, [r3, #12]
 8006ff6:	b14c      	cbz	r4, 800700c <__assert_func+0x24>
 8006ff8:	4b07      	ldr	r3, [pc, #28]	; (8007018 <__assert_func+0x30>)
 8006ffa:	9100      	str	r1, [sp, #0]
 8006ffc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007000:	4906      	ldr	r1, [pc, #24]	; (800701c <__assert_func+0x34>)
 8007002:	462b      	mov	r3, r5
 8007004:	f000 f872 	bl	80070ec <fiprintf>
 8007008:	f000 f882 	bl	8007110 <abort>
 800700c:	4b04      	ldr	r3, [pc, #16]	; (8007020 <__assert_func+0x38>)
 800700e:	461c      	mov	r4, r3
 8007010:	e7f3      	b.n	8006ffa <__assert_func+0x12>
 8007012:	bf00      	nop
 8007014:	2000006c 	.word	0x2000006c
 8007018:	08007997 	.word	0x08007997
 800701c:	080079a4 	.word	0x080079a4
 8007020:	080079d2 	.word	0x080079d2

08007024 <_calloc_r>:
 8007024:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007026:	fba1 2402 	umull	r2, r4, r1, r2
 800702a:	b94c      	cbnz	r4, 8007040 <_calloc_r+0x1c>
 800702c:	4611      	mov	r1, r2
 800702e:	9201      	str	r2, [sp, #4]
 8007030:	f7ff f994 	bl	800635c <_malloc_r>
 8007034:	9a01      	ldr	r2, [sp, #4]
 8007036:	4605      	mov	r5, r0
 8007038:	b930      	cbnz	r0, 8007048 <_calloc_r+0x24>
 800703a:	4628      	mov	r0, r5
 800703c:	b003      	add	sp, #12
 800703e:	bd30      	pop	{r4, r5, pc}
 8007040:	220c      	movs	r2, #12
 8007042:	6002      	str	r2, [r0, #0]
 8007044:	2500      	movs	r5, #0
 8007046:	e7f8      	b.n	800703a <_calloc_r+0x16>
 8007048:	4621      	mov	r1, r4
 800704a:	f7fe fa17 	bl	800547c <memset>
 800704e:	e7f4      	b.n	800703a <_calloc_r+0x16>

08007050 <__ascii_mbtowc>:
 8007050:	b082      	sub	sp, #8
 8007052:	b901      	cbnz	r1, 8007056 <__ascii_mbtowc+0x6>
 8007054:	a901      	add	r1, sp, #4
 8007056:	b142      	cbz	r2, 800706a <__ascii_mbtowc+0x1a>
 8007058:	b14b      	cbz	r3, 800706e <__ascii_mbtowc+0x1e>
 800705a:	7813      	ldrb	r3, [r2, #0]
 800705c:	600b      	str	r3, [r1, #0]
 800705e:	7812      	ldrb	r2, [r2, #0]
 8007060:	1e10      	subs	r0, r2, #0
 8007062:	bf18      	it	ne
 8007064:	2001      	movne	r0, #1
 8007066:	b002      	add	sp, #8
 8007068:	4770      	bx	lr
 800706a:	4610      	mov	r0, r2
 800706c:	e7fb      	b.n	8007066 <__ascii_mbtowc+0x16>
 800706e:	f06f 0001 	mvn.w	r0, #1
 8007072:	e7f8      	b.n	8007066 <__ascii_mbtowc+0x16>

08007074 <_realloc_r>:
 8007074:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007078:	4680      	mov	r8, r0
 800707a:	4614      	mov	r4, r2
 800707c:	460e      	mov	r6, r1
 800707e:	b921      	cbnz	r1, 800708a <_realloc_r+0x16>
 8007080:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007084:	4611      	mov	r1, r2
 8007086:	f7ff b969 	b.w	800635c <_malloc_r>
 800708a:	b92a      	cbnz	r2, 8007098 <_realloc_r+0x24>
 800708c:	f7ff f8f2 	bl	8006274 <_free_r>
 8007090:	4625      	mov	r5, r4
 8007092:	4628      	mov	r0, r5
 8007094:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007098:	f000 f841 	bl	800711e <_malloc_usable_size_r>
 800709c:	4284      	cmp	r4, r0
 800709e:	4607      	mov	r7, r0
 80070a0:	d802      	bhi.n	80070a8 <_realloc_r+0x34>
 80070a2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80070a6:	d812      	bhi.n	80070ce <_realloc_r+0x5a>
 80070a8:	4621      	mov	r1, r4
 80070aa:	4640      	mov	r0, r8
 80070ac:	f7ff f956 	bl	800635c <_malloc_r>
 80070b0:	4605      	mov	r5, r0
 80070b2:	2800      	cmp	r0, #0
 80070b4:	d0ed      	beq.n	8007092 <_realloc_r+0x1e>
 80070b6:	42bc      	cmp	r4, r7
 80070b8:	4622      	mov	r2, r4
 80070ba:	4631      	mov	r1, r6
 80070bc:	bf28      	it	cs
 80070be:	463a      	movcs	r2, r7
 80070c0:	f7ff ff84 	bl	8006fcc <memcpy>
 80070c4:	4631      	mov	r1, r6
 80070c6:	4640      	mov	r0, r8
 80070c8:	f7ff f8d4 	bl	8006274 <_free_r>
 80070cc:	e7e1      	b.n	8007092 <_realloc_r+0x1e>
 80070ce:	4635      	mov	r5, r6
 80070d0:	e7df      	b.n	8007092 <_realloc_r+0x1e>

080070d2 <__ascii_wctomb>:
 80070d2:	b149      	cbz	r1, 80070e8 <__ascii_wctomb+0x16>
 80070d4:	2aff      	cmp	r2, #255	; 0xff
 80070d6:	bf85      	ittet	hi
 80070d8:	238a      	movhi	r3, #138	; 0x8a
 80070da:	6003      	strhi	r3, [r0, #0]
 80070dc:	700a      	strbls	r2, [r1, #0]
 80070de:	f04f 30ff 	movhi.w	r0, #4294967295
 80070e2:	bf98      	it	ls
 80070e4:	2001      	movls	r0, #1
 80070e6:	4770      	bx	lr
 80070e8:	4608      	mov	r0, r1
 80070ea:	4770      	bx	lr

080070ec <fiprintf>:
 80070ec:	b40e      	push	{r1, r2, r3}
 80070ee:	b503      	push	{r0, r1, lr}
 80070f0:	4601      	mov	r1, r0
 80070f2:	ab03      	add	r3, sp, #12
 80070f4:	4805      	ldr	r0, [pc, #20]	; (800710c <fiprintf+0x20>)
 80070f6:	f853 2b04 	ldr.w	r2, [r3], #4
 80070fa:	6800      	ldr	r0, [r0, #0]
 80070fc:	9301      	str	r3, [sp, #4]
 80070fe:	f000 f83f 	bl	8007180 <_vfiprintf_r>
 8007102:	b002      	add	sp, #8
 8007104:	f85d eb04 	ldr.w	lr, [sp], #4
 8007108:	b003      	add	sp, #12
 800710a:	4770      	bx	lr
 800710c:	2000006c 	.word	0x2000006c

08007110 <abort>:
 8007110:	b508      	push	{r3, lr}
 8007112:	2006      	movs	r0, #6
 8007114:	f000 fa0c 	bl	8007530 <raise>
 8007118:	2001      	movs	r0, #1
 800711a:	f7fa faa7 	bl	800166c <_exit>

0800711e <_malloc_usable_size_r>:
 800711e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007122:	1f18      	subs	r0, r3, #4
 8007124:	2b00      	cmp	r3, #0
 8007126:	bfbc      	itt	lt
 8007128:	580b      	ldrlt	r3, [r1, r0]
 800712a:	18c0      	addlt	r0, r0, r3
 800712c:	4770      	bx	lr

0800712e <__sfputc_r>:
 800712e:	6893      	ldr	r3, [r2, #8]
 8007130:	3b01      	subs	r3, #1
 8007132:	2b00      	cmp	r3, #0
 8007134:	b410      	push	{r4}
 8007136:	6093      	str	r3, [r2, #8]
 8007138:	da08      	bge.n	800714c <__sfputc_r+0x1e>
 800713a:	6994      	ldr	r4, [r2, #24]
 800713c:	42a3      	cmp	r3, r4
 800713e:	db01      	blt.n	8007144 <__sfputc_r+0x16>
 8007140:	290a      	cmp	r1, #10
 8007142:	d103      	bne.n	800714c <__sfputc_r+0x1e>
 8007144:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007148:	f000 b934 	b.w	80073b4 <__swbuf_r>
 800714c:	6813      	ldr	r3, [r2, #0]
 800714e:	1c58      	adds	r0, r3, #1
 8007150:	6010      	str	r0, [r2, #0]
 8007152:	7019      	strb	r1, [r3, #0]
 8007154:	4608      	mov	r0, r1
 8007156:	f85d 4b04 	ldr.w	r4, [sp], #4
 800715a:	4770      	bx	lr

0800715c <__sfputs_r>:
 800715c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800715e:	4606      	mov	r6, r0
 8007160:	460f      	mov	r7, r1
 8007162:	4614      	mov	r4, r2
 8007164:	18d5      	adds	r5, r2, r3
 8007166:	42ac      	cmp	r4, r5
 8007168:	d101      	bne.n	800716e <__sfputs_r+0x12>
 800716a:	2000      	movs	r0, #0
 800716c:	e007      	b.n	800717e <__sfputs_r+0x22>
 800716e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007172:	463a      	mov	r2, r7
 8007174:	4630      	mov	r0, r6
 8007176:	f7ff ffda 	bl	800712e <__sfputc_r>
 800717a:	1c43      	adds	r3, r0, #1
 800717c:	d1f3      	bne.n	8007166 <__sfputs_r+0xa>
 800717e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007180 <_vfiprintf_r>:
 8007180:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007184:	460d      	mov	r5, r1
 8007186:	b09d      	sub	sp, #116	; 0x74
 8007188:	4614      	mov	r4, r2
 800718a:	4698      	mov	r8, r3
 800718c:	4606      	mov	r6, r0
 800718e:	b118      	cbz	r0, 8007198 <_vfiprintf_r+0x18>
 8007190:	6a03      	ldr	r3, [r0, #32]
 8007192:	b90b      	cbnz	r3, 8007198 <_vfiprintf_r+0x18>
 8007194:	f7fe f8a0 	bl	80052d8 <__sinit>
 8007198:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800719a:	07d9      	lsls	r1, r3, #31
 800719c:	d405      	bmi.n	80071aa <_vfiprintf_r+0x2a>
 800719e:	89ab      	ldrh	r3, [r5, #12]
 80071a0:	059a      	lsls	r2, r3, #22
 80071a2:	d402      	bmi.n	80071aa <_vfiprintf_r+0x2a>
 80071a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071a6:	f7fe f9e6 	bl	8005576 <__retarget_lock_acquire_recursive>
 80071aa:	89ab      	ldrh	r3, [r5, #12]
 80071ac:	071b      	lsls	r3, r3, #28
 80071ae:	d501      	bpl.n	80071b4 <_vfiprintf_r+0x34>
 80071b0:	692b      	ldr	r3, [r5, #16]
 80071b2:	b99b      	cbnz	r3, 80071dc <_vfiprintf_r+0x5c>
 80071b4:	4629      	mov	r1, r5
 80071b6:	4630      	mov	r0, r6
 80071b8:	f000 f93a 	bl	8007430 <__swsetup_r>
 80071bc:	b170      	cbz	r0, 80071dc <_vfiprintf_r+0x5c>
 80071be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80071c0:	07dc      	lsls	r4, r3, #31
 80071c2:	d504      	bpl.n	80071ce <_vfiprintf_r+0x4e>
 80071c4:	f04f 30ff 	mov.w	r0, #4294967295
 80071c8:	b01d      	add	sp, #116	; 0x74
 80071ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071ce:	89ab      	ldrh	r3, [r5, #12]
 80071d0:	0598      	lsls	r0, r3, #22
 80071d2:	d4f7      	bmi.n	80071c4 <_vfiprintf_r+0x44>
 80071d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80071d6:	f7fe f9cf 	bl	8005578 <__retarget_lock_release_recursive>
 80071da:	e7f3      	b.n	80071c4 <_vfiprintf_r+0x44>
 80071dc:	2300      	movs	r3, #0
 80071de:	9309      	str	r3, [sp, #36]	; 0x24
 80071e0:	2320      	movs	r3, #32
 80071e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80071e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80071ea:	2330      	movs	r3, #48	; 0x30
 80071ec:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80073a0 <_vfiprintf_r+0x220>
 80071f0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80071f4:	f04f 0901 	mov.w	r9, #1
 80071f8:	4623      	mov	r3, r4
 80071fa:	469a      	mov	sl, r3
 80071fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007200:	b10a      	cbz	r2, 8007206 <_vfiprintf_r+0x86>
 8007202:	2a25      	cmp	r2, #37	; 0x25
 8007204:	d1f9      	bne.n	80071fa <_vfiprintf_r+0x7a>
 8007206:	ebba 0b04 	subs.w	fp, sl, r4
 800720a:	d00b      	beq.n	8007224 <_vfiprintf_r+0xa4>
 800720c:	465b      	mov	r3, fp
 800720e:	4622      	mov	r2, r4
 8007210:	4629      	mov	r1, r5
 8007212:	4630      	mov	r0, r6
 8007214:	f7ff ffa2 	bl	800715c <__sfputs_r>
 8007218:	3001      	adds	r0, #1
 800721a:	f000 80a9 	beq.w	8007370 <_vfiprintf_r+0x1f0>
 800721e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007220:	445a      	add	r2, fp
 8007222:	9209      	str	r2, [sp, #36]	; 0x24
 8007224:	f89a 3000 	ldrb.w	r3, [sl]
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 80a1 	beq.w	8007370 <_vfiprintf_r+0x1f0>
 800722e:	2300      	movs	r3, #0
 8007230:	f04f 32ff 	mov.w	r2, #4294967295
 8007234:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007238:	f10a 0a01 	add.w	sl, sl, #1
 800723c:	9304      	str	r3, [sp, #16]
 800723e:	9307      	str	r3, [sp, #28]
 8007240:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007244:	931a      	str	r3, [sp, #104]	; 0x68
 8007246:	4654      	mov	r4, sl
 8007248:	2205      	movs	r2, #5
 800724a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800724e:	4854      	ldr	r0, [pc, #336]	; (80073a0 <_vfiprintf_r+0x220>)
 8007250:	f7f8 ffbe 	bl	80001d0 <memchr>
 8007254:	9a04      	ldr	r2, [sp, #16]
 8007256:	b9d8      	cbnz	r0, 8007290 <_vfiprintf_r+0x110>
 8007258:	06d1      	lsls	r1, r2, #27
 800725a:	bf44      	itt	mi
 800725c:	2320      	movmi	r3, #32
 800725e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007262:	0713      	lsls	r3, r2, #28
 8007264:	bf44      	itt	mi
 8007266:	232b      	movmi	r3, #43	; 0x2b
 8007268:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800726c:	f89a 3000 	ldrb.w	r3, [sl]
 8007270:	2b2a      	cmp	r3, #42	; 0x2a
 8007272:	d015      	beq.n	80072a0 <_vfiprintf_r+0x120>
 8007274:	9a07      	ldr	r2, [sp, #28]
 8007276:	4654      	mov	r4, sl
 8007278:	2000      	movs	r0, #0
 800727a:	f04f 0c0a 	mov.w	ip, #10
 800727e:	4621      	mov	r1, r4
 8007280:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007284:	3b30      	subs	r3, #48	; 0x30
 8007286:	2b09      	cmp	r3, #9
 8007288:	d94d      	bls.n	8007326 <_vfiprintf_r+0x1a6>
 800728a:	b1b0      	cbz	r0, 80072ba <_vfiprintf_r+0x13a>
 800728c:	9207      	str	r2, [sp, #28]
 800728e:	e014      	b.n	80072ba <_vfiprintf_r+0x13a>
 8007290:	eba0 0308 	sub.w	r3, r0, r8
 8007294:	fa09 f303 	lsl.w	r3, r9, r3
 8007298:	4313      	orrs	r3, r2
 800729a:	9304      	str	r3, [sp, #16]
 800729c:	46a2      	mov	sl, r4
 800729e:	e7d2      	b.n	8007246 <_vfiprintf_r+0xc6>
 80072a0:	9b03      	ldr	r3, [sp, #12]
 80072a2:	1d19      	adds	r1, r3, #4
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	9103      	str	r1, [sp, #12]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	bfbb      	ittet	lt
 80072ac:	425b      	neglt	r3, r3
 80072ae:	f042 0202 	orrlt.w	r2, r2, #2
 80072b2:	9307      	strge	r3, [sp, #28]
 80072b4:	9307      	strlt	r3, [sp, #28]
 80072b6:	bfb8      	it	lt
 80072b8:	9204      	strlt	r2, [sp, #16]
 80072ba:	7823      	ldrb	r3, [r4, #0]
 80072bc:	2b2e      	cmp	r3, #46	; 0x2e
 80072be:	d10c      	bne.n	80072da <_vfiprintf_r+0x15a>
 80072c0:	7863      	ldrb	r3, [r4, #1]
 80072c2:	2b2a      	cmp	r3, #42	; 0x2a
 80072c4:	d134      	bne.n	8007330 <_vfiprintf_r+0x1b0>
 80072c6:	9b03      	ldr	r3, [sp, #12]
 80072c8:	1d1a      	adds	r2, r3, #4
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	9203      	str	r2, [sp, #12]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	bfb8      	it	lt
 80072d2:	f04f 33ff 	movlt.w	r3, #4294967295
 80072d6:	3402      	adds	r4, #2
 80072d8:	9305      	str	r3, [sp, #20]
 80072da:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80073b0 <_vfiprintf_r+0x230>
 80072de:	7821      	ldrb	r1, [r4, #0]
 80072e0:	2203      	movs	r2, #3
 80072e2:	4650      	mov	r0, sl
 80072e4:	f7f8 ff74 	bl	80001d0 <memchr>
 80072e8:	b138      	cbz	r0, 80072fa <_vfiprintf_r+0x17a>
 80072ea:	9b04      	ldr	r3, [sp, #16]
 80072ec:	eba0 000a 	sub.w	r0, r0, sl
 80072f0:	2240      	movs	r2, #64	; 0x40
 80072f2:	4082      	lsls	r2, r0
 80072f4:	4313      	orrs	r3, r2
 80072f6:	3401      	adds	r4, #1
 80072f8:	9304      	str	r3, [sp, #16]
 80072fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072fe:	4829      	ldr	r0, [pc, #164]	; (80073a4 <_vfiprintf_r+0x224>)
 8007300:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007304:	2206      	movs	r2, #6
 8007306:	f7f8 ff63 	bl	80001d0 <memchr>
 800730a:	2800      	cmp	r0, #0
 800730c:	d03f      	beq.n	800738e <_vfiprintf_r+0x20e>
 800730e:	4b26      	ldr	r3, [pc, #152]	; (80073a8 <_vfiprintf_r+0x228>)
 8007310:	bb1b      	cbnz	r3, 800735a <_vfiprintf_r+0x1da>
 8007312:	9b03      	ldr	r3, [sp, #12]
 8007314:	3307      	adds	r3, #7
 8007316:	f023 0307 	bic.w	r3, r3, #7
 800731a:	3308      	adds	r3, #8
 800731c:	9303      	str	r3, [sp, #12]
 800731e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007320:	443b      	add	r3, r7
 8007322:	9309      	str	r3, [sp, #36]	; 0x24
 8007324:	e768      	b.n	80071f8 <_vfiprintf_r+0x78>
 8007326:	fb0c 3202 	mla	r2, ip, r2, r3
 800732a:	460c      	mov	r4, r1
 800732c:	2001      	movs	r0, #1
 800732e:	e7a6      	b.n	800727e <_vfiprintf_r+0xfe>
 8007330:	2300      	movs	r3, #0
 8007332:	3401      	adds	r4, #1
 8007334:	9305      	str	r3, [sp, #20]
 8007336:	4619      	mov	r1, r3
 8007338:	f04f 0c0a 	mov.w	ip, #10
 800733c:	4620      	mov	r0, r4
 800733e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007342:	3a30      	subs	r2, #48	; 0x30
 8007344:	2a09      	cmp	r2, #9
 8007346:	d903      	bls.n	8007350 <_vfiprintf_r+0x1d0>
 8007348:	2b00      	cmp	r3, #0
 800734a:	d0c6      	beq.n	80072da <_vfiprintf_r+0x15a>
 800734c:	9105      	str	r1, [sp, #20]
 800734e:	e7c4      	b.n	80072da <_vfiprintf_r+0x15a>
 8007350:	fb0c 2101 	mla	r1, ip, r1, r2
 8007354:	4604      	mov	r4, r0
 8007356:	2301      	movs	r3, #1
 8007358:	e7f0      	b.n	800733c <_vfiprintf_r+0x1bc>
 800735a:	ab03      	add	r3, sp, #12
 800735c:	9300      	str	r3, [sp, #0]
 800735e:	462a      	mov	r2, r5
 8007360:	4b12      	ldr	r3, [pc, #72]	; (80073ac <_vfiprintf_r+0x22c>)
 8007362:	a904      	add	r1, sp, #16
 8007364:	4630      	mov	r0, r6
 8007366:	f7fd fb65 	bl	8004a34 <_printf_float>
 800736a:	4607      	mov	r7, r0
 800736c:	1c78      	adds	r0, r7, #1
 800736e:	d1d6      	bne.n	800731e <_vfiprintf_r+0x19e>
 8007370:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007372:	07d9      	lsls	r1, r3, #31
 8007374:	d405      	bmi.n	8007382 <_vfiprintf_r+0x202>
 8007376:	89ab      	ldrh	r3, [r5, #12]
 8007378:	059a      	lsls	r2, r3, #22
 800737a:	d402      	bmi.n	8007382 <_vfiprintf_r+0x202>
 800737c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800737e:	f7fe f8fb 	bl	8005578 <__retarget_lock_release_recursive>
 8007382:	89ab      	ldrh	r3, [r5, #12]
 8007384:	065b      	lsls	r3, r3, #25
 8007386:	f53f af1d 	bmi.w	80071c4 <_vfiprintf_r+0x44>
 800738a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800738c:	e71c      	b.n	80071c8 <_vfiprintf_r+0x48>
 800738e:	ab03      	add	r3, sp, #12
 8007390:	9300      	str	r3, [sp, #0]
 8007392:	462a      	mov	r2, r5
 8007394:	4b05      	ldr	r3, [pc, #20]	; (80073ac <_vfiprintf_r+0x22c>)
 8007396:	a904      	add	r1, sp, #16
 8007398:	4630      	mov	r0, r6
 800739a:	f7fd fdef 	bl	8004f7c <_printf_i>
 800739e:	e7e4      	b.n	800736a <_vfiprintf_r+0x1ea>
 80073a0:	0800797c 	.word	0x0800797c
 80073a4:	08007986 	.word	0x08007986
 80073a8:	08004a35 	.word	0x08004a35
 80073ac:	0800715d 	.word	0x0800715d
 80073b0:	08007982 	.word	0x08007982

080073b4 <__swbuf_r>:
 80073b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80073b6:	460e      	mov	r6, r1
 80073b8:	4614      	mov	r4, r2
 80073ba:	4605      	mov	r5, r0
 80073bc:	b118      	cbz	r0, 80073c6 <__swbuf_r+0x12>
 80073be:	6a03      	ldr	r3, [r0, #32]
 80073c0:	b90b      	cbnz	r3, 80073c6 <__swbuf_r+0x12>
 80073c2:	f7fd ff89 	bl	80052d8 <__sinit>
 80073c6:	69a3      	ldr	r3, [r4, #24]
 80073c8:	60a3      	str	r3, [r4, #8]
 80073ca:	89a3      	ldrh	r3, [r4, #12]
 80073cc:	071a      	lsls	r2, r3, #28
 80073ce:	d525      	bpl.n	800741c <__swbuf_r+0x68>
 80073d0:	6923      	ldr	r3, [r4, #16]
 80073d2:	b31b      	cbz	r3, 800741c <__swbuf_r+0x68>
 80073d4:	6823      	ldr	r3, [r4, #0]
 80073d6:	6922      	ldr	r2, [r4, #16]
 80073d8:	1a98      	subs	r0, r3, r2
 80073da:	6963      	ldr	r3, [r4, #20]
 80073dc:	b2f6      	uxtb	r6, r6
 80073de:	4283      	cmp	r3, r0
 80073e0:	4637      	mov	r7, r6
 80073e2:	dc04      	bgt.n	80073ee <__swbuf_r+0x3a>
 80073e4:	4621      	mov	r1, r4
 80073e6:	4628      	mov	r0, r5
 80073e8:	f7ff fd9e 	bl	8006f28 <_fflush_r>
 80073ec:	b9e0      	cbnz	r0, 8007428 <__swbuf_r+0x74>
 80073ee:	68a3      	ldr	r3, [r4, #8]
 80073f0:	3b01      	subs	r3, #1
 80073f2:	60a3      	str	r3, [r4, #8]
 80073f4:	6823      	ldr	r3, [r4, #0]
 80073f6:	1c5a      	adds	r2, r3, #1
 80073f8:	6022      	str	r2, [r4, #0]
 80073fa:	701e      	strb	r6, [r3, #0]
 80073fc:	6962      	ldr	r2, [r4, #20]
 80073fe:	1c43      	adds	r3, r0, #1
 8007400:	429a      	cmp	r2, r3
 8007402:	d004      	beq.n	800740e <__swbuf_r+0x5a>
 8007404:	89a3      	ldrh	r3, [r4, #12]
 8007406:	07db      	lsls	r3, r3, #31
 8007408:	d506      	bpl.n	8007418 <__swbuf_r+0x64>
 800740a:	2e0a      	cmp	r6, #10
 800740c:	d104      	bne.n	8007418 <__swbuf_r+0x64>
 800740e:	4621      	mov	r1, r4
 8007410:	4628      	mov	r0, r5
 8007412:	f7ff fd89 	bl	8006f28 <_fflush_r>
 8007416:	b938      	cbnz	r0, 8007428 <__swbuf_r+0x74>
 8007418:	4638      	mov	r0, r7
 800741a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800741c:	4621      	mov	r1, r4
 800741e:	4628      	mov	r0, r5
 8007420:	f000 f806 	bl	8007430 <__swsetup_r>
 8007424:	2800      	cmp	r0, #0
 8007426:	d0d5      	beq.n	80073d4 <__swbuf_r+0x20>
 8007428:	f04f 37ff 	mov.w	r7, #4294967295
 800742c:	e7f4      	b.n	8007418 <__swbuf_r+0x64>
	...

08007430 <__swsetup_r>:
 8007430:	b538      	push	{r3, r4, r5, lr}
 8007432:	4b2a      	ldr	r3, [pc, #168]	; (80074dc <__swsetup_r+0xac>)
 8007434:	4605      	mov	r5, r0
 8007436:	6818      	ldr	r0, [r3, #0]
 8007438:	460c      	mov	r4, r1
 800743a:	b118      	cbz	r0, 8007444 <__swsetup_r+0x14>
 800743c:	6a03      	ldr	r3, [r0, #32]
 800743e:	b90b      	cbnz	r3, 8007444 <__swsetup_r+0x14>
 8007440:	f7fd ff4a 	bl	80052d8 <__sinit>
 8007444:	89a3      	ldrh	r3, [r4, #12]
 8007446:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800744a:	0718      	lsls	r0, r3, #28
 800744c:	d422      	bmi.n	8007494 <__swsetup_r+0x64>
 800744e:	06d9      	lsls	r1, r3, #27
 8007450:	d407      	bmi.n	8007462 <__swsetup_r+0x32>
 8007452:	2309      	movs	r3, #9
 8007454:	602b      	str	r3, [r5, #0]
 8007456:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800745a:	81a3      	strh	r3, [r4, #12]
 800745c:	f04f 30ff 	mov.w	r0, #4294967295
 8007460:	e034      	b.n	80074cc <__swsetup_r+0x9c>
 8007462:	0758      	lsls	r0, r3, #29
 8007464:	d512      	bpl.n	800748c <__swsetup_r+0x5c>
 8007466:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007468:	b141      	cbz	r1, 800747c <__swsetup_r+0x4c>
 800746a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800746e:	4299      	cmp	r1, r3
 8007470:	d002      	beq.n	8007478 <__swsetup_r+0x48>
 8007472:	4628      	mov	r0, r5
 8007474:	f7fe fefe 	bl	8006274 <_free_r>
 8007478:	2300      	movs	r3, #0
 800747a:	6363      	str	r3, [r4, #52]	; 0x34
 800747c:	89a3      	ldrh	r3, [r4, #12]
 800747e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007482:	81a3      	strh	r3, [r4, #12]
 8007484:	2300      	movs	r3, #0
 8007486:	6063      	str	r3, [r4, #4]
 8007488:	6923      	ldr	r3, [r4, #16]
 800748a:	6023      	str	r3, [r4, #0]
 800748c:	89a3      	ldrh	r3, [r4, #12]
 800748e:	f043 0308 	orr.w	r3, r3, #8
 8007492:	81a3      	strh	r3, [r4, #12]
 8007494:	6923      	ldr	r3, [r4, #16]
 8007496:	b94b      	cbnz	r3, 80074ac <__swsetup_r+0x7c>
 8007498:	89a3      	ldrh	r3, [r4, #12]
 800749a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800749e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80074a2:	d003      	beq.n	80074ac <__swsetup_r+0x7c>
 80074a4:	4621      	mov	r1, r4
 80074a6:	4628      	mov	r0, r5
 80074a8:	f000 f884 	bl	80075b4 <__smakebuf_r>
 80074ac:	89a0      	ldrh	r0, [r4, #12]
 80074ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80074b2:	f010 0301 	ands.w	r3, r0, #1
 80074b6:	d00a      	beq.n	80074ce <__swsetup_r+0x9e>
 80074b8:	2300      	movs	r3, #0
 80074ba:	60a3      	str	r3, [r4, #8]
 80074bc:	6963      	ldr	r3, [r4, #20]
 80074be:	425b      	negs	r3, r3
 80074c0:	61a3      	str	r3, [r4, #24]
 80074c2:	6923      	ldr	r3, [r4, #16]
 80074c4:	b943      	cbnz	r3, 80074d8 <__swsetup_r+0xa8>
 80074c6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80074ca:	d1c4      	bne.n	8007456 <__swsetup_r+0x26>
 80074cc:	bd38      	pop	{r3, r4, r5, pc}
 80074ce:	0781      	lsls	r1, r0, #30
 80074d0:	bf58      	it	pl
 80074d2:	6963      	ldrpl	r3, [r4, #20]
 80074d4:	60a3      	str	r3, [r4, #8]
 80074d6:	e7f4      	b.n	80074c2 <__swsetup_r+0x92>
 80074d8:	2000      	movs	r0, #0
 80074da:	e7f7      	b.n	80074cc <__swsetup_r+0x9c>
 80074dc:	2000006c 	.word	0x2000006c

080074e0 <_raise_r>:
 80074e0:	291f      	cmp	r1, #31
 80074e2:	b538      	push	{r3, r4, r5, lr}
 80074e4:	4604      	mov	r4, r0
 80074e6:	460d      	mov	r5, r1
 80074e8:	d904      	bls.n	80074f4 <_raise_r+0x14>
 80074ea:	2316      	movs	r3, #22
 80074ec:	6003      	str	r3, [r0, #0]
 80074ee:	f04f 30ff 	mov.w	r0, #4294967295
 80074f2:	bd38      	pop	{r3, r4, r5, pc}
 80074f4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80074f6:	b112      	cbz	r2, 80074fe <_raise_r+0x1e>
 80074f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80074fc:	b94b      	cbnz	r3, 8007512 <_raise_r+0x32>
 80074fe:	4620      	mov	r0, r4
 8007500:	f000 f830 	bl	8007564 <_getpid_r>
 8007504:	462a      	mov	r2, r5
 8007506:	4601      	mov	r1, r0
 8007508:	4620      	mov	r0, r4
 800750a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800750e:	f000 b817 	b.w	8007540 <_kill_r>
 8007512:	2b01      	cmp	r3, #1
 8007514:	d00a      	beq.n	800752c <_raise_r+0x4c>
 8007516:	1c59      	adds	r1, r3, #1
 8007518:	d103      	bne.n	8007522 <_raise_r+0x42>
 800751a:	2316      	movs	r3, #22
 800751c:	6003      	str	r3, [r0, #0]
 800751e:	2001      	movs	r0, #1
 8007520:	e7e7      	b.n	80074f2 <_raise_r+0x12>
 8007522:	2400      	movs	r4, #0
 8007524:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007528:	4628      	mov	r0, r5
 800752a:	4798      	blx	r3
 800752c:	2000      	movs	r0, #0
 800752e:	e7e0      	b.n	80074f2 <_raise_r+0x12>

08007530 <raise>:
 8007530:	4b02      	ldr	r3, [pc, #8]	; (800753c <raise+0xc>)
 8007532:	4601      	mov	r1, r0
 8007534:	6818      	ldr	r0, [r3, #0]
 8007536:	f7ff bfd3 	b.w	80074e0 <_raise_r>
 800753a:	bf00      	nop
 800753c:	2000006c 	.word	0x2000006c

08007540 <_kill_r>:
 8007540:	b538      	push	{r3, r4, r5, lr}
 8007542:	4d07      	ldr	r5, [pc, #28]	; (8007560 <_kill_r+0x20>)
 8007544:	2300      	movs	r3, #0
 8007546:	4604      	mov	r4, r0
 8007548:	4608      	mov	r0, r1
 800754a:	4611      	mov	r1, r2
 800754c:	602b      	str	r3, [r5, #0]
 800754e:	f7fa f87d 	bl	800164c <_kill>
 8007552:	1c43      	adds	r3, r0, #1
 8007554:	d102      	bne.n	800755c <_kill_r+0x1c>
 8007556:	682b      	ldr	r3, [r5, #0]
 8007558:	b103      	cbz	r3, 800755c <_kill_r+0x1c>
 800755a:	6023      	str	r3, [r4, #0]
 800755c:	bd38      	pop	{r3, r4, r5, pc}
 800755e:	bf00      	nop
 8007560:	200005cc 	.word	0x200005cc

08007564 <_getpid_r>:
 8007564:	f7fa b86a 	b.w	800163c <_getpid>

08007568 <__swhatbuf_r>:
 8007568:	b570      	push	{r4, r5, r6, lr}
 800756a:	460c      	mov	r4, r1
 800756c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007570:	2900      	cmp	r1, #0
 8007572:	b096      	sub	sp, #88	; 0x58
 8007574:	4615      	mov	r5, r2
 8007576:	461e      	mov	r6, r3
 8007578:	da0d      	bge.n	8007596 <__swhatbuf_r+0x2e>
 800757a:	89a3      	ldrh	r3, [r4, #12]
 800757c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8007580:	f04f 0100 	mov.w	r1, #0
 8007584:	bf0c      	ite	eq
 8007586:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800758a:	2340      	movne	r3, #64	; 0x40
 800758c:	2000      	movs	r0, #0
 800758e:	6031      	str	r1, [r6, #0]
 8007590:	602b      	str	r3, [r5, #0]
 8007592:	b016      	add	sp, #88	; 0x58
 8007594:	bd70      	pop	{r4, r5, r6, pc}
 8007596:	466a      	mov	r2, sp
 8007598:	f000 f848 	bl	800762c <_fstat_r>
 800759c:	2800      	cmp	r0, #0
 800759e:	dbec      	blt.n	800757a <__swhatbuf_r+0x12>
 80075a0:	9901      	ldr	r1, [sp, #4]
 80075a2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80075a6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80075aa:	4259      	negs	r1, r3
 80075ac:	4159      	adcs	r1, r3
 80075ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075b2:	e7eb      	b.n	800758c <__swhatbuf_r+0x24>

080075b4 <__smakebuf_r>:
 80075b4:	898b      	ldrh	r3, [r1, #12]
 80075b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80075b8:	079d      	lsls	r5, r3, #30
 80075ba:	4606      	mov	r6, r0
 80075bc:	460c      	mov	r4, r1
 80075be:	d507      	bpl.n	80075d0 <__smakebuf_r+0x1c>
 80075c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80075c4:	6023      	str	r3, [r4, #0]
 80075c6:	6123      	str	r3, [r4, #16]
 80075c8:	2301      	movs	r3, #1
 80075ca:	6163      	str	r3, [r4, #20]
 80075cc:	b002      	add	sp, #8
 80075ce:	bd70      	pop	{r4, r5, r6, pc}
 80075d0:	ab01      	add	r3, sp, #4
 80075d2:	466a      	mov	r2, sp
 80075d4:	f7ff ffc8 	bl	8007568 <__swhatbuf_r>
 80075d8:	9900      	ldr	r1, [sp, #0]
 80075da:	4605      	mov	r5, r0
 80075dc:	4630      	mov	r0, r6
 80075de:	f7fe febd 	bl	800635c <_malloc_r>
 80075e2:	b948      	cbnz	r0, 80075f8 <__smakebuf_r+0x44>
 80075e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075e8:	059a      	lsls	r2, r3, #22
 80075ea:	d4ef      	bmi.n	80075cc <__smakebuf_r+0x18>
 80075ec:	f023 0303 	bic.w	r3, r3, #3
 80075f0:	f043 0302 	orr.w	r3, r3, #2
 80075f4:	81a3      	strh	r3, [r4, #12]
 80075f6:	e7e3      	b.n	80075c0 <__smakebuf_r+0xc>
 80075f8:	89a3      	ldrh	r3, [r4, #12]
 80075fa:	6020      	str	r0, [r4, #0]
 80075fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007600:	81a3      	strh	r3, [r4, #12]
 8007602:	9b00      	ldr	r3, [sp, #0]
 8007604:	6163      	str	r3, [r4, #20]
 8007606:	9b01      	ldr	r3, [sp, #4]
 8007608:	6120      	str	r0, [r4, #16]
 800760a:	b15b      	cbz	r3, 8007624 <__smakebuf_r+0x70>
 800760c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007610:	4630      	mov	r0, r6
 8007612:	f000 f81d 	bl	8007650 <_isatty_r>
 8007616:	b128      	cbz	r0, 8007624 <__smakebuf_r+0x70>
 8007618:	89a3      	ldrh	r3, [r4, #12]
 800761a:	f023 0303 	bic.w	r3, r3, #3
 800761e:	f043 0301 	orr.w	r3, r3, #1
 8007622:	81a3      	strh	r3, [r4, #12]
 8007624:	89a3      	ldrh	r3, [r4, #12]
 8007626:	431d      	orrs	r5, r3
 8007628:	81a5      	strh	r5, [r4, #12]
 800762a:	e7cf      	b.n	80075cc <__smakebuf_r+0x18>

0800762c <_fstat_r>:
 800762c:	b538      	push	{r3, r4, r5, lr}
 800762e:	4d07      	ldr	r5, [pc, #28]	; (800764c <_fstat_r+0x20>)
 8007630:	2300      	movs	r3, #0
 8007632:	4604      	mov	r4, r0
 8007634:	4608      	mov	r0, r1
 8007636:	4611      	mov	r1, r2
 8007638:	602b      	str	r3, [r5, #0]
 800763a:	f7fa f866 	bl	800170a <_fstat>
 800763e:	1c43      	adds	r3, r0, #1
 8007640:	d102      	bne.n	8007648 <_fstat_r+0x1c>
 8007642:	682b      	ldr	r3, [r5, #0]
 8007644:	b103      	cbz	r3, 8007648 <_fstat_r+0x1c>
 8007646:	6023      	str	r3, [r4, #0]
 8007648:	bd38      	pop	{r3, r4, r5, pc}
 800764a:	bf00      	nop
 800764c:	200005cc 	.word	0x200005cc

08007650 <_isatty_r>:
 8007650:	b538      	push	{r3, r4, r5, lr}
 8007652:	4d06      	ldr	r5, [pc, #24]	; (800766c <_isatty_r+0x1c>)
 8007654:	2300      	movs	r3, #0
 8007656:	4604      	mov	r4, r0
 8007658:	4608      	mov	r0, r1
 800765a:	602b      	str	r3, [r5, #0]
 800765c:	f7fa f865 	bl	800172a <_isatty>
 8007660:	1c43      	adds	r3, r0, #1
 8007662:	d102      	bne.n	800766a <_isatty_r+0x1a>
 8007664:	682b      	ldr	r3, [r5, #0]
 8007666:	b103      	cbz	r3, 800766a <_isatty_r+0x1a>
 8007668:	6023      	str	r3, [r4, #0]
 800766a:	bd38      	pop	{r3, r4, r5, pc}
 800766c:	200005cc 	.word	0x200005cc

08007670 <_init>:
 8007670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007672:	bf00      	nop
 8007674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007676:	bc08      	pop	{r3}
 8007678:	469e      	mov	lr, r3
 800767a:	4770      	bx	lr

0800767c <_fini>:
 800767c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800767e:	bf00      	nop
 8007680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007682:	bc08      	pop	{r3}
 8007684:	469e      	mov	lr, r3
 8007686:	4770      	bx	lr
