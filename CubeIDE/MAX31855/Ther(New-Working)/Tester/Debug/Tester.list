
Tester.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e80  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000498  08009060  08009060  00019060  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080094f8  080094f8  000201d4  2**0
                  CONTENTS
  4 .ARM          00000008  080094f8  080094f8  000194f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009500  08009500  000201d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009500  08009500  00019500  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009504  08009504  00019504  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  08009508  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000288  200001d4  080096dc  000201d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  080096dc  0002045c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ec36  00000000  00000000  00020247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000216e  00000000  00000000  0002ee7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c68  00000000  00000000  00030ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000983  00000000  00000000  00031c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e22a  00000000  00000000  000325db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f515  00000000  00000000  00050805  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ba69d  00000000  00000000  0005fd1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000480c  00000000  00000000  0011a3b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0011ebc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d4 	.word	0x200001d4
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009048 	.word	0x08009048

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001d8 	.word	0x200001d8
 800021c:	08009048 	.word	0x08009048

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	; 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2uiz>:
 8000bf8:	004a      	lsls	r2, r1, #1
 8000bfa:	d211      	bcs.n	8000c20 <__aeabi_d2uiz+0x28>
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c00:	d211      	bcs.n	8000c26 <__aeabi_d2uiz+0x2e>
 8000c02:	d50d      	bpl.n	8000c20 <__aeabi_d2uiz+0x28>
 8000c04:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d40e      	bmi.n	8000c2c <__aeabi_d2uiz+0x34>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c1e:	4770      	bx	lr
 8000c20:	f04f 0000 	mov.w	r0, #0
 8000c24:	4770      	bx	lr
 8000c26:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c2a:	d102      	bne.n	8000c32 <__aeabi_d2uiz+0x3a>
 8000c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c30:	4770      	bx	lr
 8000c32:	f04f 0000 	mov.w	r0, #0
 8000c36:	4770      	bx	lr

08000c38 <__aeabi_d2f>:
 8000c38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c40:	bf24      	itt	cs
 8000c42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c4a:	d90d      	bls.n	8000c68 <__aeabi_d2f+0x30>
 8000c4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c60:	bf08      	it	eq
 8000c62:	f020 0001 	biceq.w	r0, r0, #1
 8000c66:	4770      	bx	lr
 8000c68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c6c:	d121      	bne.n	8000cb2 <__aeabi_d2f+0x7a>
 8000c6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c72:	bfbc      	itt	lt
 8000c74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c78:	4770      	bxlt	lr
 8000c7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c82:	f1c2 0218 	rsb	r2, r2, #24
 8000c86:	f1c2 0c20 	rsb	ip, r2, #32
 8000c8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c92:	bf18      	it	ne
 8000c94:	f040 0001 	orrne.w	r0, r0, #1
 8000c98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ca0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ca4:	ea40 000c 	orr.w	r0, r0, ip
 8000ca8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cb0:	e7cc      	b.n	8000c4c <__aeabi_d2f+0x14>
 8000cb2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cb6:	d107      	bne.n	8000cc8 <__aeabi_d2f+0x90>
 8000cb8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cbc:	bf1e      	ittt	ne
 8000cbe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cc2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cc6:	4770      	bxne	lr
 8000cc8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ccc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cd0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop

08000cd8 <__aeabi_uldivmod>:
 8000cd8:	b953      	cbnz	r3, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cda:	b94a      	cbnz	r2, 8000cf0 <__aeabi_uldivmod+0x18>
 8000cdc:	2900      	cmp	r1, #0
 8000cde:	bf08      	it	eq
 8000ce0:	2800      	cmpeq	r0, #0
 8000ce2:	bf1c      	itt	ne
 8000ce4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ce8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cec:	f000 b9a6 	b.w	800103c <__aeabi_idiv0>
 8000cf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cf8:	f000 f83c 	bl	8000d74 <__udivmoddi4>
 8000cfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d04:	b004      	add	sp, #16
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_d2lz>:
 8000d08:	b538      	push	{r3, r4, r5, lr}
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	4604      	mov	r4, r0
 8000d10:	460d      	mov	r5, r1
 8000d12:	f7ff ff0b 	bl	8000b2c <__aeabi_dcmplt>
 8000d16:	b928      	cbnz	r0, 8000d24 <__aeabi_d2lz+0x1c>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	4629      	mov	r1, r5
 8000d1c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d20:	f000 b80a 	b.w	8000d38 <__aeabi_d2ulz>
 8000d24:	4620      	mov	r0, r4
 8000d26:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d2a:	f000 f805 	bl	8000d38 <__aeabi_d2ulz>
 8000d2e:	4240      	negs	r0, r0
 8000d30:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d34:	bd38      	pop	{r3, r4, r5, pc}
 8000d36:	bf00      	nop

08000d38 <__aeabi_d2ulz>:
 8000d38:	b5d0      	push	{r4, r6, r7, lr}
 8000d3a:	4b0c      	ldr	r3, [pc, #48]	; (8000d6c <__aeabi_d2ulz+0x34>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	4606      	mov	r6, r0
 8000d40:	460f      	mov	r7, r1
 8000d42:	f7ff fc81 	bl	8000648 <__aeabi_dmul>
 8000d46:	f7ff ff57 	bl	8000bf8 <__aeabi_d2uiz>
 8000d4a:	4604      	mov	r4, r0
 8000d4c:	f7ff fc02 	bl	8000554 <__aeabi_ui2d>
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <__aeabi_d2ulz+0x38>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	f7ff fc78 	bl	8000648 <__aeabi_dmul>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4630      	mov	r0, r6
 8000d5e:	4639      	mov	r1, r7
 8000d60:	f7ff faba 	bl	80002d8 <__aeabi_dsub>
 8000d64:	f7ff ff48 	bl	8000bf8 <__aeabi_d2uiz>
 8000d68:	4621      	mov	r1, r4
 8000d6a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d6c:	3df00000 	.word	0x3df00000
 8000d70:	41f00000 	.word	0x41f00000

08000d74 <__udivmoddi4>:
 8000d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d78:	9e08      	ldr	r6, [sp, #32]
 8000d7a:	460d      	mov	r5, r1
 8000d7c:	4604      	mov	r4, r0
 8000d7e:	460f      	mov	r7, r1
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d14a      	bne.n	8000e1a <__udivmoddi4+0xa6>
 8000d84:	428a      	cmp	r2, r1
 8000d86:	4694      	mov	ip, r2
 8000d88:	d965      	bls.n	8000e56 <__udivmoddi4+0xe2>
 8000d8a:	fab2 f382 	clz	r3, r2
 8000d8e:	b143      	cbz	r3, 8000da2 <__udivmoddi4+0x2e>
 8000d90:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d94:	f1c3 0220 	rsb	r2, r3, #32
 8000d98:	409f      	lsls	r7, r3
 8000d9a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d9e:	4317      	orrs	r7, r2
 8000da0:	409c      	lsls	r4, r3
 8000da2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000da6:	fa1f f58c 	uxth.w	r5, ip
 8000daa:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dae:	0c22      	lsrs	r2, r4, #16
 8000db0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000db4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000db8:	fb01 f005 	mul.w	r0, r1, r5
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	d90a      	bls.n	8000dd6 <__udivmoddi4+0x62>
 8000dc0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dc4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dc8:	f080 811c 	bcs.w	8001004 <__udivmoddi4+0x290>
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	f240 8119 	bls.w	8001004 <__udivmoddi4+0x290>
 8000dd2:	3902      	subs	r1, #2
 8000dd4:	4462      	add	r2, ip
 8000dd6:	1a12      	subs	r2, r2, r0
 8000dd8:	b2a4      	uxth	r4, r4
 8000dda:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dde:	fb0e 2210 	mls	r2, lr, r0, r2
 8000de2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000de6:	fb00 f505 	mul.w	r5, r0, r5
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	d90a      	bls.n	8000e04 <__udivmoddi4+0x90>
 8000dee:	eb1c 0404 	adds.w	r4, ip, r4
 8000df2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000df6:	f080 8107 	bcs.w	8001008 <__udivmoddi4+0x294>
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	f240 8104 	bls.w	8001008 <__udivmoddi4+0x294>
 8000e00:	4464      	add	r4, ip
 8000e02:	3802      	subs	r0, #2
 8000e04:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e08:	1b64      	subs	r4, r4, r5
 8000e0a:	2100      	movs	r1, #0
 8000e0c:	b11e      	cbz	r6, 8000e16 <__udivmoddi4+0xa2>
 8000e0e:	40dc      	lsrs	r4, r3
 8000e10:	2300      	movs	r3, #0
 8000e12:	e9c6 4300 	strd	r4, r3, [r6]
 8000e16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e1a:	428b      	cmp	r3, r1
 8000e1c:	d908      	bls.n	8000e30 <__udivmoddi4+0xbc>
 8000e1e:	2e00      	cmp	r6, #0
 8000e20:	f000 80ed 	beq.w	8000ffe <__udivmoddi4+0x28a>
 8000e24:	2100      	movs	r1, #0
 8000e26:	e9c6 0500 	strd	r0, r5, [r6]
 8000e2a:	4608      	mov	r0, r1
 8000e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e30:	fab3 f183 	clz	r1, r3
 8000e34:	2900      	cmp	r1, #0
 8000e36:	d149      	bne.n	8000ecc <__udivmoddi4+0x158>
 8000e38:	42ab      	cmp	r3, r5
 8000e3a:	d302      	bcc.n	8000e42 <__udivmoddi4+0xce>
 8000e3c:	4282      	cmp	r2, r0
 8000e3e:	f200 80f8 	bhi.w	8001032 <__udivmoddi4+0x2be>
 8000e42:	1a84      	subs	r4, r0, r2
 8000e44:	eb65 0203 	sbc.w	r2, r5, r3
 8000e48:	2001      	movs	r0, #1
 8000e4a:	4617      	mov	r7, r2
 8000e4c:	2e00      	cmp	r6, #0
 8000e4e:	d0e2      	beq.n	8000e16 <__udivmoddi4+0xa2>
 8000e50:	e9c6 4700 	strd	r4, r7, [r6]
 8000e54:	e7df      	b.n	8000e16 <__udivmoddi4+0xa2>
 8000e56:	b902      	cbnz	r2, 8000e5a <__udivmoddi4+0xe6>
 8000e58:	deff      	udf	#255	; 0xff
 8000e5a:	fab2 f382 	clz	r3, r2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	f040 8090 	bne.w	8000f84 <__udivmoddi4+0x210>
 8000e64:	1a8a      	subs	r2, r1, r2
 8000e66:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e6a:	fa1f fe8c 	uxth.w	lr, ip
 8000e6e:	2101      	movs	r1, #1
 8000e70:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e74:	fb07 2015 	mls	r0, r7, r5, r2
 8000e78:	0c22      	lsrs	r2, r4, #16
 8000e7a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e7e:	fb0e f005 	mul.w	r0, lr, r5
 8000e82:	4290      	cmp	r0, r2
 8000e84:	d908      	bls.n	8000e98 <__udivmoddi4+0x124>
 8000e86:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e8e:	d202      	bcs.n	8000e96 <__udivmoddi4+0x122>
 8000e90:	4290      	cmp	r0, r2
 8000e92:	f200 80cb 	bhi.w	800102c <__udivmoddi4+0x2b8>
 8000e96:	4645      	mov	r5, r8
 8000e98:	1a12      	subs	r2, r2, r0
 8000e9a:	b2a4      	uxth	r4, r4
 8000e9c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ea0:	fb07 2210 	mls	r2, r7, r0, r2
 8000ea4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ea8:	fb0e fe00 	mul.w	lr, lr, r0
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x14e>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000eb8:	d202      	bcs.n	8000ec0 <__udivmoddi4+0x14c>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	f200 80bb 	bhi.w	8001036 <__udivmoddi4+0x2c2>
 8000ec0:	4610      	mov	r0, r2
 8000ec2:	eba4 040e 	sub.w	r4, r4, lr
 8000ec6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eca:	e79f      	b.n	8000e0c <__udivmoddi4+0x98>
 8000ecc:	f1c1 0720 	rsb	r7, r1, #32
 8000ed0:	408b      	lsls	r3, r1
 8000ed2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ed6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eda:	fa05 f401 	lsl.w	r4, r5, r1
 8000ede:	fa20 f307 	lsr.w	r3, r0, r7
 8000ee2:	40fd      	lsrs	r5, r7
 8000ee4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ee8:	4323      	orrs	r3, r4
 8000eea:	fbb5 f8f9 	udiv	r8, r5, r9
 8000eee:	fa1f fe8c 	uxth.w	lr, ip
 8000ef2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ef6:	0c1c      	lsrs	r4, r3, #16
 8000ef8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000efc:	fb08 f50e 	mul.w	r5, r8, lr
 8000f00:	42a5      	cmp	r5, r4
 8000f02:	fa02 f201 	lsl.w	r2, r2, r1
 8000f06:	fa00 f001 	lsl.w	r0, r0, r1
 8000f0a:	d90b      	bls.n	8000f24 <__udivmoddi4+0x1b0>
 8000f0c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f10:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f14:	f080 8088 	bcs.w	8001028 <__udivmoddi4+0x2b4>
 8000f18:	42a5      	cmp	r5, r4
 8000f1a:	f240 8085 	bls.w	8001028 <__udivmoddi4+0x2b4>
 8000f1e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f22:	4464      	add	r4, ip
 8000f24:	1b64      	subs	r4, r4, r5
 8000f26:	b29d      	uxth	r5, r3
 8000f28:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f2c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f30:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f34:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f38:	45a6      	cmp	lr, r4
 8000f3a:	d908      	bls.n	8000f4e <__udivmoddi4+0x1da>
 8000f3c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f40:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f44:	d26c      	bcs.n	8001020 <__udivmoddi4+0x2ac>
 8000f46:	45a6      	cmp	lr, r4
 8000f48:	d96a      	bls.n	8001020 <__udivmoddi4+0x2ac>
 8000f4a:	3b02      	subs	r3, #2
 8000f4c:	4464      	add	r4, ip
 8000f4e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f52:	fba3 9502 	umull	r9, r5, r3, r2
 8000f56:	eba4 040e 	sub.w	r4, r4, lr
 8000f5a:	42ac      	cmp	r4, r5
 8000f5c:	46c8      	mov	r8, r9
 8000f5e:	46ae      	mov	lr, r5
 8000f60:	d356      	bcc.n	8001010 <__udivmoddi4+0x29c>
 8000f62:	d053      	beq.n	800100c <__udivmoddi4+0x298>
 8000f64:	b156      	cbz	r6, 8000f7c <__udivmoddi4+0x208>
 8000f66:	ebb0 0208 	subs.w	r2, r0, r8
 8000f6a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f6e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f72:	40ca      	lsrs	r2, r1
 8000f74:	40cc      	lsrs	r4, r1
 8000f76:	4317      	orrs	r7, r2
 8000f78:	e9c6 7400 	strd	r7, r4, [r6]
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	2100      	movs	r1, #0
 8000f80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f84:	f1c3 0120 	rsb	r1, r3, #32
 8000f88:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f8c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f90:	fa25 f101 	lsr.w	r1, r5, r1
 8000f94:	409d      	lsls	r5, r3
 8000f96:	432a      	orrs	r2, r5
 8000f98:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f9c:	fa1f fe8c 	uxth.w	lr, ip
 8000fa0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fa4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fa8:	0c11      	lsrs	r1, r2, #16
 8000faa:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fae:	fb00 f50e 	mul.w	r5, r0, lr
 8000fb2:	428d      	cmp	r5, r1
 8000fb4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fb8:	d908      	bls.n	8000fcc <__udivmoddi4+0x258>
 8000fba:	eb1c 0101 	adds.w	r1, ip, r1
 8000fbe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fc2:	d22f      	bcs.n	8001024 <__udivmoddi4+0x2b0>
 8000fc4:	428d      	cmp	r5, r1
 8000fc6:	d92d      	bls.n	8001024 <__udivmoddi4+0x2b0>
 8000fc8:	3802      	subs	r0, #2
 8000fca:	4461      	add	r1, ip
 8000fcc:	1b49      	subs	r1, r1, r5
 8000fce:	b292      	uxth	r2, r2
 8000fd0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fd4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fd8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fdc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fe0:	4291      	cmp	r1, r2
 8000fe2:	d908      	bls.n	8000ff6 <__udivmoddi4+0x282>
 8000fe4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fec:	d216      	bcs.n	800101c <__udivmoddi4+0x2a8>
 8000fee:	4291      	cmp	r1, r2
 8000ff0:	d914      	bls.n	800101c <__udivmoddi4+0x2a8>
 8000ff2:	3d02      	subs	r5, #2
 8000ff4:	4462      	add	r2, ip
 8000ff6:	1a52      	subs	r2, r2, r1
 8000ff8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ffc:	e738      	b.n	8000e70 <__udivmoddi4+0xfc>
 8000ffe:	4631      	mov	r1, r6
 8001000:	4630      	mov	r0, r6
 8001002:	e708      	b.n	8000e16 <__udivmoddi4+0xa2>
 8001004:	4639      	mov	r1, r7
 8001006:	e6e6      	b.n	8000dd6 <__udivmoddi4+0x62>
 8001008:	4610      	mov	r0, r2
 800100a:	e6fb      	b.n	8000e04 <__udivmoddi4+0x90>
 800100c:	4548      	cmp	r0, r9
 800100e:	d2a9      	bcs.n	8000f64 <__udivmoddi4+0x1f0>
 8001010:	ebb9 0802 	subs.w	r8, r9, r2
 8001014:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001018:	3b01      	subs	r3, #1
 800101a:	e7a3      	b.n	8000f64 <__udivmoddi4+0x1f0>
 800101c:	4645      	mov	r5, r8
 800101e:	e7ea      	b.n	8000ff6 <__udivmoddi4+0x282>
 8001020:	462b      	mov	r3, r5
 8001022:	e794      	b.n	8000f4e <__udivmoddi4+0x1da>
 8001024:	4640      	mov	r0, r8
 8001026:	e7d1      	b.n	8000fcc <__udivmoddi4+0x258>
 8001028:	46d0      	mov	r8, sl
 800102a:	e77b      	b.n	8000f24 <__udivmoddi4+0x1b0>
 800102c:	3d02      	subs	r5, #2
 800102e:	4462      	add	r2, ip
 8001030:	e732      	b.n	8000e98 <__udivmoddi4+0x124>
 8001032:	4608      	mov	r0, r1
 8001034:	e70a      	b.n	8000e4c <__udivmoddi4+0xd8>
 8001036:	4464      	add	r4, ip
 8001038:	3802      	subs	r0, #2
 800103a:	e742      	b.n	8000ec2 <__udivmoddi4+0x14e>

0800103c <__aeabi_idiv0>:
 800103c:	4770      	bx	lr
 800103e:	bf00      	nop

08001040 <__io_putchar>:
#else
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif

PUTCHAR_PROTOTYPE
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8001048:	1d39      	adds	r1, r7, #4
 800104a:	f04f 33ff 	mov.w	r3, #4294967295
 800104e:	2201      	movs	r2, #1
 8001050:	4803      	ldr	r0, [pc, #12]	; (8001060 <__io_putchar+0x20>)
 8001052:	f002 fc73 	bl	800393c <HAL_UART_Transmit>
  return ch;
 8001056:	687b      	ldr	r3, [r7, #4]
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20000254 	.word	0x20000254

08001064 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001064:	b5b0      	push	{r4, r5, r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106a:	f000 fb74 	bl	8001756 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800106e:	f000 f857 	bl	8001120 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001072:	f000 f92b 	bl	80012cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001076:	f000 f8dd 	bl	8001234 <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800107a:	f000 f89d 	bl	80011b8 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  MAX31855_Init(&MAX31855_Handle, &hspi1,GPIOA, GPIO_PIN_1);
 800107e:	2302      	movs	r3, #2
 8001080:	f04f 4290 	mov.w	r2, #1207959552	; 0x48000000
 8001084:	4923      	ldr	r1, [pc, #140]	; (8001114 <main+0xb0>)
 8001086:	4824      	ldr	r0, [pc, #144]	; (8001118 <main+0xb4>)
 8001088:	f003 fad4 	bl	8004634 <MAX31855_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  MAX31855_ReadData(&MAX31855_Handle);
 800108c:	4822      	ldr	r0, [pc, #136]	; (8001118 <main+0xb4>)
 800108e:	f003 fb43 	bl	8004718 <MAX31855_ReadData>
	  			if(!MAX31855_GetFault(&MAX31855_Handle))
 8001092:	4821      	ldr	r0, [pc, #132]	; (8001118 <main+0xb4>)
 8001094:	f003 fae6 	bl	8004664 <MAX31855_GetFault>
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	d11b      	bne.n	80010d6 <main+0x72>
	  			{
	  			printf("Temperature: %f\r\nInternal temperature: %f\r\n", MAX31855_GetTemperature(&MAX31855_Handle),MAX31855_GeInternalTemperature(&MAX31855_Handle));
 800109e:	481e      	ldr	r0, [pc, #120]	; (8001118 <main+0xb4>)
 80010a0:	f003 fafe 	bl	80046a0 <MAX31855_GetTemperature>
 80010a4:	ee10 3a10 	vmov	r3, s0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f7ff fa75 	bl	8000598 <__aeabi_f2d>
 80010ae:	4604      	mov	r4, r0
 80010b0:	460d      	mov	r5, r1
 80010b2:	4819      	ldr	r0, [pc, #100]	; (8001118 <main+0xb4>)
 80010b4:	f003 fb12 	bl	80046dc <MAX31855_GeInternalTemperature>
 80010b8:	ee10 3a10 	vmov	r3, s0
 80010bc:	4618      	mov	r0, r3
 80010be:	f7ff fa6b 	bl	8000598 <__aeabi_f2d>
 80010c2:	4602      	mov	r2, r0
 80010c4:	460b      	mov	r3, r1
 80010c6:	e9cd 2300 	strd	r2, r3, [sp]
 80010ca:	4622      	mov	r2, r4
 80010cc:	462b      	mov	r3, r5
 80010ce:	4813      	ldr	r0, [pc, #76]	; (800111c <main+0xb8>)
 80010d0:	f004 fb0a 	bl	80056e8 <iprintf>
 80010d4:	e01a      	b.n	800110c <main+0xa8>
	  			}

	  			else{
	  				printf("Temperature: %f\r\nInternal temperature: %f\r\n", MAX31855_GetTemperature(&MAX31855_Handle),MAX31855_GeInternalTemperature(&MAX31855_Handle));
 80010d6:	4810      	ldr	r0, [pc, #64]	; (8001118 <main+0xb4>)
 80010d8:	f003 fae2 	bl	80046a0 <MAX31855_GetTemperature>
 80010dc:	ee10 3a10 	vmov	r3, s0
 80010e0:	4618      	mov	r0, r3
 80010e2:	f7ff fa59 	bl	8000598 <__aeabi_f2d>
 80010e6:	4604      	mov	r4, r0
 80010e8:	460d      	mov	r5, r1
 80010ea:	480b      	ldr	r0, [pc, #44]	; (8001118 <main+0xb4>)
 80010ec:	f003 faf6 	bl	80046dc <MAX31855_GeInternalTemperature>
 80010f0:	ee10 3a10 	vmov	r3, s0
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fa4f 	bl	8000598 <__aeabi_f2d>
 80010fa:	4602      	mov	r2, r0
 80010fc:	460b      	mov	r3, r1
 80010fe:	e9cd 2300 	strd	r2, r3, [sp]
 8001102:	4622      	mov	r2, r4
 8001104:	462b      	mov	r3, r5
 8001106:	4805      	ldr	r0, [pc, #20]	; (800111c <main+0xb8>)
 8001108:	f004 faee 	bl	80056e8 <iprintf>
	  			}
	  			//printf("f");
	  			//Timer = HAL_GetTick();
	  			HAL_Delay(100);
 800110c:	2064      	movs	r0, #100	; 0x64
 800110e:	f000 fb93 	bl	8001838 <HAL_Delay>
	  MAX31855_ReadData(&MAX31855_Handle);
 8001112:	e7bb      	b.n	800108c <main+0x28>
 8001114:	200001f0 	.word	0x200001f0
 8001118:	200002e8 	.word	0x200002e8
 800111c:	08009060 	.word	0x08009060

08001120 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b094      	sub	sp, #80	; 0x50
 8001124:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001126:	f107 0318 	add.w	r3, r7, #24
 800112a:	2238      	movs	r2, #56	; 0x38
 800112c:	2100      	movs	r1, #0
 800112e:	4618      	mov	r0, r3
 8001130:	f004 fb4f 	bl	80057d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	2200      	movs	r2, #0
 8001138:	601a      	str	r2, [r3, #0]
 800113a:	605a      	str	r2, [r3, #4]
 800113c:	609a      	str	r2, [r3, #8]
 800113e:	60da      	str	r2, [r3, #12]
 8001140:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001142:	2000      	movs	r0, #0
 8001144:	f000 fe18 	bl	8001d78 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001148:	2302      	movs	r3, #2
 800114a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800114c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001150:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001152:	2340      	movs	r3, #64	; 0x40
 8001154:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001156:	2302      	movs	r3, #2
 8001158:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800115a:	2302      	movs	r3, #2
 800115c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800115e:	2304      	movs	r3, #4
 8001160:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001162:	2355      	movs	r3, #85	; 0x55
 8001164:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001166:	2302      	movs	r3, #2
 8001168:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800116a:	2302      	movs	r3, #2
 800116c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800116e:	2302      	movs	r3, #2
 8001170:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001172:	f107 0318 	add.w	r3, r7, #24
 8001176:	4618      	mov	r0, r3
 8001178:	f000 feb2 	bl	8001ee0 <HAL_RCC_OscConfig>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001182:	f000 f8f9 	bl	8001378 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001186:	230f      	movs	r3, #15
 8001188:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800118a:	2303      	movs	r3, #3
 800118c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800119a:	1d3b      	adds	r3, r7, #4
 800119c:	2104      	movs	r1, #4
 800119e:	4618      	mov	r0, r3
 80011a0:	f001 f9b0 	bl	8002504 <HAL_RCC_ClockConfig>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80011aa:	f000 f8e5 	bl	8001378 <Error_Handler>
  }
}
 80011ae:	bf00      	nop
 80011b0:	3750      	adds	r7, #80	; 0x50
 80011b2:	46bd      	mov	sp, r7
 80011b4:	bd80      	pop	{r7, pc}
	...

080011b8 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011bc:	4b1b      	ldr	r3, [pc, #108]	; (800122c <MX_SPI1_Init+0x74>)
 80011be:	4a1c      	ldr	r2, [pc, #112]	; (8001230 <MX_SPI1_Init+0x78>)
 80011c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011c2:	4b1a      	ldr	r3, [pc, #104]	; (800122c <MX_SPI1_Init+0x74>)
 80011c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011ca:	4b18      	ldr	r3, [pc, #96]	; (800122c <MX_SPI1_Init+0x74>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011d0:	4b16      	ldr	r3, [pc, #88]	; (800122c <MX_SPI1_Init+0x74>)
 80011d2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80011d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011d8:	4b14      	ldr	r3, [pc, #80]	; (800122c <MX_SPI1_Init+0x74>)
 80011da:	2200      	movs	r2, #0
 80011dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011de:	4b13      	ldr	r3, [pc, #76]	; (800122c <MX_SPI1_Init+0x74>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_SPI1_Init+0x74>)
 80011e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80011ec:	4b0f      	ldr	r3, [pc, #60]	; (800122c <MX_SPI1_Init+0x74>)
 80011ee:	2230      	movs	r2, #48	; 0x30
 80011f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011f2:	4b0e      	ldr	r3, [pc, #56]	; (800122c <MX_SPI1_Init+0x74>)
 80011f4:	2200      	movs	r2, #0
 80011f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011f8:	4b0c      	ldr	r3, [pc, #48]	; (800122c <MX_SPI1_Init+0x74>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011fe:	4b0b      	ldr	r3, [pc, #44]	; (800122c <MX_SPI1_Init+0x74>)
 8001200:	2200      	movs	r2, #0
 8001202:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001204:	4b09      	ldr	r3, [pc, #36]	; (800122c <MX_SPI1_Init+0x74>)
 8001206:	2207      	movs	r2, #7
 8001208:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800120a:	4b08      	ldr	r3, [pc, #32]	; (800122c <MX_SPI1_Init+0x74>)
 800120c:	2200      	movs	r2, #0
 800120e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <MX_SPI1_Init+0x74>)
 8001212:	2208      	movs	r2, #8
 8001214:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001216:	4805      	ldr	r0, [pc, #20]	; (800122c <MX_SPI1_Init+0x74>)
 8001218:	f001 fd80 	bl	8002d1c <HAL_SPI_Init>
 800121c:	4603      	mov	r3, r0
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001222:	f000 f8a9 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	200001f0 	.word	0x200001f0
 8001230:	40013000 	.word	0x40013000

08001234 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001238:	4b22      	ldr	r3, [pc, #136]	; (80012c4 <MX_USART2_UART_Init+0x90>)
 800123a:	4a23      	ldr	r2, [pc, #140]	; (80012c8 <MX_USART2_UART_Init+0x94>)
 800123c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800123e:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <MX_USART2_UART_Init+0x90>)
 8001240:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001244:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001246:	4b1f      	ldr	r3, [pc, #124]	; (80012c4 <MX_USART2_UART_Init+0x90>)
 8001248:	2200      	movs	r2, #0
 800124a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800124c:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <MX_USART2_UART_Init+0x90>)
 800124e:	2200      	movs	r2, #0
 8001250:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001252:	4b1c      	ldr	r3, [pc, #112]	; (80012c4 <MX_USART2_UART_Init+0x90>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001258:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <MX_USART2_UART_Init+0x90>)
 800125a:	220c      	movs	r2, #12
 800125c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125e:	4b19      	ldr	r3, [pc, #100]	; (80012c4 <MX_USART2_UART_Init+0x90>)
 8001260:	2200      	movs	r2, #0
 8001262:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001264:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <MX_USART2_UART_Init+0x90>)
 8001266:	2200      	movs	r2, #0
 8001268:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800126a:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <MX_USART2_UART_Init+0x90>)
 800126c:	2200      	movs	r2, #0
 800126e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001270:	4b14      	ldr	r3, [pc, #80]	; (80012c4 <MX_USART2_UART_Init+0x90>)
 8001272:	2200      	movs	r2, #0
 8001274:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001276:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <MX_USART2_UART_Init+0x90>)
 8001278:	2200      	movs	r2, #0
 800127a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800127c:	4811      	ldr	r0, [pc, #68]	; (80012c4 <MX_USART2_UART_Init+0x90>)
 800127e:	f002 fb0d 	bl	800389c <HAL_UART_Init>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001288:	f000 f876 	bl	8001378 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800128c:	2100      	movs	r1, #0
 800128e:	480d      	ldr	r0, [pc, #52]	; (80012c4 <MX_USART2_UART_Init+0x90>)
 8001290:	f003 f906 	bl	80044a0 <HAL_UARTEx_SetTxFifoThreshold>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800129a:	f000 f86d 	bl	8001378 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800129e:	2100      	movs	r1, #0
 80012a0:	4808      	ldr	r0, [pc, #32]	; (80012c4 <MX_USART2_UART_Init+0x90>)
 80012a2:	f003 f93b 	bl	800451c <HAL_UARTEx_SetRxFifoThreshold>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80012ac:	f000 f864 	bl	8001378 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80012b0:	4804      	ldr	r0, [pc, #16]	; (80012c4 <MX_USART2_UART_Init+0x90>)
 80012b2:	f003 f8bc 	bl	800442e <HAL_UARTEx_DisableFifoMode>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80012bc:	f000 f85c 	bl	8001378 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80012c0:	bf00      	nop
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000254 	.word	0x20000254
 80012c8:	40004400 	.word	0x40004400

080012cc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d2:	f107 030c 	add.w	r3, r7, #12
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012e2:	4b23      	ldr	r3, [pc, #140]	; (8001370 <MX_GPIO_Init+0xa4>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	4a22      	ldr	r2, [pc, #136]	; (8001370 <MX_GPIO_Init+0xa4>)
 80012e8:	f043 0301 	orr.w	r3, r3, #1
 80012ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012ee:	4b20      	ldr	r3, [pc, #128]	; (8001370 <MX_GPIO_Init+0xa4>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	f003 0301 	and.w	r3, r3, #1
 80012f6:	60bb      	str	r3, [r7, #8]
 80012f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012fa:	4b1d      	ldr	r3, [pc, #116]	; (8001370 <MX_GPIO_Init+0xa4>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	4a1c      	ldr	r2, [pc, #112]	; (8001370 <MX_GPIO_Init+0xa4>)
 8001300:	f043 0302 	orr.w	r3, r3, #2
 8001304:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001306:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <MX_GPIO_Init+0xa4>)
 8001308:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800130a:	f003 0302 	and.w	r3, r3, #2
 800130e:	607b      	str	r3, [r7, #4]
 8001310:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_RESET);
 8001312:	2200      	movs	r2, #0
 8001314:	2102      	movs	r1, #2
 8001316:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800131a:	f000 fd15 	bl	8001d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800131e:	2200      	movs	r2, #0
 8001320:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001324:	4813      	ldr	r0, [pc, #76]	; (8001374 <MX_GPIO_Init+0xa8>)
 8001326:	f000 fd0f 	bl	8001d48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800132a:	2302      	movs	r3, #2
 800132c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800132e:	2301      	movs	r3, #1
 8001330:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800133a:	f107 030c 	add.w	r3, r7, #12
 800133e:	4619      	mov	r1, r3
 8001340:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001344:	f000 fb7e 	bl	8001a44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001348:	f44f 7380 	mov.w	r3, #256	; 0x100
 800134c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800134e:	2301      	movs	r3, #1
 8001350:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800135a:	f107 030c 	add.w	r3, r7, #12
 800135e:	4619      	mov	r1, r3
 8001360:	4804      	ldr	r0, [pc, #16]	; (8001374 <MX_GPIO_Init+0xa8>)
 8001362:	f000 fb6f 	bl	8001a44 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001366:	bf00      	nop
 8001368:	3720      	adds	r7, #32
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40021000 	.word	0x40021000
 8001374:	48000400 	.word	0x48000400

08001378 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800137c:	b672      	cpsid	i
}
 800137e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001380:	e7fe      	b.n	8001380 <Error_Handler+0x8>
	...

08001384 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b082      	sub	sp, #8
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800138a:	4b0f      	ldr	r3, [pc, #60]	; (80013c8 <HAL_MspInit+0x44>)
 800138c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800138e:	4a0e      	ldr	r2, [pc, #56]	; (80013c8 <HAL_MspInit+0x44>)
 8001390:	f043 0301 	orr.w	r3, r3, #1
 8001394:	6613      	str	r3, [r2, #96]	; 0x60
 8001396:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <HAL_MspInit+0x44>)
 8001398:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	607b      	str	r3, [r7, #4]
 80013a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013a2:	4b09      	ldr	r3, [pc, #36]	; (80013c8 <HAL_MspInit+0x44>)
 80013a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013a6:	4a08      	ldr	r2, [pc, #32]	; (80013c8 <HAL_MspInit+0x44>)
 80013a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ac:	6593      	str	r3, [r2, #88]	; 0x58
 80013ae:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_MspInit+0x44>)
 80013b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013b6:	603b      	str	r3, [r7, #0]
 80013b8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80013ba:	f000 fd81 	bl	8001ec0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013be:	bf00      	nop
 80013c0:	3708      	adds	r7, #8
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40021000 	.word	0x40021000

080013cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b08a      	sub	sp, #40	; 0x28
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d4:	f107 0314 	add.w	r3, r7, #20
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	4a17      	ldr	r2, [pc, #92]	; (8001448 <HAL_SPI_MspInit+0x7c>)
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d128      	bne.n	8001440 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80013ee:	4b17      	ldr	r3, [pc, #92]	; (800144c <HAL_SPI_MspInit+0x80>)
 80013f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013f2:	4a16      	ldr	r2, [pc, #88]	; (800144c <HAL_SPI_MspInit+0x80>)
 80013f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80013f8:	6613      	str	r3, [r2, #96]	; 0x60
 80013fa:	4b14      	ldr	r3, [pc, #80]	; (800144c <HAL_SPI_MspInit+0x80>)
 80013fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001402:	613b      	str	r3, [r7, #16]
 8001404:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001406:	4b11      	ldr	r3, [pc, #68]	; (800144c <HAL_SPI_MspInit+0x80>)
 8001408:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800140a:	4a10      	ldr	r2, [pc, #64]	; (800144c <HAL_SPI_MspInit+0x80>)
 800140c:	f043 0301 	orr.w	r3, r3, #1
 8001410:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001412:	4b0e      	ldr	r3, [pc, #56]	; (800144c <HAL_SPI_MspInit+0x80>)
 8001414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001416:	f003 0301 	and.w	r3, r3, #1
 800141a:	60fb      	str	r3, [r7, #12]
 800141c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800141e:	23e0      	movs	r3, #224	; 0xe0
 8001420:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001422:	2302      	movs	r3, #2
 8001424:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800142a:	2300      	movs	r3, #0
 800142c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800142e:	2305      	movs	r3, #5
 8001430:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001432:	f107 0314 	add.w	r3, r7, #20
 8001436:	4619      	mov	r1, r3
 8001438:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800143c:	f000 fb02 	bl	8001a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001440:	bf00      	nop
 8001442:	3728      	adds	r7, #40	; 0x28
 8001444:	46bd      	mov	sp, r7
 8001446:	bd80      	pop	{r7, pc}
 8001448:	40013000 	.word	0x40013000
 800144c:	40021000 	.word	0x40021000

08001450 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b09a      	sub	sp, #104	; 0x68
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001468:	f107 0310 	add.w	r3, r7, #16
 800146c:	2244      	movs	r2, #68	; 0x44
 800146e:	2100      	movs	r1, #0
 8001470:	4618      	mov	r0, r3
 8001472:	f004 f9ae 	bl	80057d2 <memset>
  if(huart->Instance==USART2)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4a1f      	ldr	r2, [pc, #124]	; (80014f8 <HAL_UART_MspInit+0xa8>)
 800147c:	4293      	cmp	r3, r2
 800147e:	d136      	bne.n	80014ee <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001480:	2302      	movs	r3, #2
 8001482:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001484:	2300      	movs	r3, #0
 8001486:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001488:	f107 0310 	add.w	r3, r7, #16
 800148c:	4618      	mov	r0, r3
 800148e:	f001 fa55 	bl	800293c <HAL_RCCEx_PeriphCLKConfig>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001498:	f7ff ff6e 	bl	8001378 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800149c:	4b17      	ldr	r3, [pc, #92]	; (80014fc <HAL_UART_MspInit+0xac>)
 800149e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a0:	4a16      	ldr	r2, [pc, #88]	; (80014fc <HAL_UART_MspInit+0xac>)
 80014a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014a6:	6593      	str	r3, [r2, #88]	; 0x58
 80014a8:	4b14      	ldr	r3, [pc, #80]	; (80014fc <HAL_UART_MspInit+0xac>)
 80014aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b0:	60fb      	str	r3, [r7, #12]
 80014b2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014b4:	4b11      	ldr	r3, [pc, #68]	; (80014fc <HAL_UART_MspInit+0xac>)
 80014b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b8:	4a10      	ldr	r2, [pc, #64]	; (80014fc <HAL_UART_MspInit+0xac>)
 80014ba:	f043 0301 	orr.w	r3, r3, #1
 80014be:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c0:	4b0e      	ldr	r3, [pc, #56]	; (80014fc <HAL_UART_MspInit+0xac>)
 80014c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014c4:	f003 0301 	and.w	r3, r3, #1
 80014c8:	60bb      	str	r3, [r7, #8]
 80014ca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 80014cc:	230c      	movs	r3, #12
 80014ce:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014d0:	2302      	movs	r3, #2
 80014d2:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	2300      	movs	r3, #0
 80014da:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014dc:	2307      	movs	r3, #7
 80014de:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80014e4:	4619      	mov	r1, r3
 80014e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014ea:	f000 faab 	bl	8001a44 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014ee:	bf00      	nop
 80014f0:	3768      	adds	r7, #104	; 0x68
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40004400 	.word	0x40004400
 80014fc:	40021000 	.word	0x40021000

08001500 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001504:	e7fe      	b.n	8001504 <NMI_Handler+0x4>

08001506 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001506:	b480      	push	{r7}
 8001508:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800150a:	e7fe      	b.n	800150a <HardFault_Handler+0x4>

0800150c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001510:	e7fe      	b.n	8001510 <MemManage_Handler+0x4>

08001512 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001512:	b480      	push	{r7}
 8001514:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001516:	e7fe      	b.n	8001516 <BusFault_Handler+0x4>

08001518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800151c:	e7fe      	b.n	800151c <UsageFault_Handler+0x4>

0800151e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800151e:	b480      	push	{r7}
 8001520:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001522:	bf00      	nop
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001530:	bf00      	nop
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr

0800153a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800153a:	b480      	push	{r7}
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800154c:	f000 f956 	bl	80017fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001550:	bf00      	nop
 8001552:	bd80      	pop	{r7, pc}

08001554 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  return 1;
 8001558:	2301      	movs	r3, #1
}
 800155a:	4618      	mov	r0, r3
 800155c:	46bd      	mov	sp, r7
 800155e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001562:	4770      	bx	lr

08001564 <_kill>:

int _kill(int pid, int sig)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
 800156c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800156e:	f004 f983 	bl	8005878 <__errno>
 8001572:	4603      	mov	r3, r0
 8001574:	2216      	movs	r2, #22
 8001576:	601a      	str	r2, [r3, #0]
  return -1;
 8001578:	f04f 33ff 	mov.w	r3, #4294967295
}
 800157c:	4618      	mov	r0, r3
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}

08001584 <_exit>:

void _exit (int status)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800158c:	f04f 31ff 	mov.w	r1, #4294967295
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f7ff ffe7 	bl	8001564 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001596:	e7fe      	b.n	8001596 <_exit+0x12>

08001598 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	60f8      	str	r0, [r7, #12]
 80015a0:	60b9      	str	r1, [r7, #8]
 80015a2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015a4:	2300      	movs	r3, #0
 80015a6:	617b      	str	r3, [r7, #20]
 80015a8:	e00a      	b.n	80015c0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015aa:	f3af 8000 	nop.w
 80015ae:	4601      	mov	r1, r0
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	1c5a      	adds	r2, r3, #1
 80015b4:	60ba      	str	r2, [r7, #8]
 80015b6:	b2ca      	uxtb	r2, r1
 80015b8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	3301      	adds	r3, #1
 80015be:	617b      	str	r3, [r7, #20]
 80015c0:	697a      	ldr	r2, [r7, #20]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	429a      	cmp	r2, r3
 80015c6:	dbf0      	blt.n	80015aa <_read+0x12>
  }

  return len;
 80015c8:	687b      	ldr	r3, [r7, #4]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3718      	adds	r7, #24
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b086      	sub	sp, #24
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	60f8      	str	r0, [r7, #12]
 80015da:	60b9      	str	r1, [r7, #8]
 80015dc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015de:	2300      	movs	r3, #0
 80015e0:	617b      	str	r3, [r7, #20]
 80015e2:	e009      	b.n	80015f8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80015e4:	68bb      	ldr	r3, [r7, #8]
 80015e6:	1c5a      	adds	r2, r3, #1
 80015e8:	60ba      	str	r2, [r7, #8]
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7ff fd27 	bl	8001040 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	3301      	adds	r3, #1
 80015f6:	617b      	str	r3, [r7, #20]
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	429a      	cmp	r2, r3
 80015fe:	dbf1      	blt.n	80015e4 <_write+0x12>
  }
  return len;
 8001600:	687b      	ldr	r3, [r7, #4]
}
 8001602:	4618      	mov	r0, r3
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}

0800160a <_close>:

int _close(int file)
{
 800160a:	b480      	push	{r7}
 800160c:	b083      	sub	sp, #12
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001612:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001616:	4618      	mov	r0, r3
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001622:	b480      	push	{r7}
 8001624:	b083      	sub	sp, #12
 8001626:	af00      	add	r7, sp, #0
 8001628:	6078      	str	r0, [r7, #4]
 800162a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800162c:	683b      	ldr	r3, [r7, #0]
 800162e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001632:	605a      	str	r2, [r3, #4]
  return 0;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	370c      	adds	r7, #12
 800163a:	46bd      	mov	sp, r7
 800163c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001640:	4770      	bx	lr

08001642 <_isatty>:

int _isatty(int file)
{
 8001642:	b480      	push	{r7}
 8001644:	b083      	sub	sp, #12
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800164a:	2301      	movs	r3, #1
}
 800164c:	4618      	mov	r0, r3
 800164e:	370c      	adds	r7, #12
 8001650:	46bd      	mov	sp, r7
 8001652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001656:	4770      	bx	lr

08001658 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001658:	b480      	push	{r7}
 800165a:	b085      	sub	sp, #20
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001664:	2300      	movs	r3, #0
}
 8001666:	4618      	mov	r0, r3
 8001668:	3714      	adds	r7, #20
 800166a:	46bd      	mov	sp, r7
 800166c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001670:	4770      	bx	lr
	...

08001674 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b086      	sub	sp, #24
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800167c:	4a14      	ldr	r2, [pc, #80]	; (80016d0 <_sbrk+0x5c>)
 800167e:	4b15      	ldr	r3, [pc, #84]	; (80016d4 <_sbrk+0x60>)
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001688:	4b13      	ldr	r3, [pc, #76]	; (80016d8 <_sbrk+0x64>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d102      	bne.n	8001696 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001690:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <_sbrk+0x64>)
 8001692:	4a12      	ldr	r2, [pc, #72]	; (80016dc <_sbrk+0x68>)
 8001694:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001696:	4b10      	ldr	r3, [pc, #64]	; (80016d8 <_sbrk+0x64>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	4413      	add	r3, r2
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d207      	bcs.n	80016b4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80016a4:	f004 f8e8 	bl	8005878 <__errno>
 80016a8:	4603      	mov	r3, r0
 80016aa:	220c      	movs	r2, #12
 80016ac:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016ae:	f04f 33ff 	mov.w	r3, #4294967295
 80016b2:	e009      	b.n	80016c8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016b4:	4b08      	ldr	r3, [pc, #32]	; (80016d8 <_sbrk+0x64>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016ba:	4b07      	ldr	r3, [pc, #28]	; (80016d8 <_sbrk+0x64>)
 80016bc:	681a      	ldr	r2, [r3, #0]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	4413      	add	r3, r2
 80016c2:	4a05      	ldr	r2, [pc, #20]	; (80016d8 <_sbrk+0x64>)
 80016c4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016c6:	68fb      	ldr	r3, [r7, #12]
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3718      	adds	r7, #24
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20008000 	.word	0x20008000
 80016d4:	00000400 	.word	0x00000400
 80016d8:	20000308 	.word	0x20000308
 80016dc:	20000460 	.word	0x20000460

080016e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <SystemInit+0x20>)
 80016e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ea:	4a05      	ldr	r2, [pc, #20]	; (8001700 <SystemInit+0x20>)
 80016ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
 80016fe:	bf00      	nop
 8001700:	e000ed00 	.word	0xe000ed00

08001704 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001704:	480d      	ldr	r0, [pc, #52]	; (800173c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001706:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001708:	f7ff ffea 	bl	80016e0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800170c:	480c      	ldr	r0, [pc, #48]	; (8001740 <LoopForever+0x6>)
  ldr r1, =_edata
 800170e:	490d      	ldr	r1, [pc, #52]	; (8001744 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001710:	4a0d      	ldr	r2, [pc, #52]	; (8001748 <LoopForever+0xe>)
  movs r3, #0
 8001712:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001714:	e002      	b.n	800171c <LoopCopyDataInit>

08001716 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001716:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001718:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800171a:	3304      	adds	r3, #4

0800171c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800171c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800171e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001720:	d3f9      	bcc.n	8001716 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001722:	4a0a      	ldr	r2, [pc, #40]	; (800174c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001724:	4c0a      	ldr	r4, [pc, #40]	; (8001750 <LoopForever+0x16>)
  movs r3, #0
 8001726:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001728:	e001      	b.n	800172e <LoopFillZerobss>

0800172a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800172a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800172c:	3204      	adds	r2, #4

0800172e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800172e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001730:	d3fb      	bcc.n	800172a <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 8001732:	f004 f8a7 	bl	8005884 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001736:	f7ff fc95 	bl	8001064 <main>

0800173a <LoopForever>:

LoopForever:
    b LoopForever
 800173a:	e7fe      	b.n	800173a <LoopForever>
  ldr   r0, =_estack
 800173c:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001740:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001744:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001748:	08009508 	.word	0x08009508
  ldr r2, =_sbss
 800174c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001750:	2000045c 	.word	0x2000045c

08001754 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001754:	e7fe      	b.n	8001754 <ADC1_2_IRQHandler>

08001756 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b082      	sub	sp, #8
 800175a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800175c:	2300      	movs	r3, #0
 800175e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001760:	2003      	movs	r0, #3
 8001762:	f000 f93d 	bl	80019e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001766:	2000      	movs	r0, #0
 8001768:	f000 f80e 	bl	8001788 <HAL_InitTick>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d002      	beq.n	8001778 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	71fb      	strb	r3, [r7, #7]
 8001776:	e001      	b.n	800177c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001778:	f7ff fe04 	bl	8001384 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800177c:	79fb      	ldrb	r3, [r7, #7]

}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b084      	sub	sp, #16
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001790:	2300      	movs	r3, #0
 8001792:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001794:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <HAL_InitTick+0x68>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b00      	cmp	r3, #0
 800179a:	d022      	beq.n	80017e2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800179c:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <HAL_InitTick+0x6c>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <HAL_InitTick+0x68>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80017a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80017ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 f93a 	bl	8001a2a <HAL_SYSTICK_Config>
 80017b6:	4603      	mov	r3, r0
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d10f      	bne.n	80017dc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	2b0f      	cmp	r3, #15
 80017c0:	d809      	bhi.n	80017d6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017c2:	2200      	movs	r2, #0
 80017c4:	6879      	ldr	r1, [r7, #4]
 80017c6:	f04f 30ff 	mov.w	r0, #4294967295
 80017ca:	f000 f914 	bl	80019f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80017ce:	4a0a      	ldr	r2, [pc, #40]	; (80017f8 <HAL_InitTick+0x70>)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6013      	str	r3, [r2, #0]
 80017d4:	e007      	b.n	80017e6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80017d6:	2301      	movs	r3, #1
 80017d8:	73fb      	strb	r3, [r7, #15]
 80017da:	e004      	b.n	80017e6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	73fb      	strb	r3, [r7, #15]
 80017e0:	e001      	b.n	80017e6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80017e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3710      	adds	r7, #16
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20000008 	.word	0x20000008
 80017f4:	20000000 	.word	0x20000000
 80017f8:	20000004 	.word	0x20000004

080017fc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <HAL_IncTick+0x1c>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b05      	ldr	r3, [pc, #20]	; (800181c <HAL_IncTick+0x20>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4413      	add	r3, r2
 800180a:	4a03      	ldr	r2, [pc, #12]	; (8001818 <HAL_IncTick+0x1c>)
 800180c:	6013      	str	r3, [r2, #0]
}
 800180e:	bf00      	nop
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	2000030c 	.word	0x2000030c
 800181c:	20000008 	.word	0x20000008

08001820 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001820:	b480      	push	{r7}
 8001822:	af00      	add	r7, sp, #0
  return uwTick;
 8001824:	4b03      	ldr	r3, [pc, #12]	; (8001834 <HAL_GetTick+0x14>)
 8001826:	681b      	ldr	r3, [r3, #0]
}
 8001828:	4618      	mov	r0, r3
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	2000030c 	.word	0x2000030c

08001838 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b084      	sub	sp, #16
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001840:	f7ff ffee 	bl	8001820 <HAL_GetTick>
 8001844:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001850:	d004      	beq.n	800185c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001852:	4b09      	ldr	r3, [pc, #36]	; (8001878 <HAL_Delay+0x40>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	68fa      	ldr	r2, [r7, #12]
 8001858:	4413      	add	r3, r2
 800185a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800185c:	bf00      	nop
 800185e:	f7ff ffdf 	bl	8001820 <HAL_GetTick>
 8001862:	4602      	mov	r2, r0
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	1ad3      	subs	r3, r2, r3
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	429a      	cmp	r2, r3
 800186c:	d8f7      	bhi.n	800185e <HAL_Delay+0x26>
  {
  }
}
 800186e:	bf00      	nop
 8001870:	bf00      	nop
 8001872:	3710      	adds	r7, #16
 8001874:	46bd      	mov	sp, r7
 8001876:	bd80      	pop	{r7, pc}
 8001878:	20000008 	.word	0x20000008

0800187c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	f003 0307 	and.w	r3, r3, #7
 800188a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800188c:	4b0c      	ldr	r3, [pc, #48]	; (80018c0 <__NVIC_SetPriorityGrouping+0x44>)
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001892:	68ba      	ldr	r2, [r7, #8]
 8001894:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001898:	4013      	ands	r3, r2
 800189a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a0:	68bb      	ldr	r3, [r7, #8]
 80018a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018ae:	4a04      	ldr	r2, [pc, #16]	; (80018c0 <__NVIC_SetPriorityGrouping+0x44>)
 80018b0:	68bb      	ldr	r3, [r7, #8]
 80018b2:	60d3      	str	r3, [r2, #12]
}
 80018b4:	bf00      	nop
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	e000ed00 	.word	0xe000ed00

080018c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c4:	b480      	push	{r7}
 80018c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018c8:	4b04      	ldr	r3, [pc, #16]	; (80018dc <__NVIC_GetPriorityGrouping+0x18>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	0a1b      	lsrs	r3, r3, #8
 80018ce:	f003 0307 	and.w	r3, r3, #7
}
 80018d2:	4618      	mov	r0, r3
 80018d4:	46bd      	mov	sp, r7
 80018d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018da:	4770      	bx	lr
 80018dc:	e000ed00 	.word	0xe000ed00

080018e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e0:	b480      	push	{r7}
 80018e2:	b083      	sub	sp, #12
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	4603      	mov	r3, r0
 80018e8:	6039      	str	r1, [r7, #0]
 80018ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	db0a      	blt.n	800190a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	b2da      	uxtb	r2, r3
 80018f8:	490c      	ldr	r1, [pc, #48]	; (800192c <__NVIC_SetPriority+0x4c>)
 80018fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018fe:	0112      	lsls	r2, r2, #4
 8001900:	b2d2      	uxtb	r2, r2
 8001902:	440b      	add	r3, r1
 8001904:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001908:	e00a      	b.n	8001920 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	b2da      	uxtb	r2, r3
 800190e:	4908      	ldr	r1, [pc, #32]	; (8001930 <__NVIC_SetPriority+0x50>)
 8001910:	79fb      	ldrb	r3, [r7, #7]
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	3b04      	subs	r3, #4
 8001918:	0112      	lsls	r2, r2, #4
 800191a:	b2d2      	uxtb	r2, r2
 800191c:	440b      	add	r3, r1
 800191e:	761a      	strb	r2, [r3, #24]
}
 8001920:	bf00      	nop
 8001922:	370c      	adds	r7, #12
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000e100 	.word	0xe000e100
 8001930:	e000ed00 	.word	0xe000ed00

08001934 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001934:	b480      	push	{r7}
 8001936:	b089      	sub	sp, #36	; 0x24
 8001938:	af00      	add	r7, sp, #0
 800193a:	60f8      	str	r0, [r7, #12]
 800193c:	60b9      	str	r1, [r7, #8]
 800193e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	f1c3 0307 	rsb	r3, r3, #7
 800194e:	2b04      	cmp	r3, #4
 8001950:	bf28      	it	cs
 8001952:	2304      	movcs	r3, #4
 8001954:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001956:	69fb      	ldr	r3, [r7, #28]
 8001958:	3304      	adds	r3, #4
 800195a:	2b06      	cmp	r3, #6
 800195c:	d902      	bls.n	8001964 <NVIC_EncodePriority+0x30>
 800195e:	69fb      	ldr	r3, [r7, #28]
 8001960:	3b03      	subs	r3, #3
 8001962:	e000      	b.n	8001966 <NVIC_EncodePriority+0x32>
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001968:	f04f 32ff 	mov.w	r2, #4294967295
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43da      	mvns	r2, r3
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	401a      	ands	r2, r3
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800197c:	f04f 31ff 	mov.w	r1, #4294967295
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	fa01 f303 	lsl.w	r3, r1, r3
 8001986:	43d9      	mvns	r1, r3
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800198c:	4313      	orrs	r3, r2
         );
}
 800198e:	4618      	mov	r0, r3
 8001990:	3724      	adds	r7, #36	; 0x24
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019ac:	d301      	bcc.n	80019b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ae:	2301      	movs	r3, #1
 80019b0:	e00f      	b.n	80019d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019b2:	4a0a      	ldr	r2, [pc, #40]	; (80019dc <SysTick_Config+0x40>)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	3b01      	subs	r3, #1
 80019b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019ba:	210f      	movs	r1, #15
 80019bc:	f04f 30ff 	mov.w	r0, #4294967295
 80019c0:	f7ff ff8e 	bl	80018e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c4:	4b05      	ldr	r3, [pc, #20]	; (80019dc <SysTick_Config+0x40>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ca:	4b04      	ldr	r3, [pc, #16]	; (80019dc <SysTick_Config+0x40>)
 80019cc:	2207      	movs	r2, #7
 80019ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d0:	2300      	movs	r3, #0
}
 80019d2:	4618      	mov	r0, r3
 80019d4:	3708      	adds	r7, #8
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	e000e010 	.word	0xe000e010

080019e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019e8:	6878      	ldr	r0, [r7, #4]
 80019ea:	f7ff ff47 	bl	800187c <__NVIC_SetPriorityGrouping>
}
 80019ee:	bf00      	nop
 80019f0:	3708      	adds	r7, #8
 80019f2:	46bd      	mov	sp, r7
 80019f4:	bd80      	pop	{r7, pc}

080019f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f6:	b580      	push	{r7, lr}
 80019f8:	b086      	sub	sp, #24
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	4603      	mov	r3, r0
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
 8001a02:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001a04:	f7ff ff5e 	bl	80018c4 <__NVIC_GetPriorityGrouping>
 8001a08:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a0a:	687a      	ldr	r2, [r7, #4]
 8001a0c:	68b9      	ldr	r1, [r7, #8]
 8001a0e:	6978      	ldr	r0, [r7, #20]
 8001a10:	f7ff ff90 	bl	8001934 <NVIC_EncodePriority>
 8001a14:	4602      	mov	r2, r0
 8001a16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a1a:	4611      	mov	r1, r2
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7ff ff5f 	bl	80018e0 <__NVIC_SetPriority>
}
 8001a22:	bf00      	nop
 8001a24:	3718      	adds	r7, #24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}

08001a2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a2a:	b580      	push	{r7, lr}
 8001a2c:	b082      	sub	sp, #8
 8001a2e:	af00      	add	r7, sp, #0
 8001a30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ffb2 	bl	800199c <SysTick_Config>
 8001a38:	4603      	mov	r3, r0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b087      	sub	sp, #28
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]
 8001a4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001a52:	e15a      	b.n	8001d0a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	681a      	ldr	r2, [r3, #0]
 8001a58:	2101      	movs	r1, #1
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a60:	4013      	ands	r3, r2
 8001a62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	f000 814c 	beq.w	8001d04 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	2b01      	cmp	r3, #1
 8001a76:	d005      	beq.n	8001a84 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001a80:	2b02      	cmp	r3, #2
 8001a82:	d130      	bne.n	8001ae6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	689b      	ldr	r3, [r3, #8]
 8001a88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	005b      	lsls	r3, r3, #1
 8001a8e:	2203      	movs	r2, #3
 8001a90:	fa02 f303 	lsl.w	r3, r2, r3
 8001a94:	43db      	mvns	r3, r3
 8001a96:	693a      	ldr	r2, [r7, #16]
 8001a98:	4013      	ands	r3, r2
 8001a9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	68da      	ldr	r2, [r3, #12]
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	005b      	lsls	r3, r3, #1
 8001aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa8:	693a      	ldr	r2, [r7, #16]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	693a      	ldr	r2, [r7, #16]
 8001ab2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001aba:	2201      	movs	r2, #1
 8001abc:	697b      	ldr	r3, [r7, #20]
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	693a      	ldr	r2, [r7, #16]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	091b      	lsrs	r3, r3, #4
 8001ad0:	f003 0201 	and.w	r2, r3, #1
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	693a      	ldr	r2, [r7, #16]
 8001ae4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	f003 0303 	and.w	r3, r3, #3
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d017      	beq.n	8001b22 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	68db      	ldr	r3, [r3, #12]
 8001af6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	005b      	lsls	r3, r3, #1
 8001afc:	2203      	movs	r2, #3
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4013      	ands	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	689a      	ldr	r2, [r3, #8]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	693a      	ldr	r2, [r7, #16]
 8001b18:	4313      	orrs	r3, r2
 8001b1a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	693a      	ldr	r2, [r7, #16]
 8001b20:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d123      	bne.n	8001b76 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b2e:	697b      	ldr	r3, [r7, #20]
 8001b30:	08da      	lsrs	r2, r3, #3
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	3208      	adds	r2, #8
 8001b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	f003 0307 	and.w	r3, r3, #7
 8001b42:	009b      	lsls	r3, r3, #2
 8001b44:	220f      	movs	r2, #15
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	691a      	ldr	r2, [r3, #16]
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	009b      	lsls	r3, r3, #2
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	08da      	lsrs	r2, r3, #3
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	3208      	adds	r2, #8
 8001b70:	6939      	ldr	r1, [r7, #16]
 8001b72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	2203      	movs	r2, #3
 8001b82:	fa02 f303 	lsl.w	r3, r2, r3
 8001b86:	43db      	mvns	r3, r3
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b8e:	683b      	ldr	r3, [r7, #0]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	f003 0203 	and.w	r2, r3, #3
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	005b      	lsls	r3, r3, #1
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	693a      	ldr	r2, [r7, #16]
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	f000 80a6 	beq.w	8001d04 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bb8:	4b5b      	ldr	r3, [pc, #364]	; (8001d28 <HAL_GPIO_Init+0x2e4>)
 8001bba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bbc:	4a5a      	ldr	r2, [pc, #360]	; (8001d28 <HAL_GPIO_Init+0x2e4>)
 8001bbe:	f043 0301 	orr.w	r3, r3, #1
 8001bc2:	6613      	str	r3, [r2, #96]	; 0x60
 8001bc4:	4b58      	ldr	r3, [pc, #352]	; (8001d28 <HAL_GPIO_Init+0x2e4>)
 8001bc6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	60bb      	str	r3, [r7, #8]
 8001bce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bd0:	4a56      	ldr	r2, [pc, #344]	; (8001d2c <HAL_GPIO_Init+0x2e8>)
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	089b      	lsrs	r3, r3, #2
 8001bd6:	3302      	adds	r3, #2
 8001bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	f003 0303 	and.w	r3, r3, #3
 8001be4:	009b      	lsls	r3, r3, #2
 8001be6:	220f      	movs	r2, #15
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	43db      	mvns	r3, r3
 8001bee:	693a      	ldr	r2, [r7, #16]
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001bfa:	d01f      	beq.n	8001c3c <HAL_GPIO_Init+0x1f8>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	4a4c      	ldr	r2, [pc, #304]	; (8001d30 <HAL_GPIO_Init+0x2ec>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d019      	beq.n	8001c38 <HAL_GPIO_Init+0x1f4>
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	4a4b      	ldr	r2, [pc, #300]	; (8001d34 <HAL_GPIO_Init+0x2f0>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d013      	beq.n	8001c34 <HAL_GPIO_Init+0x1f0>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4a4a      	ldr	r2, [pc, #296]	; (8001d38 <HAL_GPIO_Init+0x2f4>)
 8001c10:	4293      	cmp	r3, r2
 8001c12:	d00d      	beq.n	8001c30 <HAL_GPIO_Init+0x1ec>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	4a49      	ldr	r2, [pc, #292]	; (8001d3c <HAL_GPIO_Init+0x2f8>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d007      	beq.n	8001c2c <HAL_GPIO_Init+0x1e8>
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	4a48      	ldr	r2, [pc, #288]	; (8001d40 <HAL_GPIO_Init+0x2fc>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d101      	bne.n	8001c28 <HAL_GPIO_Init+0x1e4>
 8001c24:	2305      	movs	r3, #5
 8001c26:	e00a      	b.n	8001c3e <HAL_GPIO_Init+0x1fa>
 8001c28:	2306      	movs	r3, #6
 8001c2a:	e008      	b.n	8001c3e <HAL_GPIO_Init+0x1fa>
 8001c2c:	2304      	movs	r3, #4
 8001c2e:	e006      	b.n	8001c3e <HAL_GPIO_Init+0x1fa>
 8001c30:	2303      	movs	r3, #3
 8001c32:	e004      	b.n	8001c3e <HAL_GPIO_Init+0x1fa>
 8001c34:	2302      	movs	r3, #2
 8001c36:	e002      	b.n	8001c3e <HAL_GPIO_Init+0x1fa>
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e000      	b.n	8001c3e <HAL_GPIO_Init+0x1fa>
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	697a      	ldr	r2, [r7, #20]
 8001c40:	f002 0203 	and.w	r2, r2, #3
 8001c44:	0092      	lsls	r2, r2, #2
 8001c46:	4093      	lsls	r3, r2
 8001c48:	693a      	ldr	r2, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c4e:	4937      	ldr	r1, [pc, #220]	; (8001d2c <HAL_GPIO_Init+0x2e8>)
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	089b      	lsrs	r3, r3, #2
 8001c54:	3302      	adds	r3, #2
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c5c:	4b39      	ldr	r3, [pc, #228]	; (8001d44 <HAL_GPIO_Init+0x300>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	43db      	mvns	r3, r3
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001c78:	693a      	ldr	r2, [r7, #16]
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c80:	4a30      	ldr	r2, [pc, #192]	; (8001d44 <HAL_GPIO_Init+0x300>)
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c86:	4b2f      	ldr	r3, [pc, #188]	; (8001d44 <HAL_GPIO_Init+0x300>)
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	693a      	ldr	r2, [r7, #16]
 8001c92:	4013      	ands	r3, r2
 8001c94:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001caa:	4a26      	ldr	r2, [pc, #152]	; (8001d44 <HAL_GPIO_Init+0x300>)
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001cb0:	4b24      	ldr	r3, [pc, #144]	; (8001d44 <HAL_GPIO_Init+0x300>)
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d003      	beq.n	8001cd4 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001cd4:	4a1b      	ldr	r2, [pc, #108]	; (8001d44 <HAL_GPIO_Init+0x300>)
 8001cd6:	693b      	ldr	r3, [r7, #16]
 8001cd8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001cda:	4b1a      	ldr	r3, [pc, #104]	; (8001d44 <HAL_GPIO_Init+0x300>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	4013      	ands	r3, r2
 8001ce8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d003      	beq.n	8001cfe <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001cf6:	693a      	ldr	r2, [r7, #16]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001cfe:	4a11      	ldr	r2, [pc, #68]	; (8001d44 <HAL_GPIO_Init+0x300>)
 8001d00:	693b      	ldr	r3, [r7, #16]
 8001d02:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d04:	697b      	ldr	r3, [r7, #20]
 8001d06:	3301      	adds	r3, #1
 8001d08:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681a      	ldr	r2, [r3, #0]
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	fa22 f303 	lsr.w	r3, r2, r3
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	f47f ae9d 	bne.w	8001a54 <HAL_GPIO_Init+0x10>
  }
}
 8001d1a:	bf00      	nop
 8001d1c:	bf00      	nop
 8001d1e:	371c      	adds	r7, #28
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	40010000 	.word	0x40010000
 8001d30:	48000400 	.word	0x48000400
 8001d34:	48000800 	.word	0x48000800
 8001d38:	48000c00 	.word	0x48000c00
 8001d3c:	48001000 	.word	0x48001000
 8001d40:	48001400 	.word	0x48001400
 8001d44:	40010400 	.word	0x40010400

08001d48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b083      	sub	sp, #12
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	460b      	mov	r3, r1
 8001d52:	807b      	strh	r3, [r7, #2]
 8001d54:	4613      	mov	r3, r2
 8001d56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001d58:	787b      	ldrb	r3, [r7, #1]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d5e:	887a      	ldrh	r2, [r7, #2]
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d64:	e002      	b.n	8001d6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d66:	887a      	ldrh	r2, [r7, #2]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d78:	b480      	push	{r7}
 8001d7a:	b085      	sub	sp, #20
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d141      	bne.n	8001e0a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d86:	4b4b      	ldr	r3, [pc, #300]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001d8e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d92:	d131      	bne.n	8001df8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d94:	4b47      	ldr	r3, [pc, #284]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001d9a:	4a46      	ldr	r2, [pc, #280]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001da0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001da4:	4b43      	ldr	r3, [pc, #268]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001dac:	4a41      	ldr	r2, [pc, #260]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001db2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001db4:	4b40      	ldr	r3, [pc, #256]	; (8001eb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2232      	movs	r2, #50	; 0x32
 8001dba:	fb02 f303 	mul.w	r3, r2, r3
 8001dbe:	4a3f      	ldr	r2, [pc, #252]	; (8001ebc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8001dc4:	0c9b      	lsrs	r3, r3, #18
 8001dc6:	3301      	adds	r3, #1
 8001dc8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dca:	e002      	b.n	8001dd2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	3b01      	subs	r3, #1
 8001dd0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dd2:	4b38      	ldr	r3, [pc, #224]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd4:	695b      	ldr	r3, [r3, #20]
 8001dd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001dde:	d102      	bne.n	8001de6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d1f2      	bne.n	8001dcc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001de6:	4b33      	ldr	r3, [pc, #204]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001df2:	d158      	bne.n	8001ea6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e057      	b.n	8001ea8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001df8:	4b2e      	ldr	r3, [pc, #184]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001dfe:	4a2d      	ldr	r2, [pc, #180]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e04:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001e08:	e04d      	b.n	8001ea6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e10:	d141      	bne.n	8001e96 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e12:	4b28      	ldr	r3, [pc, #160]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e1e:	d131      	bne.n	8001e84 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e20:	4b24      	ldr	r3, [pc, #144]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e26:	4a23      	ldr	r2, [pc, #140]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e2c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e30:	4b20      	ldr	r3, [pc, #128]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e38:	4a1e      	ldr	r2, [pc, #120]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001e3e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001e40:	4b1d      	ldr	r3, [pc, #116]	; (8001eb8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	2232      	movs	r2, #50	; 0x32
 8001e46:	fb02 f303 	mul.w	r3, r2, r3
 8001e4a:	4a1c      	ldr	r2, [pc, #112]	; (8001ebc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e50:	0c9b      	lsrs	r3, r3, #18
 8001e52:	3301      	adds	r3, #1
 8001e54:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e56:	e002      	b.n	8001e5e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	3b01      	subs	r3, #1
 8001e5c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e5e:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e60:	695b      	ldr	r3, [r3, #20]
 8001e62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e66:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e6a:	d102      	bne.n	8001e72 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d1f2      	bne.n	8001e58 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e72:	4b10      	ldr	r3, [pc, #64]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e74:	695b      	ldr	r3, [r3, #20]
 8001e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e7e:	d112      	bne.n	8001ea6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e80:	2303      	movs	r3, #3
 8001e82:	e011      	b.n	8001ea8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e84:	4b0b      	ldr	r3, [pc, #44]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e86:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001e8a:	4a0a      	ldr	r2, [pc, #40]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e8c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001e94:	e007      	b.n	8001ea6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e96:	4b07      	ldr	r3, [pc, #28]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001e9e:	4a05      	ldr	r2, [pc, #20]	; (8001eb4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ea0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ea4:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8001ea6:	2300      	movs	r3, #0
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr
 8001eb4:	40007000 	.word	0x40007000
 8001eb8:	20000000 	.word	0x20000000
 8001ebc:	431bde83 	.word	0x431bde83

08001ec0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8001ec4:	4b05      	ldr	r3, [pc, #20]	; (8001edc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001ec6:	689b      	ldr	r3, [r3, #8]
 8001ec8:	4a04      	ldr	r2, [pc, #16]	; (8001edc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8001eca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ece:	6093      	str	r3, [r2, #8]
}
 8001ed0:	bf00      	nop
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
 8001eda:	bf00      	nop
 8001edc:	40007000 	.word	0x40007000

08001ee0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d101      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e2fe      	b.n	80024f0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 0301 	and.w	r3, r3, #1
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d075      	beq.n	8001fea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001efe:	4b97      	ldr	r3, [pc, #604]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 030c 	and.w	r3, r3, #12
 8001f06:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f08:	4b94      	ldr	r3, [pc, #592]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f003 0303 	and.w	r3, r3, #3
 8001f10:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	2b0c      	cmp	r3, #12
 8001f16:	d102      	bne.n	8001f1e <HAL_RCC_OscConfig+0x3e>
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	2b03      	cmp	r3, #3
 8001f1c:	d002      	beq.n	8001f24 <HAL_RCC_OscConfig+0x44>
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	2b08      	cmp	r3, #8
 8001f22:	d10b      	bne.n	8001f3c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f24:	4b8d      	ldr	r3, [pc, #564]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d05b      	beq.n	8001fe8 <HAL_RCC_OscConfig+0x108>
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d157      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	e2d9      	b.n	80024f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f44:	d106      	bne.n	8001f54 <HAL_RCC_OscConfig+0x74>
 8001f46:	4b85      	ldr	r3, [pc, #532]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a84      	ldr	r2, [pc, #528]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 8001f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f50:	6013      	str	r3, [r2, #0]
 8001f52:	e01d      	b.n	8001f90 <HAL_RCC_OscConfig+0xb0>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f5c:	d10c      	bne.n	8001f78 <HAL_RCC_OscConfig+0x98>
 8001f5e:	4b7f      	ldr	r3, [pc, #508]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a7e      	ldr	r2, [pc, #504]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 8001f64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	4b7c      	ldr	r3, [pc, #496]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a7b      	ldr	r2, [pc, #492]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 8001f70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f74:	6013      	str	r3, [r2, #0]
 8001f76:	e00b      	b.n	8001f90 <HAL_RCC_OscConfig+0xb0>
 8001f78:	4b78      	ldr	r3, [pc, #480]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a77      	ldr	r2, [pc, #476]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 8001f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f82:	6013      	str	r3, [r2, #0]
 8001f84:	4b75      	ldr	r3, [pc, #468]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a74      	ldr	r2, [pc, #464]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 8001f8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d013      	beq.n	8001fc0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f98:	f7ff fc42 	bl	8001820 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fa0:	f7ff fc3e 	bl	8001820 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b64      	cmp	r3, #100	; 0x64
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e29e      	b.n	80024f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fb2:	4b6a      	ldr	r3, [pc, #424]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0f0      	beq.n	8001fa0 <HAL_RCC_OscConfig+0xc0>
 8001fbe:	e014      	b.n	8001fea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc0:	f7ff fc2e 	bl	8001820 <HAL_GetTick>
 8001fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fc6:	e008      	b.n	8001fda <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fc8:	f7ff fc2a 	bl	8001820 <HAL_GetTick>
 8001fcc:	4602      	mov	r2, r0
 8001fce:	693b      	ldr	r3, [r7, #16]
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b64      	cmp	r3, #100	; 0x64
 8001fd4:	d901      	bls.n	8001fda <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	e28a      	b.n	80024f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fda:	4b60      	ldr	r3, [pc, #384]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d1f0      	bne.n	8001fc8 <HAL_RCC_OscConfig+0xe8>
 8001fe6:	e000      	b.n	8001fea <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0302 	and.w	r3, r3, #2
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d075      	beq.n	80020e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ff6:	4b59      	ldr	r3, [pc, #356]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
 8001ffe:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002000:	4b56      	ldr	r3, [pc, #344]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 8002002:	68db      	ldr	r3, [r3, #12]
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800200a:	69bb      	ldr	r3, [r7, #24]
 800200c:	2b0c      	cmp	r3, #12
 800200e:	d102      	bne.n	8002016 <HAL_RCC_OscConfig+0x136>
 8002010:	697b      	ldr	r3, [r7, #20]
 8002012:	2b02      	cmp	r3, #2
 8002014:	d002      	beq.n	800201c <HAL_RCC_OscConfig+0x13c>
 8002016:	69bb      	ldr	r3, [r7, #24]
 8002018:	2b04      	cmp	r3, #4
 800201a:	d11f      	bne.n	800205c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800201c:	4b4f      	ldr	r3, [pc, #316]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <HAL_RCC_OscConfig+0x154>
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d101      	bne.n	8002034 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	e25d      	b.n	80024f0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002034:	4b49      	ldr	r3, [pc, #292]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	061b      	lsls	r3, r3, #24
 8002042:	4946      	ldr	r1, [pc, #280]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 8002044:	4313      	orrs	r3, r2
 8002046:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002048:	4b45      	ldr	r3, [pc, #276]	; (8002160 <HAL_RCC_OscConfig+0x280>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4618      	mov	r0, r3
 800204e:	f7ff fb9b 	bl	8001788 <HAL_InitTick>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d043      	beq.n	80020e0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002058:	2301      	movs	r3, #1
 800205a:	e249      	b.n	80024f0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d023      	beq.n	80020ac <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002064:	4b3d      	ldr	r3, [pc, #244]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a3c      	ldr	r2, [pc, #240]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 800206a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800206e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002070:	f7ff fbd6 	bl	8001820 <HAL_GetTick>
 8002074:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002076:	e008      	b.n	800208a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002078:	f7ff fbd2 	bl	8001820 <HAL_GetTick>
 800207c:	4602      	mov	r2, r0
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	1ad3      	subs	r3, r2, r3
 8002082:	2b02      	cmp	r3, #2
 8002084:	d901      	bls.n	800208a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002086:	2303      	movs	r3, #3
 8002088:	e232      	b.n	80024f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800208a:	4b34      	ldr	r3, [pc, #208]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002092:	2b00      	cmp	r3, #0
 8002094:	d0f0      	beq.n	8002078 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002096:	4b31      	ldr	r3, [pc, #196]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	691b      	ldr	r3, [r3, #16]
 80020a2:	061b      	lsls	r3, r3, #24
 80020a4:	492d      	ldr	r1, [pc, #180]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	604b      	str	r3, [r1, #4]
 80020aa:	e01a      	b.n	80020e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ac:	4b2b      	ldr	r3, [pc, #172]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a2a      	ldr	r2, [pc, #168]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 80020b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020b6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020b8:	f7ff fbb2 	bl	8001820 <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020c0:	f7ff fbae 	bl	8001820 <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e20e      	b.n	80024f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020d2:	4b22      	ldr	r3, [pc, #136]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d1f0      	bne.n	80020c0 <HAL_RCC_OscConfig+0x1e0>
 80020de:	e000      	b.n	80020e2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80020e0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 0308 	and.w	r3, r3, #8
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d041      	beq.n	8002172 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	695b      	ldr	r3, [r3, #20]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d01c      	beq.n	8002130 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020f6:	4b19      	ldr	r3, [pc, #100]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 80020f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020fc:	4a17      	ldr	r2, [pc, #92]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 80020fe:	f043 0301 	orr.w	r3, r3, #1
 8002102:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002106:	f7ff fb8b 	bl	8001820 <HAL_GetTick>
 800210a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800210c:	e008      	b.n	8002120 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800210e:	f7ff fb87 	bl	8001820 <HAL_GetTick>
 8002112:	4602      	mov	r2, r0
 8002114:	693b      	ldr	r3, [r7, #16]
 8002116:	1ad3      	subs	r3, r2, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d901      	bls.n	8002120 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800211c:	2303      	movs	r3, #3
 800211e:	e1e7      	b.n	80024f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002120:	4b0e      	ldr	r3, [pc, #56]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 8002122:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002126:	f003 0302 	and.w	r3, r3, #2
 800212a:	2b00      	cmp	r3, #0
 800212c:	d0ef      	beq.n	800210e <HAL_RCC_OscConfig+0x22e>
 800212e:	e020      	b.n	8002172 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002130:	4b0a      	ldr	r3, [pc, #40]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 8002132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002136:	4a09      	ldr	r2, [pc, #36]	; (800215c <HAL_RCC_OscConfig+0x27c>)
 8002138:	f023 0301 	bic.w	r3, r3, #1
 800213c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002140:	f7ff fb6e 	bl	8001820 <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002146:	e00d      	b.n	8002164 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002148:	f7ff fb6a 	bl	8001820 <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d906      	bls.n	8002164 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e1ca      	b.n	80024f0 <HAL_RCC_OscConfig+0x610>
 800215a:	bf00      	nop
 800215c:	40021000 	.word	0x40021000
 8002160:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002164:	4b8c      	ldr	r3, [pc, #560]	; (8002398 <HAL_RCC_OscConfig+0x4b8>)
 8002166:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800216a:	f003 0302 	and.w	r3, r3, #2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1ea      	bne.n	8002148 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0304 	and.w	r3, r3, #4
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 80a6 	beq.w	80022cc <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002180:	2300      	movs	r3, #0
 8002182:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002184:	4b84      	ldr	r3, [pc, #528]	; (8002398 <HAL_RCC_OscConfig+0x4b8>)
 8002186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218c:	2b00      	cmp	r3, #0
 800218e:	d101      	bne.n	8002194 <HAL_RCC_OscConfig+0x2b4>
 8002190:	2301      	movs	r3, #1
 8002192:	e000      	b.n	8002196 <HAL_RCC_OscConfig+0x2b6>
 8002194:	2300      	movs	r3, #0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00d      	beq.n	80021b6 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800219a:	4b7f      	ldr	r3, [pc, #508]	; (8002398 <HAL_RCC_OscConfig+0x4b8>)
 800219c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219e:	4a7e      	ldr	r2, [pc, #504]	; (8002398 <HAL_RCC_OscConfig+0x4b8>)
 80021a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021a4:	6593      	str	r3, [r2, #88]	; 0x58
 80021a6:	4b7c      	ldr	r3, [pc, #496]	; (8002398 <HAL_RCC_OscConfig+0x4b8>)
 80021a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021ae:	60fb      	str	r3, [r7, #12]
 80021b0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80021b2:	2301      	movs	r3, #1
 80021b4:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021b6:	4b79      	ldr	r3, [pc, #484]	; (800239c <HAL_RCC_OscConfig+0x4bc>)
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d118      	bne.n	80021f4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021c2:	4b76      	ldr	r3, [pc, #472]	; (800239c <HAL_RCC_OscConfig+0x4bc>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a75      	ldr	r2, [pc, #468]	; (800239c <HAL_RCC_OscConfig+0x4bc>)
 80021c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ce:	f7ff fb27 	bl	8001820 <HAL_GetTick>
 80021d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021d4:	e008      	b.n	80021e8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021d6:	f7ff fb23 	bl	8001820 <HAL_GetTick>
 80021da:	4602      	mov	r2, r0
 80021dc:	693b      	ldr	r3, [r7, #16]
 80021de:	1ad3      	subs	r3, r2, r3
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d901      	bls.n	80021e8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80021e4:	2303      	movs	r3, #3
 80021e6:	e183      	b.n	80024f0 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80021e8:	4b6c      	ldr	r3, [pc, #432]	; (800239c <HAL_RCC_OscConfig+0x4bc>)
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d0f0      	beq.n	80021d6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d108      	bne.n	800220e <HAL_RCC_OscConfig+0x32e>
 80021fc:	4b66      	ldr	r3, [pc, #408]	; (8002398 <HAL_RCC_OscConfig+0x4b8>)
 80021fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002202:	4a65      	ldr	r2, [pc, #404]	; (8002398 <HAL_RCC_OscConfig+0x4b8>)
 8002204:	f043 0301 	orr.w	r3, r3, #1
 8002208:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800220c:	e024      	b.n	8002258 <HAL_RCC_OscConfig+0x378>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	689b      	ldr	r3, [r3, #8]
 8002212:	2b05      	cmp	r3, #5
 8002214:	d110      	bne.n	8002238 <HAL_RCC_OscConfig+0x358>
 8002216:	4b60      	ldr	r3, [pc, #384]	; (8002398 <HAL_RCC_OscConfig+0x4b8>)
 8002218:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800221c:	4a5e      	ldr	r2, [pc, #376]	; (8002398 <HAL_RCC_OscConfig+0x4b8>)
 800221e:	f043 0304 	orr.w	r3, r3, #4
 8002222:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002226:	4b5c      	ldr	r3, [pc, #368]	; (8002398 <HAL_RCC_OscConfig+0x4b8>)
 8002228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800222c:	4a5a      	ldr	r2, [pc, #360]	; (8002398 <HAL_RCC_OscConfig+0x4b8>)
 800222e:	f043 0301 	orr.w	r3, r3, #1
 8002232:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002236:	e00f      	b.n	8002258 <HAL_RCC_OscConfig+0x378>
 8002238:	4b57      	ldr	r3, [pc, #348]	; (8002398 <HAL_RCC_OscConfig+0x4b8>)
 800223a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800223e:	4a56      	ldr	r2, [pc, #344]	; (8002398 <HAL_RCC_OscConfig+0x4b8>)
 8002240:	f023 0301 	bic.w	r3, r3, #1
 8002244:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002248:	4b53      	ldr	r3, [pc, #332]	; (8002398 <HAL_RCC_OscConfig+0x4b8>)
 800224a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800224e:	4a52      	ldr	r2, [pc, #328]	; (8002398 <HAL_RCC_OscConfig+0x4b8>)
 8002250:	f023 0304 	bic.w	r3, r3, #4
 8002254:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	2b00      	cmp	r3, #0
 800225e:	d016      	beq.n	800228e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002260:	f7ff fade 	bl	8001820 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002266:	e00a      	b.n	800227e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002268:	f7ff fada 	bl	8001820 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	f241 3288 	movw	r2, #5000	; 0x1388
 8002276:	4293      	cmp	r3, r2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e138      	b.n	80024f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800227e:	4b46      	ldr	r3, [pc, #280]	; (8002398 <HAL_RCC_OscConfig+0x4b8>)
 8002280:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d0ed      	beq.n	8002268 <HAL_RCC_OscConfig+0x388>
 800228c:	e015      	b.n	80022ba <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800228e:	f7ff fac7 	bl	8001820 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002294:	e00a      	b.n	80022ac <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002296:	f7ff fac3 	bl	8001820 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d901      	bls.n	80022ac <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80022a8:	2303      	movs	r3, #3
 80022aa:	e121      	b.n	80024f0 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80022ac:	4b3a      	ldr	r3, [pc, #232]	; (8002398 <HAL_RCC_OscConfig+0x4b8>)
 80022ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1ed      	bne.n	8002296 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80022ba:	7ffb      	ldrb	r3, [r7, #31]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d105      	bne.n	80022cc <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c0:	4b35      	ldr	r3, [pc, #212]	; (8002398 <HAL_RCC_OscConfig+0x4b8>)
 80022c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022c4:	4a34      	ldr	r2, [pc, #208]	; (8002398 <HAL_RCC_OscConfig+0x4b8>)
 80022c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 0320 	and.w	r3, r3, #32
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d03c      	beq.n	8002352 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	699b      	ldr	r3, [r3, #24]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d01c      	beq.n	800231a <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80022e0:	4b2d      	ldr	r3, [pc, #180]	; (8002398 <HAL_RCC_OscConfig+0x4b8>)
 80022e2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80022e6:	4a2c      	ldr	r2, [pc, #176]	; (8002398 <HAL_RCC_OscConfig+0x4b8>)
 80022e8:	f043 0301 	orr.w	r3, r3, #1
 80022ec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f0:	f7ff fa96 	bl	8001820 <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80022f8:	f7ff fa92 	bl	8001820 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e0f2      	b.n	80024f0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800230a:	4b23      	ldr	r3, [pc, #140]	; (8002398 <HAL_RCC_OscConfig+0x4b8>)
 800230c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002310:	f003 0302 	and.w	r3, r3, #2
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0ef      	beq.n	80022f8 <HAL_RCC_OscConfig+0x418>
 8002318:	e01b      	b.n	8002352 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800231a:	4b1f      	ldr	r3, [pc, #124]	; (8002398 <HAL_RCC_OscConfig+0x4b8>)
 800231c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002320:	4a1d      	ldr	r2, [pc, #116]	; (8002398 <HAL_RCC_OscConfig+0x4b8>)
 8002322:	f023 0301 	bic.w	r3, r3, #1
 8002326:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800232a:	f7ff fa79 	bl	8001820 <HAL_GetTick>
 800232e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002330:	e008      	b.n	8002344 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002332:	f7ff fa75 	bl	8001820 <HAL_GetTick>
 8002336:	4602      	mov	r2, r0
 8002338:	693b      	ldr	r3, [r7, #16]
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	2b02      	cmp	r3, #2
 800233e:	d901      	bls.n	8002344 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002340:	2303      	movs	r3, #3
 8002342:	e0d5      	b.n	80024f0 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002344:	4b14      	ldr	r3, [pc, #80]	; (8002398 <HAL_RCC_OscConfig+0x4b8>)
 8002346:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800234a:	f003 0302 	and.w	r3, r3, #2
 800234e:	2b00      	cmp	r3, #0
 8002350:	d1ef      	bne.n	8002332 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69db      	ldr	r3, [r3, #28]
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 80c9 	beq.w	80024ee <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800235c:	4b0e      	ldr	r3, [pc, #56]	; (8002398 <HAL_RCC_OscConfig+0x4b8>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f003 030c 	and.w	r3, r3, #12
 8002364:	2b0c      	cmp	r3, #12
 8002366:	f000 8083 	beq.w	8002470 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	69db      	ldr	r3, [r3, #28]
 800236e:	2b02      	cmp	r3, #2
 8002370:	d15e      	bne.n	8002430 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002372:	4b09      	ldr	r3, [pc, #36]	; (8002398 <HAL_RCC_OscConfig+0x4b8>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a08      	ldr	r2, [pc, #32]	; (8002398 <HAL_RCC_OscConfig+0x4b8>)
 8002378:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800237c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800237e:	f7ff fa4f 	bl	8001820 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002384:	e00c      	b.n	80023a0 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002386:	f7ff fa4b 	bl	8001820 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d905      	bls.n	80023a0 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e0ab      	b.n	80024f0 <HAL_RCC_OscConfig+0x610>
 8002398:	40021000 	.word	0x40021000
 800239c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023a0:	4b55      	ldr	r3, [pc, #340]	; (80024f8 <HAL_RCC_OscConfig+0x618>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d1ec      	bne.n	8002386 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ac:	4b52      	ldr	r3, [pc, #328]	; (80024f8 <HAL_RCC_OscConfig+0x618>)
 80023ae:	68da      	ldr	r2, [r3, #12]
 80023b0:	4b52      	ldr	r3, [pc, #328]	; (80024fc <HAL_RCC_OscConfig+0x61c>)
 80023b2:	4013      	ands	r3, r2
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	6a11      	ldr	r1, [r2, #32]
 80023b8:	687a      	ldr	r2, [r7, #4]
 80023ba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023bc:	3a01      	subs	r2, #1
 80023be:	0112      	lsls	r2, r2, #4
 80023c0:	4311      	orrs	r1, r2
 80023c2:	687a      	ldr	r2, [r7, #4]
 80023c4:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80023c6:	0212      	lsls	r2, r2, #8
 80023c8:	4311      	orrs	r1, r2
 80023ca:	687a      	ldr	r2, [r7, #4]
 80023cc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80023ce:	0852      	lsrs	r2, r2, #1
 80023d0:	3a01      	subs	r2, #1
 80023d2:	0552      	lsls	r2, r2, #21
 80023d4:	4311      	orrs	r1, r2
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80023da:	0852      	lsrs	r2, r2, #1
 80023dc:	3a01      	subs	r2, #1
 80023de:	0652      	lsls	r2, r2, #25
 80023e0:	4311      	orrs	r1, r2
 80023e2:	687a      	ldr	r2, [r7, #4]
 80023e4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80023e6:	06d2      	lsls	r2, r2, #27
 80023e8:	430a      	orrs	r2, r1
 80023ea:	4943      	ldr	r1, [pc, #268]	; (80024f8 <HAL_RCC_OscConfig+0x618>)
 80023ec:	4313      	orrs	r3, r2
 80023ee:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023f0:	4b41      	ldr	r3, [pc, #260]	; (80024f8 <HAL_RCC_OscConfig+0x618>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a40      	ldr	r2, [pc, #256]	; (80024f8 <HAL_RCC_OscConfig+0x618>)
 80023f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80023fa:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023fc:	4b3e      	ldr	r3, [pc, #248]	; (80024f8 <HAL_RCC_OscConfig+0x618>)
 80023fe:	68db      	ldr	r3, [r3, #12]
 8002400:	4a3d      	ldr	r2, [pc, #244]	; (80024f8 <HAL_RCC_OscConfig+0x618>)
 8002402:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002406:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002408:	f7ff fa0a 	bl	8001820 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002410:	f7ff fa06 	bl	8001820 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e066      	b.n	80024f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002422:	4b35      	ldr	r3, [pc, #212]	; (80024f8 <HAL_RCC_OscConfig+0x618>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d0f0      	beq.n	8002410 <HAL_RCC_OscConfig+0x530>
 800242e:	e05e      	b.n	80024ee <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002430:	4b31      	ldr	r3, [pc, #196]	; (80024f8 <HAL_RCC_OscConfig+0x618>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a30      	ldr	r2, [pc, #192]	; (80024f8 <HAL_RCC_OscConfig+0x618>)
 8002436:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800243a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800243c:	f7ff f9f0 	bl	8001820 <HAL_GetTick>
 8002440:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002442:	e008      	b.n	8002456 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002444:	f7ff f9ec 	bl	8001820 <HAL_GetTick>
 8002448:	4602      	mov	r2, r0
 800244a:	693b      	ldr	r3, [r7, #16]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	2b02      	cmp	r3, #2
 8002450:	d901      	bls.n	8002456 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002452:	2303      	movs	r3, #3
 8002454:	e04c      	b.n	80024f0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002456:	4b28      	ldr	r3, [pc, #160]	; (80024f8 <HAL_RCC_OscConfig+0x618>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1f0      	bne.n	8002444 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002462:	4b25      	ldr	r3, [pc, #148]	; (80024f8 <HAL_RCC_OscConfig+0x618>)
 8002464:	68da      	ldr	r2, [r3, #12]
 8002466:	4924      	ldr	r1, [pc, #144]	; (80024f8 <HAL_RCC_OscConfig+0x618>)
 8002468:	4b25      	ldr	r3, [pc, #148]	; (8002500 <HAL_RCC_OscConfig+0x620>)
 800246a:	4013      	ands	r3, r2
 800246c:	60cb      	str	r3, [r1, #12]
 800246e:	e03e      	b.n	80024ee <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	69db      	ldr	r3, [r3, #28]
 8002474:	2b01      	cmp	r3, #1
 8002476:	d101      	bne.n	800247c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e039      	b.n	80024f0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800247c:	4b1e      	ldr	r3, [pc, #120]	; (80024f8 <HAL_RCC_OscConfig+0x618>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	f003 0203 	and.w	r2, r3, #3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6a1b      	ldr	r3, [r3, #32]
 800248c:	429a      	cmp	r2, r3
 800248e:	d12c      	bne.n	80024ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800249a:	3b01      	subs	r3, #1
 800249c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800249e:	429a      	cmp	r2, r3
 80024a0:	d123      	bne.n	80024ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80024ae:	429a      	cmp	r2, r3
 80024b0:	d11b      	bne.n	80024ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024b2:	697b      	ldr	r3, [r7, #20]
 80024b4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80024be:	429a      	cmp	r2, r3
 80024c0:	d113      	bne.n	80024ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024cc:	085b      	lsrs	r3, r3, #1
 80024ce:	3b01      	subs	r3, #1
 80024d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80024d2:	429a      	cmp	r2, r3
 80024d4:	d109      	bne.n	80024ea <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024e0:	085b      	lsrs	r3, r3, #1
 80024e2:	3b01      	subs	r3, #1
 80024e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80024e6:	429a      	cmp	r2, r3
 80024e8:	d001      	beq.n	80024ee <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e000      	b.n	80024f0 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80024ee:	2300      	movs	r3, #0
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3720      	adds	r7, #32
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40021000 	.word	0x40021000
 80024fc:	019f800c 	.word	0x019f800c
 8002500:	feeefffc 	.word	0xfeeefffc

08002504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b086      	sub	sp, #24
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
 800250c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800250e:	2300      	movs	r3, #0
 8002510:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	e11e      	b.n	800275a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800251c:	4b91      	ldr	r3, [pc, #580]	; (8002764 <HAL_RCC_ClockConfig+0x260>)
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f003 030f 	and.w	r3, r3, #15
 8002524:	683a      	ldr	r2, [r7, #0]
 8002526:	429a      	cmp	r2, r3
 8002528:	d910      	bls.n	800254c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800252a:	4b8e      	ldr	r3, [pc, #568]	; (8002764 <HAL_RCC_ClockConfig+0x260>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f023 020f 	bic.w	r2, r3, #15
 8002532:	498c      	ldr	r1, [pc, #560]	; (8002764 <HAL_RCC_ClockConfig+0x260>)
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	4313      	orrs	r3, r2
 8002538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800253a:	4b8a      	ldr	r3, [pc, #552]	; (8002764 <HAL_RCC_ClockConfig+0x260>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	d001      	beq.n	800254c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e106      	b.n	800275a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b00      	cmp	r3, #0
 8002556:	d073      	beq.n	8002640 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	2b03      	cmp	r3, #3
 800255e:	d129      	bne.n	80025b4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002560:	4b81      	ldr	r3, [pc, #516]	; (8002768 <HAL_RCC_ClockConfig+0x264>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e0f4      	b.n	800275a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002570:	f000 f99e 	bl	80028b0 <RCC_GetSysClockFreqFromPLLSource>
 8002574:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	4a7c      	ldr	r2, [pc, #496]	; (800276c <HAL_RCC_ClockConfig+0x268>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d93f      	bls.n	80025fe <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800257e:	4b7a      	ldr	r3, [pc, #488]	; (8002768 <HAL_RCC_ClockConfig+0x264>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d009      	beq.n	800259e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002592:	2b00      	cmp	r3, #0
 8002594:	d033      	beq.n	80025fe <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800259a:	2b00      	cmp	r3, #0
 800259c:	d12f      	bne.n	80025fe <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800259e:	4b72      	ldr	r3, [pc, #456]	; (8002768 <HAL_RCC_ClockConfig+0x264>)
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025a6:	4a70      	ldr	r2, [pc, #448]	; (8002768 <HAL_RCC_ClockConfig+0x264>)
 80025a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025ac:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80025ae:	2380      	movs	r3, #128	; 0x80
 80025b0:	617b      	str	r3, [r7, #20]
 80025b2:	e024      	b.n	80025fe <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d107      	bne.n	80025cc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025bc:	4b6a      	ldr	r3, [pc, #424]	; (8002768 <HAL_RCC_ClockConfig+0x264>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d109      	bne.n	80025dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	e0c6      	b.n	800275a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80025cc:	4b66      	ldr	r3, [pc, #408]	; (8002768 <HAL_RCC_ClockConfig+0x264>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d101      	bne.n	80025dc <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	e0be      	b.n	800275a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80025dc:	f000 f8ce 	bl	800277c <HAL_RCC_GetSysClockFreq>
 80025e0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80025e2:	693b      	ldr	r3, [r7, #16]
 80025e4:	4a61      	ldr	r2, [pc, #388]	; (800276c <HAL_RCC_ClockConfig+0x268>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d909      	bls.n	80025fe <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80025ea:	4b5f      	ldr	r3, [pc, #380]	; (8002768 <HAL_RCC_ClockConfig+0x264>)
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80025f2:	4a5d      	ldr	r2, [pc, #372]	; (8002768 <HAL_RCC_ClockConfig+0x264>)
 80025f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025f8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80025fa:	2380      	movs	r3, #128	; 0x80
 80025fc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80025fe:	4b5a      	ldr	r3, [pc, #360]	; (8002768 <HAL_RCC_ClockConfig+0x264>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f023 0203 	bic.w	r2, r3, #3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	4957      	ldr	r1, [pc, #348]	; (8002768 <HAL_RCC_ClockConfig+0x264>)
 800260c:	4313      	orrs	r3, r2
 800260e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002610:	f7ff f906 	bl	8001820 <HAL_GetTick>
 8002614:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002616:	e00a      	b.n	800262e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002618:	f7ff f902 	bl	8001820 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	f241 3288 	movw	r2, #5000	; 0x1388
 8002626:	4293      	cmp	r3, r2
 8002628:	d901      	bls.n	800262e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e095      	b.n	800275a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262e:	4b4e      	ldr	r3, [pc, #312]	; (8002768 <HAL_RCC_ClockConfig+0x264>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f003 020c 	and.w	r2, r3, #12
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	429a      	cmp	r2, r3
 800263e:	d1eb      	bne.n	8002618 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0302 	and.w	r3, r3, #2
 8002648:	2b00      	cmp	r3, #0
 800264a:	d023      	beq.n	8002694 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 0304 	and.w	r3, r3, #4
 8002654:	2b00      	cmp	r3, #0
 8002656:	d005      	beq.n	8002664 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002658:	4b43      	ldr	r3, [pc, #268]	; (8002768 <HAL_RCC_ClockConfig+0x264>)
 800265a:	689b      	ldr	r3, [r3, #8]
 800265c:	4a42      	ldr	r2, [pc, #264]	; (8002768 <HAL_RCC_ClockConfig+0x264>)
 800265e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002662:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0308 	and.w	r3, r3, #8
 800266c:	2b00      	cmp	r3, #0
 800266e:	d007      	beq.n	8002680 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002670:	4b3d      	ldr	r3, [pc, #244]	; (8002768 <HAL_RCC_ClockConfig+0x264>)
 8002672:	689b      	ldr	r3, [r3, #8]
 8002674:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8002678:	4a3b      	ldr	r2, [pc, #236]	; (8002768 <HAL_RCC_ClockConfig+0x264>)
 800267a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800267e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002680:	4b39      	ldr	r3, [pc, #228]	; (8002768 <HAL_RCC_ClockConfig+0x264>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	4936      	ldr	r1, [pc, #216]	; (8002768 <HAL_RCC_ClockConfig+0x264>)
 800268e:	4313      	orrs	r3, r2
 8002690:	608b      	str	r3, [r1, #8]
 8002692:	e008      	b.n	80026a6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002694:	697b      	ldr	r3, [r7, #20]
 8002696:	2b80      	cmp	r3, #128	; 0x80
 8002698:	d105      	bne.n	80026a6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800269a:	4b33      	ldr	r3, [pc, #204]	; (8002768 <HAL_RCC_ClockConfig+0x264>)
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	4a32      	ldr	r2, [pc, #200]	; (8002768 <HAL_RCC_ClockConfig+0x264>)
 80026a0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80026a4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80026a6:	4b2f      	ldr	r3, [pc, #188]	; (8002764 <HAL_RCC_ClockConfig+0x260>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 030f 	and.w	r3, r3, #15
 80026ae:	683a      	ldr	r2, [r7, #0]
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d21d      	bcs.n	80026f0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026b4:	4b2b      	ldr	r3, [pc, #172]	; (8002764 <HAL_RCC_ClockConfig+0x260>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f023 020f 	bic.w	r2, r3, #15
 80026bc:	4929      	ldr	r1, [pc, #164]	; (8002764 <HAL_RCC_ClockConfig+0x260>)
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	4313      	orrs	r3, r2
 80026c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026c4:	f7ff f8ac 	bl	8001820 <HAL_GetTick>
 80026c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026ca:	e00a      	b.n	80026e2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026cc:	f7ff f8a8 	bl	8001820 <HAL_GetTick>
 80026d0:	4602      	mov	r2, r0
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	1ad3      	subs	r3, r2, r3
 80026d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80026da:	4293      	cmp	r3, r2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e03b      	b.n	800275a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80026e2:	4b20      	ldr	r3, [pc, #128]	; (8002764 <HAL_RCC_ClockConfig+0x260>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 030f 	and.w	r3, r3, #15
 80026ea:	683a      	ldr	r2, [r7, #0]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d1ed      	bne.n	80026cc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f003 0304 	and.w	r3, r3, #4
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d008      	beq.n	800270e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80026fc:	4b1a      	ldr	r3, [pc, #104]	; (8002768 <HAL_RCC_ClockConfig+0x264>)
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	68db      	ldr	r3, [r3, #12]
 8002708:	4917      	ldr	r1, [pc, #92]	; (8002768 <HAL_RCC_ClockConfig+0x264>)
 800270a:	4313      	orrs	r3, r2
 800270c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0308 	and.w	r3, r3, #8
 8002716:	2b00      	cmp	r3, #0
 8002718:	d009      	beq.n	800272e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800271a:	4b13      	ldr	r3, [pc, #76]	; (8002768 <HAL_RCC_ClockConfig+0x264>)
 800271c:	689b      	ldr	r3, [r3, #8]
 800271e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	490f      	ldr	r1, [pc, #60]	; (8002768 <HAL_RCC_ClockConfig+0x264>)
 800272a:	4313      	orrs	r3, r2
 800272c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800272e:	f000 f825 	bl	800277c <HAL_RCC_GetSysClockFreq>
 8002732:	4602      	mov	r2, r0
 8002734:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <HAL_RCC_ClockConfig+0x264>)
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	091b      	lsrs	r3, r3, #4
 800273a:	f003 030f 	and.w	r3, r3, #15
 800273e:	490c      	ldr	r1, [pc, #48]	; (8002770 <HAL_RCC_ClockConfig+0x26c>)
 8002740:	5ccb      	ldrb	r3, [r1, r3]
 8002742:	f003 031f 	and.w	r3, r3, #31
 8002746:	fa22 f303 	lsr.w	r3, r2, r3
 800274a:	4a0a      	ldr	r2, [pc, #40]	; (8002774 <HAL_RCC_ClockConfig+0x270>)
 800274c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800274e:	4b0a      	ldr	r3, [pc, #40]	; (8002778 <HAL_RCC_ClockConfig+0x274>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4618      	mov	r0, r3
 8002754:	f7ff f818 	bl	8001788 <HAL_InitTick>
 8002758:	4603      	mov	r3, r0
}
 800275a:	4618      	mov	r0, r3
 800275c:	3718      	adds	r7, #24
 800275e:	46bd      	mov	sp, r7
 8002760:	bd80      	pop	{r7, pc}
 8002762:	bf00      	nop
 8002764:	40022000 	.word	0x40022000
 8002768:	40021000 	.word	0x40021000
 800276c:	04c4b400 	.word	0x04c4b400
 8002770:	0800908c 	.word	0x0800908c
 8002774:	20000000 	.word	0x20000000
 8002778:	20000004 	.word	0x20000004

0800277c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800277c:	b480      	push	{r7}
 800277e:	b087      	sub	sp, #28
 8002780:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002782:	4b2c      	ldr	r3, [pc, #176]	; (8002834 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	f003 030c 	and.w	r3, r3, #12
 800278a:	2b04      	cmp	r3, #4
 800278c:	d102      	bne.n	8002794 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800278e:	4b2a      	ldr	r3, [pc, #168]	; (8002838 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002790:	613b      	str	r3, [r7, #16]
 8002792:	e047      	b.n	8002824 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002794:	4b27      	ldr	r3, [pc, #156]	; (8002834 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	f003 030c 	and.w	r3, r3, #12
 800279c:	2b08      	cmp	r3, #8
 800279e:	d102      	bne.n	80027a6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80027a0:	4b26      	ldr	r3, [pc, #152]	; (800283c <HAL_RCC_GetSysClockFreq+0xc0>)
 80027a2:	613b      	str	r3, [r7, #16]
 80027a4:	e03e      	b.n	8002824 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80027a6:	4b23      	ldr	r3, [pc, #140]	; (8002834 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027a8:	689b      	ldr	r3, [r3, #8]
 80027aa:	f003 030c 	and.w	r3, r3, #12
 80027ae:	2b0c      	cmp	r3, #12
 80027b0:	d136      	bne.n	8002820 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80027b2:	4b20      	ldr	r3, [pc, #128]	; (8002834 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027b4:	68db      	ldr	r3, [r3, #12]
 80027b6:	f003 0303 	and.w	r3, r3, #3
 80027ba:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027bc:	4b1d      	ldr	r3, [pc, #116]	; (8002834 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	091b      	lsrs	r3, r3, #4
 80027c2:	f003 030f 	and.w	r3, r3, #15
 80027c6:	3301      	adds	r3, #1
 80027c8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2b03      	cmp	r3, #3
 80027ce:	d10c      	bne.n	80027ea <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027d0:	4a1a      	ldr	r2, [pc, #104]	; (800283c <HAL_RCC_GetSysClockFreq+0xc0>)
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80027d8:	4a16      	ldr	r2, [pc, #88]	; (8002834 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027da:	68d2      	ldr	r2, [r2, #12]
 80027dc:	0a12      	lsrs	r2, r2, #8
 80027de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027e2:	fb02 f303 	mul.w	r3, r2, r3
 80027e6:	617b      	str	r3, [r7, #20]
      break;
 80027e8:	e00c      	b.n	8002804 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027ea:	4a13      	ldr	r2, [pc, #76]	; (8002838 <HAL_RCC_GetSysClockFreq+0xbc>)
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80027f2:	4a10      	ldr	r2, [pc, #64]	; (8002834 <HAL_RCC_GetSysClockFreq+0xb8>)
 80027f4:	68d2      	ldr	r2, [r2, #12]
 80027f6:	0a12      	lsrs	r2, r2, #8
 80027f8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80027fc:	fb02 f303 	mul.w	r3, r2, r3
 8002800:	617b      	str	r3, [r7, #20]
      break;
 8002802:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002804:	4b0b      	ldr	r3, [pc, #44]	; (8002834 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	0e5b      	lsrs	r3, r3, #25
 800280a:	f003 0303 	and.w	r3, r3, #3
 800280e:	3301      	adds	r3, #1
 8002810:	005b      	lsls	r3, r3, #1
 8002812:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002814:	697a      	ldr	r2, [r7, #20]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	fbb2 f3f3 	udiv	r3, r2, r3
 800281c:	613b      	str	r3, [r7, #16]
 800281e:	e001      	b.n	8002824 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002820:	2300      	movs	r3, #0
 8002822:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002824:	693b      	ldr	r3, [r7, #16]
}
 8002826:	4618      	mov	r0, r3
 8002828:	371c      	adds	r7, #28
 800282a:	46bd      	mov	sp, r7
 800282c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002830:	4770      	bx	lr
 8002832:	bf00      	nop
 8002834:	40021000 	.word	0x40021000
 8002838:	00f42400 	.word	0x00f42400
 800283c:	007a1200 	.word	0x007a1200

08002840 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002844:	4b03      	ldr	r3, [pc, #12]	; (8002854 <HAL_RCC_GetHCLKFreq+0x14>)
 8002846:	681b      	ldr	r3, [r3, #0]
}
 8002848:	4618      	mov	r0, r3
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr
 8002852:	bf00      	nop
 8002854:	20000000 	.word	0x20000000

08002858 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800285c:	f7ff fff0 	bl	8002840 <HAL_RCC_GetHCLKFreq>
 8002860:	4602      	mov	r2, r0
 8002862:	4b06      	ldr	r3, [pc, #24]	; (800287c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002864:	689b      	ldr	r3, [r3, #8]
 8002866:	0a1b      	lsrs	r3, r3, #8
 8002868:	f003 0307 	and.w	r3, r3, #7
 800286c:	4904      	ldr	r1, [pc, #16]	; (8002880 <HAL_RCC_GetPCLK1Freq+0x28>)
 800286e:	5ccb      	ldrb	r3, [r1, r3]
 8002870:	f003 031f 	and.w	r3, r3, #31
 8002874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002878:	4618      	mov	r0, r3
 800287a:	bd80      	pop	{r7, pc}
 800287c:	40021000 	.word	0x40021000
 8002880:	0800909c 	.word	0x0800909c

08002884 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002888:	f7ff ffda 	bl	8002840 <HAL_RCC_GetHCLKFreq>
 800288c:	4602      	mov	r2, r0
 800288e:	4b06      	ldr	r3, [pc, #24]	; (80028a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	0adb      	lsrs	r3, r3, #11
 8002894:	f003 0307 	and.w	r3, r3, #7
 8002898:	4904      	ldr	r1, [pc, #16]	; (80028ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800289a:	5ccb      	ldrb	r3, [r1, r3]
 800289c:	f003 031f 	and.w	r3, r3, #31
 80028a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028a4:	4618      	mov	r0, r3
 80028a6:	bd80      	pop	{r7, pc}
 80028a8:	40021000 	.word	0x40021000
 80028ac:	0800909c 	.word	0x0800909c

080028b0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b087      	sub	sp, #28
 80028b4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80028b6:	4b1e      	ldr	r3, [pc, #120]	; (8002930 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80028c0:	4b1b      	ldr	r3, [pc, #108]	; (8002930 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028c2:	68db      	ldr	r3, [r3, #12]
 80028c4:	091b      	lsrs	r3, r3, #4
 80028c6:	f003 030f 	and.w	r3, r3, #15
 80028ca:	3301      	adds	r3, #1
 80028cc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	2b03      	cmp	r3, #3
 80028d2:	d10c      	bne.n	80028ee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028d4:	4a17      	ldr	r2, [pc, #92]	; (8002934 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80028dc:	4a14      	ldr	r2, [pc, #80]	; (8002930 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028de:	68d2      	ldr	r2, [r2, #12]
 80028e0:	0a12      	lsrs	r2, r2, #8
 80028e2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80028e6:	fb02 f303 	mul.w	r3, r2, r3
 80028ea:	617b      	str	r3, [r7, #20]
    break;
 80028ec:	e00c      	b.n	8002908 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80028ee:	4a12      	ldr	r2, [pc, #72]	; (8002938 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028f6:	4a0e      	ldr	r2, [pc, #56]	; (8002930 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80028f8:	68d2      	ldr	r2, [r2, #12]
 80028fa:	0a12      	lsrs	r2, r2, #8
 80028fc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002900:	fb02 f303 	mul.w	r3, r2, r3
 8002904:	617b      	str	r3, [r7, #20]
    break;
 8002906:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002908:	4b09      	ldr	r3, [pc, #36]	; (8002930 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	0e5b      	lsrs	r3, r3, #25
 800290e:	f003 0303 	and.w	r3, r3, #3
 8002912:	3301      	adds	r3, #1
 8002914:	005b      	lsls	r3, r3, #1
 8002916:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002918:	697a      	ldr	r2, [r7, #20]
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002920:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002922:	687b      	ldr	r3, [r7, #4]
}
 8002924:	4618      	mov	r0, r3
 8002926:	371c      	adds	r7, #28
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	40021000 	.word	0x40021000
 8002934:	007a1200 	.word	0x007a1200
 8002938:	00f42400 	.word	0x00f42400

0800293c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b086      	sub	sp, #24
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002944:	2300      	movs	r3, #0
 8002946:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002948:	2300      	movs	r3, #0
 800294a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002954:	2b00      	cmp	r3, #0
 8002956:	f000 8098 	beq.w	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800295a:	2300      	movs	r3, #0
 800295c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800295e:	4b43      	ldr	r3, [pc, #268]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002960:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002962:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d10d      	bne.n	8002986 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800296a:	4b40      	ldr	r3, [pc, #256]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800296c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800296e:	4a3f      	ldr	r2, [pc, #252]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002974:	6593      	str	r3, [r2, #88]	; 0x58
 8002976:	4b3d      	ldr	r3, [pc, #244]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800297a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800297e:	60bb      	str	r3, [r7, #8]
 8002980:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002982:	2301      	movs	r3, #1
 8002984:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002986:	4b3a      	ldr	r3, [pc, #232]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a39      	ldr	r2, [pc, #228]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800298c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002990:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002992:	f7fe ff45 	bl	8001820 <HAL_GetTick>
 8002996:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002998:	e009      	b.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800299a:	f7fe ff41 	bl	8001820 <HAL_GetTick>
 800299e:	4602      	mov	r2, r0
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	1ad3      	subs	r3, r2, r3
 80029a4:	2b02      	cmp	r3, #2
 80029a6:	d902      	bls.n	80029ae <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80029a8:	2303      	movs	r3, #3
 80029aa:	74fb      	strb	r3, [r7, #19]
        break;
 80029ac:	e005      	b.n	80029ba <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80029ae:	4b30      	ldr	r3, [pc, #192]	; (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0ef      	beq.n	800299a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80029ba:	7cfb      	ldrb	r3, [r7, #19]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d159      	bne.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80029c0:	4b2a      	ldr	r3, [pc, #168]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80029ca:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d01e      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	697a      	ldr	r2, [r7, #20]
 80029d8:	429a      	cmp	r2, r3
 80029da:	d019      	beq.n	8002a10 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80029dc:	4b23      	ldr	r3, [pc, #140]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029e6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80029e8:	4b20      	ldr	r3, [pc, #128]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ee:	4a1f      	ldr	r2, [pc, #124]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80029f8:	4b1c      	ldr	r3, [pc, #112]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80029fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029fe:	4a1b      	ldr	r2, [pc, #108]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a08:	4a18      	ldr	r2, [pc, #96]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f003 0301 	and.w	r3, r3, #1
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d016      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1a:	f7fe ff01 	bl	8001820 <HAL_GetTick>
 8002a1e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a20:	e00b      	b.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a22:	f7fe fefd 	bl	8001820 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d902      	bls.n	8002a3a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	74fb      	strb	r3, [r7, #19]
            break;
 8002a38:	e006      	b.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a3a:	4b0c      	ldr	r3, [pc, #48]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a40:	f003 0302 	and.w	r3, r3, #2
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d0ec      	beq.n	8002a22 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002a48:	7cfb      	ldrb	r3, [r7, #19]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10b      	bne.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a4e:	4b07      	ldr	r3, [pc, #28]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a54:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5c:	4903      	ldr	r1, [pc, #12]	; (8002a6c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002a64:	e008      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a66:	7cfb      	ldrb	r3, [r7, #19]
 8002a68:	74bb      	strb	r3, [r7, #18]
 8002a6a:	e005      	b.n	8002a78 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a74:	7cfb      	ldrb	r3, [r7, #19]
 8002a76:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002a78:	7c7b      	ldrb	r3, [r7, #17]
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d105      	bne.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a7e:	4ba6      	ldr	r3, [pc, #664]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a82:	4aa5      	ldr	r2, [pc, #660]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a88:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f003 0301 	and.w	r3, r3, #1
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d00a      	beq.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a96:	4ba0      	ldr	r3, [pc, #640]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002a98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a9c:	f023 0203 	bic.w	r2, r3, #3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	499c      	ldr	r1, [pc, #624]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0302 	and.w	r3, r3, #2
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d00a      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ab8:	4b97      	ldr	r3, [pc, #604]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002abe:	f023 020c 	bic.w	r2, r3, #12
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	4994      	ldr	r1, [pc, #592]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0304 	and.w	r3, r3, #4
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d00a      	beq.n	8002af0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ada:	4b8f      	ldr	r3, [pc, #572]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002adc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ae0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	498b      	ldr	r1, [pc, #556]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 0308 	and.w	r3, r3, #8
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d00a      	beq.n	8002b12 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002afc:	4b86      	ldr	r3, [pc, #536]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b02:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	4983      	ldr	r1, [pc, #524]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0320 	and.w	r3, r3, #32
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d00a      	beq.n	8002b34 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b1e:	4b7e      	ldr	r3, [pc, #504]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b24:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	695b      	ldr	r3, [r3, #20]
 8002b2c:	497a      	ldr	r1, [pc, #488]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d00a      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b40:	4b75      	ldr	r3, [pc, #468]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	4972      	ldr	r1, [pc, #456]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b50:	4313      	orrs	r3, r2
 8002b52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d00a      	beq.n	8002b78 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b62:	4b6d      	ldr	r3, [pc, #436]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b64:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b68:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	69db      	ldr	r3, [r3, #28]
 8002b70:	4969      	ldr	r1, [pc, #420]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d00a      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b84:	4b64      	ldr	r3, [pc, #400]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b8a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	4961      	ldr	r1, [pc, #388]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002b94:	4313      	orrs	r3, r2
 8002b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d00a      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ba6:	4b5c      	ldr	r3, [pc, #368]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bac:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	4958      	ldr	r1, [pc, #352]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d015      	beq.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bc8:	4b53      	ldr	r3, [pc, #332]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002bce:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd6:	4950      	ldr	r1, [pc, #320]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002be6:	d105      	bne.n	8002bf4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002be8:	4b4b      	ldr	r3, [pc, #300]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bea:	68db      	ldr	r3, [r3, #12]
 8002bec:	4a4a      	ldr	r2, [pc, #296]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002bee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002bf2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d015      	beq.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002c00:	4b45      	ldr	r3, [pc, #276]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c06:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0e:	4942      	ldr	r1, [pc, #264]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c10:	4313      	orrs	r3, r2
 8002c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c1e:	d105      	bne.n	8002c2c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c20:	4b3d      	ldr	r3, [pc, #244]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	4a3c      	ldr	r2, [pc, #240]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c2a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d015      	beq.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002c38:	4b37      	ldr	r3, [pc, #220]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c3e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c46:	4934      	ldr	r1, [pc, #208]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c56:	d105      	bne.n	8002c64 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c58:	4b2f      	ldr	r3, [pc, #188]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	4a2e      	ldr	r2, [pc, #184]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c5e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c62:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d015      	beq.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002c70:	4b29      	ldr	r3, [pc, #164]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c76:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c7e:	4926      	ldr	r1, [pc, #152]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002c8e:	d105      	bne.n	8002c9c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002c90:	4b21      	ldr	r3, [pc, #132]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	4a20      	ldr	r2, [pc, #128]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002c96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002c9a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d015      	beq.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ca8:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002caa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cae:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cb6:	4918      	ldr	r1, [pc, #96]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cc2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002cc6:	d105      	bne.n	8002cd4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002cc8:	4b13      	ldr	r3, [pc, #76]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	4a12      	ldr	r2, [pc, #72]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cce:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002cd2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d015      	beq.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002ce0:	4b0d      	ldr	r3, [pc, #52]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ce6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cee:	490a      	ldr	r1, [pc, #40]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cfe:	d105      	bne.n	8002d0c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002d00:	4b05      	ldr	r3, [pc, #20]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	4a04      	ldr	r2, [pc, #16]	; (8002d18 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8002d06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d0a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002d0c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3718      	adds	r7, #24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40021000 	.word	0x40021000

08002d1c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d101      	bne.n	8002d2e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e09d      	b.n	8002e6a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d108      	bne.n	8002d48 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	685b      	ldr	r3, [r3, #4]
 8002d3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d3e:	d009      	beq.n	8002d54 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2200      	movs	r2, #0
 8002d44:	61da      	str	r2, [r3, #28]
 8002d46:	e005      	b.n	8002d54 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	2200      	movs	r2, #0
 8002d52:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002d60:	b2db      	uxtb	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d106      	bne.n	8002d74 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7fe fb2c 	bl	80013cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2202      	movs	r2, #2
 8002d78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d8a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	68db      	ldr	r3, [r3, #12]
 8002d90:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002d94:	d902      	bls.n	8002d9c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002d96:	2300      	movs	r3, #0
 8002d98:	60fb      	str	r3, [r7, #12]
 8002d9a:	e002      	b.n	8002da2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002d9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002da0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68db      	ldr	r3, [r3, #12]
 8002da6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002daa:	d007      	beq.n	8002dbc <HAL_SPI_Init+0xa0>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002db4:	d002      	beq.n	8002dbc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2200      	movs	r2, #0
 8002dba:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	685b      	ldr	r3, [r3, #4]
 8002dc0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	689b      	ldr	r3, [r3, #8]
 8002dc8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	f003 0302 	and.w	r3, r3, #2
 8002dd6:	431a      	orrs	r2, r3
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	695b      	ldr	r3, [r3, #20]
 8002ddc:	f003 0301 	and.w	r3, r3, #1
 8002de0:	431a      	orrs	r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	699b      	ldr	r3, [r3, #24]
 8002de6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dea:	431a      	orrs	r2, r3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	69db      	ldr	r3, [r3, #28]
 8002df0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002df4:	431a      	orrs	r2, r3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a1b      	ldr	r3, [r3, #32]
 8002dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dfe:	ea42 0103 	orr.w	r1, r2, r3
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e06:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	0c1b      	lsrs	r3, r3, #16
 8002e18:	f003 0204 	and.w	r2, r3, #4
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e20:	f003 0310 	and.w	r3, r3, #16
 8002e24:	431a      	orrs	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e2a:	f003 0308 	and.w	r3, r3, #8
 8002e2e:	431a      	orrs	r2, r3
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002e38:	ea42 0103 	orr.w	r1, r2, r3
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	69da      	ldr	r2, [r3, #28]
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e58:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3710      	adds	r7, #16
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}

08002e72 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b088      	sub	sp, #32
 8002e76:	af02      	add	r7, sp, #8
 8002e78:	60f8      	str	r0, [r7, #12]
 8002e7a:	60b9      	str	r1, [r7, #8]
 8002e7c:	603b      	str	r3, [r7, #0]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e82:	2300      	movs	r3, #0
 8002e84:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	2b01      	cmp	r3, #1
 8002e90:	d002      	beq.n	8002e98 <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002e92:	2302      	movs	r3, #2
 8002e94:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002e96:	e11a      	b.n	80030ce <HAL_SPI_Receive+0x25c>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ea0:	d112      	bne.n	8002ec8 <HAL_SPI_Receive+0x56>
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10e      	bne.n	8002ec8 <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2204      	movs	r2, #4
 8002eae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002eb2:	88fa      	ldrh	r2, [r7, #6]
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	9300      	str	r3, [sp, #0]
 8002eb8:	4613      	mov	r3, r2
 8002eba:	68ba      	ldr	r2, [r7, #8]
 8002ebc:	68b9      	ldr	r1, [r7, #8]
 8002ebe:	68f8      	ldr	r0, [r7, #12]
 8002ec0:	f000 f90e 	bl	80030e0 <HAL_SPI_TransmitReceive>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	e107      	b.n	80030d8 <HAL_SPI_Receive+0x266>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d101      	bne.n	8002ed6 <HAL_SPI_Receive+0x64>
 8002ed2:	2302      	movs	r3, #2
 8002ed4:	e100      	b.n	80030d8 <HAL_SPI_Receive+0x266>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ede:	f7fe fc9f 	bl	8001820 <HAL_GetTick>
 8002ee2:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002ee4:	68bb      	ldr	r3, [r7, #8]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d002      	beq.n	8002ef0 <HAL_SPI_Receive+0x7e>
 8002eea:	88fb      	ldrh	r3, [r7, #6]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d102      	bne.n	8002ef6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002ef4:	e0eb      	b.n	80030ce <HAL_SPI_Receive+0x25c>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2204      	movs	r2, #4
 8002efa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	2200      	movs	r2, #0
 8002f02:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	88fa      	ldrh	r2, [r7, #6]
 8002f0e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	88fa      	ldrh	r2, [r7, #6]
 8002f16:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2200      	movs	r2, #0
 8002f24:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2200      	movs	r2, #0
 8002f2a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002f40:	d908      	bls.n	8002f54 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	685a      	ldr	r2, [r3, #4]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002f50:	605a      	str	r2, [r3, #4]
 8002f52:	e007      	b.n	8002f64 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	685a      	ldr	r2, [r3, #4]
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8002f62:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f6c:	d10f      	bne.n	8002f8e <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	681a      	ldr	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f7c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002f8c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f98:	2b40      	cmp	r3, #64	; 0x40
 8002f9a:	d007      	beq.n	8002fac <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	681a      	ldr	r2, [r3, #0]
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002faa:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002fb4:	d86f      	bhi.n	8003096 <HAL_SPI_Receive+0x224>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002fb6:	e034      	b.n	8003022 <HAL_SPI_Receive+0x1b0>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	689b      	ldr	r3, [r3, #8]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d117      	bne.n	8002ff6 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f103 020c 	add.w	r2, r3, #12
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	7812      	ldrb	r2, [r2, #0]
 8002fd4:	b2d2      	uxtb	r2, r2
 8002fd6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fdc:	1c5a      	adds	r2, r3, #1
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	3b01      	subs	r3, #1
 8002fec:	b29a      	uxth	r2, r3
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8002ff4:	e015      	b.n	8003022 <HAL_SPI_Receive+0x1b0>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ff6:	f7fe fc13 	bl	8001820 <HAL_GetTick>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	1ad3      	subs	r3, r2, r3
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	429a      	cmp	r2, r3
 8003004:	d803      	bhi.n	800300e <HAL_SPI_Receive+0x19c>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800300c:	d102      	bne.n	8003014 <HAL_SPI_Receive+0x1a2>
 800300e:	683b      	ldr	r3, [r7, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d106      	bne.n	8003022 <HAL_SPI_Receive+0x1b0>
        {
          errorcode = HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2201      	movs	r2, #1
 800301c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003020:	e055      	b.n	80030ce <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003028:	b29b      	uxth	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1c4      	bne.n	8002fb8 <HAL_SPI_Receive+0x146>
 800302e:	e038      	b.n	80030a2 <HAL_SPI_Receive+0x230>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	689b      	ldr	r3, [r3, #8]
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b01      	cmp	r3, #1
 800303c:	d115      	bne.n	800306a <HAL_SPI_Receive+0x1f8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	68da      	ldr	r2, [r3, #12]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003048:	b292      	uxth	r2, r2
 800304a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003050:	1c9a      	adds	r2, r3, #2
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800305c:	b29b      	uxth	r3, r3
 800305e:	3b01      	subs	r3, #1
 8003060:	b29a      	uxth	r2, r3
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8003068:	e015      	b.n	8003096 <HAL_SPI_Receive+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800306a:	f7fe fbd9 	bl	8001820 <HAL_GetTick>
 800306e:	4602      	mov	r2, r0
 8003070:	693b      	ldr	r3, [r7, #16]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	683a      	ldr	r2, [r7, #0]
 8003076:	429a      	cmp	r2, r3
 8003078:	d803      	bhi.n	8003082 <HAL_SPI_Receive+0x210>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003080:	d102      	bne.n	8003088 <HAL_SPI_Receive+0x216>
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d106      	bne.n	8003096 <HAL_SPI_Receive+0x224>
        {
          errorcode = HAL_TIMEOUT;
 8003088:	2303      	movs	r3, #3
 800308a:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
          goto error;
 8003094:	e01b      	b.n	80030ce <HAL_SPI_Receive+0x25c>
    while (hspi->RxXferCount > 0U)
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800309c:	b29b      	uxth	r3, r3
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d1c6      	bne.n	8003030 <HAL_SPI_Receive+0x1be>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030a2:	693a      	ldr	r2, [r7, #16]
 80030a4:	6839      	ldr	r1, [r7, #0]
 80030a6:	68f8      	ldr	r0, [r7, #12]
 80030a8:	f000 fb5a 	bl	8003760 <SPI_EndRxTransaction>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d002      	beq.n	80030b8 <HAL_SPI_Receive+0x246>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	2220      	movs	r2, #32
 80030b6:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <HAL_SPI_Receive+0x254>
  {
    errorcode = HAL_ERROR;
 80030c0:	2301      	movs	r3, #1
 80030c2:	75fb      	strb	r3, [r7, #23]
 80030c4:	e003      	b.n	80030ce <HAL_SPI_Receive+0x25c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	2201      	movs	r2, #1
 80030ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

error :
  __HAL_UNLOCK(hspi);
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80030d6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3718      	adds	r7, #24
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b08a      	sub	sp, #40	; 0x28
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	60f8      	str	r0, [r7, #12]
 80030e8:	60b9      	str	r1, [r7, #8]
 80030ea:	607a      	str	r2, [r7, #4]
 80030ec:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80030ee:	2301      	movs	r3, #1
 80030f0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d101      	bne.n	8003106 <HAL_SPI_TransmitReceive+0x26>
 8003102:	2302      	movs	r3, #2
 8003104:	e20a      	b.n	800351c <HAL_SPI_TransmitReceive+0x43c>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	2201      	movs	r2, #1
 800310a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800310e:	f7fe fb87 	bl	8001820 <HAL_GetTick>
 8003112:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800311a:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	685b      	ldr	r3, [r3, #4]
 8003120:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8003122:	887b      	ldrh	r3, [r7, #2]
 8003124:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8003126:	887b      	ldrh	r3, [r7, #2]
 8003128:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800312a:	7efb      	ldrb	r3, [r7, #27]
 800312c:	2b01      	cmp	r3, #1
 800312e:	d00e      	beq.n	800314e <HAL_SPI_TransmitReceive+0x6e>
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003136:	d106      	bne.n	8003146 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	2b00      	cmp	r3, #0
 800313e:	d102      	bne.n	8003146 <HAL_SPI_TransmitReceive+0x66>
 8003140:	7efb      	ldrb	r3, [r7, #27]
 8003142:	2b04      	cmp	r3, #4
 8003144:	d003      	beq.n	800314e <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8003146:	2302      	movs	r3, #2
 8003148:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800314c:	e1e0      	b.n	8003510 <HAL_SPI_TransmitReceive+0x430>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800314e:	68bb      	ldr	r3, [r7, #8]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d005      	beq.n	8003160 <HAL_SPI_TransmitReceive+0x80>
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d002      	beq.n	8003160 <HAL_SPI_TransmitReceive+0x80>
 800315a:	887b      	ldrh	r3, [r7, #2]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d103      	bne.n	8003168 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 8003160:	2301      	movs	r3, #1
 8003162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8003166:	e1d3      	b.n	8003510 <HAL_SPI_TransmitReceive+0x430>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800316e:	b2db      	uxtb	r3, r3
 8003170:	2b04      	cmp	r3, #4
 8003172:	d003      	beq.n	800317c <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2205      	movs	r2, #5
 8003178:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	887a      	ldrh	r2, [r7, #2]
 800318c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	887a      	ldrh	r2, [r7, #2]
 8003194:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	68ba      	ldr	r2, [r7, #8]
 800319c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	887a      	ldrh	r2, [r7, #2]
 80031a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	887a      	ldrh	r2, [r7, #2]
 80031a8:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2200      	movs	r2, #0
 80031ae:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2200      	movs	r2, #0
 80031b4:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80031be:	d802      	bhi.n	80031c6 <HAL_SPI_TransmitReceive+0xe6>
 80031c0:	8a3b      	ldrh	r3, [r7, #16]
 80031c2:	2b01      	cmp	r3, #1
 80031c4:	d908      	bls.n	80031d8 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	685a      	ldr	r2, [r3, #4]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80031d4:	605a      	str	r2, [r3, #4]
 80031d6:	e007      	b.n	80031e8 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685a      	ldr	r2, [r3, #4]
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031e6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031f2:	2b40      	cmp	r3, #64	; 0x40
 80031f4:	d007      	beq.n	8003206 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003204:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800320e:	f240 8081 	bls.w	8003314 <HAL_SPI_TransmitReceive+0x234>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	685b      	ldr	r3, [r3, #4]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d002      	beq.n	8003220 <HAL_SPI_TransmitReceive+0x140>
 800321a:	8a7b      	ldrh	r3, [r7, #18]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d16d      	bne.n	80032fc <HAL_SPI_TransmitReceive+0x21c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003224:	881a      	ldrh	r2, [r3, #0]
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003230:	1c9a      	adds	r2, r3, #2
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800323a:	b29b      	uxth	r3, r3
 800323c:	3b01      	subs	r3, #1
 800323e:	b29a      	uxth	r2, r3
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	87da      	strh	r2, [r3, #62]	; 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003244:	e05a      	b.n	80032fc <HAL_SPI_TransmitReceive+0x21c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 0302 	and.w	r3, r3, #2
 8003250:	2b02      	cmp	r3, #2
 8003252:	d11b      	bne.n	800328c <HAL_SPI_TransmitReceive+0x1ac>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003258:	b29b      	uxth	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d016      	beq.n	800328c <HAL_SPI_TransmitReceive+0x1ac>
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	2b01      	cmp	r3, #1
 8003262:	d113      	bne.n	800328c <HAL_SPI_TransmitReceive+0x1ac>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003268:	881a      	ldrh	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003274:	1c9a      	adds	r2, r3, #2
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800327e:	b29b      	uxth	r3, r3
 8003280:	3b01      	subs	r3, #1
 8003282:	b29a      	uxth	r2, r3
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003288:	2300      	movs	r3, #0
 800328a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	f003 0301 	and.w	r3, r3, #1
 8003296:	2b01      	cmp	r3, #1
 8003298:	d11c      	bne.n	80032d4 <HAL_SPI_TransmitReceive+0x1f4>
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032a0:	b29b      	uxth	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d016      	beq.n	80032d4 <HAL_SPI_TransmitReceive+0x1f4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68da      	ldr	r2, [r3, #12]
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b0:	b292      	uxth	r2, r2
 80032b2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b8:	1c9a      	adds	r2, r3, #2
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	3b01      	subs	r3, #1
 80032c8:	b29a      	uxth	r2, r3
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80032d0:	2301      	movs	r3, #1
 80032d2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80032d4:	f7fe faa4 	bl	8001820 <HAL_GetTick>
 80032d8:	4602      	mov	r2, r0
 80032da:	69fb      	ldr	r3, [r7, #28]
 80032dc:	1ad3      	subs	r3, r2, r3
 80032de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d80b      	bhi.n	80032fc <HAL_SPI_TransmitReceive+0x21c>
 80032e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032ea:	d007      	beq.n	80032fc <HAL_SPI_TransmitReceive+0x21c>
      {
        errorcode = HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	2201      	movs	r2, #1
 80032f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80032fa:	e109      	b.n	8003510 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003300:	b29b      	uxth	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d19f      	bne.n	8003246 <HAL_SPI_TransmitReceive+0x166>
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800330c:	b29b      	uxth	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d199      	bne.n	8003246 <HAL_SPI_TransmitReceive+0x166>
 8003312:	e0e3      	b.n	80034dc <HAL_SPI_TransmitReceive+0x3fc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d003      	beq.n	8003324 <HAL_SPI_TransmitReceive+0x244>
 800331c:	8a7b      	ldrh	r3, [r7, #18]
 800331e:	2b01      	cmp	r3, #1
 8003320:	f040 80cf 	bne.w	80034c2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      if (hspi->TxXferCount > 1U)
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003328:	b29b      	uxth	r3, r3
 800332a:	2b01      	cmp	r3, #1
 800332c:	d912      	bls.n	8003354 <HAL_SPI_TransmitReceive+0x274>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003332:	881a      	ldrh	r2, [r3, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800333e:	1c9a      	adds	r2, r3, #2
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003348:	b29b      	uxth	r3, r3
 800334a:	3b02      	subs	r3, #2
 800334c:	b29a      	uxth	r2, r3
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003352:	e0b6      	b.n	80034c2 <HAL_SPI_TransmitReceive+0x3e2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	330c      	adds	r3, #12
 800335e:	7812      	ldrb	r2, [r2, #0]
 8003360:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003366:	1c5a      	adds	r2, r3, #1
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003370:	b29b      	uxth	r3, r3
 8003372:	3b01      	subs	r3, #1
 8003374:	b29a      	uxth	r2, r3
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	87da      	strh	r2, [r3, #62]	; 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800337a:	e0a2      	b.n	80034c2 <HAL_SPI_TransmitReceive+0x3e2>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	689b      	ldr	r3, [r3, #8]
 8003382:	f003 0302 	and.w	r3, r3, #2
 8003386:	2b02      	cmp	r3, #2
 8003388:	d134      	bne.n	80033f4 <HAL_SPI_TransmitReceive+0x314>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800338e:	b29b      	uxth	r3, r3
 8003390:	2b00      	cmp	r3, #0
 8003392:	d02f      	beq.n	80033f4 <HAL_SPI_TransmitReceive+0x314>
 8003394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003396:	2b01      	cmp	r3, #1
 8003398:	d12c      	bne.n	80033f4 <HAL_SPI_TransmitReceive+0x314>
      {
        if (hspi->TxXferCount > 1U)
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d912      	bls.n	80033ca <HAL_SPI_TransmitReceive+0x2ea>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033a8:	881a      	ldrh	r2, [r3, #0]
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033b4:	1c9a      	adds	r2, r3, #2
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033be:	b29b      	uxth	r3, r3
 80033c0:	3b02      	subs	r3, #2
 80033c2:	b29a      	uxth	r2, r3
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80033c8:	e012      	b.n	80033f0 <HAL_SPI_TransmitReceive+0x310>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	330c      	adds	r3, #12
 80033d4:	7812      	ldrb	r2, [r2, #0]
 80033d6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80033dc:	1c5a      	adds	r2, r3, #1
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	3b01      	subs	r3, #1
 80033ea:	b29a      	uxth	r2, r3
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033f0:	2300      	movs	r3, #0
 80033f2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	f003 0301 	and.w	r3, r3, #1
 80033fe:	2b01      	cmp	r3, #1
 8003400:	d148      	bne.n	8003494 <HAL_SPI_TransmitReceive+0x3b4>
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003408:	b29b      	uxth	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d042      	beq.n	8003494 <HAL_SPI_TransmitReceive+0x3b4>
      {
        if (hspi->RxXferCount > 1U)
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003414:	b29b      	uxth	r3, r3
 8003416:	2b01      	cmp	r3, #1
 8003418:	d923      	bls.n	8003462 <HAL_SPI_TransmitReceive+0x382>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	68da      	ldr	r2, [r3, #12]
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003424:	b292      	uxth	r2, r2
 8003426:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	1c9a      	adds	r2, r3, #2
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003438:	b29b      	uxth	r3, r3
 800343a:	3b02      	subs	r3, #2
 800343c:	b29a      	uxth	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800344a:	b29b      	uxth	r3, r3
 800344c:	2b01      	cmp	r3, #1
 800344e:	d81f      	bhi.n	8003490 <HAL_SPI_TransmitReceive+0x3b0>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	685a      	ldr	r2, [r3, #4]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800345e:	605a      	str	r2, [r3, #4]
 8003460:	e016      	b.n	8003490 <HAL_SPI_TransmitReceive+0x3b0>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f103 020c 	add.w	r2, r3, #12
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800346e:	7812      	ldrb	r2, [r2, #0]
 8003470:	b2d2      	uxtb	r2, r2
 8003472:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003478:	1c5a      	adds	r2, r3, #1
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8003484:	b29b      	uxth	r3, r3
 8003486:	3b01      	subs	r3, #1
 8003488:	b29a      	uxth	r2, r3
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003490:	2301      	movs	r3, #1
 8003492:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003494:	f7fe f9c4 	bl	8001820 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034a0:	429a      	cmp	r2, r3
 80034a2:	d803      	bhi.n	80034ac <HAL_SPI_TransmitReceive+0x3cc>
 80034a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034aa:	d102      	bne.n	80034b2 <HAL_SPI_TransmitReceive+0x3d2>
 80034ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d107      	bne.n	80034c2 <HAL_SPI_TransmitReceive+0x3e2>
      {
        errorcode = HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        hspi->State = HAL_SPI_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        goto error;
 80034c0:	e026      	b.n	8003510 <HAL_SPI_TransmitReceive+0x430>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	f47f af57 	bne.w	800337c <HAL_SPI_TransmitReceive+0x29c>
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80034d4:	b29b      	uxth	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	f47f af50 	bne.w	800337c <HAL_SPI_TransmitReceive+0x29c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80034dc:	69fa      	ldr	r2, [r7, #28]
 80034de:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034e0:	68f8      	ldr	r0, [r7, #12]
 80034e2:	f000 f995 	bl	8003810 <SPI_EndRxTxTransaction>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d005      	beq.n	80034f8 <HAL_SPI_TransmitReceive+0x418>
  {
    errorcode = HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2220      	movs	r2, #32
 80034f6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d003      	beq.n	8003508 <HAL_SPI_TransmitReceive+0x428>
  {
    errorcode = HAL_ERROR;
 8003500:	2301      	movs	r3, #1
 8003502:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003506:	e003      	b.n	8003510 <HAL_SPI_TransmitReceive+0x430>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2201      	movs	r2, #1
 800350c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }
  
error :
  __HAL_UNLOCK(hspi);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8003518:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 800351c:	4618      	mov	r0, r3
 800351e:	3728      	adds	r7, #40	; 0x28
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}

08003524 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b088      	sub	sp, #32
 8003528:	af00      	add	r7, sp, #0
 800352a:	60f8      	str	r0, [r7, #12]
 800352c:	60b9      	str	r1, [r7, #8]
 800352e:	603b      	str	r3, [r7, #0]
 8003530:	4613      	mov	r3, r2
 8003532:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003534:	f7fe f974 	bl	8001820 <HAL_GetTick>
 8003538:	4602      	mov	r2, r0
 800353a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800353c:	1a9b      	subs	r3, r3, r2
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	4413      	add	r3, r2
 8003542:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003544:	f7fe f96c 	bl	8001820 <HAL_GetTick>
 8003548:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800354a:	4b39      	ldr	r3, [pc, #228]	; (8003630 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	015b      	lsls	r3, r3, #5
 8003550:	0d1b      	lsrs	r3, r3, #20
 8003552:	69fa      	ldr	r2, [r7, #28]
 8003554:	fb02 f303 	mul.w	r3, r2, r3
 8003558:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800355a:	e054      	b.n	8003606 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003562:	d050      	beq.n	8003606 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003564:	f7fe f95c 	bl	8001820 <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	69fa      	ldr	r2, [r7, #28]
 8003570:	429a      	cmp	r2, r3
 8003572:	d902      	bls.n	800357a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d13d      	bne.n	80035f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	685a      	ldr	r2, [r3, #4]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003588:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003592:	d111      	bne.n	80035b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800359c:	d004      	beq.n	80035a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035a6:	d107      	bne.n	80035b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80035c0:	d10f      	bne.n	80035e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681a      	ldr	r2, [r3, #0]
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035d0:	601a      	str	r2, [r3, #0]
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2200      	movs	r2, #0
 80035ee:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e017      	b.n	8003626 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d101      	bne.n	8003600 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80035fc:	2300      	movs	r3, #0
 80035fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	3b01      	subs	r3, #1
 8003604:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	689a      	ldr	r2, [r3, #8]
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	4013      	ands	r3, r2
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	429a      	cmp	r2, r3
 8003614:	bf0c      	ite	eq
 8003616:	2301      	moveq	r3, #1
 8003618:	2300      	movne	r3, #0
 800361a:	b2db      	uxtb	r3, r3
 800361c:	461a      	mov	r2, r3
 800361e:	79fb      	ldrb	r3, [r7, #7]
 8003620:	429a      	cmp	r2, r3
 8003622:	d19b      	bne.n	800355c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003624:	2300      	movs	r3, #0
}
 8003626:	4618      	mov	r0, r3
 8003628:	3720      	adds	r7, #32
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}
 800362e:	bf00      	nop
 8003630:	20000000 	.word	0x20000000

08003634 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b08a      	sub	sp, #40	; 0x28
 8003638:	af00      	add	r7, sp, #0
 800363a:	60f8      	str	r0, [r7, #12]
 800363c:	60b9      	str	r1, [r7, #8]
 800363e:	607a      	str	r2, [r7, #4]
 8003640:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003642:	2300      	movs	r3, #0
 8003644:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003646:	f7fe f8eb 	bl	8001820 <HAL_GetTick>
 800364a:	4602      	mov	r2, r0
 800364c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800364e:	1a9b      	subs	r3, r3, r2
 8003650:	683a      	ldr	r2, [r7, #0]
 8003652:	4413      	add	r3, r2
 8003654:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003656:	f7fe f8e3 	bl	8001820 <HAL_GetTick>
 800365a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	330c      	adds	r3, #12
 8003662:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003664:	4b3d      	ldr	r3, [pc, #244]	; (800375c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	4613      	mov	r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	4413      	add	r3, r2
 800366e:	00da      	lsls	r2, r3, #3
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	0d1b      	lsrs	r3, r3, #20
 8003674:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003676:	fb02 f303 	mul.w	r3, r2, r3
 800367a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800367c:	e060      	b.n	8003740 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003684:	d107      	bne.n	8003696 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d104      	bne.n	8003696 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	b2db      	uxtb	r3, r3
 8003692:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003694:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800369c:	d050      	beq.n	8003740 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800369e:	f7fe f8bf 	bl	8001820 <HAL_GetTick>
 80036a2:	4602      	mov	r2, r0
 80036a4:	6a3b      	ldr	r3, [r7, #32]
 80036a6:	1ad3      	subs	r3, r2, r3
 80036a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d902      	bls.n	80036b4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80036ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d13d      	bne.n	8003730 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80036c2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036cc:	d111      	bne.n	80036f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80036d6:	d004      	beq.n	80036e2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036e0:	d107      	bne.n	80036f2 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036f0:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036fa:	d10f      	bne.n	800371c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800370a:	601a      	str	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800371a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	2201      	movs	r2, #1
 8003720:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	2200      	movs	r2, #0
 8003728:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e010      	b.n	8003752 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003730:	69bb      	ldr	r3, [r7, #24]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d101      	bne.n	800373a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003736:	2300      	movs	r3, #0
 8003738:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	3b01      	subs	r3, #1
 800373e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	4013      	ands	r3, r2
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	429a      	cmp	r2, r3
 800374e:	d196      	bne.n	800367e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3728      	adds	r7, #40	; 0x28
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}
 800375a:	bf00      	nop
 800375c:	20000000 	.word	0x20000000

08003760 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b086      	sub	sp, #24
 8003764:	af02      	add	r7, sp, #8
 8003766:	60f8      	str	r0, [r7, #12]
 8003768:	60b9      	str	r1, [r7, #8]
 800376a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003774:	d111      	bne.n	800379a <SPI_EndRxTransaction+0x3a>
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	689b      	ldr	r3, [r3, #8]
 800377a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800377e:	d004      	beq.n	800378a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003788:	d107      	bne.n	800379a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	681a      	ldr	r2, [r3, #0]
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003798:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	9300      	str	r3, [sp, #0]
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	2200      	movs	r2, #0
 80037a2:	2180      	movs	r1, #128	; 0x80
 80037a4:	68f8      	ldr	r0, [r7, #12]
 80037a6:	f7ff febd 	bl	8003524 <SPI_WaitFlagStateUntilTimeout>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d007      	beq.n	80037c0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037b4:	f043 0220 	orr.w	r2, r3, #32
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80037bc:	2303      	movs	r3, #3
 80037be:	e023      	b.n	8003808 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	685b      	ldr	r3, [r3, #4]
 80037c4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80037c8:	d11d      	bne.n	8003806 <SPI_EndRxTransaction+0xa6>
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037d2:	d004      	beq.n	80037de <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80037dc:	d113      	bne.n	8003806 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f7ff ff22 	bl	8003634 <SPI_WaitFifoStateUntilTimeout>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d007      	beq.n	8003806 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037fa:	f043 0220 	orr.w	r2, r3, #32
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8003802:	2303      	movs	r3, #3
 8003804:	e000      	b.n	8003808 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8003806:	2300      	movs	r3, #0
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b086      	sub	sp, #24
 8003814:	af02      	add	r7, sp, #8
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	9300      	str	r3, [sp, #0]
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	2200      	movs	r2, #0
 8003824:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8003828:	68f8      	ldr	r0, [r7, #12]
 800382a:	f7ff ff03 	bl	8003634 <SPI_WaitFifoStateUntilTimeout>
 800382e:	4603      	mov	r3, r0
 8003830:	2b00      	cmp	r3, #0
 8003832:	d007      	beq.n	8003844 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003838:	f043 0220 	orr.w	r2, r3, #32
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003840:	2303      	movs	r3, #3
 8003842:	e027      	b.n	8003894 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	9300      	str	r3, [sp, #0]
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	2200      	movs	r2, #0
 800384c:	2180      	movs	r1, #128	; 0x80
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f7ff fe68 	bl	8003524 <SPI_WaitFlagStateUntilTimeout>
 8003854:	4603      	mov	r3, r0
 8003856:	2b00      	cmp	r3, #0
 8003858:	d007      	beq.n	800386a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800385e:	f043 0220 	orr.w	r2, r3, #32
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003866:	2303      	movs	r3, #3
 8003868:	e014      	b.n	8003894 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	9300      	str	r3, [sp, #0]
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2200      	movs	r2, #0
 8003872:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8003876:	68f8      	ldr	r0, [r7, #12]
 8003878:	f7ff fedc 	bl	8003634 <SPI_WaitFifoStateUntilTimeout>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d007      	beq.n	8003892 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003886:	f043 0220 	orr.w	r2, r3, #32
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800388e:	2303      	movs	r3, #3
 8003890:	e000      	b.n	8003894 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003892:	2300      	movs	r3, #0
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b082      	sub	sp, #8
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e042      	b.n	8003934 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d106      	bne.n	80038c6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f7fd fdc5 	bl	8001450 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2224      	movs	r2, #36	; 0x24
 80038ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	681a      	ldr	r2, [r3, #0]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0201 	bic.w	r2, r2, #1
 80038dc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f000 fb82 	bl	8003ff0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80038ec:	6878      	ldr	r0, [r7, #4]
 80038ee:	f000 f8b3 	bl	8003a58 <UART_SetConfig>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b01      	cmp	r3, #1
 80038f6:	d101      	bne.n	80038fc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e01b      	b.n	8003934 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	685a      	ldr	r2, [r3, #4]
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800390a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	689a      	ldr	r2, [r3, #8]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800391a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	681a      	ldr	r2, [r3, #0]
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f042 0201 	orr.w	r2, r2, #1
 800392a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f000 fc01 	bl	8004134 <UART_CheckIdleState>
 8003932:	4603      	mov	r3, r0
}
 8003934:	4618      	mov	r0, r3
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b08a      	sub	sp, #40	; 0x28
 8003940:	af02      	add	r7, sp, #8
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	60b9      	str	r1, [r7, #8]
 8003946:	603b      	str	r3, [r7, #0]
 8003948:	4613      	mov	r3, r2
 800394a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003952:	2b20      	cmp	r3, #32
 8003954:	d17b      	bne.n	8003a4e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003956:	68bb      	ldr	r3, [r7, #8]
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <HAL_UART_Transmit+0x26>
 800395c:	88fb      	ldrh	r3, [r7, #6]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d101      	bne.n	8003966 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e074      	b.n	8003a50 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2221      	movs	r2, #33	; 0x21
 8003972:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003976:	f7fd ff53 	bl	8001820 <HAL_GetTick>
 800397a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	88fa      	ldrh	r2, [r7, #6]
 8003980:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	88fa      	ldrh	r2, [r7, #6]
 8003988:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003994:	d108      	bne.n	80039a8 <HAL_UART_Transmit+0x6c>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	691b      	ldr	r3, [r3, #16]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d104      	bne.n	80039a8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800399e:	2300      	movs	r3, #0
 80039a0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	61bb      	str	r3, [r7, #24]
 80039a6:	e003      	b.n	80039b0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80039a8:	68bb      	ldr	r3, [r7, #8]
 80039aa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80039ac:	2300      	movs	r3, #0
 80039ae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80039b0:	e030      	b.n	8003a14 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	9300      	str	r3, [sp, #0]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	2200      	movs	r2, #0
 80039ba:	2180      	movs	r1, #128	; 0x80
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f000 fc63 	bl	8004288 <UART_WaitOnFlagUntilTimeout>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d005      	beq.n	80039d4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80039d0:	2303      	movs	r3, #3
 80039d2:	e03d      	b.n	8003a50 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d10b      	bne.n	80039f2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80039da:	69bb      	ldr	r3, [r7, #24]
 80039dc:	881b      	ldrh	r3, [r3, #0]
 80039de:	461a      	mov	r2, r3
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039e8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80039ea:	69bb      	ldr	r3, [r7, #24]
 80039ec:	3302      	adds	r3, #2
 80039ee:	61bb      	str	r3, [r7, #24]
 80039f0:	e007      	b.n	8003a02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	781a      	ldrb	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	3301      	adds	r3, #1
 8003a00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003a08:	b29b      	uxth	r3, r3
 8003a0a:	3b01      	subs	r3, #1
 8003a0c:	b29a      	uxth	r2, r3
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	2b00      	cmp	r3, #0
 8003a1e:	d1c8      	bne.n	80039b2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	9300      	str	r3, [sp, #0]
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	2200      	movs	r2, #0
 8003a28:	2140      	movs	r1, #64	; 0x40
 8003a2a:	68f8      	ldr	r0, [r7, #12]
 8003a2c:	f000 fc2c 	bl	8004288 <UART_WaitOnFlagUntilTimeout>
 8003a30:	4603      	mov	r3, r0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d005      	beq.n	8003a42 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2220      	movs	r2, #32
 8003a3a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e006      	b.n	8003a50 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2220      	movs	r2, #32
 8003a46:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	e000      	b.n	8003a50 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003a4e:	2302      	movs	r3, #2
  }
}
 8003a50:	4618      	mov	r0, r3
 8003a52:	3720      	adds	r7, #32
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}

08003a58 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a5c:	b08c      	sub	sp, #48	; 0x30
 8003a5e:	af00      	add	r7, sp, #0
 8003a60:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a62:	2300      	movs	r3, #0
 8003a64:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a68:	697b      	ldr	r3, [r7, #20]
 8003a6a:	689a      	ldr	r2, [r3, #8]
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	691b      	ldr	r3, [r3, #16]
 8003a70:	431a      	orrs	r2, r3
 8003a72:	697b      	ldr	r3, [r7, #20]
 8003a74:	695b      	ldr	r3, [r3, #20]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	697b      	ldr	r3, [r7, #20]
 8003a7a:	69db      	ldr	r3, [r3, #28]
 8003a7c:	4313      	orrs	r3, r2
 8003a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	4bab      	ldr	r3, [pc, #684]	; (8003d34 <UART_SetConfig+0x2dc>)
 8003a88:	4013      	ands	r3, r2
 8003a8a:	697a      	ldr	r2, [r7, #20]
 8003a8c:	6812      	ldr	r2, [r2, #0]
 8003a8e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a90:	430b      	orrs	r3, r1
 8003a92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	68da      	ldr	r2, [r3, #12]
 8003aa2:	697b      	ldr	r3, [r7, #20]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ab0:	697b      	ldr	r3, [r7, #20]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4aa0      	ldr	r2, [pc, #640]	; (8003d38 <UART_SetConfig+0x2e0>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d004      	beq.n	8003ac4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	6a1b      	ldr	r3, [r3, #32]
 8003abe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003ace:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	6812      	ldr	r2, [r2, #0]
 8003ad6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ad8:	430b      	orrs	r3, r1
 8003ada:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae2:	f023 010f 	bic.w	r1, r3, #15
 8003ae6:	697b      	ldr	r3, [r7, #20]
 8003ae8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	430a      	orrs	r2, r1
 8003af0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a91      	ldr	r2, [pc, #580]	; (8003d3c <UART_SetConfig+0x2e4>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d125      	bne.n	8003b48 <UART_SetConfig+0xf0>
 8003afc:	4b90      	ldr	r3, [pc, #576]	; (8003d40 <UART_SetConfig+0x2e8>)
 8003afe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b02:	f003 0303 	and.w	r3, r3, #3
 8003b06:	2b03      	cmp	r3, #3
 8003b08:	d81a      	bhi.n	8003b40 <UART_SetConfig+0xe8>
 8003b0a:	a201      	add	r2, pc, #4	; (adr r2, 8003b10 <UART_SetConfig+0xb8>)
 8003b0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b10:	08003b21 	.word	0x08003b21
 8003b14:	08003b31 	.word	0x08003b31
 8003b18:	08003b29 	.word	0x08003b29
 8003b1c:	08003b39 	.word	0x08003b39
 8003b20:	2301      	movs	r3, #1
 8003b22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b26:	e0d6      	b.n	8003cd6 <UART_SetConfig+0x27e>
 8003b28:	2302      	movs	r3, #2
 8003b2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b2e:	e0d2      	b.n	8003cd6 <UART_SetConfig+0x27e>
 8003b30:	2304      	movs	r3, #4
 8003b32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b36:	e0ce      	b.n	8003cd6 <UART_SetConfig+0x27e>
 8003b38:	2308      	movs	r3, #8
 8003b3a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b3e:	e0ca      	b.n	8003cd6 <UART_SetConfig+0x27e>
 8003b40:	2310      	movs	r3, #16
 8003b42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003b46:	e0c6      	b.n	8003cd6 <UART_SetConfig+0x27e>
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a7d      	ldr	r2, [pc, #500]	; (8003d44 <UART_SetConfig+0x2ec>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d138      	bne.n	8003bc4 <UART_SetConfig+0x16c>
 8003b52:	4b7b      	ldr	r3, [pc, #492]	; (8003d40 <UART_SetConfig+0x2e8>)
 8003b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b58:	f003 030c 	and.w	r3, r3, #12
 8003b5c:	2b0c      	cmp	r3, #12
 8003b5e:	d82d      	bhi.n	8003bbc <UART_SetConfig+0x164>
 8003b60:	a201      	add	r2, pc, #4	; (adr r2, 8003b68 <UART_SetConfig+0x110>)
 8003b62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b66:	bf00      	nop
 8003b68:	08003b9d 	.word	0x08003b9d
 8003b6c:	08003bbd 	.word	0x08003bbd
 8003b70:	08003bbd 	.word	0x08003bbd
 8003b74:	08003bbd 	.word	0x08003bbd
 8003b78:	08003bad 	.word	0x08003bad
 8003b7c:	08003bbd 	.word	0x08003bbd
 8003b80:	08003bbd 	.word	0x08003bbd
 8003b84:	08003bbd 	.word	0x08003bbd
 8003b88:	08003ba5 	.word	0x08003ba5
 8003b8c:	08003bbd 	.word	0x08003bbd
 8003b90:	08003bbd 	.word	0x08003bbd
 8003b94:	08003bbd 	.word	0x08003bbd
 8003b98:	08003bb5 	.word	0x08003bb5
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003ba2:	e098      	b.n	8003cd6 <UART_SetConfig+0x27e>
 8003ba4:	2302      	movs	r3, #2
 8003ba6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003baa:	e094      	b.n	8003cd6 <UART_SetConfig+0x27e>
 8003bac:	2304      	movs	r3, #4
 8003bae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bb2:	e090      	b.n	8003cd6 <UART_SetConfig+0x27e>
 8003bb4:	2308      	movs	r3, #8
 8003bb6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bba:	e08c      	b.n	8003cd6 <UART_SetConfig+0x27e>
 8003bbc:	2310      	movs	r3, #16
 8003bbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bc2:	e088      	b.n	8003cd6 <UART_SetConfig+0x27e>
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a5f      	ldr	r2, [pc, #380]	; (8003d48 <UART_SetConfig+0x2f0>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d125      	bne.n	8003c1a <UART_SetConfig+0x1c2>
 8003bce:	4b5c      	ldr	r3, [pc, #368]	; (8003d40 <UART_SetConfig+0x2e8>)
 8003bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003bd8:	2b30      	cmp	r3, #48	; 0x30
 8003bda:	d016      	beq.n	8003c0a <UART_SetConfig+0x1b2>
 8003bdc:	2b30      	cmp	r3, #48	; 0x30
 8003bde:	d818      	bhi.n	8003c12 <UART_SetConfig+0x1ba>
 8003be0:	2b20      	cmp	r3, #32
 8003be2:	d00a      	beq.n	8003bfa <UART_SetConfig+0x1a2>
 8003be4:	2b20      	cmp	r3, #32
 8003be6:	d814      	bhi.n	8003c12 <UART_SetConfig+0x1ba>
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d002      	beq.n	8003bf2 <UART_SetConfig+0x19a>
 8003bec:	2b10      	cmp	r3, #16
 8003bee:	d008      	beq.n	8003c02 <UART_SetConfig+0x1aa>
 8003bf0:	e00f      	b.n	8003c12 <UART_SetConfig+0x1ba>
 8003bf2:	2300      	movs	r3, #0
 8003bf4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003bf8:	e06d      	b.n	8003cd6 <UART_SetConfig+0x27e>
 8003bfa:	2302      	movs	r3, #2
 8003bfc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c00:	e069      	b.n	8003cd6 <UART_SetConfig+0x27e>
 8003c02:	2304      	movs	r3, #4
 8003c04:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c08:	e065      	b.n	8003cd6 <UART_SetConfig+0x27e>
 8003c0a:	2308      	movs	r3, #8
 8003c0c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c10:	e061      	b.n	8003cd6 <UART_SetConfig+0x27e>
 8003c12:	2310      	movs	r3, #16
 8003c14:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c18:	e05d      	b.n	8003cd6 <UART_SetConfig+0x27e>
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a4b      	ldr	r2, [pc, #300]	; (8003d4c <UART_SetConfig+0x2f4>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d125      	bne.n	8003c70 <UART_SetConfig+0x218>
 8003c24:	4b46      	ldr	r3, [pc, #280]	; (8003d40 <UART_SetConfig+0x2e8>)
 8003c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c2a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003c2e:	2bc0      	cmp	r3, #192	; 0xc0
 8003c30:	d016      	beq.n	8003c60 <UART_SetConfig+0x208>
 8003c32:	2bc0      	cmp	r3, #192	; 0xc0
 8003c34:	d818      	bhi.n	8003c68 <UART_SetConfig+0x210>
 8003c36:	2b80      	cmp	r3, #128	; 0x80
 8003c38:	d00a      	beq.n	8003c50 <UART_SetConfig+0x1f8>
 8003c3a:	2b80      	cmp	r3, #128	; 0x80
 8003c3c:	d814      	bhi.n	8003c68 <UART_SetConfig+0x210>
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d002      	beq.n	8003c48 <UART_SetConfig+0x1f0>
 8003c42:	2b40      	cmp	r3, #64	; 0x40
 8003c44:	d008      	beq.n	8003c58 <UART_SetConfig+0x200>
 8003c46:	e00f      	b.n	8003c68 <UART_SetConfig+0x210>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c4e:	e042      	b.n	8003cd6 <UART_SetConfig+0x27e>
 8003c50:	2302      	movs	r3, #2
 8003c52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c56:	e03e      	b.n	8003cd6 <UART_SetConfig+0x27e>
 8003c58:	2304      	movs	r3, #4
 8003c5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c5e:	e03a      	b.n	8003cd6 <UART_SetConfig+0x27e>
 8003c60:	2308      	movs	r3, #8
 8003c62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c66:	e036      	b.n	8003cd6 <UART_SetConfig+0x27e>
 8003c68:	2310      	movs	r3, #16
 8003c6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003c6e:	e032      	b.n	8003cd6 <UART_SetConfig+0x27e>
 8003c70:	697b      	ldr	r3, [r7, #20]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a30      	ldr	r2, [pc, #192]	; (8003d38 <UART_SetConfig+0x2e0>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d12a      	bne.n	8003cd0 <UART_SetConfig+0x278>
 8003c7a:	4b31      	ldr	r3, [pc, #196]	; (8003d40 <UART_SetConfig+0x2e8>)
 8003c7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c80:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c88:	d01a      	beq.n	8003cc0 <UART_SetConfig+0x268>
 8003c8a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c8e:	d81b      	bhi.n	8003cc8 <UART_SetConfig+0x270>
 8003c90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c94:	d00c      	beq.n	8003cb0 <UART_SetConfig+0x258>
 8003c96:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c9a:	d815      	bhi.n	8003cc8 <UART_SetConfig+0x270>
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d003      	beq.n	8003ca8 <UART_SetConfig+0x250>
 8003ca0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ca4:	d008      	beq.n	8003cb8 <UART_SetConfig+0x260>
 8003ca6:	e00f      	b.n	8003cc8 <UART_SetConfig+0x270>
 8003ca8:	2300      	movs	r3, #0
 8003caa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cae:	e012      	b.n	8003cd6 <UART_SetConfig+0x27e>
 8003cb0:	2302      	movs	r3, #2
 8003cb2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cb6:	e00e      	b.n	8003cd6 <UART_SetConfig+0x27e>
 8003cb8:	2304      	movs	r3, #4
 8003cba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cbe:	e00a      	b.n	8003cd6 <UART_SetConfig+0x27e>
 8003cc0:	2308      	movs	r3, #8
 8003cc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cc6:	e006      	b.n	8003cd6 <UART_SetConfig+0x27e>
 8003cc8:	2310      	movs	r3, #16
 8003cca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003cce:	e002      	b.n	8003cd6 <UART_SetConfig+0x27e>
 8003cd0:	2310      	movs	r3, #16
 8003cd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cd6:	697b      	ldr	r3, [r7, #20]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a17      	ldr	r2, [pc, #92]	; (8003d38 <UART_SetConfig+0x2e0>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	f040 80a8 	bne.w	8003e32 <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003ce2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003ce6:	2b08      	cmp	r3, #8
 8003ce8:	d834      	bhi.n	8003d54 <UART_SetConfig+0x2fc>
 8003cea:	a201      	add	r2, pc, #4	; (adr r2, 8003cf0 <UART_SetConfig+0x298>)
 8003cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf0:	08003d15 	.word	0x08003d15
 8003cf4:	08003d55 	.word	0x08003d55
 8003cf8:	08003d1d 	.word	0x08003d1d
 8003cfc:	08003d55 	.word	0x08003d55
 8003d00:	08003d23 	.word	0x08003d23
 8003d04:	08003d55 	.word	0x08003d55
 8003d08:	08003d55 	.word	0x08003d55
 8003d0c:	08003d55 	.word	0x08003d55
 8003d10:	08003d2b 	.word	0x08003d2b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d14:	f7fe fda0 	bl	8002858 <HAL_RCC_GetPCLK1Freq>
 8003d18:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d1a:	e021      	b.n	8003d60 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d1c:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <UART_SetConfig+0x2f8>)
 8003d1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d20:	e01e      	b.n	8003d60 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d22:	f7fe fd2b 	bl	800277c <HAL_RCC_GetSysClockFreq>
 8003d26:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003d28:	e01a      	b.n	8003d60 <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d2e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003d30:	e016      	b.n	8003d60 <UART_SetConfig+0x308>
 8003d32:	bf00      	nop
 8003d34:	cfff69f3 	.word	0xcfff69f3
 8003d38:	40008000 	.word	0x40008000
 8003d3c:	40013800 	.word	0x40013800
 8003d40:	40021000 	.word	0x40021000
 8003d44:	40004400 	.word	0x40004400
 8003d48:	40004800 	.word	0x40004800
 8003d4c:	40004c00 	.word	0x40004c00
 8003d50:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003d54:	2300      	movs	r3, #0
 8003d56:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003d5e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	f000 812a 	beq.w	8003fbc <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6c:	4a9e      	ldr	r2, [pc, #632]	; (8003fe8 <UART_SetConfig+0x590>)
 8003d6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d72:	461a      	mov	r2, r3
 8003d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d76:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d7a:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	685a      	ldr	r2, [r3, #4]
 8003d80:	4613      	mov	r3, r2
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	4413      	add	r3, r2
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	429a      	cmp	r2, r3
 8003d8a:	d305      	bcc.n	8003d98 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003d8c:	697b      	ldr	r3, [r7, #20]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003d92:	69ba      	ldr	r2, [r7, #24]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d903      	bls.n	8003da0 <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 8003d98:	2301      	movs	r3, #1
 8003d9a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003d9e:	e10d      	b.n	8003fbc <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da2:	2200      	movs	r2, #0
 8003da4:	60bb      	str	r3, [r7, #8]
 8003da6:	60fa      	str	r2, [r7, #12]
 8003da8:	697b      	ldr	r3, [r7, #20]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	4a8e      	ldr	r2, [pc, #568]	; (8003fe8 <UART_SetConfig+0x590>)
 8003dae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003db2:	b29b      	uxth	r3, r3
 8003db4:	2200      	movs	r2, #0
 8003db6:	603b      	str	r3, [r7, #0]
 8003db8:	607a      	str	r2, [r7, #4]
 8003dba:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003dbe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003dc2:	f7fc ff89 	bl	8000cd8 <__aeabi_uldivmod>
 8003dc6:	4602      	mov	r2, r0
 8003dc8:	460b      	mov	r3, r1
 8003dca:	4610      	mov	r0, r2
 8003dcc:	4619      	mov	r1, r3
 8003dce:	f04f 0200 	mov.w	r2, #0
 8003dd2:	f04f 0300 	mov.w	r3, #0
 8003dd6:	020b      	lsls	r3, r1, #8
 8003dd8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003ddc:	0202      	lsls	r2, r0, #8
 8003dde:	6979      	ldr	r1, [r7, #20]
 8003de0:	6849      	ldr	r1, [r1, #4]
 8003de2:	0849      	lsrs	r1, r1, #1
 8003de4:	2000      	movs	r0, #0
 8003de6:	460c      	mov	r4, r1
 8003de8:	4605      	mov	r5, r0
 8003dea:	eb12 0804 	adds.w	r8, r2, r4
 8003dee:	eb43 0905 	adc.w	r9, r3, r5
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	2200      	movs	r2, #0
 8003df8:	469a      	mov	sl, r3
 8003dfa:	4693      	mov	fp, r2
 8003dfc:	4652      	mov	r2, sl
 8003dfe:	465b      	mov	r3, fp
 8003e00:	4640      	mov	r0, r8
 8003e02:	4649      	mov	r1, r9
 8003e04:	f7fc ff68 	bl	8000cd8 <__aeabi_uldivmod>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	460b      	mov	r3, r1
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003e10:	6a3b      	ldr	r3, [r7, #32]
 8003e12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e16:	d308      	bcc.n	8003e2a <UART_SetConfig+0x3d2>
 8003e18:	6a3b      	ldr	r3, [r7, #32]
 8003e1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e1e:	d204      	bcs.n	8003e2a <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	6a3a      	ldr	r2, [r7, #32]
 8003e26:	60da      	str	r2, [r3, #12]
 8003e28:	e0c8      	b.n	8003fbc <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003e30:	e0c4      	b.n	8003fbc <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e3a:	d167      	bne.n	8003f0c <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8003e3c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d828      	bhi.n	8003e96 <UART_SetConfig+0x43e>
 8003e44:	a201      	add	r2, pc, #4	; (adr r2, 8003e4c <UART_SetConfig+0x3f4>)
 8003e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e4a:	bf00      	nop
 8003e4c:	08003e71 	.word	0x08003e71
 8003e50:	08003e79 	.word	0x08003e79
 8003e54:	08003e81 	.word	0x08003e81
 8003e58:	08003e97 	.word	0x08003e97
 8003e5c:	08003e87 	.word	0x08003e87
 8003e60:	08003e97 	.word	0x08003e97
 8003e64:	08003e97 	.word	0x08003e97
 8003e68:	08003e97 	.word	0x08003e97
 8003e6c:	08003e8f 	.word	0x08003e8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e70:	f7fe fcf2 	bl	8002858 <HAL_RCC_GetPCLK1Freq>
 8003e74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e76:	e014      	b.n	8003ea2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e78:	f7fe fd04 	bl	8002884 <HAL_RCC_GetPCLK2Freq>
 8003e7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e7e:	e010      	b.n	8003ea2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e80:	4b5a      	ldr	r3, [pc, #360]	; (8003fec <UART_SetConfig+0x594>)
 8003e82:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e84:	e00d      	b.n	8003ea2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e86:	f7fe fc79 	bl	800277c <HAL_RCC_GetSysClockFreq>
 8003e8a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003e8c:	e009      	b.n	8003ea2 <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e92:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003e94:	e005      	b.n	8003ea2 <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 8003e96:	2300      	movs	r3, #0
 8003e98:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003ea0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 8089 	beq.w	8003fbc <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eae:	4a4e      	ldr	r2, [pc, #312]	; (8003fe8 <UART_SetConfig+0x590>)
 8003eb0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003eb4:	461a      	mov	r2, r3
 8003eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb8:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ebc:	005a      	lsls	r2, r3, #1
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	085b      	lsrs	r3, r3, #1
 8003ec4:	441a      	add	r2, r3
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ece:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ed0:	6a3b      	ldr	r3, [r7, #32]
 8003ed2:	2b0f      	cmp	r3, #15
 8003ed4:	d916      	bls.n	8003f04 <UART_SetConfig+0x4ac>
 8003ed6:	6a3b      	ldr	r3, [r7, #32]
 8003ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003edc:	d212      	bcs.n	8003f04 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003ede:	6a3b      	ldr	r3, [r7, #32]
 8003ee0:	b29b      	uxth	r3, r3
 8003ee2:	f023 030f 	bic.w	r3, r3, #15
 8003ee6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ee8:	6a3b      	ldr	r3, [r7, #32]
 8003eea:	085b      	lsrs	r3, r3, #1
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	f003 0307 	and.w	r3, r3, #7
 8003ef2:	b29a      	uxth	r2, r3
 8003ef4:	8bfb      	ldrh	r3, [r7, #30]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	8bfa      	ldrh	r2, [r7, #30]
 8003f00:	60da      	str	r2, [r3, #12]
 8003f02:	e05b      	b.n	8003fbc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003f0a:	e057      	b.n	8003fbc <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f0c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	d828      	bhi.n	8003f66 <UART_SetConfig+0x50e>
 8003f14:	a201      	add	r2, pc, #4	; (adr r2, 8003f1c <UART_SetConfig+0x4c4>)
 8003f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f1a:	bf00      	nop
 8003f1c:	08003f41 	.word	0x08003f41
 8003f20:	08003f49 	.word	0x08003f49
 8003f24:	08003f51 	.word	0x08003f51
 8003f28:	08003f67 	.word	0x08003f67
 8003f2c:	08003f57 	.word	0x08003f57
 8003f30:	08003f67 	.word	0x08003f67
 8003f34:	08003f67 	.word	0x08003f67
 8003f38:	08003f67 	.word	0x08003f67
 8003f3c:	08003f5f 	.word	0x08003f5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f40:	f7fe fc8a 	bl	8002858 <HAL_RCC_GetPCLK1Freq>
 8003f44:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f46:	e014      	b.n	8003f72 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f48:	f7fe fc9c 	bl	8002884 <HAL_RCC_GetPCLK2Freq>
 8003f4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f4e:	e010      	b.n	8003f72 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f50:	4b26      	ldr	r3, [pc, #152]	; (8003fec <UART_SetConfig+0x594>)
 8003f52:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f54:	e00d      	b.n	8003f72 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f56:	f7fe fc11 	bl	800277c <HAL_RCC_GetSysClockFreq>
 8003f5a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003f5c:	e009      	b.n	8003f72 <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f62:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8003f64:	e005      	b.n	8003f72 <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8003f66:	2300      	movs	r3, #0
 8003f68:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003f70:	bf00      	nop
    }

    if (pclk != 0U)
 8003f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d021      	beq.n	8003fbc <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f78:	697b      	ldr	r3, [r7, #20]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	4a1a      	ldr	r2, [pc, #104]	; (8003fe8 <UART_SetConfig+0x590>)
 8003f7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003f82:	461a      	mov	r2, r3
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	fbb3 f2f2 	udiv	r2, r3, r2
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	085b      	lsrs	r3, r3, #1
 8003f90:	441a      	add	r2, r3
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	685b      	ldr	r3, [r3, #4]
 8003f96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f9a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f9c:	6a3b      	ldr	r3, [r7, #32]
 8003f9e:	2b0f      	cmp	r3, #15
 8003fa0:	d909      	bls.n	8003fb6 <UART_SetConfig+0x55e>
 8003fa2:	6a3b      	ldr	r3, [r7, #32]
 8003fa4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fa8:	d205      	bcs.n	8003fb6 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003faa:	6a3b      	ldr	r3, [r7, #32]
 8003fac:	b29a      	uxth	r2, r3
 8003fae:	697b      	ldr	r3, [r7, #20]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	60da      	str	r2, [r3, #12]
 8003fb4:	e002      	b.n	8003fbc <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fcc:	697b      	ldr	r3, [r7, #20]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8003fd8:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3730      	adds	r7, #48	; 0x30
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003fe6:	bf00      	nop
 8003fe8:	080090a4 	.word	0x080090a4
 8003fec:	00f42400 	.word	0x00f42400

08003ff0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffc:	f003 0308 	and.w	r3, r3, #8
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00a      	beq.n	800401a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800401e:	f003 0301 	and.w	r3, r3, #1
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004040:	f003 0302 	and.w	r3, r3, #2
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00a      	beq.n	800405e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004062:	f003 0304 	and.w	r3, r3, #4
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	430a      	orrs	r2, r1
 800407e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004084:	f003 0310 	and.w	r3, r3, #16
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00a      	beq.n	80040a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040a6:	f003 0320 	and.w	r3, r3, #32
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d01a      	beq.n	8004106 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040ee:	d10a      	bne.n	8004106 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800410a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	605a      	str	r2, [r3, #4]
  }
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b098      	sub	sp, #96	; 0x60
 8004138:	af02      	add	r7, sp, #8
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004144:	f7fd fb6c 	bl	8001820 <HAL_GetTick>
 8004148:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0308 	and.w	r3, r3, #8
 8004154:	2b08      	cmp	r3, #8
 8004156:	d12f      	bne.n	80041b8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004158:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004160:	2200      	movs	r2, #0
 8004162:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f88e 	bl	8004288 <UART_WaitOnFlagUntilTimeout>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d022      	beq.n	80041b8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417a:	e853 3f00 	ldrex	r3, [r3]
 800417e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004182:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004186:	653b      	str	r3, [r7, #80]	; 0x50
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004190:	647b      	str	r3, [r7, #68]	; 0x44
 8004192:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004194:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004196:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004198:	e841 2300 	strex	r3, r2, [r1]
 800419c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800419e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1e6      	bne.n	8004172 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2220      	movs	r2, #32
 80041a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041b4:	2303      	movs	r3, #3
 80041b6:	e063      	b.n	8004280 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f003 0304 	and.w	r3, r3, #4
 80041c2:	2b04      	cmp	r3, #4
 80041c4:	d149      	bne.n	800425a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041c6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041ce:	2200      	movs	r2, #0
 80041d0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f857 	bl	8004288 <UART_WaitOnFlagUntilTimeout>
 80041da:	4603      	mov	r3, r0
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d03c      	beq.n	800425a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e8:	e853 3f00 	ldrex	r3, [r3]
 80041ec:	623b      	str	r3, [r7, #32]
   return(result);
 80041ee:	6a3b      	ldr	r3, [r7, #32]
 80041f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041fe:	633b      	str	r3, [r7, #48]	; 0x30
 8004200:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004202:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004204:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004206:	e841 2300 	strex	r3, r2, [r1]
 800420a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800420c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1e6      	bne.n	80041e0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3308      	adds	r3, #8
 8004218:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	e853 3f00 	ldrex	r3, [r3]
 8004220:	60fb      	str	r3, [r7, #12]
   return(result);
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	f023 0301 	bic.w	r3, r3, #1
 8004228:	64bb      	str	r3, [r7, #72]	; 0x48
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	3308      	adds	r3, #8
 8004230:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004232:	61fa      	str	r2, [r7, #28]
 8004234:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004236:	69b9      	ldr	r1, [r7, #24]
 8004238:	69fa      	ldr	r2, [r7, #28]
 800423a:	e841 2300 	strex	r3, r2, [r1]
 800423e:	617b      	str	r3, [r7, #20]
   return(result);
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d1e5      	bne.n	8004212 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2220      	movs	r2, #32
 800424a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e012      	b.n	8004280 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	2220      	movs	r2, #32
 800425e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2220      	movs	r2, #32
 8004266:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2200      	movs	r2, #0
 800427a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3758      	adds	r7, #88	; 0x58
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004288:	b580      	push	{r7, lr}
 800428a:	b084      	sub	sp, #16
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	603b      	str	r3, [r7, #0]
 8004294:	4613      	mov	r3, r2
 8004296:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004298:	e04f      	b.n	800433a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042a0:	d04b      	beq.n	800433a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80042a2:	f7fd fabd 	bl	8001820 <HAL_GetTick>
 80042a6:	4602      	mov	r2, r0
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	1ad3      	subs	r3, r2, r3
 80042ac:	69ba      	ldr	r2, [r7, #24]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d302      	bcc.n	80042b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80042b2:	69bb      	ldr	r3, [r7, #24]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80042b8:	2303      	movs	r3, #3
 80042ba:	e04e      	b.n	800435a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f003 0304 	and.w	r3, r3, #4
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d037      	beq.n	800433a <UART_WaitOnFlagUntilTimeout+0xb2>
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	2b80      	cmp	r3, #128	; 0x80
 80042ce:	d034      	beq.n	800433a <UART_WaitOnFlagUntilTimeout+0xb2>
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	2b40      	cmp	r3, #64	; 0x40
 80042d4:	d031      	beq.n	800433a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	69db      	ldr	r3, [r3, #28]
 80042dc:	f003 0308 	and.w	r3, r3, #8
 80042e0:	2b08      	cmp	r3, #8
 80042e2:	d110      	bne.n	8004306 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	2208      	movs	r2, #8
 80042ea:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042ec:	68f8      	ldr	r0, [r7, #12]
 80042ee:	f000 f838 	bl	8004362 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	2208      	movs	r2, #8
 80042f6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2200      	movs	r2, #0
 80042fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e029      	b.n	800435a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	69db      	ldr	r3, [r3, #28]
 800430c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004310:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004314:	d111      	bne.n	800433a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800431e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 f81e 	bl	8004362 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	2220      	movs	r2, #32
 800432a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004336:	2303      	movs	r3, #3
 8004338:	e00f      	b.n	800435a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	69da      	ldr	r2, [r3, #28]
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	4013      	ands	r3, r2
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	429a      	cmp	r2, r3
 8004348:	bf0c      	ite	eq
 800434a:	2301      	moveq	r3, #1
 800434c:	2300      	movne	r3, #0
 800434e:	b2db      	uxtb	r3, r3
 8004350:	461a      	mov	r2, r3
 8004352:	79fb      	ldrb	r3, [r7, #7]
 8004354:	429a      	cmp	r2, r3
 8004356:	d0a0      	beq.n	800429a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	4618      	mov	r0, r3
 800435c:	3710      	adds	r7, #16
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}

08004362 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004362:	b480      	push	{r7}
 8004364:	b095      	sub	sp, #84	; 0x54
 8004366:	af00      	add	r7, sp, #0
 8004368:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004370:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004372:	e853 3f00 	ldrex	r3, [r3]
 8004376:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004378:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800437a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800437e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	461a      	mov	r2, r3
 8004386:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004388:	643b      	str	r3, [r7, #64]	; 0x40
 800438a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800438e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004390:	e841 2300 	strex	r3, r2, [r1]
 8004394:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1e6      	bne.n	800436a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	3308      	adds	r3, #8
 80043a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a4:	6a3b      	ldr	r3, [r7, #32]
 80043a6:	e853 3f00 	ldrex	r3, [r3]
 80043aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043b2:	f023 0301 	bic.w	r3, r3, #1
 80043b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3308      	adds	r3, #8
 80043be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043c8:	e841 2300 	strex	r3, r2, [r1]
 80043cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1e3      	bne.n	800439c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043d8:	2b01      	cmp	r3, #1
 80043da:	d118      	bne.n	800440e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	e853 3f00 	ldrex	r3, [r3]
 80043e8:	60bb      	str	r3, [r7, #8]
   return(result);
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	f023 0310 	bic.w	r3, r3, #16
 80043f0:	647b      	str	r3, [r7, #68]	; 0x44
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	461a      	mov	r2, r3
 80043f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043fa:	61bb      	str	r3, [r7, #24]
 80043fc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043fe:	6979      	ldr	r1, [r7, #20]
 8004400:	69ba      	ldr	r2, [r7, #24]
 8004402:	e841 2300 	strex	r3, r2, [r1]
 8004406:	613b      	str	r3, [r7, #16]
   return(result);
 8004408:	693b      	ldr	r3, [r7, #16]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1e6      	bne.n	80043dc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2220      	movs	r2, #32
 8004412:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2200      	movs	r2, #0
 800441a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004422:	bf00      	nop
 8004424:	3754      	adds	r7, #84	; 0x54
 8004426:	46bd      	mov	sp, r7
 8004428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442c:	4770      	bx	lr

0800442e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800442e:	b480      	push	{r7}
 8004430:	b085      	sub	sp, #20
 8004432:	af00      	add	r7, sp, #0
 8004434:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800443c:	2b01      	cmp	r3, #1
 800443e:	d101      	bne.n	8004444 <HAL_UARTEx_DisableFifoMode+0x16>
 8004440:	2302      	movs	r3, #2
 8004442:	e027      	b.n	8004494 <HAL_UARTEx_DisableFifoMode+0x66>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2224      	movs	r2, #36	; 0x24
 8004450:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 0201 	bic.w	r2, r2, #1
 800446a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8004472:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	68fa      	ldr	r2, [r7, #12]
 8004480:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2220      	movs	r2, #32
 8004486:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004492:	2300      	movs	r3, #0
}
 8004494:	4618      	mov	r0, r3
 8004496:	3714      	adds	r7, #20
 8004498:	46bd      	mov	sp, r7
 800449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449e:	4770      	bx	lr

080044a0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b084      	sub	sp, #16
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	d101      	bne.n	80044b8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80044b4:	2302      	movs	r3, #2
 80044b6:	e02d      	b.n	8004514 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2224      	movs	r2, #36	; 0x24
 80044c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f022 0201 	bic.w	r2, r2, #1
 80044de:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	689b      	ldr	r3, [r3, #8]
 80044e6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	683a      	ldr	r2, [r7, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80044f4:	6878      	ldr	r0, [r7, #4]
 80044f6:	f000 f84f 	bl	8004598 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2220      	movs	r2, #32
 8004506:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004512:	2300      	movs	r3, #0
}
 8004514:	4618      	mov	r0, r3
 8004516:	3710      	adds	r7, #16
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800452c:	2b01      	cmp	r3, #1
 800452e:	d101      	bne.n	8004534 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004530:	2302      	movs	r3, #2
 8004532:	e02d      	b.n	8004590 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2224      	movs	r2, #36	; 0x24
 8004540:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 0201 	bic.w	r2, r2, #1
 800455a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	683a      	ldr	r2, [r7, #0]
 800456c:	430a      	orrs	r2, r1
 800456e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f000 f811 	bl	8004598 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	68fa      	ldr	r2, [r7, #12]
 800457c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2220      	movs	r2, #32
 8004582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	3710      	adds	r7, #16
 8004594:	46bd      	mov	sp, r7
 8004596:	bd80      	pop	{r7, pc}

08004598 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004598:	b480      	push	{r7}
 800459a:	b085      	sub	sp, #20
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d108      	bne.n	80045ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	2201      	movs	r2, #1
 80045ac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80045b8:	e031      	b.n	800461e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80045ba:	2308      	movs	r3, #8
 80045bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80045be:	2308      	movs	r3, #8
 80045c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	0e5b      	lsrs	r3, r3, #25
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	f003 0307 	and.w	r3, r3, #7
 80045d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	0f5b      	lsrs	r3, r3, #29
 80045da:	b2db      	uxtb	r3, r3
 80045dc:	f003 0307 	and.w	r3, r3, #7
 80045e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80045e2:	7bbb      	ldrb	r3, [r7, #14]
 80045e4:	7b3a      	ldrb	r2, [r7, #12]
 80045e6:	4911      	ldr	r1, [pc, #68]	; (800462c <UARTEx_SetNbDataToProcess+0x94>)
 80045e8:	5c8a      	ldrb	r2, [r1, r2]
 80045ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80045ee:	7b3a      	ldrb	r2, [r7, #12]
 80045f0:	490f      	ldr	r1, [pc, #60]	; (8004630 <UARTEx_SetNbDataToProcess+0x98>)
 80045f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80045f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004600:	7bfb      	ldrb	r3, [r7, #15]
 8004602:	7b7a      	ldrb	r2, [r7, #13]
 8004604:	4909      	ldr	r1, [pc, #36]	; (800462c <UARTEx_SetNbDataToProcess+0x94>)
 8004606:	5c8a      	ldrb	r2, [r1, r2]
 8004608:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800460c:	7b7a      	ldrb	r2, [r7, #13]
 800460e:	4908      	ldr	r1, [pc, #32]	; (8004630 <UARTEx_SetNbDataToProcess+0x98>)
 8004610:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004612:	fb93 f3f2 	sdiv	r3, r3, r2
 8004616:	b29a      	uxth	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800461e:	bf00      	nop
 8004620:	3714      	adds	r7, #20
 8004622:	46bd      	mov	sp, r7
 8004624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004628:	4770      	bx	lr
 800462a:	bf00      	nop
 800462c:	080090bc 	.word	0x080090bc
 8004630:	080090c4 	.word	0x080090c4

08004634 <MAX31855_Init>:

#include "MAX31855.h"


void MAX31855_Init(MAX31855_StateHandle *MAX31855, SPI_HandleTypeDef * hspi,GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
 8004640:	807b      	strh	r3, [r7, #2]
	 MAX31855->hspi=hspi;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	68ba      	ldr	r2, [r7, #8]
 8004646:	609a      	str	r2, [r3, #8]
	 MAX31855->nss.pin=GPIO_Pin;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	887a      	ldrh	r2, [r7, #2]
 800464c:	801a      	strh	r2, [r3, #0]
	 MAX31855->nss.port=GPIOx;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	687a      	ldr	r2, [r7, #4]
 8004652:	605a      	str	r2, [r3, #4]
	 MAX31855_SetNSSState(MAX31855,GPIO_PIN_SET);
 8004654:	2101      	movs	r1, #1
 8004656:	68f8      	ldr	r0, [r7, #12]
 8004658:	f000 f8fb 	bl	8004852 <MAX31855_SetNSSState>
}
 800465c:	bf00      	nop
 800465e:	3710      	adds	r7, #16
 8004660:	46bd      	mov	sp, r7
 8004662:	bd80      	pop	{r7, pc}

08004664 <MAX31855_GetFault>:
uint8_t MAX31855_GetFault(MAX31855_StateHandle *MAX31855)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
	if(MAX31855->ocFault)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	7b5b      	ldrb	r3, [r3, #13]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d001      	beq.n	8004678 <MAX31855_GetFault+0x14>
	{
		return 1;
 8004674:	2301      	movs	r3, #1
 8004676:	e00c      	b.n	8004692 <MAX31855_GetFault+0x2e>
	}
	else if(MAX31855->scgFault)
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	7b9b      	ldrb	r3, [r3, #14]
 800467c:	2b00      	cmp	r3, #0
 800467e:	d001      	beq.n	8004684 <MAX31855_GetFault+0x20>
	{
		return 2;
 8004680:	2302      	movs	r3, #2
 8004682:	e006      	b.n	8004692 <MAX31855_GetFault+0x2e>
	}
	else if(MAX31855->scvFault)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	7bdb      	ldrb	r3, [r3, #15]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d001      	beq.n	8004690 <MAX31855_GetFault+0x2c>
	{
		return 3;
 800468c:	2303      	movs	r3, #3
 800468e:	e000      	b.n	8004692 <MAX31855_GetFault+0x2e>
	}
	else
	{
		return 0;
 8004690:	2300      	movs	r3, #0
	}

}
 8004692:	4618      	mov	r0, r3
 8004694:	370c      	adds	r7, #12
 8004696:	46bd      	mov	sp, r7
 8004698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469c:	4770      	bx	lr
	...

080046a0 <MAX31855_GetTemperature>:
float MAX31855_GetTemperature(MAX31855_StateHandle *MAX31855)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	b082      	sub	sp, #8
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
	 return MAX31855->extTemp*0.25;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	699b      	ldr	r3, [r3, #24]
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7fb ff61 	bl	8000574 <__aeabi_i2d>
 80046b2:	f04f 0200 	mov.w	r2, #0
 80046b6:	4b08      	ldr	r3, [pc, #32]	; (80046d8 <MAX31855_GetTemperature+0x38>)
 80046b8:	f7fb ffc6 	bl	8000648 <__aeabi_dmul>
 80046bc:	4602      	mov	r2, r0
 80046be:	460b      	mov	r3, r1
 80046c0:	4610      	mov	r0, r2
 80046c2:	4619      	mov	r1, r3
 80046c4:	f7fc fab8 	bl	8000c38 <__aeabi_d2f>
 80046c8:	4603      	mov	r3, r0
 80046ca:	ee07 3a90 	vmov	s15, r3
}
 80046ce:	eeb0 0a67 	vmov.f32	s0, s15
 80046d2:	3708      	adds	r7, #8
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}
 80046d8:	3fd00000 	.word	0x3fd00000

080046dc <MAX31855_GeInternalTemperature>:
float MAX31855_GeInternalTemperature(MAX31855_StateHandle *MAX31855){
 80046dc:	b580      	push	{r7, lr}
 80046de:	b082      	sub	sp, #8
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
	 return MAX31855->intTemp*0.0625;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	691b      	ldr	r3, [r3, #16]
 80046e8:	4618      	mov	r0, r3
 80046ea:	f7fb ff43 	bl	8000574 <__aeabi_i2d>
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	4b08      	ldr	r3, [pc, #32]	; (8004714 <MAX31855_GeInternalTemperature+0x38>)
 80046f4:	f7fb ffa8 	bl	8000648 <__aeabi_dmul>
 80046f8:	4602      	mov	r2, r0
 80046fa:	460b      	mov	r3, r1
 80046fc:	4610      	mov	r0, r2
 80046fe:	4619      	mov	r1, r3
 8004700:	f7fc fa9a 	bl	8000c38 <__aeabi_d2f>
 8004704:	4603      	mov	r3, r0
 8004706:	ee07 3a90 	vmov	s15, r3
}
 800470a:	eeb0 0a67 	vmov.f32	s0, s15
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}
 8004714:	3fb00000 	.word	0x3fb00000

08004718 <MAX31855_ReadData>:
	 temp += 32;
	 return temp;
}

void MAX31855_ReadData(MAX31855_StateHandle *MAX31855)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b086      	sub	sp, #24
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
	uint8_t payload[4];
	int32_t frame;
	MAX31855_SetNSSState(MAX31855,GPIO_PIN_RESET);
 8004720:	2100      	movs	r1, #0
 8004722:	6878      	ldr	r0, [r7, #4]
 8004724:	f000 f895 	bl	8004852 <MAX31855_SetNSSState>
	HAL_SPI_Receive(MAX31855->hspi, payload, 4, 1000);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6898      	ldr	r0, [r3, #8]
 800472c:	f107 0108 	add.w	r1, r7, #8
 8004730:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004734:	2204      	movs	r2, #4
 8004736:	f7fe fb9c 	bl	8002e72 <HAL_SPI_Receive>
	MAX31855_SetNSSState(MAX31855,GPIO_PIN_SET);
 800473a:	2101      	movs	r1, #1
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f888 	bl	8004852 <MAX31855_SetNSSState>
	MAX31855->scvFault=0;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	73da      	strb	r2, [r3, #15]
	MAX31855->scgFault=0;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	739a      	strb	r2, [r3, #14]
	MAX31855->ocFault=0;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2200      	movs	r2, #0
 8004752:	735a      	strb	r2, [r3, #13]
	MAX31855->fault=0;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2200      	movs	r2, #0
 8004758:	731a      	strb	r2, [r3, #12]
	MAX31855->extTemp=0;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	619a      	str	r2, [r3, #24]
	MAX31855->extTempSign=0;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2200      	movs	r2, #0
 8004764:	771a      	strb	r2, [r3, #28]
	MAX31855->intTemp=0;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2200      	movs	r2, #0
 800476a:	611a      	str	r2, [r3, #16]
	MAX31855->intTempSign=0;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	751a      	strb	r2, [r3, #20]

	frame = payload[0];
 8004772:	7a3b      	ldrb	r3, [r7, #8]
 8004774:	60fb      	str	r3, [r7, #12]
	frame = frame<<8;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	021b      	lsls	r3, r3, #8
 800477a:	60fb      	str	r3, [r7, #12]
	frame = frame|payload[1];
 800477c:	7a7b      	ldrb	r3, [r7, #9]
 800477e:	461a      	mov	r2, r3
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4313      	orrs	r3, r2
 8004784:	60fb      	str	r3, [r7, #12]
	frame = frame<<8;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	021b      	lsls	r3, r3, #8
 800478a:	60fb      	str	r3, [r7, #12]
	frame = frame|payload[2];
 800478c:	7abb      	ldrb	r3, [r7, #10]
 800478e:	461a      	mov	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	4313      	orrs	r3, r2
 8004794:	60fb      	str	r3, [r7, #12]
	frame = frame<<8;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	021b      	lsls	r3, r3, #8
 800479a:	60fb      	str	r3, [r7, #12]
	frame = frame|payload[3];
 800479c:	7afb      	ldrb	r3, [r7, #11]
 800479e:	461a      	mov	r2, r3
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4313      	orrs	r3, r2
 80047a4:	60fb      	str	r3, [r7, #12]
	int32_t extTemp=frame;
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	617b      	str	r3, [r7, #20]
	int32_t intTemp=frame;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	613b      	str	r3, [r7, #16]

	if(frame& 0b00000000000000000000000000000100)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f003 0304 	and.w	r3, r3, #4
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <MAX31855_ReadData+0xa6>
	{
		MAX31855->scvFault=1;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	73da      	strb	r2, [r3, #15]
	}
	if(frame& 0b00000000000000000000000000000010)
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f003 0302 	and.w	r3, r3, #2
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d002      	beq.n	80047ce <MAX31855_ReadData+0xb6>
	{
		MAX31855->scgFault=1;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	739a      	strb	r2, [r3, #14]
	}
	if(frame& 0b00000000000000000000000000000001)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	f003 0301 	and.w	r3, r3, #1
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d002      	beq.n	80047de <MAX31855_ReadData+0xc6>
	{
		MAX31855->ocFault=1;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	735a      	strb	r2, [r3, #13]
	}
	if(frame&0b00000000000000010000000000000000)
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d002      	beq.n	80047ee <MAX31855_ReadData+0xd6>
	{
		MAX31855->fault=1;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	731a      	strb	r2, [r3, #12]
	}
	if(frame&0b10000000000000000000000000000000)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	da02      	bge.n	80047fa <MAX31855_ReadData+0xe2>
	{
		MAX31855->extTempSign=1;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2201      	movs	r2, #1
 80047f8:	771a      	strb	r2, [r3, #28]
	}
	if(frame&0b00000000000000010000000000000000)
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004800:	2b00      	cmp	r3, #0
 8004802:	d002      	beq.n	800480a <MAX31855_ReadData+0xf2>
	{
		MAX31855->intTempSign=1;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2201      	movs	r2, #1
 8004808:	751a      	strb	r2, [r3, #20]
	}

	extTemp>>=18;
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	149b      	asrs	r3, r3, #18
 800480e:	617b      	str	r3, [r7, #20]
	if (MAX31855->intTempSign) {
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	7d1b      	ldrb	r3, [r3, #20]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d004      	beq.n	8004822 <MAX31855_ReadData+0x10a>
		extTemp = ~(extTemp & 0b11111111111111);
 8004818:	697b      	ldr	r3, [r7, #20]
 800481a:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800481e:	43db      	mvns	r3, r3
 8004820:	617b      	str	r3, [r7, #20]
	}
	MAX31855->extTemp=extTemp;
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	697a      	ldr	r2, [r7, #20]
 8004826:	619a      	str	r2, [r3, #24]

	intTemp = ((intTemp>>4) & 0b11111111111);
 8004828:	693b      	ldr	r3, [r7, #16]
 800482a:	111b      	asrs	r3, r3, #4
 800482c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004830:	613b      	str	r3, [r7, #16]
	if (MAX31855->intTempSign)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	7d1b      	ldrb	r3, [r3, #20]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d004      	beq.n	8004844 <MAX31855_ReadData+0x12c>
	{
		intTemp=~(intTemp|0b1111100000000000); //Experimental code, not tested!
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	f443 4378 	orr.w	r3, r3, #63488	; 0xf800
 8004840:	43db      	mvns	r3, r3
 8004842:	613b      	str	r3, [r7, #16]
	}
	MAX31855->intTemp=intTemp;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	693a      	ldr	r2, [r7, #16]
 8004848:	611a      	str	r2, [r3, #16]
}
 800484a:	bf00      	nop
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <MAX31855_SetNSSState>:


void MAX31855_SetNSSState(MAX31855_StateHandle *MAX31855, GPIO_PinState state)
{
 8004852:	b580      	push	{r7, lr}
 8004854:	b082      	sub	sp, #8
 8004856:	af00      	add	r7, sp, #0
 8004858:	6078      	str	r0, [r7, #4]
 800485a:	460b      	mov	r3, r1
 800485c:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(MAX31855->nss.port,MAX31855->nss.pin,state);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6858      	ldr	r0, [r3, #4]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	881b      	ldrh	r3, [r3, #0]
 8004866:	78fa      	ldrb	r2, [r7, #3]
 8004868:	4619      	mov	r1, r3
 800486a:	f7fd fa6d 	bl	8001d48 <HAL_GPIO_WritePin>
}
 800486e:	bf00      	nop
 8004870:	3708      	adds	r7, #8
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}

08004876 <__cvt>:
 8004876:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800487a:	ec55 4b10 	vmov	r4, r5, d0
 800487e:	2d00      	cmp	r5, #0
 8004880:	460e      	mov	r6, r1
 8004882:	4619      	mov	r1, r3
 8004884:	462b      	mov	r3, r5
 8004886:	bfbb      	ittet	lt
 8004888:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800488c:	461d      	movlt	r5, r3
 800488e:	2300      	movge	r3, #0
 8004890:	232d      	movlt	r3, #45	; 0x2d
 8004892:	700b      	strb	r3, [r1, #0]
 8004894:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004896:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800489a:	4691      	mov	r9, r2
 800489c:	f023 0820 	bic.w	r8, r3, #32
 80048a0:	bfbc      	itt	lt
 80048a2:	4622      	movlt	r2, r4
 80048a4:	4614      	movlt	r4, r2
 80048a6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80048aa:	d005      	beq.n	80048b8 <__cvt+0x42>
 80048ac:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80048b0:	d100      	bne.n	80048b4 <__cvt+0x3e>
 80048b2:	3601      	adds	r6, #1
 80048b4:	2102      	movs	r1, #2
 80048b6:	e000      	b.n	80048ba <__cvt+0x44>
 80048b8:	2103      	movs	r1, #3
 80048ba:	ab03      	add	r3, sp, #12
 80048bc:	9301      	str	r3, [sp, #4]
 80048be:	ab02      	add	r3, sp, #8
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	ec45 4b10 	vmov	d0, r4, r5
 80048c6:	4653      	mov	r3, sl
 80048c8:	4632      	mov	r2, r6
 80048ca:	f001 f891 	bl	80059f0 <_dtoa_r>
 80048ce:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80048d2:	4607      	mov	r7, r0
 80048d4:	d102      	bne.n	80048dc <__cvt+0x66>
 80048d6:	f019 0f01 	tst.w	r9, #1
 80048da:	d022      	beq.n	8004922 <__cvt+0xac>
 80048dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80048e0:	eb07 0906 	add.w	r9, r7, r6
 80048e4:	d110      	bne.n	8004908 <__cvt+0x92>
 80048e6:	783b      	ldrb	r3, [r7, #0]
 80048e8:	2b30      	cmp	r3, #48	; 0x30
 80048ea:	d10a      	bne.n	8004902 <__cvt+0x8c>
 80048ec:	2200      	movs	r2, #0
 80048ee:	2300      	movs	r3, #0
 80048f0:	4620      	mov	r0, r4
 80048f2:	4629      	mov	r1, r5
 80048f4:	f7fc f910 	bl	8000b18 <__aeabi_dcmpeq>
 80048f8:	b918      	cbnz	r0, 8004902 <__cvt+0x8c>
 80048fa:	f1c6 0601 	rsb	r6, r6, #1
 80048fe:	f8ca 6000 	str.w	r6, [sl]
 8004902:	f8da 3000 	ldr.w	r3, [sl]
 8004906:	4499      	add	r9, r3
 8004908:	2200      	movs	r2, #0
 800490a:	2300      	movs	r3, #0
 800490c:	4620      	mov	r0, r4
 800490e:	4629      	mov	r1, r5
 8004910:	f7fc f902 	bl	8000b18 <__aeabi_dcmpeq>
 8004914:	b108      	cbz	r0, 800491a <__cvt+0xa4>
 8004916:	f8cd 900c 	str.w	r9, [sp, #12]
 800491a:	2230      	movs	r2, #48	; 0x30
 800491c:	9b03      	ldr	r3, [sp, #12]
 800491e:	454b      	cmp	r3, r9
 8004920:	d307      	bcc.n	8004932 <__cvt+0xbc>
 8004922:	9b03      	ldr	r3, [sp, #12]
 8004924:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004926:	1bdb      	subs	r3, r3, r7
 8004928:	4638      	mov	r0, r7
 800492a:	6013      	str	r3, [r2, #0]
 800492c:	b004      	add	sp, #16
 800492e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004932:	1c59      	adds	r1, r3, #1
 8004934:	9103      	str	r1, [sp, #12]
 8004936:	701a      	strb	r2, [r3, #0]
 8004938:	e7f0      	b.n	800491c <__cvt+0xa6>

0800493a <__exponent>:
 800493a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800493c:	4603      	mov	r3, r0
 800493e:	2900      	cmp	r1, #0
 8004940:	bfb8      	it	lt
 8004942:	4249      	neglt	r1, r1
 8004944:	f803 2b02 	strb.w	r2, [r3], #2
 8004948:	bfb4      	ite	lt
 800494a:	222d      	movlt	r2, #45	; 0x2d
 800494c:	222b      	movge	r2, #43	; 0x2b
 800494e:	2909      	cmp	r1, #9
 8004950:	7042      	strb	r2, [r0, #1]
 8004952:	dd2a      	ble.n	80049aa <__exponent+0x70>
 8004954:	f10d 0207 	add.w	r2, sp, #7
 8004958:	4617      	mov	r7, r2
 800495a:	260a      	movs	r6, #10
 800495c:	4694      	mov	ip, r2
 800495e:	fb91 f5f6 	sdiv	r5, r1, r6
 8004962:	fb06 1415 	mls	r4, r6, r5, r1
 8004966:	3430      	adds	r4, #48	; 0x30
 8004968:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800496c:	460c      	mov	r4, r1
 800496e:	2c63      	cmp	r4, #99	; 0x63
 8004970:	f102 32ff 	add.w	r2, r2, #4294967295
 8004974:	4629      	mov	r1, r5
 8004976:	dcf1      	bgt.n	800495c <__exponent+0x22>
 8004978:	3130      	adds	r1, #48	; 0x30
 800497a:	f1ac 0402 	sub.w	r4, ip, #2
 800497e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004982:	1c41      	adds	r1, r0, #1
 8004984:	4622      	mov	r2, r4
 8004986:	42ba      	cmp	r2, r7
 8004988:	d30a      	bcc.n	80049a0 <__exponent+0x66>
 800498a:	f10d 0209 	add.w	r2, sp, #9
 800498e:	eba2 020c 	sub.w	r2, r2, ip
 8004992:	42bc      	cmp	r4, r7
 8004994:	bf88      	it	hi
 8004996:	2200      	movhi	r2, #0
 8004998:	4413      	add	r3, r2
 800499a:	1a18      	subs	r0, r3, r0
 800499c:	b003      	add	sp, #12
 800499e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049a0:	f812 5b01 	ldrb.w	r5, [r2], #1
 80049a4:	f801 5f01 	strb.w	r5, [r1, #1]!
 80049a8:	e7ed      	b.n	8004986 <__exponent+0x4c>
 80049aa:	2330      	movs	r3, #48	; 0x30
 80049ac:	3130      	adds	r1, #48	; 0x30
 80049ae:	7083      	strb	r3, [r0, #2]
 80049b0:	70c1      	strb	r1, [r0, #3]
 80049b2:	1d03      	adds	r3, r0, #4
 80049b4:	e7f1      	b.n	800499a <__exponent+0x60>
	...

080049b8 <_printf_float>:
 80049b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049bc:	ed2d 8b02 	vpush	{d8}
 80049c0:	b08d      	sub	sp, #52	; 0x34
 80049c2:	460c      	mov	r4, r1
 80049c4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80049c8:	4616      	mov	r6, r2
 80049ca:	461f      	mov	r7, r3
 80049cc:	4605      	mov	r5, r0
 80049ce:	f000 ff09 	bl	80057e4 <_localeconv_r>
 80049d2:	f8d0 a000 	ldr.w	sl, [r0]
 80049d6:	4650      	mov	r0, sl
 80049d8:	f7fb fc72 	bl	80002c0 <strlen>
 80049dc:	2300      	movs	r3, #0
 80049de:	930a      	str	r3, [sp, #40]	; 0x28
 80049e0:	6823      	ldr	r3, [r4, #0]
 80049e2:	9305      	str	r3, [sp, #20]
 80049e4:	f8d8 3000 	ldr.w	r3, [r8]
 80049e8:	f894 b018 	ldrb.w	fp, [r4, #24]
 80049ec:	3307      	adds	r3, #7
 80049ee:	f023 0307 	bic.w	r3, r3, #7
 80049f2:	f103 0208 	add.w	r2, r3, #8
 80049f6:	f8c8 2000 	str.w	r2, [r8]
 80049fa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80049fe:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004a02:	9307      	str	r3, [sp, #28]
 8004a04:	f8cd 8018 	str.w	r8, [sp, #24]
 8004a08:	ee08 0a10 	vmov	s16, r0
 8004a0c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8004a10:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a14:	4b9e      	ldr	r3, [pc, #632]	; (8004c90 <_printf_float+0x2d8>)
 8004a16:	f04f 32ff 	mov.w	r2, #4294967295
 8004a1a:	f7fc f8af 	bl	8000b7c <__aeabi_dcmpun>
 8004a1e:	bb88      	cbnz	r0, 8004a84 <_printf_float+0xcc>
 8004a20:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a24:	4b9a      	ldr	r3, [pc, #616]	; (8004c90 <_printf_float+0x2d8>)
 8004a26:	f04f 32ff 	mov.w	r2, #4294967295
 8004a2a:	f7fc f889 	bl	8000b40 <__aeabi_dcmple>
 8004a2e:	bb48      	cbnz	r0, 8004a84 <_printf_float+0xcc>
 8004a30:	2200      	movs	r2, #0
 8004a32:	2300      	movs	r3, #0
 8004a34:	4640      	mov	r0, r8
 8004a36:	4649      	mov	r1, r9
 8004a38:	f7fc f878 	bl	8000b2c <__aeabi_dcmplt>
 8004a3c:	b110      	cbz	r0, 8004a44 <_printf_float+0x8c>
 8004a3e:	232d      	movs	r3, #45	; 0x2d
 8004a40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a44:	4a93      	ldr	r2, [pc, #588]	; (8004c94 <_printf_float+0x2dc>)
 8004a46:	4b94      	ldr	r3, [pc, #592]	; (8004c98 <_printf_float+0x2e0>)
 8004a48:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8004a4c:	bf94      	ite	ls
 8004a4e:	4690      	movls	r8, r2
 8004a50:	4698      	movhi	r8, r3
 8004a52:	2303      	movs	r3, #3
 8004a54:	6123      	str	r3, [r4, #16]
 8004a56:	9b05      	ldr	r3, [sp, #20]
 8004a58:	f023 0304 	bic.w	r3, r3, #4
 8004a5c:	6023      	str	r3, [r4, #0]
 8004a5e:	f04f 0900 	mov.w	r9, #0
 8004a62:	9700      	str	r7, [sp, #0]
 8004a64:	4633      	mov	r3, r6
 8004a66:	aa0b      	add	r2, sp, #44	; 0x2c
 8004a68:	4621      	mov	r1, r4
 8004a6a:	4628      	mov	r0, r5
 8004a6c:	f000 f9da 	bl	8004e24 <_printf_common>
 8004a70:	3001      	adds	r0, #1
 8004a72:	f040 8090 	bne.w	8004b96 <_printf_float+0x1de>
 8004a76:	f04f 30ff 	mov.w	r0, #4294967295
 8004a7a:	b00d      	add	sp, #52	; 0x34
 8004a7c:	ecbd 8b02 	vpop	{d8}
 8004a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a84:	4642      	mov	r2, r8
 8004a86:	464b      	mov	r3, r9
 8004a88:	4640      	mov	r0, r8
 8004a8a:	4649      	mov	r1, r9
 8004a8c:	f7fc f876 	bl	8000b7c <__aeabi_dcmpun>
 8004a90:	b140      	cbz	r0, 8004aa4 <_printf_float+0xec>
 8004a92:	464b      	mov	r3, r9
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	bfbc      	itt	lt
 8004a98:	232d      	movlt	r3, #45	; 0x2d
 8004a9a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004a9e:	4a7f      	ldr	r2, [pc, #508]	; (8004c9c <_printf_float+0x2e4>)
 8004aa0:	4b7f      	ldr	r3, [pc, #508]	; (8004ca0 <_printf_float+0x2e8>)
 8004aa2:	e7d1      	b.n	8004a48 <_printf_float+0x90>
 8004aa4:	6863      	ldr	r3, [r4, #4]
 8004aa6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8004aaa:	9206      	str	r2, [sp, #24]
 8004aac:	1c5a      	adds	r2, r3, #1
 8004aae:	d13f      	bne.n	8004b30 <_printf_float+0x178>
 8004ab0:	2306      	movs	r3, #6
 8004ab2:	6063      	str	r3, [r4, #4]
 8004ab4:	9b05      	ldr	r3, [sp, #20]
 8004ab6:	6861      	ldr	r1, [r4, #4]
 8004ab8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004abc:	2300      	movs	r3, #0
 8004abe:	9303      	str	r3, [sp, #12]
 8004ac0:	ab0a      	add	r3, sp, #40	; 0x28
 8004ac2:	e9cd b301 	strd	fp, r3, [sp, #4]
 8004ac6:	ab09      	add	r3, sp, #36	; 0x24
 8004ac8:	ec49 8b10 	vmov	d0, r8, r9
 8004acc:	9300      	str	r3, [sp, #0]
 8004ace:	6022      	str	r2, [r4, #0]
 8004ad0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8004ad4:	4628      	mov	r0, r5
 8004ad6:	f7ff fece 	bl	8004876 <__cvt>
 8004ada:	9b06      	ldr	r3, [sp, #24]
 8004adc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8004ade:	2b47      	cmp	r3, #71	; 0x47
 8004ae0:	4680      	mov	r8, r0
 8004ae2:	d108      	bne.n	8004af6 <_printf_float+0x13e>
 8004ae4:	1cc8      	adds	r0, r1, #3
 8004ae6:	db02      	blt.n	8004aee <_printf_float+0x136>
 8004ae8:	6863      	ldr	r3, [r4, #4]
 8004aea:	4299      	cmp	r1, r3
 8004aec:	dd41      	ble.n	8004b72 <_printf_float+0x1ba>
 8004aee:	f1ab 0302 	sub.w	r3, fp, #2
 8004af2:	fa5f fb83 	uxtb.w	fp, r3
 8004af6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004afa:	d820      	bhi.n	8004b3e <_printf_float+0x186>
 8004afc:	3901      	subs	r1, #1
 8004afe:	465a      	mov	r2, fp
 8004b00:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8004b04:	9109      	str	r1, [sp, #36]	; 0x24
 8004b06:	f7ff ff18 	bl	800493a <__exponent>
 8004b0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004b0c:	1813      	adds	r3, r2, r0
 8004b0e:	2a01      	cmp	r2, #1
 8004b10:	4681      	mov	r9, r0
 8004b12:	6123      	str	r3, [r4, #16]
 8004b14:	dc02      	bgt.n	8004b1c <_printf_float+0x164>
 8004b16:	6822      	ldr	r2, [r4, #0]
 8004b18:	07d2      	lsls	r2, r2, #31
 8004b1a:	d501      	bpl.n	8004b20 <_printf_float+0x168>
 8004b1c:	3301      	adds	r3, #1
 8004b1e:	6123      	str	r3, [r4, #16]
 8004b20:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d09c      	beq.n	8004a62 <_printf_float+0xaa>
 8004b28:	232d      	movs	r3, #45	; 0x2d
 8004b2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b2e:	e798      	b.n	8004a62 <_printf_float+0xaa>
 8004b30:	9a06      	ldr	r2, [sp, #24]
 8004b32:	2a47      	cmp	r2, #71	; 0x47
 8004b34:	d1be      	bne.n	8004ab4 <_printf_float+0xfc>
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1bc      	bne.n	8004ab4 <_printf_float+0xfc>
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	e7b9      	b.n	8004ab2 <_printf_float+0xfa>
 8004b3e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8004b42:	d118      	bne.n	8004b76 <_printf_float+0x1be>
 8004b44:	2900      	cmp	r1, #0
 8004b46:	6863      	ldr	r3, [r4, #4]
 8004b48:	dd0b      	ble.n	8004b62 <_printf_float+0x1aa>
 8004b4a:	6121      	str	r1, [r4, #16]
 8004b4c:	b913      	cbnz	r3, 8004b54 <_printf_float+0x19c>
 8004b4e:	6822      	ldr	r2, [r4, #0]
 8004b50:	07d0      	lsls	r0, r2, #31
 8004b52:	d502      	bpl.n	8004b5a <_printf_float+0x1a2>
 8004b54:	3301      	adds	r3, #1
 8004b56:	440b      	add	r3, r1
 8004b58:	6123      	str	r3, [r4, #16]
 8004b5a:	65a1      	str	r1, [r4, #88]	; 0x58
 8004b5c:	f04f 0900 	mov.w	r9, #0
 8004b60:	e7de      	b.n	8004b20 <_printf_float+0x168>
 8004b62:	b913      	cbnz	r3, 8004b6a <_printf_float+0x1b2>
 8004b64:	6822      	ldr	r2, [r4, #0]
 8004b66:	07d2      	lsls	r2, r2, #31
 8004b68:	d501      	bpl.n	8004b6e <_printf_float+0x1b6>
 8004b6a:	3302      	adds	r3, #2
 8004b6c:	e7f4      	b.n	8004b58 <_printf_float+0x1a0>
 8004b6e:	2301      	movs	r3, #1
 8004b70:	e7f2      	b.n	8004b58 <_printf_float+0x1a0>
 8004b72:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8004b76:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b78:	4299      	cmp	r1, r3
 8004b7a:	db05      	blt.n	8004b88 <_printf_float+0x1d0>
 8004b7c:	6823      	ldr	r3, [r4, #0]
 8004b7e:	6121      	str	r1, [r4, #16]
 8004b80:	07d8      	lsls	r0, r3, #31
 8004b82:	d5ea      	bpl.n	8004b5a <_printf_float+0x1a2>
 8004b84:	1c4b      	adds	r3, r1, #1
 8004b86:	e7e7      	b.n	8004b58 <_printf_float+0x1a0>
 8004b88:	2900      	cmp	r1, #0
 8004b8a:	bfd4      	ite	le
 8004b8c:	f1c1 0202 	rsble	r2, r1, #2
 8004b90:	2201      	movgt	r2, #1
 8004b92:	4413      	add	r3, r2
 8004b94:	e7e0      	b.n	8004b58 <_printf_float+0x1a0>
 8004b96:	6823      	ldr	r3, [r4, #0]
 8004b98:	055a      	lsls	r2, r3, #21
 8004b9a:	d407      	bmi.n	8004bac <_printf_float+0x1f4>
 8004b9c:	6923      	ldr	r3, [r4, #16]
 8004b9e:	4642      	mov	r2, r8
 8004ba0:	4631      	mov	r1, r6
 8004ba2:	4628      	mov	r0, r5
 8004ba4:	47b8      	blx	r7
 8004ba6:	3001      	adds	r0, #1
 8004ba8:	d12c      	bne.n	8004c04 <_printf_float+0x24c>
 8004baa:	e764      	b.n	8004a76 <_printf_float+0xbe>
 8004bac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8004bb0:	f240 80e0 	bls.w	8004d74 <_printf_float+0x3bc>
 8004bb4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004bb8:	2200      	movs	r2, #0
 8004bba:	2300      	movs	r3, #0
 8004bbc:	f7fb ffac 	bl	8000b18 <__aeabi_dcmpeq>
 8004bc0:	2800      	cmp	r0, #0
 8004bc2:	d034      	beq.n	8004c2e <_printf_float+0x276>
 8004bc4:	4a37      	ldr	r2, [pc, #220]	; (8004ca4 <_printf_float+0x2ec>)
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	4631      	mov	r1, r6
 8004bca:	4628      	mov	r0, r5
 8004bcc:	47b8      	blx	r7
 8004bce:	3001      	adds	r0, #1
 8004bd0:	f43f af51 	beq.w	8004a76 <_printf_float+0xbe>
 8004bd4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	db02      	blt.n	8004be2 <_printf_float+0x22a>
 8004bdc:	6823      	ldr	r3, [r4, #0]
 8004bde:	07d8      	lsls	r0, r3, #31
 8004be0:	d510      	bpl.n	8004c04 <_printf_float+0x24c>
 8004be2:	ee18 3a10 	vmov	r3, s16
 8004be6:	4652      	mov	r2, sl
 8004be8:	4631      	mov	r1, r6
 8004bea:	4628      	mov	r0, r5
 8004bec:	47b8      	blx	r7
 8004bee:	3001      	adds	r0, #1
 8004bf0:	f43f af41 	beq.w	8004a76 <_printf_float+0xbe>
 8004bf4:	f04f 0800 	mov.w	r8, #0
 8004bf8:	f104 091a 	add.w	r9, r4, #26
 8004bfc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bfe:	3b01      	subs	r3, #1
 8004c00:	4543      	cmp	r3, r8
 8004c02:	dc09      	bgt.n	8004c18 <_printf_float+0x260>
 8004c04:	6823      	ldr	r3, [r4, #0]
 8004c06:	079b      	lsls	r3, r3, #30
 8004c08:	f100 8107 	bmi.w	8004e1a <_printf_float+0x462>
 8004c0c:	68e0      	ldr	r0, [r4, #12]
 8004c0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c10:	4298      	cmp	r0, r3
 8004c12:	bfb8      	it	lt
 8004c14:	4618      	movlt	r0, r3
 8004c16:	e730      	b.n	8004a7a <_printf_float+0xc2>
 8004c18:	2301      	movs	r3, #1
 8004c1a:	464a      	mov	r2, r9
 8004c1c:	4631      	mov	r1, r6
 8004c1e:	4628      	mov	r0, r5
 8004c20:	47b8      	blx	r7
 8004c22:	3001      	adds	r0, #1
 8004c24:	f43f af27 	beq.w	8004a76 <_printf_float+0xbe>
 8004c28:	f108 0801 	add.w	r8, r8, #1
 8004c2c:	e7e6      	b.n	8004bfc <_printf_float+0x244>
 8004c2e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	dc39      	bgt.n	8004ca8 <_printf_float+0x2f0>
 8004c34:	4a1b      	ldr	r2, [pc, #108]	; (8004ca4 <_printf_float+0x2ec>)
 8004c36:	2301      	movs	r3, #1
 8004c38:	4631      	mov	r1, r6
 8004c3a:	4628      	mov	r0, r5
 8004c3c:	47b8      	blx	r7
 8004c3e:	3001      	adds	r0, #1
 8004c40:	f43f af19 	beq.w	8004a76 <_printf_float+0xbe>
 8004c44:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004c48:	4313      	orrs	r3, r2
 8004c4a:	d102      	bne.n	8004c52 <_printf_float+0x29a>
 8004c4c:	6823      	ldr	r3, [r4, #0]
 8004c4e:	07d9      	lsls	r1, r3, #31
 8004c50:	d5d8      	bpl.n	8004c04 <_printf_float+0x24c>
 8004c52:	ee18 3a10 	vmov	r3, s16
 8004c56:	4652      	mov	r2, sl
 8004c58:	4631      	mov	r1, r6
 8004c5a:	4628      	mov	r0, r5
 8004c5c:	47b8      	blx	r7
 8004c5e:	3001      	adds	r0, #1
 8004c60:	f43f af09 	beq.w	8004a76 <_printf_float+0xbe>
 8004c64:	f04f 0900 	mov.w	r9, #0
 8004c68:	f104 0a1a 	add.w	sl, r4, #26
 8004c6c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c6e:	425b      	negs	r3, r3
 8004c70:	454b      	cmp	r3, r9
 8004c72:	dc01      	bgt.n	8004c78 <_printf_float+0x2c0>
 8004c74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004c76:	e792      	b.n	8004b9e <_printf_float+0x1e6>
 8004c78:	2301      	movs	r3, #1
 8004c7a:	4652      	mov	r2, sl
 8004c7c:	4631      	mov	r1, r6
 8004c7e:	4628      	mov	r0, r5
 8004c80:	47b8      	blx	r7
 8004c82:	3001      	adds	r0, #1
 8004c84:	f43f aef7 	beq.w	8004a76 <_printf_float+0xbe>
 8004c88:	f109 0901 	add.w	r9, r9, #1
 8004c8c:	e7ee      	b.n	8004c6c <_printf_float+0x2b4>
 8004c8e:	bf00      	nop
 8004c90:	7fefffff 	.word	0x7fefffff
 8004c94:	080090cc 	.word	0x080090cc
 8004c98:	080090d0 	.word	0x080090d0
 8004c9c:	080090d4 	.word	0x080090d4
 8004ca0:	080090d8 	.word	0x080090d8
 8004ca4:	080090dc 	.word	0x080090dc
 8004ca8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004caa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004cac:	429a      	cmp	r2, r3
 8004cae:	bfa8      	it	ge
 8004cb0:	461a      	movge	r2, r3
 8004cb2:	2a00      	cmp	r2, #0
 8004cb4:	4691      	mov	r9, r2
 8004cb6:	dc37      	bgt.n	8004d28 <_printf_float+0x370>
 8004cb8:	f04f 0b00 	mov.w	fp, #0
 8004cbc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cc0:	f104 021a 	add.w	r2, r4, #26
 8004cc4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004cc6:	9305      	str	r3, [sp, #20]
 8004cc8:	eba3 0309 	sub.w	r3, r3, r9
 8004ccc:	455b      	cmp	r3, fp
 8004cce:	dc33      	bgt.n	8004d38 <_printf_float+0x380>
 8004cd0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004cd4:	429a      	cmp	r2, r3
 8004cd6:	db3b      	blt.n	8004d50 <_printf_float+0x398>
 8004cd8:	6823      	ldr	r3, [r4, #0]
 8004cda:	07da      	lsls	r2, r3, #31
 8004cdc:	d438      	bmi.n	8004d50 <_printf_float+0x398>
 8004cde:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8004ce2:	eba2 0903 	sub.w	r9, r2, r3
 8004ce6:	9b05      	ldr	r3, [sp, #20]
 8004ce8:	1ad2      	subs	r2, r2, r3
 8004cea:	4591      	cmp	r9, r2
 8004cec:	bfa8      	it	ge
 8004cee:	4691      	movge	r9, r2
 8004cf0:	f1b9 0f00 	cmp.w	r9, #0
 8004cf4:	dc35      	bgt.n	8004d62 <_printf_float+0x3aa>
 8004cf6:	f04f 0800 	mov.w	r8, #0
 8004cfa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004cfe:	f104 0a1a 	add.w	sl, r4, #26
 8004d02:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004d06:	1a9b      	subs	r3, r3, r2
 8004d08:	eba3 0309 	sub.w	r3, r3, r9
 8004d0c:	4543      	cmp	r3, r8
 8004d0e:	f77f af79 	ble.w	8004c04 <_printf_float+0x24c>
 8004d12:	2301      	movs	r3, #1
 8004d14:	4652      	mov	r2, sl
 8004d16:	4631      	mov	r1, r6
 8004d18:	4628      	mov	r0, r5
 8004d1a:	47b8      	blx	r7
 8004d1c:	3001      	adds	r0, #1
 8004d1e:	f43f aeaa 	beq.w	8004a76 <_printf_float+0xbe>
 8004d22:	f108 0801 	add.w	r8, r8, #1
 8004d26:	e7ec      	b.n	8004d02 <_printf_float+0x34a>
 8004d28:	4613      	mov	r3, r2
 8004d2a:	4631      	mov	r1, r6
 8004d2c:	4642      	mov	r2, r8
 8004d2e:	4628      	mov	r0, r5
 8004d30:	47b8      	blx	r7
 8004d32:	3001      	adds	r0, #1
 8004d34:	d1c0      	bne.n	8004cb8 <_printf_float+0x300>
 8004d36:	e69e      	b.n	8004a76 <_printf_float+0xbe>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	4631      	mov	r1, r6
 8004d3c:	4628      	mov	r0, r5
 8004d3e:	9205      	str	r2, [sp, #20]
 8004d40:	47b8      	blx	r7
 8004d42:	3001      	adds	r0, #1
 8004d44:	f43f ae97 	beq.w	8004a76 <_printf_float+0xbe>
 8004d48:	9a05      	ldr	r2, [sp, #20]
 8004d4a:	f10b 0b01 	add.w	fp, fp, #1
 8004d4e:	e7b9      	b.n	8004cc4 <_printf_float+0x30c>
 8004d50:	ee18 3a10 	vmov	r3, s16
 8004d54:	4652      	mov	r2, sl
 8004d56:	4631      	mov	r1, r6
 8004d58:	4628      	mov	r0, r5
 8004d5a:	47b8      	blx	r7
 8004d5c:	3001      	adds	r0, #1
 8004d5e:	d1be      	bne.n	8004cde <_printf_float+0x326>
 8004d60:	e689      	b.n	8004a76 <_printf_float+0xbe>
 8004d62:	9a05      	ldr	r2, [sp, #20]
 8004d64:	464b      	mov	r3, r9
 8004d66:	4442      	add	r2, r8
 8004d68:	4631      	mov	r1, r6
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	47b8      	blx	r7
 8004d6e:	3001      	adds	r0, #1
 8004d70:	d1c1      	bne.n	8004cf6 <_printf_float+0x33e>
 8004d72:	e680      	b.n	8004a76 <_printf_float+0xbe>
 8004d74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004d76:	2a01      	cmp	r2, #1
 8004d78:	dc01      	bgt.n	8004d7e <_printf_float+0x3c6>
 8004d7a:	07db      	lsls	r3, r3, #31
 8004d7c:	d53a      	bpl.n	8004df4 <_printf_float+0x43c>
 8004d7e:	2301      	movs	r3, #1
 8004d80:	4642      	mov	r2, r8
 8004d82:	4631      	mov	r1, r6
 8004d84:	4628      	mov	r0, r5
 8004d86:	47b8      	blx	r7
 8004d88:	3001      	adds	r0, #1
 8004d8a:	f43f ae74 	beq.w	8004a76 <_printf_float+0xbe>
 8004d8e:	ee18 3a10 	vmov	r3, s16
 8004d92:	4652      	mov	r2, sl
 8004d94:	4631      	mov	r1, r6
 8004d96:	4628      	mov	r0, r5
 8004d98:	47b8      	blx	r7
 8004d9a:	3001      	adds	r0, #1
 8004d9c:	f43f ae6b 	beq.w	8004a76 <_printf_float+0xbe>
 8004da0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004da4:	2200      	movs	r2, #0
 8004da6:	2300      	movs	r3, #0
 8004da8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8004dac:	f7fb feb4 	bl	8000b18 <__aeabi_dcmpeq>
 8004db0:	b9d8      	cbnz	r0, 8004dea <_printf_float+0x432>
 8004db2:	f10a 33ff 	add.w	r3, sl, #4294967295
 8004db6:	f108 0201 	add.w	r2, r8, #1
 8004dba:	4631      	mov	r1, r6
 8004dbc:	4628      	mov	r0, r5
 8004dbe:	47b8      	blx	r7
 8004dc0:	3001      	adds	r0, #1
 8004dc2:	d10e      	bne.n	8004de2 <_printf_float+0x42a>
 8004dc4:	e657      	b.n	8004a76 <_printf_float+0xbe>
 8004dc6:	2301      	movs	r3, #1
 8004dc8:	4652      	mov	r2, sl
 8004dca:	4631      	mov	r1, r6
 8004dcc:	4628      	mov	r0, r5
 8004dce:	47b8      	blx	r7
 8004dd0:	3001      	adds	r0, #1
 8004dd2:	f43f ae50 	beq.w	8004a76 <_printf_float+0xbe>
 8004dd6:	f108 0801 	add.w	r8, r8, #1
 8004dda:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004ddc:	3b01      	subs	r3, #1
 8004dde:	4543      	cmp	r3, r8
 8004de0:	dcf1      	bgt.n	8004dc6 <_printf_float+0x40e>
 8004de2:	464b      	mov	r3, r9
 8004de4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004de8:	e6da      	b.n	8004ba0 <_printf_float+0x1e8>
 8004dea:	f04f 0800 	mov.w	r8, #0
 8004dee:	f104 0a1a 	add.w	sl, r4, #26
 8004df2:	e7f2      	b.n	8004dda <_printf_float+0x422>
 8004df4:	2301      	movs	r3, #1
 8004df6:	4642      	mov	r2, r8
 8004df8:	e7df      	b.n	8004dba <_printf_float+0x402>
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	464a      	mov	r2, r9
 8004dfe:	4631      	mov	r1, r6
 8004e00:	4628      	mov	r0, r5
 8004e02:	47b8      	blx	r7
 8004e04:	3001      	adds	r0, #1
 8004e06:	f43f ae36 	beq.w	8004a76 <_printf_float+0xbe>
 8004e0a:	f108 0801 	add.w	r8, r8, #1
 8004e0e:	68e3      	ldr	r3, [r4, #12]
 8004e10:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004e12:	1a5b      	subs	r3, r3, r1
 8004e14:	4543      	cmp	r3, r8
 8004e16:	dcf0      	bgt.n	8004dfa <_printf_float+0x442>
 8004e18:	e6f8      	b.n	8004c0c <_printf_float+0x254>
 8004e1a:	f04f 0800 	mov.w	r8, #0
 8004e1e:	f104 0919 	add.w	r9, r4, #25
 8004e22:	e7f4      	b.n	8004e0e <_printf_float+0x456>

08004e24 <_printf_common>:
 8004e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e28:	4616      	mov	r6, r2
 8004e2a:	4699      	mov	r9, r3
 8004e2c:	688a      	ldr	r2, [r1, #8]
 8004e2e:	690b      	ldr	r3, [r1, #16]
 8004e30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004e34:	4293      	cmp	r3, r2
 8004e36:	bfb8      	it	lt
 8004e38:	4613      	movlt	r3, r2
 8004e3a:	6033      	str	r3, [r6, #0]
 8004e3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004e40:	4607      	mov	r7, r0
 8004e42:	460c      	mov	r4, r1
 8004e44:	b10a      	cbz	r2, 8004e4a <_printf_common+0x26>
 8004e46:	3301      	adds	r3, #1
 8004e48:	6033      	str	r3, [r6, #0]
 8004e4a:	6823      	ldr	r3, [r4, #0]
 8004e4c:	0699      	lsls	r1, r3, #26
 8004e4e:	bf42      	ittt	mi
 8004e50:	6833      	ldrmi	r3, [r6, #0]
 8004e52:	3302      	addmi	r3, #2
 8004e54:	6033      	strmi	r3, [r6, #0]
 8004e56:	6825      	ldr	r5, [r4, #0]
 8004e58:	f015 0506 	ands.w	r5, r5, #6
 8004e5c:	d106      	bne.n	8004e6c <_printf_common+0x48>
 8004e5e:	f104 0a19 	add.w	sl, r4, #25
 8004e62:	68e3      	ldr	r3, [r4, #12]
 8004e64:	6832      	ldr	r2, [r6, #0]
 8004e66:	1a9b      	subs	r3, r3, r2
 8004e68:	42ab      	cmp	r3, r5
 8004e6a:	dc26      	bgt.n	8004eba <_printf_common+0x96>
 8004e6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004e70:	1e13      	subs	r3, r2, #0
 8004e72:	6822      	ldr	r2, [r4, #0]
 8004e74:	bf18      	it	ne
 8004e76:	2301      	movne	r3, #1
 8004e78:	0692      	lsls	r2, r2, #26
 8004e7a:	d42b      	bmi.n	8004ed4 <_printf_common+0xb0>
 8004e7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004e80:	4649      	mov	r1, r9
 8004e82:	4638      	mov	r0, r7
 8004e84:	47c0      	blx	r8
 8004e86:	3001      	adds	r0, #1
 8004e88:	d01e      	beq.n	8004ec8 <_printf_common+0xa4>
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	6922      	ldr	r2, [r4, #16]
 8004e8e:	f003 0306 	and.w	r3, r3, #6
 8004e92:	2b04      	cmp	r3, #4
 8004e94:	bf02      	ittt	eq
 8004e96:	68e5      	ldreq	r5, [r4, #12]
 8004e98:	6833      	ldreq	r3, [r6, #0]
 8004e9a:	1aed      	subeq	r5, r5, r3
 8004e9c:	68a3      	ldr	r3, [r4, #8]
 8004e9e:	bf0c      	ite	eq
 8004ea0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ea4:	2500      	movne	r5, #0
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	bfc4      	itt	gt
 8004eaa:	1a9b      	subgt	r3, r3, r2
 8004eac:	18ed      	addgt	r5, r5, r3
 8004eae:	2600      	movs	r6, #0
 8004eb0:	341a      	adds	r4, #26
 8004eb2:	42b5      	cmp	r5, r6
 8004eb4:	d11a      	bne.n	8004eec <_printf_common+0xc8>
 8004eb6:	2000      	movs	r0, #0
 8004eb8:	e008      	b.n	8004ecc <_printf_common+0xa8>
 8004eba:	2301      	movs	r3, #1
 8004ebc:	4652      	mov	r2, sl
 8004ebe:	4649      	mov	r1, r9
 8004ec0:	4638      	mov	r0, r7
 8004ec2:	47c0      	blx	r8
 8004ec4:	3001      	adds	r0, #1
 8004ec6:	d103      	bne.n	8004ed0 <_printf_common+0xac>
 8004ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8004ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ed0:	3501      	adds	r5, #1
 8004ed2:	e7c6      	b.n	8004e62 <_printf_common+0x3e>
 8004ed4:	18e1      	adds	r1, r4, r3
 8004ed6:	1c5a      	adds	r2, r3, #1
 8004ed8:	2030      	movs	r0, #48	; 0x30
 8004eda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004ede:	4422      	add	r2, r4
 8004ee0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004ee4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004ee8:	3302      	adds	r3, #2
 8004eea:	e7c7      	b.n	8004e7c <_printf_common+0x58>
 8004eec:	2301      	movs	r3, #1
 8004eee:	4622      	mov	r2, r4
 8004ef0:	4649      	mov	r1, r9
 8004ef2:	4638      	mov	r0, r7
 8004ef4:	47c0      	blx	r8
 8004ef6:	3001      	adds	r0, #1
 8004ef8:	d0e6      	beq.n	8004ec8 <_printf_common+0xa4>
 8004efa:	3601      	adds	r6, #1
 8004efc:	e7d9      	b.n	8004eb2 <_printf_common+0x8e>
	...

08004f00 <_printf_i>:
 8004f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004f04:	7e0f      	ldrb	r7, [r1, #24]
 8004f06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004f08:	2f78      	cmp	r7, #120	; 0x78
 8004f0a:	4691      	mov	r9, r2
 8004f0c:	4680      	mov	r8, r0
 8004f0e:	460c      	mov	r4, r1
 8004f10:	469a      	mov	sl, r3
 8004f12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004f16:	d807      	bhi.n	8004f28 <_printf_i+0x28>
 8004f18:	2f62      	cmp	r7, #98	; 0x62
 8004f1a:	d80a      	bhi.n	8004f32 <_printf_i+0x32>
 8004f1c:	2f00      	cmp	r7, #0
 8004f1e:	f000 80d4 	beq.w	80050ca <_printf_i+0x1ca>
 8004f22:	2f58      	cmp	r7, #88	; 0x58
 8004f24:	f000 80c0 	beq.w	80050a8 <_printf_i+0x1a8>
 8004f28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004f30:	e03a      	b.n	8004fa8 <_printf_i+0xa8>
 8004f32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004f36:	2b15      	cmp	r3, #21
 8004f38:	d8f6      	bhi.n	8004f28 <_printf_i+0x28>
 8004f3a:	a101      	add	r1, pc, #4	; (adr r1, 8004f40 <_printf_i+0x40>)
 8004f3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004f40:	08004f99 	.word	0x08004f99
 8004f44:	08004fad 	.word	0x08004fad
 8004f48:	08004f29 	.word	0x08004f29
 8004f4c:	08004f29 	.word	0x08004f29
 8004f50:	08004f29 	.word	0x08004f29
 8004f54:	08004f29 	.word	0x08004f29
 8004f58:	08004fad 	.word	0x08004fad
 8004f5c:	08004f29 	.word	0x08004f29
 8004f60:	08004f29 	.word	0x08004f29
 8004f64:	08004f29 	.word	0x08004f29
 8004f68:	08004f29 	.word	0x08004f29
 8004f6c:	080050b1 	.word	0x080050b1
 8004f70:	08004fd9 	.word	0x08004fd9
 8004f74:	0800506b 	.word	0x0800506b
 8004f78:	08004f29 	.word	0x08004f29
 8004f7c:	08004f29 	.word	0x08004f29
 8004f80:	080050d3 	.word	0x080050d3
 8004f84:	08004f29 	.word	0x08004f29
 8004f88:	08004fd9 	.word	0x08004fd9
 8004f8c:	08004f29 	.word	0x08004f29
 8004f90:	08004f29 	.word	0x08004f29
 8004f94:	08005073 	.word	0x08005073
 8004f98:	682b      	ldr	r3, [r5, #0]
 8004f9a:	1d1a      	adds	r2, r3, #4
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	602a      	str	r2, [r5, #0]
 8004fa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004fa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e09f      	b.n	80050ec <_printf_i+0x1ec>
 8004fac:	6820      	ldr	r0, [r4, #0]
 8004fae:	682b      	ldr	r3, [r5, #0]
 8004fb0:	0607      	lsls	r7, r0, #24
 8004fb2:	f103 0104 	add.w	r1, r3, #4
 8004fb6:	6029      	str	r1, [r5, #0]
 8004fb8:	d501      	bpl.n	8004fbe <_printf_i+0xbe>
 8004fba:	681e      	ldr	r6, [r3, #0]
 8004fbc:	e003      	b.n	8004fc6 <_printf_i+0xc6>
 8004fbe:	0646      	lsls	r6, r0, #25
 8004fc0:	d5fb      	bpl.n	8004fba <_printf_i+0xba>
 8004fc2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004fc6:	2e00      	cmp	r6, #0
 8004fc8:	da03      	bge.n	8004fd2 <_printf_i+0xd2>
 8004fca:	232d      	movs	r3, #45	; 0x2d
 8004fcc:	4276      	negs	r6, r6
 8004fce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004fd2:	485a      	ldr	r0, [pc, #360]	; (800513c <_printf_i+0x23c>)
 8004fd4:	230a      	movs	r3, #10
 8004fd6:	e012      	b.n	8004ffe <_printf_i+0xfe>
 8004fd8:	682b      	ldr	r3, [r5, #0]
 8004fda:	6820      	ldr	r0, [r4, #0]
 8004fdc:	1d19      	adds	r1, r3, #4
 8004fde:	6029      	str	r1, [r5, #0]
 8004fe0:	0605      	lsls	r5, r0, #24
 8004fe2:	d501      	bpl.n	8004fe8 <_printf_i+0xe8>
 8004fe4:	681e      	ldr	r6, [r3, #0]
 8004fe6:	e002      	b.n	8004fee <_printf_i+0xee>
 8004fe8:	0641      	lsls	r1, r0, #25
 8004fea:	d5fb      	bpl.n	8004fe4 <_printf_i+0xe4>
 8004fec:	881e      	ldrh	r6, [r3, #0]
 8004fee:	4853      	ldr	r0, [pc, #332]	; (800513c <_printf_i+0x23c>)
 8004ff0:	2f6f      	cmp	r7, #111	; 0x6f
 8004ff2:	bf0c      	ite	eq
 8004ff4:	2308      	moveq	r3, #8
 8004ff6:	230a      	movne	r3, #10
 8004ff8:	2100      	movs	r1, #0
 8004ffa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ffe:	6865      	ldr	r5, [r4, #4]
 8005000:	60a5      	str	r5, [r4, #8]
 8005002:	2d00      	cmp	r5, #0
 8005004:	bfa2      	ittt	ge
 8005006:	6821      	ldrge	r1, [r4, #0]
 8005008:	f021 0104 	bicge.w	r1, r1, #4
 800500c:	6021      	strge	r1, [r4, #0]
 800500e:	b90e      	cbnz	r6, 8005014 <_printf_i+0x114>
 8005010:	2d00      	cmp	r5, #0
 8005012:	d04b      	beq.n	80050ac <_printf_i+0x1ac>
 8005014:	4615      	mov	r5, r2
 8005016:	fbb6 f1f3 	udiv	r1, r6, r3
 800501a:	fb03 6711 	mls	r7, r3, r1, r6
 800501e:	5dc7      	ldrb	r7, [r0, r7]
 8005020:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005024:	4637      	mov	r7, r6
 8005026:	42bb      	cmp	r3, r7
 8005028:	460e      	mov	r6, r1
 800502a:	d9f4      	bls.n	8005016 <_printf_i+0x116>
 800502c:	2b08      	cmp	r3, #8
 800502e:	d10b      	bne.n	8005048 <_printf_i+0x148>
 8005030:	6823      	ldr	r3, [r4, #0]
 8005032:	07de      	lsls	r6, r3, #31
 8005034:	d508      	bpl.n	8005048 <_printf_i+0x148>
 8005036:	6923      	ldr	r3, [r4, #16]
 8005038:	6861      	ldr	r1, [r4, #4]
 800503a:	4299      	cmp	r1, r3
 800503c:	bfde      	ittt	le
 800503e:	2330      	movle	r3, #48	; 0x30
 8005040:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005044:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005048:	1b52      	subs	r2, r2, r5
 800504a:	6122      	str	r2, [r4, #16]
 800504c:	f8cd a000 	str.w	sl, [sp]
 8005050:	464b      	mov	r3, r9
 8005052:	aa03      	add	r2, sp, #12
 8005054:	4621      	mov	r1, r4
 8005056:	4640      	mov	r0, r8
 8005058:	f7ff fee4 	bl	8004e24 <_printf_common>
 800505c:	3001      	adds	r0, #1
 800505e:	d14a      	bne.n	80050f6 <_printf_i+0x1f6>
 8005060:	f04f 30ff 	mov.w	r0, #4294967295
 8005064:	b004      	add	sp, #16
 8005066:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800506a:	6823      	ldr	r3, [r4, #0]
 800506c:	f043 0320 	orr.w	r3, r3, #32
 8005070:	6023      	str	r3, [r4, #0]
 8005072:	4833      	ldr	r0, [pc, #204]	; (8005140 <_printf_i+0x240>)
 8005074:	2778      	movs	r7, #120	; 0x78
 8005076:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	6829      	ldr	r1, [r5, #0]
 800507e:	061f      	lsls	r7, r3, #24
 8005080:	f851 6b04 	ldr.w	r6, [r1], #4
 8005084:	d402      	bmi.n	800508c <_printf_i+0x18c>
 8005086:	065f      	lsls	r7, r3, #25
 8005088:	bf48      	it	mi
 800508a:	b2b6      	uxthmi	r6, r6
 800508c:	07df      	lsls	r7, r3, #31
 800508e:	bf48      	it	mi
 8005090:	f043 0320 	orrmi.w	r3, r3, #32
 8005094:	6029      	str	r1, [r5, #0]
 8005096:	bf48      	it	mi
 8005098:	6023      	strmi	r3, [r4, #0]
 800509a:	b91e      	cbnz	r6, 80050a4 <_printf_i+0x1a4>
 800509c:	6823      	ldr	r3, [r4, #0]
 800509e:	f023 0320 	bic.w	r3, r3, #32
 80050a2:	6023      	str	r3, [r4, #0]
 80050a4:	2310      	movs	r3, #16
 80050a6:	e7a7      	b.n	8004ff8 <_printf_i+0xf8>
 80050a8:	4824      	ldr	r0, [pc, #144]	; (800513c <_printf_i+0x23c>)
 80050aa:	e7e4      	b.n	8005076 <_printf_i+0x176>
 80050ac:	4615      	mov	r5, r2
 80050ae:	e7bd      	b.n	800502c <_printf_i+0x12c>
 80050b0:	682b      	ldr	r3, [r5, #0]
 80050b2:	6826      	ldr	r6, [r4, #0]
 80050b4:	6961      	ldr	r1, [r4, #20]
 80050b6:	1d18      	adds	r0, r3, #4
 80050b8:	6028      	str	r0, [r5, #0]
 80050ba:	0635      	lsls	r5, r6, #24
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	d501      	bpl.n	80050c4 <_printf_i+0x1c4>
 80050c0:	6019      	str	r1, [r3, #0]
 80050c2:	e002      	b.n	80050ca <_printf_i+0x1ca>
 80050c4:	0670      	lsls	r0, r6, #25
 80050c6:	d5fb      	bpl.n	80050c0 <_printf_i+0x1c0>
 80050c8:	8019      	strh	r1, [r3, #0]
 80050ca:	2300      	movs	r3, #0
 80050cc:	6123      	str	r3, [r4, #16]
 80050ce:	4615      	mov	r5, r2
 80050d0:	e7bc      	b.n	800504c <_printf_i+0x14c>
 80050d2:	682b      	ldr	r3, [r5, #0]
 80050d4:	1d1a      	adds	r2, r3, #4
 80050d6:	602a      	str	r2, [r5, #0]
 80050d8:	681d      	ldr	r5, [r3, #0]
 80050da:	6862      	ldr	r2, [r4, #4]
 80050dc:	2100      	movs	r1, #0
 80050de:	4628      	mov	r0, r5
 80050e0:	f7fb f89e 	bl	8000220 <memchr>
 80050e4:	b108      	cbz	r0, 80050ea <_printf_i+0x1ea>
 80050e6:	1b40      	subs	r0, r0, r5
 80050e8:	6060      	str	r0, [r4, #4]
 80050ea:	6863      	ldr	r3, [r4, #4]
 80050ec:	6123      	str	r3, [r4, #16]
 80050ee:	2300      	movs	r3, #0
 80050f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80050f4:	e7aa      	b.n	800504c <_printf_i+0x14c>
 80050f6:	6923      	ldr	r3, [r4, #16]
 80050f8:	462a      	mov	r2, r5
 80050fa:	4649      	mov	r1, r9
 80050fc:	4640      	mov	r0, r8
 80050fe:	47d0      	blx	sl
 8005100:	3001      	adds	r0, #1
 8005102:	d0ad      	beq.n	8005060 <_printf_i+0x160>
 8005104:	6823      	ldr	r3, [r4, #0]
 8005106:	079b      	lsls	r3, r3, #30
 8005108:	d413      	bmi.n	8005132 <_printf_i+0x232>
 800510a:	68e0      	ldr	r0, [r4, #12]
 800510c:	9b03      	ldr	r3, [sp, #12]
 800510e:	4298      	cmp	r0, r3
 8005110:	bfb8      	it	lt
 8005112:	4618      	movlt	r0, r3
 8005114:	e7a6      	b.n	8005064 <_printf_i+0x164>
 8005116:	2301      	movs	r3, #1
 8005118:	4632      	mov	r2, r6
 800511a:	4649      	mov	r1, r9
 800511c:	4640      	mov	r0, r8
 800511e:	47d0      	blx	sl
 8005120:	3001      	adds	r0, #1
 8005122:	d09d      	beq.n	8005060 <_printf_i+0x160>
 8005124:	3501      	adds	r5, #1
 8005126:	68e3      	ldr	r3, [r4, #12]
 8005128:	9903      	ldr	r1, [sp, #12]
 800512a:	1a5b      	subs	r3, r3, r1
 800512c:	42ab      	cmp	r3, r5
 800512e:	dcf2      	bgt.n	8005116 <_printf_i+0x216>
 8005130:	e7eb      	b.n	800510a <_printf_i+0x20a>
 8005132:	2500      	movs	r5, #0
 8005134:	f104 0619 	add.w	r6, r4, #25
 8005138:	e7f5      	b.n	8005126 <_printf_i+0x226>
 800513a:	bf00      	nop
 800513c:	080090de 	.word	0x080090de
 8005140:	080090ef 	.word	0x080090ef

08005144 <_scanf_float>:
 8005144:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005148:	b087      	sub	sp, #28
 800514a:	4617      	mov	r7, r2
 800514c:	9303      	str	r3, [sp, #12]
 800514e:	688b      	ldr	r3, [r1, #8]
 8005150:	1e5a      	subs	r2, r3, #1
 8005152:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8005156:	bf83      	ittte	hi
 8005158:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800515c:	195b      	addhi	r3, r3, r5
 800515e:	9302      	strhi	r3, [sp, #8]
 8005160:	2300      	movls	r3, #0
 8005162:	bf86      	itte	hi
 8005164:	f240 135d 	movwhi	r3, #349	; 0x15d
 8005168:	608b      	strhi	r3, [r1, #8]
 800516a:	9302      	strls	r3, [sp, #8]
 800516c:	680b      	ldr	r3, [r1, #0]
 800516e:	468b      	mov	fp, r1
 8005170:	2500      	movs	r5, #0
 8005172:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8005176:	f84b 3b1c 	str.w	r3, [fp], #28
 800517a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800517e:	4680      	mov	r8, r0
 8005180:	460c      	mov	r4, r1
 8005182:	465e      	mov	r6, fp
 8005184:	46aa      	mov	sl, r5
 8005186:	46a9      	mov	r9, r5
 8005188:	9501      	str	r5, [sp, #4]
 800518a:	68a2      	ldr	r2, [r4, #8]
 800518c:	b152      	cbz	r2, 80051a4 <_scanf_float+0x60>
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	781b      	ldrb	r3, [r3, #0]
 8005192:	2b4e      	cmp	r3, #78	; 0x4e
 8005194:	d864      	bhi.n	8005260 <_scanf_float+0x11c>
 8005196:	2b40      	cmp	r3, #64	; 0x40
 8005198:	d83c      	bhi.n	8005214 <_scanf_float+0xd0>
 800519a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800519e:	b2c8      	uxtb	r0, r1
 80051a0:	280e      	cmp	r0, #14
 80051a2:	d93a      	bls.n	800521a <_scanf_float+0xd6>
 80051a4:	f1b9 0f00 	cmp.w	r9, #0
 80051a8:	d003      	beq.n	80051b2 <_scanf_float+0x6e>
 80051aa:	6823      	ldr	r3, [r4, #0]
 80051ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80051b0:	6023      	str	r3, [r4, #0]
 80051b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80051b6:	f1ba 0f01 	cmp.w	sl, #1
 80051ba:	f200 8113 	bhi.w	80053e4 <_scanf_float+0x2a0>
 80051be:	455e      	cmp	r6, fp
 80051c0:	f200 8105 	bhi.w	80053ce <_scanf_float+0x28a>
 80051c4:	2501      	movs	r5, #1
 80051c6:	4628      	mov	r0, r5
 80051c8:	b007      	add	sp, #28
 80051ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051ce:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80051d2:	2a0d      	cmp	r2, #13
 80051d4:	d8e6      	bhi.n	80051a4 <_scanf_float+0x60>
 80051d6:	a101      	add	r1, pc, #4	; (adr r1, 80051dc <_scanf_float+0x98>)
 80051d8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80051dc:	0800531b 	.word	0x0800531b
 80051e0:	080051a5 	.word	0x080051a5
 80051e4:	080051a5 	.word	0x080051a5
 80051e8:	080051a5 	.word	0x080051a5
 80051ec:	0800537b 	.word	0x0800537b
 80051f0:	08005353 	.word	0x08005353
 80051f4:	080051a5 	.word	0x080051a5
 80051f8:	080051a5 	.word	0x080051a5
 80051fc:	08005329 	.word	0x08005329
 8005200:	080051a5 	.word	0x080051a5
 8005204:	080051a5 	.word	0x080051a5
 8005208:	080051a5 	.word	0x080051a5
 800520c:	080051a5 	.word	0x080051a5
 8005210:	080052e1 	.word	0x080052e1
 8005214:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8005218:	e7db      	b.n	80051d2 <_scanf_float+0x8e>
 800521a:	290e      	cmp	r1, #14
 800521c:	d8c2      	bhi.n	80051a4 <_scanf_float+0x60>
 800521e:	a001      	add	r0, pc, #4	; (adr r0, 8005224 <_scanf_float+0xe0>)
 8005220:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005224:	080052d3 	.word	0x080052d3
 8005228:	080051a5 	.word	0x080051a5
 800522c:	080052d3 	.word	0x080052d3
 8005230:	08005367 	.word	0x08005367
 8005234:	080051a5 	.word	0x080051a5
 8005238:	08005281 	.word	0x08005281
 800523c:	080052bd 	.word	0x080052bd
 8005240:	080052bd 	.word	0x080052bd
 8005244:	080052bd 	.word	0x080052bd
 8005248:	080052bd 	.word	0x080052bd
 800524c:	080052bd 	.word	0x080052bd
 8005250:	080052bd 	.word	0x080052bd
 8005254:	080052bd 	.word	0x080052bd
 8005258:	080052bd 	.word	0x080052bd
 800525c:	080052bd 	.word	0x080052bd
 8005260:	2b6e      	cmp	r3, #110	; 0x6e
 8005262:	d809      	bhi.n	8005278 <_scanf_float+0x134>
 8005264:	2b60      	cmp	r3, #96	; 0x60
 8005266:	d8b2      	bhi.n	80051ce <_scanf_float+0x8a>
 8005268:	2b54      	cmp	r3, #84	; 0x54
 800526a:	d077      	beq.n	800535c <_scanf_float+0x218>
 800526c:	2b59      	cmp	r3, #89	; 0x59
 800526e:	d199      	bne.n	80051a4 <_scanf_float+0x60>
 8005270:	2d07      	cmp	r5, #7
 8005272:	d197      	bne.n	80051a4 <_scanf_float+0x60>
 8005274:	2508      	movs	r5, #8
 8005276:	e029      	b.n	80052cc <_scanf_float+0x188>
 8005278:	2b74      	cmp	r3, #116	; 0x74
 800527a:	d06f      	beq.n	800535c <_scanf_float+0x218>
 800527c:	2b79      	cmp	r3, #121	; 0x79
 800527e:	e7f6      	b.n	800526e <_scanf_float+0x12a>
 8005280:	6821      	ldr	r1, [r4, #0]
 8005282:	05c8      	lsls	r0, r1, #23
 8005284:	d51a      	bpl.n	80052bc <_scanf_float+0x178>
 8005286:	9b02      	ldr	r3, [sp, #8]
 8005288:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800528c:	6021      	str	r1, [r4, #0]
 800528e:	f109 0901 	add.w	r9, r9, #1
 8005292:	b11b      	cbz	r3, 800529c <_scanf_float+0x158>
 8005294:	3b01      	subs	r3, #1
 8005296:	3201      	adds	r2, #1
 8005298:	9302      	str	r3, [sp, #8]
 800529a:	60a2      	str	r2, [r4, #8]
 800529c:	68a3      	ldr	r3, [r4, #8]
 800529e:	3b01      	subs	r3, #1
 80052a0:	60a3      	str	r3, [r4, #8]
 80052a2:	6923      	ldr	r3, [r4, #16]
 80052a4:	3301      	adds	r3, #1
 80052a6:	6123      	str	r3, [r4, #16]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	3b01      	subs	r3, #1
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	607b      	str	r3, [r7, #4]
 80052b0:	f340 8084 	ble.w	80053bc <_scanf_float+0x278>
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	3301      	adds	r3, #1
 80052b8:	603b      	str	r3, [r7, #0]
 80052ba:	e766      	b.n	800518a <_scanf_float+0x46>
 80052bc:	eb1a 0f05 	cmn.w	sl, r5
 80052c0:	f47f af70 	bne.w	80051a4 <_scanf_float+0x60>
 80052c4:	6822      	ldr	r2, [r4, #0]
 80052c6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80052ca:	6022      	str	r2, [r4, #0]
 80052cc:	f806 3b01 	strb.w	r3, [r6], #1
 80052d0:	e7e4      	b.n	800529c <_scanf_float+0x158>
 80052d2:	6822      	ldr	r2, [r4, #0]
 80052d4:	0610      	lsls	r0, r2, #24
 80052d6:	f57f af65 	bpl.w	80051a4 <_scanf_float+0x60>
 80052da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80052de:	e7f4      	b.n	80052ca <_scanf_float+0x186>
 80052e0:	f1ba 0f00 	cmp.w	sl, #0
 80052e4:	d10e      	bne.n	8005304 <_scanf_float+0x1c0>
 80052e6:	f1b9 0f00 	cmp.w	r9, #0
 80052ea:	d10e      	bne.n	800530a <_scanf_float+0x1c6>
 80052ec:	6822      	ldr	r2, [r4, #0]
 80052ee:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80052f2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80052f6:	d108      	bne.n	800530a <_scanf_float+0x1c6>
 80052f8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80052fc:	6022      	str	r2, [r4, #0]
 80052fe:	f04f 0a01 	mov.w	sl, #1
 8005302:	e7e3      	b.n	80052cc <_scanf_float+0x188>
 8005304:	f1ba 0f02 	cmp.w	sl, #2
 8005308:	d055      	beq.n	80053b6 <_scanf_float+0x272>
 800530a:	2d01      	cmp	r5, #1
 800530c:	d002      	beq.n	8005314 <_scanf_float+0x1d0>
 800530e:	2d04      	cmp	r5, #4
 8005310:	f47f af48 	bne.w	80051a4 <_scanf_float+0x60>
 8005314:	3501      	adds	r5, #1
 8005316:	b2ed      	uxtb	r5, r5
 8005318:	e7d8      	b.n	80052cc <_scanf_float+0x188>
 800531a:	f1ba 0f01 	cmp.w	sl, #1
 800531e:	f47f af41 	bne.w	80051a4 <_scanf_float+0x60>
 8005322:	f04f 0a02 	mov.w	sl, #2
 8005326:	e7d1      	b.n	80052cc <_scanf_float+0x188>
 8005328:	b97d      	cbnz	r5, 800534a <_scanf_float+0x206>
 800532a:	f1b9 0f00 	cmp.w	r9, #0
 800532e:	f47f af3c 	bne.w	80051aa <_scanf_float+0x66>
 8005332:	6822      	ldr	r2, [r4, #0]
 8005334:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8005338:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800533c:	f47f af39 	bne.w	80051b2 <_scanf_float+0x6e>
 8005340:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8005344:	6022      	str	r2, [r4, #0]
 8005346:	2501      	movs	r5, #1
 8005348:	e7c0      	b.n	80052cc <_scanf_float+0x188>
 800534a:	2d03      	cmp	r5, #3
 800534c:	d0e2      	beq.n	8005314 <_scanf_float+0x1d0>
 800534e:	2d05      	cmp	r5, #5
 8005350:	e7de      	b.n	8005310 <_scanf_float+0x1cc>
 8005352:	2d02      	cmp	r5, #2
 8005354:	f47f af26 	bne.w	80051a4 <_scanf_float+0x60>
 8005358:	2503      	movs	r5, #3
 800535a:	e7b7      	b.n	80052cc <_scanf_float+0x188>
 800535c:	2d06      	cmp	r5, #6
 800535e:	f47f af21 	bne.w	80051a4 <_scanf_float+0x60>
 8005362:	2507      	movs	r5, #7
 8005364:	e7b2      	b.n	80052cc <_scanf_float+0x188>
 8005366:	6822      	ldr	r2, [r4, #0]
 8005368:	0591      	lsls	r1, r2, #22
 800536a:	f57f af1b 	bpl.w	80051a4 <_scanf_float+0x60>
 800536e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8005372:	6022      	str	r2, [r4, #0]
 8005374:	f8cd 9004 	str.w	r9, [sp, #4]
 8005378:	e7a8      	b.n	80052cc <_scanf_float+0x188>
 800537a:	6822      	ldr	r2, [r4, #0]
 800537c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8005380:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8005384:	d006      	beq.n	8005394 <_scanf_float+0x250>
 8005386:	0550      	lsls	r0, r2, #21
 8005388:	f57f af0c 	bpl.w	80051a4 <_scanf_float+0x60>
 800538c:	f1b9 0f00 	cmp.w	r9, #0
 8005390:	f43f af0f 	beq.w	80051b2 <_scanf_float+0x6e>
 8005394:	0591      	lsls	r1, r2, #22
 8005396:	bf58      	it	pl
 8005398:	9901      	ldrpl	r1, [sp, #4]
 800539a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800539e:	bf58      	it	pl
 80053a0:	eba9 0101 	subpl.w	r1, r9, r1
 80053a4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80053a8:	bf58      	it	pl
 80053aa:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80053ae:	6022      	str	r2, [r4, #0]
 80053b0:	f04f 0900 	mov.w	r9, #0
 80053b4:	e78a      	b.n	80052cc <_scanf_float+0x188>
 80053b6:	f04f 0a03 	mov.w	sl, #3
 80053ba:	e787      	b.n	80052cc <_scanf_float+0x188>
 80053bc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80053c0:	4639      	mov	r1, r7
 80053c2:	4640      	mov	r0, r8
 80053c4:	4798      	blx	r3
 80053c6:	2800      	cmp	r0, #0
 80053c8:	f43f aedf 	beq.w	800518a <_scanf_float+0x46>
 80053cc:	e6ea      	b.n	80051a4 <_scanf_float+0x60>
 80053ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80053d2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80053d6:	463a      	mov	r2, r7
 80053d8:	4640      	mov	r0, r8
 80053da:	4798      	blx	r3
 80053dc:	6923      	ldr	r3, [r4, #16]
 80053de:	3b01      	subs	r3, #1
 80053e0:	6123      	str	r3, [r4, #16]
 80053e2:	e6ec      	b.n	80051be <_scanf_float+0x7a>
 80053e4:	1e6b      	subs	r3, r5, #1
 80053e6:	2b06      	cmp	r3, #6
 80053e8:	d825      	bhi.n	8005436 <_scanf_float+0x2f2>
 80053ea:	2d02      	cmp	r5, #2
 80053ec:	d836      	bhi.n	800545c <_scanf_float+0x318>
 80053ee:	455e      	cmp	r6, fp
 80053f0:	f67f aee8 	bls.w	80051c4 <_scanf_float+0x80>
 80053f4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80053f8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80053fc:	463a      	mov	r2, r7
 80053fe:	4640      	mov	r0, r8
 8005400:	4798      	blx	r3
 8005402:	6923      	ldr	r3, [r4, #16]
 8005404:	3b01      	subs	r3, #1
 8005406:	6123      	str	r3, [r4, #16]
 8005408:	e7f1      	b.n	80053ee <_scanf_float+0x2aa>
 800540a:	9802      	ldr	r0, [sp, #8]
 800540c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005410:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8005414:	9002      	str	r0, [sp, #8]
 8005416:	463a      	mov	r2, r7
 8005418:	4640      	mov	r0, r8
 800541a:	4798      	blx	r3
 800541c:	6923      	ldr	r3, [r4, #16]
 800541e:	3b01      	subs	r3, #1
 8005420:	6123      	str	r3, [r4, #16]
 8005422:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005426:	fa5f fa8a 	uxtb.w	sl, sl
 800542a:	f1ba 0f02 	cmp.w	sl, #2
 800542e:	d1ec      	bne.n	800540a <_scanf_float+0x2c6>
 8005430:	3d03      	subs	r5, #3
 8005432:	b2ed      	uxtb	r5, r5
 8005434:	1b76      	subs	r6, r6, r5
 8005436:	6823      	ldr	r3, [r4, #0]
 8005438:	05da      	lsls	r2, r3, #23
 800543a:	d52f      	bpl.n	800549c <_scanf_float+0x358>
 800543c:	055b      	lsls	r3, r3, #21
 800543e:	d510      	bpl.n	8005462 <_scanf_float+0x31e>
 8005440:	455e      	cmp	r6, fp
 8005442:	f67f aebf 	bls.w	80051c4 <_scanf_float+0x80>
 8005446:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800544a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800544e:	463a      	mov	r2, r7
 8005450:	4640      	mov	r0, r8
 8005452:	4798      	blx	r3
 8005454:	6923      	ldr	r3, [r4, #16]
 8005456:	3b01      	subs	r3, #1
 8005458:	6123      	str	r3, [r4, #16]
 800545a:	e7f1      	b.n	8005440 <_scanf_float+0x2fc>
 800545c:	46aa      	mov	sl, r5
 800545e:	9602      	str	r6, [sp, #8]
 8005460:	e7df      	b.n	8005422 <_scanf_float+0x2de>
 8005462:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8005466:	6923      	ldr	r3, [r4, #16]
 8005468:	2965      	cmp	r1, #101	; 0x65
 800546a:	f103 33ff 	add.w	r3, r3, #4294967295
 800546e:	f106 35ff 	add.w	r5, r6, #4294967295
 8005472:	6123      	str	r3, [r4, #16]
 8005474:	d00c      	beq.n	8005490 <_scanf_float+0x34c>
 8005476:	2945      	cmp	r1, #69	; 0x45
 8005478:	d00a      	beq.n	8005490 <_scanf_float+0x34c>
 800547a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800547e:	463a      	mov	r2, r7
 8005480:	4640      	mov	r0, r8
 8005482:	4798      	blx	r3
 8005484:	6923      	ldr	r3, [r4, #16]
 8005486:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800548a:	3b01      	subs	r3, #1
 800548c:	1eb5      	subs	r5, r6, #2
 800548e:	6123      	str	r3, [r4, #16]
 8005490:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8005494:	463a      	mov	r2, r7
 8005496:	4640      	mov	r0, r8
 8005498:	4798      	blx	r3
 800549a:	462e      	mov	r6, r5
 800549c:	6825      	ldr	r5, [r4, #0]
 800549e:	f015 0510 	ands.w	r5, r5, #16
 80054a2:	d158      	bne.n	8005556 <_scanf_float+0x412>
 80054a4:	7035      	strb	r5, [r6, #0]
 80054a6:	6823      	ldr	r3, [r4, #0]
 80054a8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80054ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054b0:	d11c      	bne.n	80054ec <_scanf_float+0x3a8>
 80054b2:	9b01      	ldr	r3, [sp, #4]
 80054b4:	454b      	cmp	r3, r9
 80054b6:	eba3 0209 	sub.w	r2, r3, r9
 80054ba:	d124      	bne.n	8005506 <_scanf_float+0x3c2>
 80054bc:	2200      	movs	r2, #0
 80054be:	4659      	mov	r1, fp
 80054c0:	4640      	mov	r0, r8
 80054c2:	f002 fc41 	bl	8007d48 <_strtod_r>
 80054c6:	9b03      	ldr	r3, [sp, #12]
 80054c8:	6821      	ldr	r1, [r4, #0]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f011 0f02 	tst.w	r1, #2
 80054d0:	ec57 6b10 	vmov	r6, r7, d0
 80054d4:	f103 0204 	add.w	r2, r3, #4
 80054d8:	d020      	beq.n	800551c <_scanf_float+0x3d8>
 80054da:	9903      	ldr	r1, [sp, #12]
 80054dc:	600a      	str	r2, [r1, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	e9c3 6700 	strd	r6, r7, [r3]
 80054e4:	68e3      	ldr	r3, [r4, #12]
 80054e6:	3301      	adds	r3, #1
 80054e8:	60e3      	str	r3, [r4, #12]
 80054ea:	e66c      	b.n	80051c6 <_scanf_float+0x82>
 80054ec:	9b04      	ldr	r3, [sp, #16]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d0e4      	beq.n	80054bc <_scanf_float+0x378>
 80054f2:	9905      	ldr	r1, [sp, #20]
 80054f4:	230a      	movs	r3, #10
 80054f6:	462a      	mov	r2, r5
 80054f8:	3101      	adds	r1, #1
 80054fa:	4640      	mov	r0, r8
 80054fc:	f002 fcac 	bl	8007e58 <_strtol_r>
 8005500:	9b04      	ldr	r3, [sp, #16]
 8005502:	9e05      	ldr	r6, [sp, #20]
 8005504:	1ac2      	subs	r2, r0, r3
 8005506:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800550a:	429e      	cmp	r6, r3
 800550c:	bf28      	it	cs
 800550e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8005512:	4912      	ldr	r1, [pc, #72]	; (800555c <_scanf_float+0x418>)
 8005514:	4630      	mov	r0, r6
 8005516:	f000 f8f9 	bl	800570c <siprintf>
 800551a:	e7cf      	b.n	80054bc <_scanf_float+0x378>
 800551c:	f011 0f04 	tst.w	r1, #4
 8005520:	9903      	ldr	r1, [sp, #12]
 8005522:	600a      	str	r2, [r1, #0]
 8005524:	d1db      	bne.n	80054de <_scanf_float+0x39a>
 8005526:	f8d3 8000 	ldr.w	r8, [r3]
 800552a:	ee10 2a10 	vmov	r2, s0
 800552e:	ee10 0a10 	vmov	r0, s0
 8005532:	463b      	mov	r3, r7
 8005534:	4639      	mov	r1, r7
 8005536:	f7fb fb21 	bl	8000b7c <__aeabi_dcmpun>
 800553a:	b128      	cbz	r0, 8005548 <_scanf_float+0x404>
 800553c:	4808      	ldr	r0, [pc, #32]	; (8005560 <_scanf_float+0x41c>)
 800553e:	f000 f9c9 	bl	80058d4 <nanf>
 8005542:	ed88 0a00 	vstr	s0, [r8]
 8005546:	e7cd      	b.n	80054e4 <_scanf_float+0x3a0>
 8005548:	4630      	mov	r0, r6
 800554a:	4639      	mov	r1, r7
 800554c:	f7fb fb74 	bl	8000c38 <__aeabi_d2f>
 8005550:	f8c8 0000 	str.w	r0, [r8]
 8005554:	e7c6      	b.n	80054e4 <_scanf_float+0x3a0>
 8005556:	2500      	movs	r5, #0
 8005558:	e635      	b.n	80051c6 <_scanf_float+0x82>
 800555a:	bf00      	nop
 800555c:	08009100 	.word	0x08009100
 8005560:	08009495 	.word	0x08009495

08005564 <std>:
 8005564:	2300      	movs	r3, #0
 8005566:	b510      	push	{r4, lr}
 8005568:	4604      	mov	r4, r0
 800556a:	e9c0 3300 	strd	r3, r3, [r0]
 800556e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005572:	6083      	str	r3, [r0, #8]
 8005574:	8181      	strh	r1, [r0, #12]
 8005576:	6643      	str	r3, [r0, #100]	; 0x64
 8005578:	81c2      	strh	r2, [r0, #14]
 800557a:	6183      	str	r3, [r0, #24]
 800557c:	4619      	mov	r1, r3
 800557e:	2208      	movs	r2, #8
 8005580:	305c      	adds	r0, #92	; 0x5c
 8005582:	f000 f926 	bl	80057d2 <memset>
 8005586:	4b0d      	ldr	r3, [pc, #52]	; (80055bc <std+0x58>)
 8005588:	6263      	str	r3, [r4, #36]	; 0x24
 800558a:	4b0d      	ldr	r3, [pc, #52]	; (80055c0 <std+0x5c>)
 800558c:	62a3      	str	r3, [r4, #40]	; 0x28
 800558e:	4b0d      	ldr	r3, [pc, #52]	; (80055c4 <std+0x60>)
 8005590:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005592:	4b0d      	ldr	r3, [pc, #52]	; (80055c8 <std+0x64>)
 8005594:	6323      	str	r3, [r4, #48]	; 0x30
 8005596:	4b0d      	ldr	r3, [pc, #52]	; (80055cc <std+0x68>)
 8005598:	6224      	str	r4, [r4, #32]
 800559a:	429c      	cmp	r4, r3
 800559c:	d006      	beq.n	80055ac <std+0x48>
 800559e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 80055a2:	4294      	cmp	r4, r2
 80055a4:	d002      	beq.n	80055ac <std+0x48>
 80055a6:	33d0      	adds	r3, #208	; 0xd0
 80055a8:	429c      	cmp	r4, r3
 80055aa:	d105      	bne.n	80055b8 <std+0x54>
 80055ac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80055b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80055b4:	f000 b98a 	b.w	80058cc <__retarget_lock_init_recursive>
 80055b8:	bd10      	pop	{r4, pc}
 80055ba:	bf00      	nop
 80055bc:	0800574d 	.word	0x0800574d
 80055c0:	0800576f 	.word	0x0800576f
 80055c4:	080057a7 	.word	0x080057a7
 80055c8:	080057cb 	.word	0x080057cb
 80055cc:	20000310 	.word	0x20000310

080055d0 <stdio_exit_handler>:
 80055d0:	4a02      	ldr	r2, [pc, #8]	; (80055dc <stdio_exit_handler+0xc>)
 80055d2:	4903      	ldr	r1, [pc, #12]	; (80055e0 <stdio_exit_handler+0x10>)
 80055d4:	4803      	ldr	r0, [pc, #12]	; (80055e4 <stdio_exit_handler+0x14>)
 80055d6:	f000 b869 	b.w	80056ac <_fwalk_sglue>
 80055da:	bf00      	nop
 80055dc:	2000000c 	.word	0x2000000c
 80055e0:	080084a1 	.word	0x080084a1
 80055e4:	20000018 	.word	0x20000018

080055e8 <cleanup_stdio>:
 80055e8:	6841      	ldr	r1, [r0, #4]
 80055ea:	4b0c      	ldr	r3, [pc, #48]	; (800561c <cleanup_stdio+0x34>)
 80055ec:	4299      	cmp	r1, r3
 80055ee:	b510      	push	{r4, lr}
 80055f0:	4604      	mov	r4, r0
 80055f2:	d001      	beq.n	80055f8 <cleanup_stdio+0x10>
 80055f4:	f002 ff54 	bl	80084a0 <_fflush_r>
 80055f8:	68a1      	ldr	r1, [r4, #8]
 80055fa:	4b09      	ldr	r3, [pc, #36]	; (8005620 <cleanup_stdio+0x38>)
 80055fc:	4299      	cmp	r1, r3
 80055fe:	d002      	beq.n	8005606 <cleanup_stdio+0x1e>
 8005600:	4620      	mov	r0, r4
 8005602:	f002 ff4d 	bl	80084a0 <_fflush_r>
 8005606:	68e1      	ldr	r1, [r4, #12]
 8005608:	4b06      	ldr	r3, [pc, #24]	; (8005624 <cleanup_stdio+0x3c>)
 800560a:	4299      	cmp	r1, r3
 800560c:	d004      	beq.n	8005618 <cleanup_stdio+0x30>
 800560e:	4620      	mov	r0, r4
 8005610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005614:	f002 bf44 	b.w	80084a0 <_fflush_r>
 8005618:	bd10      	pop	{r4, pc}
 800561a:	bf00      	nop
 800561c:	20000310 	.word	0x20000310
 8005620:	20000378 	.word	0x20000378
 8005624:	200003e0 	.word	0x200003e0

08005628 <global_stdio_init.part.0>:
 8005628:	b510      	push	{r4, lr}
 800562a:	4b0b      	ldr	r3, [pc, #44]	; (8005658 <global_stdio_init.part.0+0x30>)
 800562c:	4c0b      	ldr	r4, [pc, #44]	; (800565c <global_stdio_init.part.0+0x34>)
 800562e:	4a0c      	ldr	r2, [pc, #48]	; (8005660 <global_stdio_init.part.0+0x38>)
 8005630:	601a      	str	r2, [r3, #0]
 8005632:	4620      	mov	r0, r4
 8005634:	2200      	movs	r2, #0
 8005636:	2104      	movs	r1, #4
 8005638:	f7ff ff94 	bl	8005564 <std>
 800563c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005640:	2201      	movs	r2, #1
 8005642:	2109      	movs	r1, #9
 8005644:	f7ff ff8e 	bl	8005564 <std>
 8005648:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800564c:	2202      	movs	r2, #2
 800564e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005652:	2112      	movs	r1, #18
 8005654:	f7ff bf86 	b.w	8005564 <std>
 8005658:	20000448 	.word	0x20000448
 800565c:	20000310 	.word	0x20000310
 8005660:	080055d1 	.word	0x080055d1

08005664 <__sfp_lock_acquire>:
 8005664:	4801      	ldr	r0, [pc, #4]	; (800566c <__sfp_lock_acquire+0x8>)
 8005666:	f000 b932 	b.w	80058ce <__retarget_lock_acquire_recursive>
 800566a:	bf00      	nop
 800566c:	20000451 	.word	0x20000451

08005670 <__sfp_lock_release>:
 8005670:	4801      	ldr	r0, [pc, #4]	; (8005678 <__sfp_lock_release+0x8>)
 8005672:	f000 b92d 	b.w	80058d0 <__retarget_lock_release_recursive>
 8005676:	bf00      	nop
 8005678:	20000451 	.word	0x20000451

0800567c <__sinit>:
 800567c:	b510      	push	{r4, lr}
 800567e:	4604      	mov	r4, r0
 8005680:	f7ff fff0 	bl	8005664 <__sfp_lock_acquire>
 8005684:	6a23      	ldr	r3, [r4, #32]
 8005686:	b11b      	cbz	r3, 8005690 <__sinit+0x14>
 8005688:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800568c:	f7ff bff0 	b.w	8005670 <__sfp_lock_release>
 8005690:	4b04      	ldr	r3, [pc, #16]	; (80056a4 <__sinit+0x28>)
 8005692:	6223      	str	r3, [r4, #32]
 8005694:	4b04      	ldr	r3, [pc, #16]	; (80056a8 <__sinit+0x2c>)
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1f5      	bne.n	8005688 <__sinit+0xc>
 800569c:	f7ff ffc4 	bl	8005628 <global_stdio_init.part.0>
 80056a0:	e7f2      	b.n	8005688 <__sinit+0xc>
 80056a2:	bf00      	nop
 80056a4:	080055e9 	.word	0x080055e9
 80056a8:	20000448 	.word	0x20000448

080056ac <_fwalk_sglue>:
 80056ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056b0:	4607      	mov	r7, r0
 80056b2:	4688      	mov	r8, r1
 80056b4:	4614      	mov	r4, r2
 80056b6:	2600      	movs	r6, #0
 80056b8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80056bc:	f1b9 0901 	subs.w	r9, r9, #1
 80056c0:	d505      	bpl.n	80056ce <_fwalk_sglue+0x22>
 80056c2:	6824      	ldr	r4, [r4, #0]
 80056c4:	2c00      	cmp	r4, #0
 80056c6:	d1f7      	bne.n	80056b8 <_fwalk_sglue+0xc>
 80056c8:	4630      	mov	r0, r6
 80056ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80056ce:	89ab      	ldrh	r3, [r5, #12]
 80056d0:	2b01      	cmp	r3, #1
 80056d2:	d907      	bls.n	80056e4 <_fwalk_sglue+0x38>
 80056d4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80056d8:	3301      	adds	r3, #1
 80056da:	d003      	beq.n	80056e4 <_fwalk_sglue+0x38>
 80056dc:	4629      	mov	r1, r5
 80056de:	4638      	mov	r0, r7
 80056e0:	47c0      	blx	r8
 80056e2:	4306      	orrs	r6, r0
 80056e4:	3568      	adds	r5, #104	; 0x68
 80056e6:	e7e9      	b.n	80056bc <_fwalk_sglue+0x10>

080056e8 <iprintf>:
 80056e8:	b40f      	push	{r0, r1, r2, r3}
 80056ea:	b507      	push	{r0, r1, r2, lr}
 80056ec:	4906      	ldr	r1, [pc, #24]	; (8005708 <iprintf+0x20>)
 80056ee:	ab04      	add	r3, sp, #16
 80056f0:	6808      	ldr	r0, [r1, #0]
 80056f2:	f853 2b04 	ldr.w	r2, [r3], #4
 80056f6:	6881      	ldr	r1, [r0, #8]
 80056f8:	9301      	str	r3, [sp, #4]
 80056fa:	f002 fd31 	bl	8008160 <_vfiprintf_r>
 80056fe:	b003      	add	sp, #12
 8005700:	f85d eb04 	ldr.w	lr, [sp], #4
 8005704:	b004      	add	sp, #16
 8005706:	4770      	bx	lr
 8005708:	20000064 	.word	0x20000064

0800570c <siprintf>:
 800570c:	b40e      	push	{r1, r2, r3}
 800570e:	b500      	push	{lr}
 8005710:	b09c      	sub	sp, #112	; 0x70
 8005712:	ab1d      	add	r3, sp, #116	; 0x74
 8005714:	9002      	str	r0, [sp, #8]
 8005716:	9006      	str	r0, [sp, #24]
 8005718:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800571c:	4809      	ldr	r0, [pc, #36]	; (8005744 <siprintf+0x38>)
 800571e:	9107      	str	r1, [sp, #28]
 8005720:	9104      	str	r1, [sp, #16]
 8005722:	4909      	ldr	r1, [pc, #36]	; (8005748 <siprintf+0x3c>)
 8005724:	f853 2b04 	ldr.w	r2, [r3], #4
 8005728:	9105      	str	r1, [sp, #20]
 800572a:	6800      	ldr	r0, [r0, #0]
 800572c:	9301      	str	r3, [sp, #4]
 800572e:	a902      	add	r1, sp, #8
 8005730:	f002 fbee 	bl	8007f10 <_svfiprintf_r>
 8005734:	9b02      	ldr	r3, [sp, #8]
 8005736:	2200      	movs	r2, #0
 8005738:	701a      	strb	r2, [r3, #0]
 800573a:	b01c      	add	sp, #112	; 0x70
 800573c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005740:	b003      	add	sp, #12
 8005742:	4770      	bx	lr
 8005744:	20000064 	.word	0x20000064
 8005748:	ffff0208 	.word	0xffff0208

0800574c <__sread>:
 800574c:	b510      	push	{r4, lr}
 800574e:	460c      	mov	r4, r1
 8005750:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005754:	f000 f86c 	bl	8005830 <_read_r>
 8005758:	2800      	cmp	r0, #0
 800575a:	bfab      	itete	ge
 800575c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800575e:	89a3      	ldrhlt	r3, [r4, #12]
 8005760:	181b      	addge	r3, r3, r0
 8005762:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005766:	bfac      	ite	ge
 8005768:	6563      	strge	r3, [r4, #84]	; 0x54
 800576a:	81a3      	strhlt	r3, [r4, #12]
 800576c:	bd10      	pop	{r4, pc}

0800576e <__swrite>:
 800576e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005772:	461f      	mov	r7, r3
 8005774:	898b      	ldrh	r3, [r1, #12]
 8005776:	05db      	lsls	r3, r3, #23
 8005778:	4605      	mov	r5, r0
 800577a:	460c      	mov	r4, r1
 800577c:	4616      	mov	r6, r2
 800577e:	d505      	bpl.n	800578c <__swrite+0x1e>
 8005780:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005784:	2302      	movs	r3, #2
 8005786:	2200      	movs	r2, #0
 8005788:	f000 f840 	bl	800580c <_lseek_r>
 800578c:	89a3      	ldrh	r3, [r4, #12]
 800578e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005792:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005796:	81a3      	strh	r3, [r4, #12]
 8005798:	4632      	mov	r2, r6
 800579a:	463b      	mov	r3, r7
 800579c:	4628      	mov	r0, r5
 800579e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057a2:	f000 b857 	b.w	8005854 <_write_r>

080057a6 <__sseek>:
 80057a6:	b510      	push	{r4, lr}
 80057a8:	460c      	mov	r4, r1
 80057aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ae:	f000 f82d 	bl	800580c <_lseek_r>
 80057b2:	1c43      	adds	r3, r0, #1
 80057b4:	89a3      	ldrh	r3, [r4, #12]
 80057b6:	bf15      	itete	ne
 80057b8:	6560      	strne	r0, [r4, #84]	; 0x54
 80057ba:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80057be:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80057c2:	81a3      	strheq	r3, [r4, #12]
 80057c4:	bf18      	it	ne
 80057c6:	81a3      	strhne	r3, [r4, #12]
 80057c8:	bd10      	pop	{r4, pc}

080057ca <__sclose>:
 80057ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057ce:	f000 b80d 	b.w	80057ec <_close_r>

080057d2 <memset>:
 80057d2:	4402      	add	r2, r0
 80057d4:	4603      	mov	r3, r0
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d100      	bne.n	80057dc <memset+0xa>
 80057da:	4770      	bx	lr
 80057dc:	f803 1b01 	strb.w	r1, [r3], #1
 80057e0:	e7f9      	b.n	80057d6 <memset+0x4>
	...

080057e4 <_localeconv_r>:
 80057e4:	4800      	ldr	r0, [pc, #0]	; (80057e8 <_localeconv_r+0x4>)
 80057e6:	4770      	bx	lr
 80057e8:	20000158 	.word	0x20000158

080057ec <_close_r>:
 80057ec:	b538      	push	{r3, r4, r5, lr}
 80057ee:	4d06      	ldr	r5, [pc, #24]	; (8005808 <_close_r+0x1c>)
 80057f0:	2300      	movs	r3, #0
 80057f2:	4604      	mov	r4, r0
 80057f4:	4608      	mov	r0, r1
 80057f6:	602b      	str	r3, [r5, #0]
 80057f8:	f7fb ff07 	bl	800160a <_close>
 80057fc:	1c43      	adds	r3, r0, #1
 80057fe:	d102      	bne.n	8005806 <_close_r+0x1a>
 8005800:	682b      	ldr	r3, [r5, #0]
 8005802:	b103      	cbz	r3, 8005806 <_close_r+0x1a>
 8005804:	6023      	str	r3, [r4, #0]
 8005806:	bd38      	pop	{r3, r4, r5, pc}
 8005808:	2000044c 	.word	0x2000044c

0800580c <_lseek_r>:
 800580c:	b538      	push	{r3, r4, r5, lr}
 800580e:	4d07      	ldr	r5, [pc, #28]	; (800582c <_lseek_r+0x20>)
 8005810:	4604      	mov	r4, r0
 8005812:	4608      	mov	r0, r1
 8005814:	4611      	mov	r1, r2
 8005816:	2200      	movs	r2, #0
 8005818:	602a      	str	r2, [r5, #0]
 800581a:	461a      	mov	r2, r3
 800581c:	f7fb ff1c 	bl	8001658 <_lseek>
 8005820:	1c43      	adds	r3, r0, #1
 8005822:	d102      	bne.n	800582a <_lseek_r+0x1e>
 8005824:	682b      	ldr	r3, [r5, #0]
 8005826:	b103      	cbz	r3, 800582a <_lseek_r+0x1e>
 8005828:	6023      	str	r3, [r4, #0]
 800582a:	bd38      	pop	{r3, r4, r5, pc}
 800582c:	2000044c 	.word	0x2000044c

08005830 <_read_r>:
 8005830:	b538      	push	{r3, r4, r5, lr}
 8005832:	4d07      	ldr	r5, [pc, #28]	; (8005850 <_read_r+0x20>)
 8005834:	4604      	mov	r4, r0
 8005836:	4608      	mov	r0, r1
 8005838:	4611      	mov	r1, r2
 800583a:	2200      	movs	r2, #0
 800583c:	602a      	str	r2, [r5, #0]
 800583e:	461a      	mov	r2, r3
 8005840:	f7fb feaa 	bl	8001598 <_read>
 8005844:	1c43      	adds	r3, r0, #1
 8005846:	d102      	bne.n	800584e <_read_r+0x1e>
 8005848:	682b      	ldr	r3, [r5, #0]
 800584a:	b103      	cbz	r3, 800584e <_read_r+0x1e>
 800584c:	6023      	str	r3, [r4, #0]
 800584e:	bd38      	pop	{r3, r4, r5, pc}
 8005850:	2000044c 	.word	0x2000044c

08005854 <_write_r>:
 8005854:	b538      	push	{r3, r4, r5, lr}
 8005856:	4d07      	ldr	r5, [pc, #28]	; (8005874 <_write_r+0x20>)
 8005858:	4604      	mov	r4, r0
 800585a:	4608      	mov	r0, r1
 800585c:	4611      	mov	r1, r2
 800585e:	2200      	movs	r2, #0
 8005860:	602a      	str	r2, [r5, #0]
 8005862:	461a      	mov	r2, r3
 8005864:	f7fb feb5 	bl	80015d2 <_write>
 8005868:	1c43      	adds	r3, r0, #1
 800586a:	d102      	bne.n	8005872 <_write_r+0x1e>
 800586c:	682b      	ldr	r3, [r5, #0]
 800586e:	b103      	cbz	r3, 8005872 <_write_r+0x1e>
 8005870:	6023      	str	r3, [r4, #0]
 8005872:	bd38      	pop	{r3, r4, r5, pc}
 8005874:	2000044c 	.word	0x2000044c

08005878 <__errno>:
 8005878:	4b01      	ldr	r3, [pc, #4]	; (8005880 <__errno+0x8>)
 800587a:	6818      	ldr	r0, [r3, #0]
 800587c:	4770      	bx	lr
 800587e:	bf00      	nop
 8005880:	20000064 	.word	0x20000064

08005884 <__libc_init_array>:
 8005884:	b570      	push	{r4, r5, r6, lr}
 8005886:	4d0d      	ldr	r5, [pc, #52]	; (80058bc <__libc_init_array+0x38>)
 8005888:	4c0d      	ldr	r4, [pc, #52]	; (80058c0 <__libc_init_array+0x3c>)
 800588a:	1b64      	subs	r4, r4, r5
 800588c:	10a4      	asrs	r4, r4, #2
 800588e:	2600      	movs	r6, #0
 8005890:	42a6      	cmp	r6, r4
 8005892:	d109      	bne.n	80058a8 <__libc_init_array+0x24>
 8005894:	4d0b      	ldr	r5, [pc, #44]	; (80058c4 <__libc_init_array+0x40>)
 8005896:	4c0c      	ldr	r4, [pc, #48]	; (80058c8 <__libc_init_array+0x44>)
 8005898:	f003 fbd6 	bl	8009048 <_init>
 800589c:	1b64      	subs	r4, r4, r5
 800589e:	10a4      	asrs	r4, r4, #2
 80058a0:	2600      	movs	r6, #0
 80058a2:	42a6      	cmp	r6, r4
 80058a4:	d105      	bne.n	80058b2 <__libc_init_array+0x2e>
 80058a6:	bd70      	pop	{r4, r5, r6, pc}
 80058a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80058ac:	4798      	blx	r3
 80058ae:	3601      	adds	r6, #1
 80058b0:	e7ee      	b.n	8005890 <__libc_init_array+0xc>
 80058b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80058b6:	4798      	blx	r3
 80058b8:	3601      	adds	r6, #1
 80058ba:	e7f2      	b.n	80058a2 <__libc_init_array+0x1e>
 80058bc:	08009500 	.word	0x08009500
 80058c0:	08009500 	.word	0x08009500
 80058c4:	08009500 	.word	0x08009500
 80058c8:	08009504 	.word	0x08009504

080058cc <__retarget_lock_init_recursive>:
 80058cc:	4770      	bx	lr

080058ce <__retarget_lock_acquire_recursive>:
 80058ce:	4770      	bx	lr

080058d0 <__retarget_lock_release_recursive>:
 80058d0:	4770      	bx	lr
	...

080058d4 <nanf>:
 80058d4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80058dc <nanf+0x8>
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	7fc00000 	.word	0x7fc00000

080058e0 <quorem>:
 80058e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058e4:	6903      	ldr	r3, [r0, #16]
 80058e6:	690c      	ldr	r4, [r1, #16]
 80058e8:	42a3      	cmp	r3, r4
 80058ea:	4607      	mov	r7, r0
 80058ec:	db7e      	blt.n	80059ec <quorem+0x10c>
 80058ee:	3c01      	subs	r4, #1
 80058f0:	f101 0814 	add.w	r8, r1, #20
 80058f4:	f100 0514 	add.w	r5, r0, #20
 80058f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80058fc:	9301      	str	r3, [sp, #4]
 80058fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005902:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005906:	3301      	adds	r3, #1
 8005908:	429a      	cmp	r2, r3
 800590a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800590e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005912:	fbb2 f6f3 	udiv	r6, r2, r3
 8005916:	d331      	bcc.n	800597c <quorem+0x9c>
 8005918:	f04f 0e00 	mov.w	lr, #0
 800591c:	4640      	mov	r0, r8
 800591e:	46ac      	mov	ip, r5
 8005920:	46f2      	mov	sl, lr
 8005922:	f850 2b04 	ldr.w	r2, [r0], #4
 8005926:	b293      	uxth	r3, r2
 8005928:	fb06 e303 	mla	r3, r6, r3, lr
 800592c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005930:	0c1a      	lsrs	r2, r3, #16
 8005932:	b29b      	uxth	r3, r3
 8005934:	ebaa 0303 	sub.w	r3, sl, r3
 8005938:	f8dc a000 	ldr.w	sl, [ip]
 800593c:	fa13 f38a 	uxtah	r3, r3, sl
 8005940:	fb06 220e 	mla	r2, r6, lr, r2
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	9b00      	ldr	r3, [sp, #0]
 8005948:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800594c:	b292      	uxth	r2, r2
 800594e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8005952:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005956:	f8bd 3000 	ldrh.w	r3, [sp]
 800595a:	4581      	cmp	r9, r0
 800595c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005960:	f84c 3b04 	str.w	r3, [ip], #4
 8005964:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005968:	d2db      	bcs.n	8005922 <quorem+0x42>
 800596a:	f855 300b 	ldr.w	r3, [r5, fp]
 800596e:	b92b      	cbnz	r3, 800597c <quorem+0x9c>
 8005970:	9b01      	ldr	r3, [sp, #4]
 8005972:	3b04      	subs	r3, #4
 8005974:	429d      	cmp	r5, r3
 8005976:	461a      	mov	r2, r3
 8005978:	d32c      	bcc.n	80059d4 <quorem+0xf4>
 800597a:	613c      	str	r4, [r7, #16]
 800597c:	4638      	mov	r0, r7
 800597e:	f001 f9ef 	bl	8006d60 <__mcmp>
 8005982:	2800      	cmp	r0, #0
 8005984:	db22      	blt.n	80059cc <quorem+0xec>
 8005986:	3601      	adds	r6, #1
 8005988:	4629      	mov	r1, r5
 800598a:	2000      	movs	r0, #0
 800598c:	f858 2b04 	ldr.w	r2, [r8], #4
 8005990:	f8d1 c000 	ldr.w	ip, [r1]
 8005994:	b293      	uxth	r3, r2
 8005996:	1ac3      	subs	r3, r0, r3
 8005998:	0c12      	lsrs	r2, r2, #16
 800599a:	fa13 f38c 	uxtah	r3, r3, ip
 800599e:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80059a2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80059ac:	45c1      	cmp	r9, r8
 80059ae:	f841 3b04 	str.w	r3, [r1], #4
 80059b2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80059b6:	d2e9      	bcs.n	800598c <quorem+0xac>
 80059b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80059bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80059c0:	b922      	cbnz	r2, 80059cc <quorem+0xec>
 80059c2:	3b04      	subs	r3, #4
 80059c4:	429d      	cmp	r5, r3
 80059c6:	461a      	mov	r2, r3
 80059c8:	d30a      	bcc.n	80059e0 <quorem+0x100>
 80059ca:	613c      	str	r4, [r7, #16]
 80059cc:	4630      	mov	r0, r6
 80059ce:	b003      	add	sp, #12
 80059d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80059d4:	6812      	ldr	r2, [r2, #0]
 80059d6:	3b04      	subs	r3, #4
 80059d8:	2a00      	cmp	r2, #0
 80059da:	d1ce      	bne.n	800597a <quorem+0x9a>
 80059dc:	3c01      	subs	r4, #1
 80059de:	e7c9      	b.n	8005974 <quorem+0x94>
 80059e0:	6812      	ldr	r2, [r2, #0]
 80059e2:	3b04      	subs	r3, #4
 80059e4:	2a00      	cmp	r2, #0
 80059e6:	d1f0      	bne.n	80059ca <quorem+0xea>
 80059e8:	3c01      	subs	r4, #1
 80059ea:	e7eb      	b.n	80059c4 <quorem+0xe4>
 80059ec:	2000      	movs	r0, #0
 80059ee:	e7ee      	b.n	80059ce <quorem+0xee>

080059f0 <_dtoa_r>:
 80059f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f4:	ed2d 8b04 	vpush	{d8-d9}
 80059f8:	69c5      	ldr	r5, [r0, #28]
 80059fa:	b093      	sub	sp, #76	; 0x4c
 80059fc:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005a00:	ec57 6b10 	vmov	r6, r7, d0
 8005a04:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8005a08:	9107      	str	r1, [sp, #28]
 8005a0a:	4604      	mov	r4, r0
 8005a0c:	920a      	str	r2, [sp, #40]	; 0x28
 8005a0e:	930d      	str	r3, [sp, #52]	; 0x34
 8005a10:	b975      	cbnz	r5, 8005a30 <_dtoa_r+0x40>
 8005a12:	2010      	movs	r0, #16
 8005a14:	f000 fe2a 	bl	800666c <malloc>
 8005a18:	4602      	mov	r2, r0
 8005a1a:	61e0      	str	r0, [r4, #28]
 8005a1c:	b920      	cbnz	r0, 8005a28 <_dtoa_r+0x38>
 8005a1e:	4bae      	ldr	r3, [pc, #696]	; (8005cd8 <_dtoa_r+0x2e8>)
 8005a20:	21ef      	movs	r1, #239	; 0xef
 8005a22:	48ae      	ldr	r0, [pc, #696]	; (8005cdc <_dtoa_r+0x2ec>)
 8005a24:	f002 fe4c 	bl	80086c0 <__assert_func>
 8005a28:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005a2c:	6005      	str	r5, [r0, #0]
 8005a2e:	60c5      	str	r5, [r0, #12]
 8005a30:	69e3      	ldr	r3, [r4, #28]
 8005a32:	6819      	ldr	r1, [r3, #0]
 8005a34:	b151      	cbz	r1, 8005a4c <_dtoa_r+0x5c>
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	604a      	str	r2, [r1, #4]
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	4093      	lsls	r3, r2
 8005a3e:	608b      	str	r3, [r1, #8]
 8005a40:	4620      	mov	r0, r4
 8005a42:	f000 ff07 	bl	8006854 <_Bfree>
 8005a46:	69e3      	ldr	r3, [r4, #28]
 8005a48:	2200      	movs	r2, #0
 8005a4a:	601a      	str	r2, [r3, #0]
 8005a4c:	1e3b      	subs	r3, r7, #0
 8005a4e:	bfbb      	ittet	lt
 8005a50:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005a54:	9303      	strlt	r3, [sp, #12]
 8005a56:	2300      	movge	r3, #0
 8005a58:	2201      	movlt	r2, #1
 8005a5a:	bfac      	ite	ge
 8005a5c:	f8c8 3000 	strge.w	r3, [r8]
 8005a60:	f8c8 2000 	strlt.w	r2, [r8]
 8005a64:	4b9e      	ldr	r3, [pc, #632]	; (8005ce0 <_dtoa_r+0x2f0>)
 8005a66:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005a6a:	ea33 0308 	bics.w	r3, r3, r8
 8005a6e:	d11b      	bne.n	8005aa8 <_dtoa_r+0xb8>
 8005a70:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005a72:	f242 730f 	movw	r3, #9999	; 0x270f
 8005a76:	6013      	str	r3, [r2, #0]
 8005a78:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8005a7c:	4333      	orrs	r3, r6
 8005a7e:	f000 8593 	beq.w	80065a8 <_dtoa_r+0xbb8>
 8005a82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005a84:	b963      	cbnz	r3, 8005aa0 <_dtoa_r+0xb0>
 8005a86:	4b97      	ldr	r3, [pc, #604]	; (8005ce4 <_dtoa_r+0x2f4>)
 8005a88:	e027      	b.n	8005ada <_dtoa_r+0xea>
 8005a8a:	4b97      	ldr	r3, [pc, #604]	; (8005ce8 <_dtoa_r+0x2f8>)
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	3308      	adds	r3, #8
 8005a90:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005a92:	6013      	str	r3, [r2, #0]
 8005a94:	9800      	ldr	r0, [sp, #0]
 8005a96:	b013      	add	sp, #76	; 0x4c
 8005a98:	ecbd 8b04 	vpop	{d8-d9}
 8005a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aa0:	4b90      	ldr	r3, [pc, #576]	; (8005ce4 <_dtoa_r+0x2f4>)
 8005aa2:	9300      	str	r3, [sp, #0]
 8005aa4:	3303      	adds	r3, #3
 8005aa6:	e7f3      	b.n	8005a90 <_dtoa_r+0xa0>
 8005aa8:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005aac:	2200      	movs	r2, #0
 8005aae:	ec51 0b17 	vmov	r0, r1, d7
 8005ab2:	eeb0 8a47 	vmov.f32	s16, s14
 8005ab6:	eef0 8a67 	vmov.f32	s17, s15
 8005aba:	2300      	movs	r3, #0
 8005abc:	f7fb f82c 	bl	8000b18 <__aeabi_dcmpeq>
 8005ac0:	4681      	mov	r9, r0
 8005ac2:	b160      	cbz	r0, 8005ade <_dtoa_r+0xee>
 8005ac4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ac6:	2301      	movs	r3, #1
 8005ac8:	6013      	str	r3, [r2, #0]
 8005aca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 8568 	beq.w	80065a2 <_dtoa_r+0xbb2>
 8005ad2:	4b86      	ldr	r3, [pc, #536]	; (8005cec <_dtoa_r+0x2fc>)
 8005ad4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8005ad6:	6013      	str	r3, [r2, #0]
 8005ad8:	3b01      	subs	r3, #1
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	e7da      	b.n	8005a94 <_dtoa_r+0xa4>
 8005ade:	aa10      	add	r2, sp, #64	; 0x40
 8005ae0:	a911      	add	r1, sp, #68	; 0x44
 8005ae2:	4620      	mov	r0, r4
 8005ae4:	eeb0 0a48 	vmov.f32	s0, s16
 8005ae8:	eef0 0a68 	vmov.f32	s1, s17
 8005aec:	f001 fa4e 	bl	8006f8c <__d2b>
 8005af0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8005af4:	4682      	mov	sl, r0
 8005af6:	2d00      	cmp	r5, #0
 8005af8:	d07f      	beq.n	8005bfa <_dtoa_r+0x20a>
 8005afa:	ee18 3a90 	vmov	r3, s17
 8005afe:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b02:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8005b06:	ec51 0b18 	vmov	r0, r1, d8
 8005b0a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005b0e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8005b12:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005b16:	4619      	mov	r1, r3
 8005b18:	2200      	movs	r2, #0
 8005b1a:	4b75      	ldr	r3, [pc, #468]	; (8005cf0 <_dtoa_r+0x300>)
 8005b1c:	f7fa fbdc 	bl	80002d8 <__aeabi_dsub>
 8005b20:	a367      	add	r3, pc, #412	; (adr r3, 8005cc0 <_dtoa_r+0x2d0>)
 8005b22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b26:	f7fa fd8f 	bl	8000648 <__aeabi_dmul>
 8005b2a:	a367      	add	r3, pc, #412	; (adr r3, 8005cc8 <_dtoa_r+0x2d8>)
 8005b2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b30:	f7fa fbd4 	bl	80002dc <__adddf3>
 8005b34:	4606      	mov	r6, r0
 8005b36:	4628      	mov	r0, r5
 8005b38:	460f      	mov	r7, r1
 8005b3a:	f7fa fd1b 	bl	8000574 <__aeabi_i2d>
 8005b3e:	a364      	add	r3, pc, #400	; (adr r3, 8005cd0 <_dtoa_r+0x2e0>)
 8005b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b44:	f7fa fd80 	bl	8000648 <__aeabi_dmul>
 8005b48:	4602      	mov	r2, r0
 8005b4a:	460b      	mov	r3, r1
 8005b4c:	4630      	mov	r0, r6
 8005b4e:	4639      	mov	r1, r7
 8005b50:	f7fa fbc4 	bl	80002dc <__adddf3>
 8005b54:	4606      	mov	r6, r0
 8005b56:	460f      	mov	r7, r1
 8005b58:	f7fb f826 	bl	8000ba8 <__aeabi_d2iz>
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	4683      	mov	fp, r0
 8005b60:	2300      	movs	r3, #0
 8005b62:	4630      	mov	r0, r6
 8005b64:	4639      	mov	r1, r7
 8005b66:	f7fa ffe1 	bl	8000b2c <__aeabi_dcmplt>
 8005b6a:	b148      	cbz	r0, 8005b80 <_dtoa_r+0x190>
 8005b6c:	4658      	mov	r0, fp
 8005b6e:	f7fa fd01 	bl	8000574 <__aeabi_i2d>
 8005b72:	4632      	mov	r2, r6
 8005b74:	463b      	mov	r3, r7
 8005b76:	f7fa ffcf 	bl	8000b18 <__aeabi_dcmpeq>
 8005b7a:	b908      	cbnz	r0, 8005b80 <_dtoa_r+0x190>
 8005b7c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005b80:	f1bb 0f16 	cmp.w	fp, #22
 8005b84:	d857      	bhi.n	8005c36 <_dtoa_r+0x246>
 8005b86:	4b5b      	ldr	r3, [pc, #364]	; (8005cf4 <_dtoa_r+0x304>)
 8005b88:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b90:	ec51 0b18 	vmov	r0, r1, d8
 8005b94:	f7fa ffca 	bl	8000b2c <__aeabi_dcmplt>
 8005b98:	2800      	cmp	r0, #0
 8005b9a:	d04e      	beq.n	8005c3a <_dtoa_r+0x24a>
 8005b9c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005ba0:	2300      	movs	r3, #0
 8005ba2:	930c      	str	r3, [sp, #48]	; 0x30
 8005ba4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005ba6:	1b5b      	subs	r3, r3, r5
 8005ba8:	1e5a      	subs	r2, r3, #1
 8005baa:	bf45      	ittet	mi
 8005bac:	f1c3 0301 	rsbmi	r3, r3, #1
 8005bb0:	9305      	strmi	r3, [sp, #20]
 8005bb2:	2300      	movpl	r3, #0
 8005bb4:	2300      	movmi	r3, #0
 8005bb6:	9206      	str	r2, [sp, #24]
 8005bb8:	bf54      	ite	pl
 8005bba:	9305      	strpl	r3, [sp, #20]
 8005bbc:	9306      	strmi	r3, [sp, #24]
 8005bbe:	f1bb 0f00 	cmp.w	fp, #0
 8005bc2:	db3c      	blt.n	8005c3e <_dtoa_r+0x24e>
 8005bc4:	9b06      	ldr	r3, [sp, #24]
 8005bc6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8005bca:	445b      	add	r3, fp
 8005bcc:	9306      	str	r3, [sp, #24]
 8005bce:	2300      	movs	r3, #0
 8005bd0:	9308      	str	r3, [sp, #32]
 8005bd2:	9b07      	ldr	r3, [sp, #28]
 8005bd4:	2b09      	cmp	r3, #9
 8005bd6:	d868      	bhi.n	8005caa <_dtoa_r+0x2ba>
 8005bd8:	2b05      	cmp	r3, #5
 8005bda:	bfc4      	itt	gt
 8005bdc:	3b04      	subgt	r3, #4
 8005bde:	9307      	strgt	r3, [sp, #28]
 8005be0:	9b07      	ldr	r3, [sp, #28]
 8005be2:	f1a3 0302 	sub.w	r3, r3, #2
 8005be6:	bfcc      	ite	gt
 8005be8:	2500      	movgt	r5, #0
 8005bea:	2501      	movle	r5, #1
 8005bec:	2b03      	cmp	r3, #3
 8005bee:	f200 8085 	bhi.w	8005cfc <_dtoa_r+0x30c>
 8005bf2:	e8df f003 	tbb	[pc, r3]
 8005bf6:	3b2e      	.short	0x3b2e
 8005bf8:	5839      	.short	0x5839
 8005bfa:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8005bfe:	441d      	add	r5, r3
 8005c00:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8005c04:	2b20      	cmp	r3, #32
 8005c06:	bfc1      	itttt	gt
 8005c08:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005c0c:	fa08 f803 	lslgt.w	r8, r8, r3
 8005c10:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8005c14:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005c18:	bfd6      	itet	le
 8005c1a:	f1c3 0320 	rsble	r3, r3, #32
 8005c1e:	ea48 0003 	orrgt.w	r0, r8, r3
 8005c22:	fa06 f003 	lslle.w	r0, r6, r3
 8005c26:	f7fa fc95 	bl	8000554 <__aeabi_ui2d>
 8005c2a:	2201      	movs	r2, #1
 8005c2c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8005c30:	3d01      	subs	r5, #1
 8005c32:	920e      	str	r2, [sp, #56]	; 0x38
 8005c34:	e76f      	b.n	8005b16 <_dtoa_r+0x126>
 8005c36:	2301      	movs	r3, #1
 8005c38:	e7b3      	b.n	8005ba2 <_dtoa_r+0x1b2>
 8005c3a:	900c      	str	r0, [sp, #48]	; 0x30
 8005c3c:	e7b2      	b.n	8005ba4 <_dtoa_r+0x1b4>
 8005c3e:	9b05      	ldr	r3, [sp, #20]
 8005c40:	eba3 030b 	sub.w	r3, r3, fp
 8005c44:	9305      	str	r3, [sp, #20]
 8005c46:	f1cb 0300 	rsb	r3, fp, #0
 8005c4a:	9308      	str	r3, [sp, #32]
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c50:	e7bf      	b.n	8005bd2 <_dtoa_r+0x1e2>
 8005c52:	2300      	movs	r3, #0
 8005c54:	9309      	str	r3, [sp, #36]	; 0x24
 8005c56:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	dc52      	bgt.n	8005d02 <_dtoa_r+0x312>
 8005c5c:	2301      	movs	r3, #1
 8005c5e:	9301      	str	r3, [sp, #4]
 8005c60:	9304      	str	r3, [sp, #16]
 8005c62:	461a      	mov	r2, r3
 8005c64:	920a      	str	r2, [sp, #40]	; 0x28
 8005c66:	e00b      	b.n	8005c80 <_dtoa_r+0x290>
 8005c68:	2301      	movs	r3, #1
 8005c6a:	e7f3      	b.n	8005c54 <_dtoa_r+0x264>
 8005c6c:	2300      	movs	r3, #0
 8005c6e:	9309      	str	r3, [sp, #36]	; 0x24
 8005c70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c72:	445b      	add	r3, fp
 8005c74:	9301      	str	r3, [sp, #4]
 8005c76:	3301      	adds	r3, #1
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	9304      	str	r3, [sp, #16]
 8005c7c:	bfb8      	it	lt
 8005c7e:	2301      	movlt	r3, #1
 8005c80:	69e0      	ldr	r0, [r4, #28]
 8005c82:	2100      	movs	r1, #0
 8005c84:	2204      	movs	r2, #4
 8005c86:	f102 0614 	add.w	r6, r2, #20
 8005c8a:	429e      	cmp	r6, r3
 8005c8c:	d93d      	bls.n	8005d0a <_dtoa_r+0x31a>
 8005c8e:	6041      	str	r1, [r0, #4]
 8005c90:	4620      	mov	r0, r4
 8005c92:	f000 fd9f 	bl	80067d4 <_Balloc>
 8005c96:	9000      	str	r0, [sp, #0]
 8005c98:	2800      	cmp	r0, #0
 8005c9a:	d139      	bne.n	8005d10 <_dtoa_r+0x320>
 8005c9c:	4b16      	ldr	r3, [pc, #88]	; (8005cf8 <_dtoa_r+0x308>)
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	f240 11af 	movw	r1, #431	; 0x1af
 8005ca4:	e6bd      	b.n	8005a22 <_dtoa_r+0x32>
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e7e1      	b.n	8005c6e <_dtoa_r+0x27e>
 8005caa:	2501      	movs	r5, #1
 8005cac:	2300      	movs	r3, #0
 8005cae:	9307      	str	r3, [sp, #28]
 8005cb0:	9509      	str	r5, [sp, #36]	; 0x24
 8005cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8005cb6:	9301      	str	r3, [sp, #4]
 8005cb8:	9304      	str	r3, [sp, #16]
 8005cba:	2200      	movs	r2, #0
 8005cbc:	2312      	movs	r3, #18
 8005cbe:	e7d1      	b.n	8005c64 <_dtoa_r+0x274>
 8005cc0:	636f4361 	.word	0x636f4361
 8005cc4:	3fd287a7 	.word	0x3fd287a7
 8005cc8:	8b60c8b3 	.word	0x8b60c8b3
 8005ccc:	3fc68a28 	.word	0x3fc68a28
 8005cd0:	509f79fb 	.word	0x509f79fb
 8005cd4:	3fd34413 	.word	0x3fd34413
 8005cd8:	08009112 	.word	0x08009112
 8005cdc:	08009129 	.word	0x08009129
 8005ce0:	7ff00000 	.word	0x7ff00000
 8005ce4:	0800910e 	.word	0x0800910e
 8005ce8:	08009105 	.word	0x08009105
 8005cec:	080090dd 	.word	0x080090dd
 8005cf0:	3ff80000 	.word	0x3ff80000
 8005cf4:	08009218 	.word	0x08009218
 8005cf8:	08009181 	.word	0x08009181
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	9309      	str	r3, [sp, #36]	; 0x24
 8005d00:	e7d7      	b.n	8005cb2 <_dtoa_r+0x2c2>
 8005d02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005d04:	9301      	str	r3, [sp, #4]
 8005d06:	9304      	str	r3, [sp, #16]
 8005d08:	e7ba      	b.n	8005c80 <_dtoa_r+0x290>
 8005d0a:	3101      	adds	r1, #1
 8005d0c:	0052      	lsls	r2, r2, #1
 8005d0e:	e7ba      	b.n	8005c86 <_dtoa_r+0x296>
 8005d10:	69e3      	ldr	r3, [r4, #28]
 8005d12:	9a00      	ldr	r2, [sp, #0]
 8005d14:	601a      	str	r2, [r3, #0]
 8005d16:	9b04      	ldr	r3, [sp, #16]
 8005d18:	2b0e      	cmp	r3, #14
 8005d1a:	f200 80a8 	bhi.w	8005e6e <_dtoa_r+0x47e>
 8005d1e:	2d00      	cmp	r5, #0
 8005d20:	f000 80a5 	beq.w	8005e6e <_dtoa_r+0x47e>
 8005d24:	f1bb 0f00 	cmp.w	fp, #0
 8005d28:	dd38      	ble.n	8005d9c <_dtoa_r+0x3ac>
 8005d2a:	4bc0      	ldr	r3, [pc, #768]	; (800602c <_dtoa_r+0x63c>)
 8005d2c:	f00b 020f 	and.w	r2, fp, #15
 8005d30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005d34:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005d38:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005d3c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8005d40:	d019      	beq.n	8005d76 <_dtoa_r+0x386>
 8005d42:	4bbb      	ldr	r3, [pc, #748]	; (8006030 <_dtoa_r+0x640>)
 8005d44:	ec51 0b18 	vmov	r0, r1, d8
 8005d48:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005d4c:	f7fa fda6 	bl	800089c <__aeabi_ddiv>
 8005d50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d54:	f008 080f 	and.w	r8, r8, #15
 8005d58:	2503      	movs	r5, #3
 8005d5a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8006030 <_dtoa_r+0x640>
 8005d5e:	f1b8 0f00 	cmp.w	r8, #0
 8005d62:	d10a      	bne.n	8005d7a <_dtoa_r+0x38a>
 8005d64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d68:	4632      	mov	r2, r6
 8005d6a:	463b      	mov	r3, r7
 8005d6c:	f7fa fd96 	bl	800089c <__aeabi_ddiv>
 8005d70:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005d74:	e02b      	b.n	8005dce <_dtoa_r+0x3de>
 8005d76:	2502      	movs	r5, #2
 8005d78:	e7ef      	b.n	8005d5a <_dtoa_r+0x36a>
 8005d7a:	f018 0f01 	tst.w	r8, #1
 8005d7e:	d008      	beq.n	8005d92 <_dtoa_r+0x3a2>
 8005d80:	4630      	mov	r0, r6
 8005d82:	4639      	mov	r1, r7
 8005d84:	e9d9 2300 	ldrd	r2, r3, [r9]
 8005d88:	f7fa fc5e 	bl	8000648 <__aeabi_dmul>
 8005d8c:	3501      	adds	r5, #1
 8005d8e:	4606      	mov	r6, r0
 8005d90:	460f      	mov	r7, r1
 8005d92:	ea4f 0868 	mov.w	r8, r8, asr #1
 8005d96:	f109 0908 	add.w	r9, r9, #8
 8005d9a:	e7e0      	b.n	8005d5e <_dtoa_r+0x36e>
 8005d9c:	f000 809f 	beq.w	8005ede <_dtoa_r+0x4ee>
 8005da0:	f1cb 0600 	rsb	r6, fp, #0
 8005da4:	4ba1      	ldr	r3, [pc, #644]	; (800602c <_dtoa_r+0x63c>)
 8005da6:	4fa2      	ldr	r7, [pc, #648]	; (8006030 <_dtoa_r+0x640>)
 8005da8:	f006 020f 	and.w	r2, r6, #15
 8005dac:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db4:	ec51 0b18 	vmov	r0, r1, d8
 8005db8:	f7fa fc46 	bl	8000648 <__aeabi_dmul>
 8005dbc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005dc0:	1136      	asrs	r6, r6, #4
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	2502      	movs	r5, #2
 8005dc6:	2e00      	cmp	r6, #0
 8005dc8:	d17e      	bne.n	8005ec8 <_dtoa_r+0x4d8>
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d1d0      	bne.n	8005d70 <_dtoa_r+0x380>
 8005dce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8005dd0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 8084 	beq.w	8005ee2 <_dtoa_r+0x4f2>
 8005dda:	4b96      	ldr	r3, [pc, #600]	; (8006034 <_dtoa_r+0x644>)
 8005ddc:	2200      	movs	r2, #0
 8005dde:	4640      	mov	r0, r8
 8005de0:	4649      	mov	r1, r9
 8005de2:	f7fa fea3 	bl	8000b2c <__aeabi_dcmplt>
 8005de6:	2800      	cmp	r0, #0
 8005de8:	d07b      	beq.n	8005ee2 <_dtoa_r+0x4f2>
 8005dea:	9b04      	ldr	r3, [sp, #16]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d078      	beq.n	8005ee2 <_dtoa_r+0x4f2>
 8005df0:	9b01      	ldr	r3, [sp, #4]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	dd39      	ble.n	8005e6a <_dtoa_r+0x47a>
 8005df6:	4b90      	ldr	r3, [pc, #576]	; (8006038 <_dtoa_r+0x648>)
 8005df8:	2200      	movs	r2, #0
 8005dfa:	4640      	mov	r0, r8
 8005dfc:	4649      	mov	r1, r9
 8005dfe:	f7fa fc23 	bl	8000648 <__aeabi_dmul>
 8005e02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e06:	9e01      	ldr	r6, [sp, #4]
 8005e08:	f10b 37ff 	add.w	r7, fp, #4294967295
 8005e0c:	3501      	adds	r5, #1
 8005e0e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005e12:	4628      	mov	r0, r5
 8005e14:	f7fa fbae 	bl	8000574 <__aeabi_i2d>
 8005e18:	4642      	mov	r2, r8
 8005e1a:	464b      	mov	r3, r9
 8005e1c:	f7fa fc14 	bl	8000648 <__aeabi_dmul>
 8005e20:	4b86      	ldr	r3, [pc, #536]	; (800603c <_dtoa_r+0x64c>)
 8005e22:	2200      	movs	r2, #0
 8005e24:	f7fa fa5a 	bl	80002dc <__adddf3>
 8005e28:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8005e2c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e30:	9303      	str	r3, [sp, #12]
 8005e32:	2e00      	cmp	r6, #0
 8005e34:	d158      	bne.n	8005ee8 <_dtoa_r+0x4f8>
 8005e36:	4b82      	ldr	r3, [pc, #520]	; (8006040 <_dtoa_r+0x650>)
 8005e38:	2200      	movs	r2, #0
 8005e3a:	4640      	mov	r0, r8
 8005e3c:	4649      	mov	r1, r9
 8005e3e:	f7fa fa4b 	bl	80002d8 <__aeabi_dsub>
 8005e42:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e46:	4680      	mov	r8, r0
 8005e48:	4689      	mov	r9, r1
 8005e4a:	f7fa fe8d 	bl	8000b68 <__aeabi_dcmpgt>
 8005e4e:	2800      	cmp	r0, #0
 8005e50:	f040 8296 	bne.w	8006380 <_dtoa_r+0x990>
 8005e54:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8005e58:	4640      	mov	r0, r8
 8005e5a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e5e:	4649      	mov	r1, r9
 8005e60:	f7fa fe64 	bl	8000b2c <__aeabi_dcmplt>
 8005e64:	2800      	cmp	r0, #0
 8005e66:	f040 8289 	bne.w	800637c <_dtoa_r+0x98c>
 8005e6a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8005e6e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	f2c0 814e 	blt.w	8006112 <_dtoa_r+0x722>
 8005e76:	f1bb 0f0e 	cmp.w	fp, #14
 8005e7a:	f300 814a 	bgt.w	8006112 <_dtoa_r+0x722>
 8005e7e:	4b6b      	ldr	r3, [pc, #428]	; (800602c <_dtoa_r+0x63c>)
 8005e80:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005e84:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	f280 80dc 	bge.w	8006048 <_dtoa_r+0x658>
 8005e90:	9b04      	ldr	r3, [sp, #16]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	f300 80d8 	bgt.w	8006048 <_dtoa_r+0x658>
 8005e98:	f040 826f 	bne.w	800637a <_dtoa_r+0x98a>
 8005e9c:	4b68      	ldr	r3, [pc, #416]	; (8006040 <_dtoa_r+0x650>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	4640      	mov	r0, r8
 8005ea2:	4649      	mov	r1, r9
 8005ea4:	f7fa fbd0 	bl	8000648 <__aeabi_dmul>
 8005ea8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005eac:	f7fa fe52 	bl	8000b54 <__aeabi_dcmpge>
 8005eb0:	9e04      	ldr	r6, [sp, #16]
 8005eb2:	4637      	mov	r7, r6
 8005eb4:	2800      	cmp	r0, #0
 8005eb6:	f040 8245 	bne.w	8006344 <_dtoa_r+0x954>
 8005eba:	9d00      	ldr	r5, [sp, #0]
 8005ebc:	2331      	movs	r3, #49	; 0x31
 8005ebe:	f805 3b01 	strb.w	r3, [r5], #1
 8005ec2:	f10b 0b01 	add.w	fp, fp, #1
 8005ec6:	e241      	b.n	800634c <_dtoa_r+0x95c>
 8005ec8:	07f2      	lsls	r2, r6, #31
 8005eca:	d505      	bpl.n	8005ed8 <_dtoa_r+0x4e8>
 8005ecc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ed0:	f7fa fbba 	bl	8000648 <__aeabi_dmul>
 8005ed4:	3501      	adds	r5, #1
 8005ed6:	2301      	movs	r3, #1
 8005ed8:	1076      	asrs	r6, r6, #1
 8005eda:	3708      	adds	r7, #8
 8005edc:	e773      	b.n	8005dc6 <_dtoa_r+0x3d6>
 8005ede:	2502      	movs	r5, #2
 8005ee0:	e775      	b.n	8005dce <_dtoa_r+0x3de>
 8005ee2:	9e04      	ldr	r6, [sp, #16]
 8005ee4:	465f      	mov	r7, fp
 8005ee6:	e792      	b.n	8005e0e <_dtoa_r+0x41e>
 8005ee8:	9900      	ldr	r1, [sp, #0]
 8005eea:	4b50      	ldr	r3, [pc, #320]	; (800602c <_dtoa_r+0x63c>)
 8005eec:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005ef0:	4431      	add	r1, r6
 8005ef2:	9102      	str	r1, [sp, #8]
 8005ef4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005ef6:	eeb0 9a47 	vmov.f32	s18, s14
 8005efa:	eef0 9a67 	vmov.f32	s19, s15
 8005efe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8005f02:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005f06:	2900      	cmp	r1, #0
 8005f08:	d044      	beq.n	8005f94 <_dtoa_r+0x5a4>
 8005f0a:	494e      	ldr	r1, [pc, #312]	; (8006044 <_dtoa_r+0x654>)
 8005f0c:	2000      	movs	r0, #0
 8005f0e:	f7fa fcc5 	bl	800089c <__aeabi_ddiv>
 8005f12:	ec53 2b19 	vmov	r2, r3, d9
 8005f16:	f7fa f9df 	bl	80002d8 <__aeabi_dsub>
 8005f1a:	9d00      	ldr	r5, [sp, #0]
 8005f1c:	ec41 0b19 	vmov	d9, r0, r1
 8005f20:	4649      	mov	r1, r9
 8005f22:	4640      	mov	r0, r8
 8005f24:	f7fa fe40 	bl	8000ba8 <__aeabi_d2iz>
 8005f28:	4606      	mov	r6, r0
 8005f2a:	f7fa fb23 	bl	8000574 <__aeabi_i2d>
 8005f2e:	4602      	mov	r2, r0
 8005f30:	460b      	mov	r3, r1
 8005f32:	4640      	mov	r0, r8
 8005f34:	4649      	mov	r1, r9
 8005f36:	f7fa f9cf 	bl	80002d8 <__aeabi_dsub>
 8005f3a:	3630      	adds	r6, #48	; 0x30
 8005f3c:	f805 6b01 	strb.w	r6, [r5], #1
 8005f40:	ec53 2b19 	vmov	r2, r3, d9
 8005f44:	4680      	mov	r8, r0
 8005f46:	4689      	mov	r9, r1
 8005f48:	f7fa fdf0 	bl	8000b2c <__aeabi_dcmplt>
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	d164      	bne.n	800601a <_dtoa_r+0x62a>
 8005f50:	4642      	mov	r2, r8
 8005f52:	464b      	mov	r3, r9
 8005f54:	4937      	ldr	r1, [pc, #220]	; (8006034 <_dtoa_r+0x644>)
 8005f56:	2000      	movs	r0, #0
 8005f58:	f7fa f9be 	bl	80002d8 <__aeabi_dsub>
 8005f5c:	ec53 2b19 	vmov	r2, r3, d9
 8005f60:	f7fa fde4 	bl	8000b2c <__aeabi_dcmplt>
 8005f64:	2800      	cmp	r0, #0
 8005f66:	f040 80b6 	bne.w	80060d6 <_dtoa_r+0x6e6>
 8005f6a:	9b02      	ldr	r3, [sp, #8]
 8005f6c:	429d      	cmp	r5, r3
 8005f6e:	f43f af7c 	beq.w	8005e6a <_dtoa_r+0x47a>
 8005f72:	4b31      	ldr	r3, [pc, #196]	; (8006038 <_dtoa_r+0x648>)
 8005f74:	ec51 0b19 	vmov	r0, r1, d9
 8005f78:	2200      	movs	r2, #0
 8005f7a:	f7fa fb65 	bl	8000648 <__aeabi_dmul>
 8005f7e:	4b2e      	ldr	r3, [pc, #184]	; (8006038 <_dtoa_r+0x648>)
 8005f80:	ec41 0b19 	vmov	d9, r0, r1
 8005f84:	2200      	movs	r2, #0
 8005f86:	4640      	mov	r0, r8
 8005f88:	4649      	mov	r1, r9
 8005f8a:	f7fa fb5d 	bl	8000648 <__aeabi_dmul>
 8005f8e:	4680      	mov	r8, r0
 8005f90:	4689      	mov	r9, r1
 8005f92:	e7c5      	b.n	8005f20 <_dtoa_r+0x530>
 8005f94:	ec51 0b17 	vmov	r0, r1, d7
 8005f98:	f7fa fb56 	bl	8000648 <__aeabi_dmul>
 8005f9c:	9b02      	ldr	r3, [sp, #8]
 8005f9e:	9d00      	ldr	r5, [sp, #0]
 8005fa0:	930f      	str	r3, [sp, #60]	; 0x3c
 8005fa2:	ec41 0b19 	vmov	d9, r0, r1
 8005fa6:	4649      	mov	r1, r9
 8005fa8:	4640      	mov	r0, r8
 8005faa:	f7fa fdfd 	bl	8000ba8 <__aeabi_d2iz>
 8005fae:	4606      	mov	r6, r0
 8005fb0:	f7fa fae0 	bl	8000574 <__aeabi_i2d>
 8005fb4:	3630      	adds	r6, #48	; 0x30
 8005fb6:	4602      	mov	r2, r0
 8005fb8:	460b      	mov	r3, r1
 8005fba:	4640      	mov	r0, r8
 8005fbc:	4649      	mov	r1, r9
 8005fbe:	f7fa f98b 	bl	80002d8 <__aeabi_dsub>
 8005fc2:	f805 6b01 	strb.w	r6, [r5], #1
 8005fc6:	9b02      	ldr	r3, [sp, #8]
 8005fc8:	429d      	cmp	r5, r3
 8005fca:	4680      	mov	r8, r0
 8005fcc:	4689      	mov	r9, r1
 8005fce:	f04f 0200 	mov.w	r2, #0
 8005fd2:	d124      	bne.n	800601e <_dtoa_r+0x62e>
 8005fd4:	4b1b      	ldr	r3, [pc, #108]	; (8006044 <_dtoa_r+0x654>)
 8005fd6:	ec51 0b19 	vmov	r0, r1, d9
 8005fda:	f7fa f97f 	bl	80002dc <__adddf3>
 8005fde:	4602      	mov	r2, r0
 8005fe0:	460b      	mov	r3, r1
 8005fe2:	4640      	mov	r0, r8
 8005fe4:	4649      	mov	r1, r9
 8005fe6:	f7fa fdbf 	bl	8000b68 <__aeabi_dcmpgt>
 8005fea:	2800      	cmp	r0, #0
 8005fec:	d173      	bne.n	80060d6 <_dtoa_r+0x6e6>
 8005fee:	ec53 2b19 	vmov	r2, r3, d9
 8005ff2:	4914      	ldr	r1, [pc, #80]	; (8006044 <_dtoa_r+0x654>)
 8005ff4:	2000      	movs	r0, #0
 8005ff6:	f7fa f96f 	bl	80002d8 <__aeabi_dsub>
 8005ffa:	4602      	mov	r2, r0
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	4640      	mov	r0, r8
 8006000:	4649      	mov	r1, r9
 8006002:	f7fa fd93 	bl	8000b2c <__aeabi_dcmplt>
 8006006:	2800      	cmp	r0, #0
 8006008:	f43f af2f 	beq.w	8005e6a <_dtoa_r+0x47a>
 800600c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800600e:	1e6b      	subs	r3, r5, #1
 8006010:	930f      	str	r3, [sp, #60]	; 0x3c
 8006012:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8006016:	2b30      	cmp	r3, #48	; 0x30
 8006018:	d0f8      	beq.n	800600c <_dtoa_r+0x61c>
 800601a:	46bb      	mov	fp, r7
 800601c:	e04a      	b.n	80060b4 <_dtoa_r+0x6c4>
 800601e:	4b06      	ldr	r3, [pc, #24]	; (8006038 <_dtoa_r+0x648>)
 8006020:	f7fa fb12 	bl	8000648 <__aeabi_dmul>
 8006024:	4680      	mov	r8, r0
 8006026:	4689      	mov	r9, r1
 8006028:	e7bd      	b.n	8005fa6 <_dtoa_r+0x5b6>
 800602a:	bf00      	nop
 800602c:	08009218 	.word	0x08009218
 8006030:	080091f0 	.word	0x080091f0
 8006034:	3ff00000 	.word	0x3ff00000
 8006038:	40240000 	.word	0x40240000
 800603c:	401c0000 	.word	0x401c0000
 8006040:	40140000 	.word	0x40140000
 8006044:	3fe00000 	.word	0x3fe00000
 8006048:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800604c:	9d00      	ldr	r5, [sp, #0]
 800604e:	4642      	mov	r2, r8
 8006050:	464b      	mov	r3, r9
 8006052:	4630      	mov	r0, r6
 8006054:	4639      	mov	r1, r7
 8006056:	f7fa fc21 	bl	800089c <__aeabi_ddiv>
 800605a:	f7fa fda5 	bl	8000ba8 <__aeabi_d2iz>
 800605e:	9001      	str	r0, [sp, #4]
 8006060:	f7fa fa88 	bl	8000574 <__aeabi_i2d>
 8006064:	4642      	mov	r2, r8
 8006066:	464b      	mov	r3, r9
 8006068:	f7fa faee 	bl	8000648 <__aeabi_dmul>
 800606c:	4602      	mov	r2, r0
 800606e:	460b      	mov	r3, r1
 8006070:	4630      	mov	r0, r6
 8006072:	4639      	mov	r1, r7
 8006074:	f7fa f930 	bl	80002d8 <__aeabi_dsub>
 8006078:	9e01      	ldr	r6, [sp, #4]
 800607a:	9f04      	ldr	r7, [sp, #16]
 800607c:	3630      	adds	r6, #48	; 0x30
 800607e:	f805 6b01 	strb.w	r6, [r5], #1
 8006082:	9e00      	ldr	r6, [sp, #0]
 8006084:	1bae      	subs	r6, r5, r6
 8006086:	42b7      	cmp	r7, r6
 8006088:	4602      	mov	r2, r0
 800608a:	460b      	mov	r3, r1
 800608c:	d134      	bne.n	80060f8 <_dtoa_r+0x708>
 800608e:	f7fa f925 	bl	80002dc <__adddf3>
 8006092:	4642      	mov	r2, r8
 8006094:	464b      	mov	r3, r9
 8006096:	4606      	mov	r6, r0
 8006098:	460f      	mov	r7, r1
 800609a:	f7fa fd65 	bl	8000b68 <__aeabi_dcmpgt>
 800609e:	b9c8      	cbnz	r0, 80060d4 <_dtoa_r+0x6e4>
 80060a0:	4642      	mov	r2, r8
 80060a2:	464b      	mov	r3, r9
 80060a4:	4630      	mov	r0, r6
 80060a6:	4639      	mov	r1, r7
 80060a8:	f7fa fd36 	bl	8000b18 <__aeabi_dcmpeq>
 80060ac:	b110      	cbz	r0, 80060b4 <_dtoa_r+0x6c4>
 80060ae:	9b01      	ldr	r3, [sp, #4]
 80060b0:	07db      	lsls	r3, r3, #31
 80060b2:	d40f      	bmi.n	80060d4 <_dtoa_r+0x6e4>
 80060b4:	4651      	mov	r1, sl
 80060b6:	4620      	mov	r0, r4
 80060b8:	f000 fbcc 	bl	8006854 <_Bfree>
 80060bc:	2300      	movs	r3, #0
 80060be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80060c0:	702b      	strb	r3, [r5, #0]
 80060c2:	f10b 0301 	add.w	r3, fp, #1
 80060c6:	6013      	str	r3, [r2, #0]
 80060c8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	f43f ace2 	beq.w	8005a94 <_dtoa_r+0xa4>
 80060d0:	601d      	str	r5, [r3, #0]
 80060d2:	e4df      	b.n	8005a94 <_dtoa_r+0xa4>
 80060d4:	465f      	mov	r7, fp
 80060d6:	462b      	mov	r3, r5
 80060d8:	461d      	mov	r5, r3
 80060da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80060de:	2a39      	cmp	r2, #57	; 0x39
 80060e0:	d106      	bne.n	80060f0 <_dtoa_r+0x700>
 80060e2:	9a00      	ldr	r2, [sp, #0]
 80060e4:	429a      	cmp	r2, r3
 80060e6:	d1f7      	bne.n	80060d8 <_dtoa_r+0x6e8>
 80060e8:	9900      	ldr	r1, [sp, #0]
 80060ea:	2230      	movs	r2, #48	; 0x30
 80060ec:	3701      	adds	r7, #1
 80060ee:	700a      	strb	r2, [r1, #0]
 80060f0:	781a      	ldrb	r2, [r3, #0]
 80060f2:	3201      	adds	r2, #1
 80060f4:	701a      	strb	r2, [r3, #0]
 80060f6:	e790      	b.n	800601a <_dtoa_r+0x62a>
 80060f8:	4ba3      	ldr	r3, [pc, #652]	; (8006388 <_dtoa_r+0x998>)
 80060fa:	2200      	movs	r2, #0
 80060fc:	f7fa faa4 	bl	8000648 <__aeabi_dmul>
 8006100:	2200      	movs	r2, #0
 8006102:	2300      	movs	r3, #0
 8006104:	4606      	mov	r6, r0
 8006106:	460f      	mov	r7, r1
 8006108:	f7fa fd06 	bl	8000b18 <__aeabi_dcmpeq>
 800610c:	2800      	cmp	r0, #0
 800610e:	d09e      	beq.n	800604e <_dtoa_r+0x65e>
 8006110:	e7d0      	b.n	80060b4 <_dtoa_r+0x6c4>
 8006112:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006114:	2a00      	cmp	r2, #0
 8006116:	f000 80ca 	beq.w	80062ae <_dtoa_r+0x8be>
 800611a:	9a07      	ldr	r2, [sp, #28]
 800611c:	2a01      	cmp	r2, #1
 800611e:	f300 80ad 	bgt.w	800627c <_dtoa_r+0x88c>
 8006122:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006124:	2a00      	cmp	r2, #0
 8006126:	f000 80a5 	beq.w	8006274 <_dtoa_r+0x884>
 800612a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800612e:	9e08      	ldr	r6, [sp, #32]
 8006130:	9d05      	ldr	r5, [sp, #20]
 8006132:	9a05      	ldr	r2, [sp, #20]
 8006134:	441a      	add	r2, r3
 8006136:	9205      	str	r2, [sp, #20]
 8006138:	9a06      	ldr	r2, [sp, #24]
 800613a:	2101      	movs	r1, #1
 800613c:	441a      	add	r2, r3
 800613e:	4620      	mov	r0, r4
 8006140:	9206      	str	r2, [sp, #24]
 8006142:	f000 fc87 	bl	8006a54 <__i2b>
 8006146:	4607      	mov	r7, r0
 8006148:	b165      	cbz	r5, 8006164 <_dtoa_r+0x774>
 800614a:	9b06      	ldr	r3, [sp, #24]
 800614c:	2b00      	cmp	r3, #0
 800614e:	dd09      	ble.n	8006164 <_dtoa_r+0x774>
 8006150:	42ab      	cmp	r3, r5
 8006152:	9a05      	ldr	r2, [sp, #20]
 8006154:	bfa8      	it	ge
 8006156:	462b      	movge	r3, r5
 8006158:	1ad2      	subs	r2, r2, r3
 800615a:	9205      	str	r2, [sp, #20]
 800615c:	9a06      	ldr	r2, [sp, #24]
 800615e:	1aed      	subs	r5, r5, r3
 8006160:	1ad3      	subs	r3, r2, r3
 8006162:	9306      	str	r3, [sp, #24]
 8006164:	9b08      	ldr	r3, [sp, #32]
 8006166:	b1f3      	cbz	r3, 80061a6 <_dtoa_r+0x7b6>
 8006168:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800616a:	2b00      	cmp	r3, #0
 800616c:	f000 80a3 	beq.w	80062b6 <_dtoa_r+0x8c6>
 8006170:	2e00      	cmp	r6, #0
 8006172:	dd10      	ble.n	8006196 <_dtoa_r+0x7a6>
 8006174:	4639      	mov	r1, r7
 8006176:	4632      	mov	r2, r6
 8006178:	4620      	mov	r0, r4
 800617a:	f000 fd2b 	bl	8006bd4 <__pow5mult>
 800617e:	4652      	mov	r2, sl
 8006180:	4601      	mov	r1, r0
 8006182:	4607      	mov	r7, r0
 8006184:	4620      	mov	r0, r4
 8006186:	f000 fc7b 	bl	8006a80 <__multiply>
 800618a:	4651      	mov	r1, sl
 800618c:	4680      	mov	r8, r0
 800618e:	4620      	mov	r0, r4
 8006190:	f000 fb60 	bl	8006854 <_Bfree>
 8006194:	46c2      	mov	sl, r8
 8006196:	9b08      	ldr	r3, [sp, #32]
 8006198:	1b9a      	subs	r2, r3, r6
 800619a:	d004      	beq.n	80061a6 <_dtoa_r+0x7b6>
 800619c:	4651      	mov	r1, sl
 800619e:	4620      	mov	r0, r4
 80061a0:	f000 fd18 	bl	8006bd4 <__pow5mult>
 80061a4:	4682      	mov	sl, r0
 80061a6:	2101      	movs	r1, #1
 80061a8:	4620      	mov	r0, r4
 80061aa:	f000 fc53 	bl	8006a54 <__i2b>
 80061ae:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	4606      	mov	r6, r0
 80061b4:	f340 8081 	ble.w	80062ba <_dtoa_r+0x8ca>
 80061b8:	461a      	mov	r2, r3
 80061ba:	4601      	mov	r1, r0
 80061bc:	4620      	mov	r0, r4
 80061be:	f000 fd09 	bl	8006bd4 <__pow5mult>
 80061c2:	9b07      	ldr	r3, [sp, #28]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	4606      	mov	r6, r0
 80061c8:	dd7a      	ble.n	80062c0 <_dtoa_r+0x8d0>
 80061ca:	f04f 0800 	mov.w	r8, #0
 80061ce:	6933      	ldr	r3, [r6, #16]
 80061d0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 80061d4:	6918      	ldr	r0, [r3, #16]
 80061d6:	f000 fbef 	bl	80069b8 <__hi0bits>
 80061da:	f1c0 0020 	rsb	r0, r0, #32
 80061de:	9b06      	ldr	r3, [sp, #24]
 80061e0:	4418      	add	r0, r3
 80061e2:	f010 001f 	ands.w	r0, r0, #31
 80061e6:	f000 8094 	beq.w	8006312 <_dtoa_r+0x922>
 80061ea:	f1c0 0320 	rsb	r3, r0, #32
 80061ee:	2b04      	cmp	r3, #4
 80061f0:	f340 8085 	ble.w	80062fe <_dtoa_r+0x90e>
 80061f4:	9b05      	ldr	r3, [sp, #20]
 80061f6:	f1c0 001c 	rsb	r0, r0, #28
 80061fa:	4403      	add	r3, r0
 80061fc:	9305      	str	r3, [sp, #20]
 80061fe:	9b06      	ldr	r3, [sp, #24]
 8006200:	4403      	add	r3, r0
 8006202:	4405      	add	r5, r0
 8006204:	9306      	str	r3, [sp, #24]
 8006206:	9b05      	ldr	r3, [sp, #20]
 8006208:	2b00      	cmp	r3, #0
 800620a:	dd05      	ble.n	8006218 <_dtoa_r+0x828>
 800620c:	4651      	mov	r1, sl
 800620e:	461a      	mov	r2, r3
 8006210:	4620      	mov	r0, r4
 8006212:	f000 fd39 	bl	8006c88 <__lshift>
 8006216:	4682      	mov	sl, r0
 8006218:	9b06      	ldr	r3, [sp, #24]
 800621a:	2b00      	cmp	r3, #0
 800621c:	dd05      	ble.n	800622a <_dtoa_r+0x83a>
 800621e:	4631      	mov	r1, r6
 8006220:	461a      	mov	r2, r3
 8006222:	4620      	mov	r0, r4
 8006224:	f000 fd30 	bl	8006c88 <__lshift>
 8006228:	4606      	mov	r6, r0
 800622a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800622c:	2b00      	cmp	r3, #0
 800622e:	d072      	beq.n	8006316 <_dtoa_r+0x926>
 8006230:	4631      	mov	r1, r6
 8006232:	4650      	mov	r0, sl
 8006234:	f000 fd94 	bl	8006d60 <__mcmp>
 8006238:	2800      	cmp	r0, #0
 800623a:	da6c      	bge.n	8006316 <_dtoa_r+0x926>
 800623c:	2300      	movs	r3, #0
 800623e:	4651      	mov	r1, sl
 8006240:	220a      	movs	r2, #10
 8006242:	4620      	mov	r0, r4
 8006244:	f000 fb28 	bl	8006898 <__multadd>
 8006248:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800624a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800624e:	4682      	mov	sl, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	f000 81b0 	beq.w	80065b6 <_dtoa_r+0xbc6>
 8006256:	2300      	movs	r3, #0
 8006258:	4639      	mov	r1, r7
 800625a:	220a      	movs	r2, #10
 800625c:	4620      	mov	r0, r4
 800625e:	f000 fb1b 	bl	8006898 <__multadd>
 8006262:	9b01      	ldr	r3, [sp, #4]
 8006264:	2b00      	cmp	r3, #0
 8006266:	4607      	mov	r7, r0
 8006268:	f300 8096 	bgt.w	8006398 <_dtoa_r+0x9a8>
 800626c:	9b07      	ldr	r3, [sp, #28]
 800626e:	2b02      	cmp	r3, #2
 8006270:	dc59      	bgt.n	8006326 <_dtoa_r+0x936>
 8006272:	e091      	b.n	8006398 <_dtoa_r+0x9a8>
 8006274:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006276:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800627a:	e758      	b.n	800612e <_dtoa_r+0x73e>
 800627c:	9b04      	ldr	r3, [sp, #16]
 800627e:	1e5e      	subs	r6, r3, #1
 8006280:	9b08      	ldr	r3, [sp, #32]
 8006282:	42b3      	cmp	r3, r6
 8006284:	bfbf      	itttt	lt
 8006286:	9b08      	ldrlt	r3, [sp, #32]
 8006288:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800628a:	9608      	strlt	r6, [sp, #32]
 800628c:	1af3      	sublt	r3, r6, r3
 800628e:	bfb4      	ite	lt
 8006290:	18d2      	addlt	r2, r2, r3
 8006292:	1b9e      	subge	r6, r3, r6
 8006294:	9b04      	ldr	r3, [sp, #16]
 8006296:	bfbc      	itt	lt
 8006298:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800629a:	2600      	movlt	r6, #0
 800629c:	2b00      	cmp	r3, #0
 800629e:	bfb7      	itett	lt
 80062a0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 80062a4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 80062a8:	1a9d      	sublt	r5, r3, r2
 80062aa:	2300      	movlt	r3, #0
 80062ac:	e741      	b.n	8006132 <_dtoa_r+0x742>
 80062ae:	9e08      	ldr	r6, [sp, #32]
 80062b0:	9d05      	ldr	r5, [sp, #20]
 80062b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80062b4:	e748      	b.n	8006148 <_dtoa_r+0x758>
 80062b6:	9a08      	ldr	r2, [sp, #32]
 80062b8:	e770      	b.n	800619c <_dtoa_r+0x7ac>
 80062ba:	9b07      	ldr	r3, [sp, #28]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	dc19      	bgt.n	80062f4 <_dtoa_r+0x904>
 80062c0:	9b02      	ldr	r3, [sp, #8]
 80062c2:	b9bb      	cbnz	r3, 80062f4 <_dtoa_r+0x904>
 80062c4:	9b03      	ldr	r3, [sp, #12]
 80062c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80062ca:	b99b      	cbnz	r3, 80062f4 <_dtoa_r+0x904>
 80062cc:	9b03      	ldr	r3, [sp, #12]
 80062ce:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80062d2:	0d1b      	lsrs	r3, r3, #20
 80062d4:	051b      	lsls	r3, r3, #20
 80062d6:	b183      	cbz	r3, 80062fa <_dtoa_r+0x90a>
 80062d8:	9b05      	ldr	r3, [sp, #20]
 80062da:	3301      	adds	r3, #1
 80062dc:	9305      	str	r3, [sp, #20]
 80062de:	9b06      	ldr	r3, [sp, #24]
 80062e0:	3301      	adds	r3, #1
 80062e2:	9306      	str	r3, [sp, #24]
 80062e4:	f04f 0801 	mov.w	r8, #1
 80062e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f47f af6f 	bne.w	80061ce <_dtoa_r+0x7de>
 80062f0:	2001      	movs	r0, #1
 80062f2:	e774      	b.n	80061de <_dtoa_r+0x7ee>
 80062f4:	f04f 0800 	mov.w	r8, #0
 80062f8:	e7f6      	b.n	80062e8 <_dtoa_r+0x8f8>
 80062fa:	4698      	mov	r8, r3
 80062fc:	e7f4      	b.n	80062e8 <_dtoa_r+0x8f8>
 80062fe:	d082      	beq.n	8006206 <_dtoa_r+0x816>
 8006300:	9a05      	ldr	r2, [sp, #20]
 8006302:	331c      	adds	r3, #28
 8006304:	441a      	add	r2, r3
 8006306:	9205      	str	r2, [sp, #20]
 8006308:	9a06      	ldr	r2, [sp, #24]
 800630a:	441a      	add	r2, r3
 800630c:	441d      	add	r5, r3
 800630e:	9206      	str	r2, [sp, #24]
 8006310:	e779      	b.n	8006206 <_dtoa_r+0x816>
 8006312:	4603      	mov	r3, r0
 8006314:	e7f4      	b.n	8006300 <_dtoa_r+0x910>
 8006316:	9b04      	ldr	r3, [sp, #16]
 8006318:	2b00      	cmp	r3, #0
 800631a:	dc37      	bgt.n	800638c <_dtoa_r+0x99c>
 800631c:	9b07      	ldr	r3, [sp, #28]
 800631e:	2b02      	cmp	r3, #2
 8006320:	dd34      	ble.n	800638c <_dtoa_r+0x99c>
 8006322:	9b04      	ldr	r3, [sp, #16]
 8006324:	9301      	str	r3, [sp, #4]
 8006326:	9b01      	ldr	r3, [sp, #4]
 8006328:	b963      	cbnz	r3, 8006344 <_dtoa_r+0x954>
 800632a:	4631      	mov	r1, r6
 800632c:	2205      	movs	r2, #5
 800632e:	4620      	mov	r0, r4
 8006330:	f000 fab2 	bl	8006898 <__multadd>
 8006334:	4601      	mov	r1, r0
 8006336:	4606      	mov	r6, r0
 8006338:	4650      	mov	r0, sl
 800633a:	f000 fd11 	bl	8006d60 <__mcmp>
 800633e:	2800      	cmp	r0, #0
 8006340:	f73f adbb 	bgt.w	8005eba <_dtoa_r+0x4ca>
 8006344:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006346:	9d00      	ldr	r5, [sp, #0]
 8006348:	ea6f 0b03 	mvn.w	fp, r3
 800634c:	f04f 0800 	mov.w	r8, #0
 8006350:	4631      	mov	r1, r6
 8006352:	4620      	mov	r0, r4
 8006354:	f000 fa7e 	bl	8006854 <_Bfree>
 8006358:	2f00      	cmp	r7, #0
 800635a:	f43f aeab 	beq.w	80060b4 <_dtoa_r+0x6c4>
 800635e:	f1b8 0f00 	cmp.w	r8, #0
 8006362:	d005      	beq.n	8006370 <_dtoa_r+0x980>
 8006364:	45b8      	cmp	r8, r7
 8006366:	d003      	beq.n	8006370 <_dtoa_r+0x980>
 8006368:	4641      	mov	r1, r8
 800636a:	4620      	mov	r0, r4
 800636c:	f000 fa72 	bl	8006854 <_Bfree>
 8006370:	4639      	mov	r1, r7
 8006372:	4620      	mov	r0, r4
 8006374:	f000 fa6e 	bl	8006854 <_Bfree>
 8006378:	e69c      	b.n	80060b4 <_dtoa_r+0x6c4>
 800637a:	2600      	movs	r6, #0
 800637c:	4637      	mov	r7, r6
 800637e:	e7e1      	b.n	8006344 <_dtoa_r+0x954>
 8006380:	46bb      	mov	fp, r7
 8006382:	4637      	mov	r7, r6
 8006384:	e599      	b.n	8005eba <_dtoa_r+0x4ca>
 8006386:	bf00      	nop
 8006388:	40240000 	.word	0x40240000
 800638c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800638e:	2b00      	cmp	r3, #0
 8006390:	f000 80c8 	beq.w	8006524 <_dtoa_r+0xb34>
 8006394:	9b04      	ldr	r3, [sp, #16]
 8006396:	9301      	str	r3, [sp, #4]
 8006398:	2d00      	cmp	r5, #0
 800639a:	dd05      	ble.n	80063a8 <_dtoa_r+0x9b8>
 800639c:	4639      	mov	r1, r7
 800639e:	462a      	mov	r2, r5
 80063a0:	4620      	mov	r0, r4
 80063a2:	f000 fc71 	bl	8006c88 <__lshift>
 80063a6:	4607      	mov	r7, r0
 80063a8:	f1b8 0f00 	cmp.w	r8, #0
 80063ac:	d05b      	beq.n	8006466 <_dtoa_r+0xa76>
 80063ae:	6879      	ldr	r1, [r7, #4]
 80063b0:	4620      	mov	r0, r4
 80063b2:	f000 fa0f 	bl	80067d4 <_Balloc>
 80063b6:	4605      	mov	r5, r0
 80063b8:	b928      	cbnz	r0, 80063c6 <_dtoa_r+0x9d6>
 80063ba:	4b83      	ldr	r3, [pc, #524]	; (80065c8 <_dtoa_r+0xbd8>)
 80063bc:	4602      	mov	r2, r0
 80063be:	f240 21ef 	movw	r1, #751	; 0x2ef
 80063c2:	f7ff bb2e 	b.w	8005a22 <_dtoa_r+0x32>
 80063c6:	693a      	ldr	r2, [r7, #16]
 80063c8:	3202      	adds	r2, #2
 80063ca:	0092      	lsls	r2, r2, #2
 80063cc:	f107 010c 	add.w	r1, r7, #12
 80063d0:	300c      	adds	r0, #12
 80063d2:	f002 f95f 	bl	8008694 <memcpy>
 80063d6:	2201      	movs	r2, #1
 80063d8:	4629      	mov	r1, r5
 80063da:	4620      	mov	r0, r4
 80063dc:	f000 fc54 	bl	8006c88 <__lshift>
 80063e0:	9b00      	ldr	r3, [sp, #0]
 80063e2:	3301      	adds	r3, #1
 80063e4:	9304      	str	r3, [sp, #16]
 80063e6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063ea:	4413      	add	r3, r2
 80063ec:	9308      	str	r3, [sp, #32]
 80063ee:	9b02      	ldr	r3, [sp, #8]
 80063f0:	f003 0301 	and.w	r3, r3, #1
 80063f4:	46b8      	mov	r8, r7
 80063f6:	9306      	str	r3, [sp, #24]
 80063f8:	4607      	mov	r7, r0
 80063fa:	9b04      	ldr	r3, [sp, #16]
 80063fc:	4631      	mov	r1, r6
 80063fe:	3b01      	subs	r3, #1
 8006400:	4650      	mov	r0, sl
 8006402:	9301      	str	r3, [sp, #4]
 8006404:	f7ff fa6c 	bl	80058e0 <quorem>
 8006408:	4641      	mov	r1, r8
 800640a:	9002      	str	r0, [sp, #8]
 800640c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006410:	4650      	mov	r0, sl
 8006412:	f000 fca5 	bl	8006d60 <__mcmp>
 8006416:	463a      	mov	r2, r7
 8006418:	9005      	str	r0, [sp, #20]
 800641a:	4631      	mov	r1, r6
 800641c:	4620      	mov	r0, r4
 800641e:	f000 fcbb 	bl	8006d98 <__mdiff>
 8006422:	68c2      	ldr	r2, [r0, #12]
 8006424:	4605      	mov	r5, r0
 8006426:	bb02      	cbnz	r2, 800646a <_dtoa_r+0xa7a>
 8006428:	4601      	mov	r1, r0
 800642a:	4650      	mov	r0, sl
 800642c:	f000 fc98 	bl	8006d60 <__mcmp>
 8006430:	4602      	mov	r2, r0
 8006432:	4629      	mov	r1, r5
 8006434:	4620      	mov	r0, r4
 8006436:	9209      	str	r2, [sp, #36]	; 0x24
 8006438:	f000 fa0c 	bl	8006854 <_Bfree>
 800643c:	9b07      	ldr	r3, [sp, #28]
 800643e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006440:	9d04      	ldr	r5, [sp, #16]
 8006442:	ea43 0102 	orr.w	r1, r3, r2
 8006446:	9b06      	ldr	r3, [sp, #24]
 8006448:	4319      	orrs	r1, r3
 800644a:	d110      	bne.n	800646e <_dtoa_r+0xa7e>
 800644c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8006450:	d029      	beq.n	80064a6 <_dtoa_r+0xab6>
 8006452:	9b05      	ldr	r3, [sp, #20]
 8006454:	2b00      	cmp	r3, #0
 8006456:	dd02      	ble.n	800645e <_dtoa_r+0xa6e>
 8006458:	9b02      	ldr	r3, [sp, #8]
 800645a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800645e:	9b01      	ldr	r3, [sp, #4]
 8006460:	f883 9000 	strb.w	r9, [r3]
 8006464:	e774      	b.n	8006350 <_dtoa_r+0x960>
 8006466:	4638      	mov	r0, r7
 8006468:	e7ba      	b.n	80063e0 <_dtoa_r+0x9f0>
 800646a:	2201      	movs	r2, #1
 800646c:	e7e1      	b.n	8006432 <_dtoa_r+0xa42>
 800646e:	9b05      	ldr	r3, [sp, #20]
 8006470:	2b00      	cmp	r3, #0
 8006472:	db04      	blt.n	800647e <_dtoa_r+0xa8e>
 8006474:	9907      	ldr	r1, [sp, #28]
 8006476:	430b      	orrs	r3, r1
 8006478:	9906      	ldr	r1, [sp, #24]
 800647a:	430b      	orrs	r3, r1
 800647c:	d120      	bne.n	80064c0 <_dtoa_r+0xad0>
 800647e:	2a00      	cmp	r2, #0
 8006480:	dded      	ble.n	800645e <_dtoa_r+0xa6e>
 8006482:	4651      	mov	r1, sl
 8006484:	2201      	movs	r2, #1
 8006486:	4620      	mov	r0, r4
 8006488:	f000 fbfe 	bl	8006c88 <__lshift>
 800648c:	4631      	mov	r1, r6
 800648e:	4682      	mov	sl, r0
 8006490:	f000 fc66 	bl	8006d60 <__mcmp>
 8006494:	2800      	cmp	r0, #0
 8006496:	dc03      	bgt.n	80064a0 <_dtoa_r+0xab0>
 8006498:	d1e1      	bne.n	800645e <_dtoa_r+0xa6e>
 800649a:	f019 0f01 	tst.w	r9, #1
 800649e:	d0de      	beq.n	800645e <_dtoa_r+0xa6e>
 80064a0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80064a4:	d1d8      	bne.n	8006458 <_dtoa_r+0xa68>
 80064a6:	9a01      	ldr	r2, [sp, #4]
 80064a8:	2339      	movs	r3, #57	; 0x39
 80064aa:	7013      	strb	r3, [r2, #0]
 80064ac:	462b      	mov	r3, r5
 80064ae:	461d      	mov	r5, r3
 80064b0:	3b01      	subs	r3, #1
 80064b2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 80064b6:	2a39      	cmp	r2, #57	; 0x39
 80064b8:	d06c      	beq.n	8006594 <_dtoa_r+0xba4>
 80064ba:	3201      	adds	r2, #1
 80064bc:	701a      	strb	r2, [r3, #0]
 80064be:	e747      	b.n	8006350 <_dtoa_r+0x960>
 80064c0:	2a00      	cmp	r2, #0
 80064c2:	dd07      	ble.n	80064d4 <_dtoa_r+0xae4>
 80064c4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 80064c8:	d0ed      	beq.n	80064a6 <_dtoa_r+0xab6>
 80064ca:	9a01      	ldr	r2, [sp, #4]
 80064cc:	f109 0301 	add.w	r3, r9, #1
 80064d0:	7013      	strb	r3, [r2, #0]
 80064d2:	e73d      	b.n	8006350 <_dtoa_r+0x960>
 80064d4:	9b04      	ldr	r3, [sp, #16]
 80064d6:	9a08      	ldr	r2, [sp, #32]
 80064d8:	f803 9c01 	strb.w	r9, [r3, #-1]
 80064dc:	4293      	cmp	r3, r2
 80064de:	d043      	beq.n	8006568 <_dtoa_r+0xb78>
 80064e0:	4651      	mov	r1, sl
 80064e2:	2300      	movs	r3, #0
 80064e4:	220a      	movs	r2, #10
 80064e6:	4620      	mov	r0, r4
 80064e8:	f000 f9d6 	bl	8006898 <__multadd>
 80064ec:	45b8      	cmp	r8, r7
 80064ee:	4682      	mov	sl, r0
 80064f0:	f04f 0300 	mov.w	r3, #0
 80064f4:	f04f 020a 	mov.w	r2, #10
 80064f8:	4641      	mov	r1, r8
 80064fa:	4620      	mov	r0, r4
 80064fc:	d107      	bne.n	800650e <_dtoa_r+0xb1e>
 80064fe:	f000 f9cb 	bl	8006898 <__multadd>
 8006502:	4680      	mov	r8, r0
 8006504:	4607      	mov	r7, r0
 8006506:	9b04      	ldr	r3, [sp, #16]
 8006508:	3301      	adds	r3, #1
 800650a:	9304      	str	r3, [sp, #16]
 800650c:	e775      	b.n	80063fa <_dtoa_r+0xa0a>
 800650e:	f000 f9c3 	bl	8006898 <__multadd>
 8006512:	4639      	mov	r1, r7
 8006514:	4680      	mov	r8, r0
 8006516:	2300      	movs	r3, #0
 8006518:	220a      	movs	r2, #10
 800651a:	4620      	mov	r0, r4
 800651c:	f000 f9bc 	bl	8006898 <__multadd>
 8006520:	4607      	mov	r7, r0
 8006522:	e7f0      	b.n	8006506 <_dtoa_r+0xb16>
 8006524:	9b04      	ldr	r3, [sp, #16]
 8006526:	9301      	str	r3, [sp, #4]
 8006528:	9d00      	ldr	r5, [sp, #0]
 800652a:	4631      	mov	r1, r6
 800652c:	4650      	mov	r0, sl
 800652e:	f7ff f9d7 	bl	80058e0 <quorem>
 8006532:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8006536:	9b00      	ldr	r3, [sp, #0]
 8006538:	f805 9b01 	strb.w	r9, [r5], #1
 800653c:	1aea      	subs	r2, r5, r3
 800653e:	9b01      	ldr	r3, [sp, #4]
 8006540:	4293      	cmp	r3, r2
 8006542:	dd07      	ble.n	8006554 <_dtoa_r+0xb64>
 8006544:	4651      	mov	r1, sl
 8006546:	2300      	movs	r3, #0
 8006548:	220a      	movs	r2, #10
 800654a:	4620      	mov	r0, r4
 800654c:	f000 f9a4 	bl	8006898 <__multadd>
 8006550:	4682      	mov	sl, r0
 8006552:	e7ea      	b.n	800652a <_dtoa_r+0xb3a>
 8006554:	9b01      	ldr	r3, [sp, #4]
 8006556:	2b00      	cmp	r3, #0
 8006558:	bfc8      	it	gt
 800655a:	461d      	movgt	r5, r3
 800655c:	9b00      	ldr	r3, [sp, #0]
 800655e:	bfd8      	it	le
 8006560:	2501      	movle	r5, #1
 8006562:	441d      	add	r5, r3
 8006564:	f04f 0800 	mov.w	r8, #0
 8006568:	4651      	mov	r1, sl
 800656a:	2201      	movs	r2, #1
 800656c:	4620      	mov	r0, r4
 800656e:	f000 fb8b 	bl	8006c88 <__lshift>
 8006572:	4631      	mov	r1, r6
 8006574:	4682      	mov	sl, r0
 8006576:	f000 fbf3 	bl	8006d60 <__mcmp>
 800657a:	2800      	cmp	r0, #0
 800657c:	dc96      	bgt.n	80064ac <_dtoa_r+0xabc>
 800657e:	d102      	bne.n	8006586 <_dtoa_r+0xb96>
 8006580:	f019 0f01 	tst.w	r9, #1
 8006584:	d192      	bne.n	80064ac <_dtoa_r+0xabc>
 8006586:	462b      	mov	r3, r5
 8006588:	461d      	mov	r5, r3
 800658a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800658e:	2a30      	cmp	r2, #48	; 0x30
 8006590:	d0fa      	beq.n	8006588 <_dtoa_r+0xb98>
 8006592:	e6dd      	b.n	8006350 <_dtoa_r+0x960>
 8006594:	9a00      	ldr	r2, [sp, #0]
 8006596:	429a      	cmp	r2, r3
 8006598:	d189      	bne.n	80064ae <_dtoa_r+0xabe>
 800659a:	f10b 0b01 	add.w	fp, fp, #1
 800659e:	2331      	movs	r3, #49	; 0x31
 80065a0:	e796      	b.n	80064d0 <_dtoa_r+0xae0>
 80065a2:	4b0a      	ldr	r3, [pc, #40]	; (80065cc <_dtoa_r+0xbdc>)
 80065a4:	f7ff ba99 	b.w	8005ada <_dtoa_r+0xea>
 80065a8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f47f aa6d 	bne.w	8005a8a <_dtoa_r+0x9a>
 80065b0:	4b07      	ldr	r3, [pc, #28]	; (80065d0 <_dtoa_r+0xbe0>)
 80065b2:	f7ff ba92 	b.w	8005ada <_dtoa_r+0xea>
 80065b6:	9b01      	ldr	r3, [sp, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	dcb5      	bgt.n	8006528 <_dtoa_r+0xb38>
 80065bc:	9b07      	ldr	r3, [sp, #28]
 80065be:	2b02      	cmp	r3, #2
 80065c0:	f73f aeb1 	bgt.w	8006326 <_dtoa_r+0x936>
 80065c4:	e7b0      	b.n	8006528 <_dtoa_r+0xb38>
 80065c6:	bf00      	nop
 80065c8:	08009181 	.word	0x08009181
 80065cc:	080090dc 	.word	0x080090dc
 80065d0:	08009105 	.word	0x08009105

080065d4 <_free_r>:
 80065d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065d6:	2900      	cmp	r1, #0
 80065d8:	d044      	beq.n	8006664 <_free_r+0x90>
 80065da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065de:	9001      	str	r0, [sp, #4]
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	f1a1 0404 	sub.w	r4, r1, #4
 80065e6:	bfb8      	it	lt
 80065e8:	18e4      	addlt	r4, r4, r3
 80065ea:	f000 f8e7 	bl	80067bc <__malloc_lock>
 80065ee:	4a1e      	ldr	r2, [pc, #120]	; (8006668 <_free_r+0x94>)
 80065f0:	9801      	ldr	r0, [sp, #4]
 80065f2:	6813      	ldr	r3, [r2, #0]
 80065f4:	b933      	cbnz	r3, 8006604 <_free_r+0x30>
 80065f6:	6063      	str	r3, [r4, #4]
 80065f8:	6014      	str	r4, [r2, #0]
 80065fa:	b003      	add	sp, #12
 80065fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006600:	f000 b8e2 	b.w	80067c8 <__malloc_unlock>
 8006604:	42a3      	cmp	r3, r4
 8006606:	d908      	bls.n	800661a <_free_r+0x46>
 8006608:	6825      	ldr	r5, [r4, #0]
 800660a:	1961      	adds	r1, r4, r5
 800660c:	428b      	cmp	r3, r1
 800660e:	bf01      	itttt	eq
 8006610:	6819      	ldreq	r1, [r3, #0]
 8006612:	685b      	ldreq	r3, [r3, #4]
 8006614:	1949      	addeq	r1, r1, r5
 8006616:	6021      	streq	r1, [r4, #0]
 8006618:	e7ed      	b.n	80065f6 <_free_r+0x22>
 800661a:	461a      	mov	r2, r3
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	b10b      	cbz	r3, 8006624 <_free_r+0x50>
 8006620:	42a3      	cmp	r3, r4
 8006622:	d9fa      	bls.n	800661a <_free_r+0x46>
 8006624:	6811      	ldr	r1, [r2, #0]
 8006626:	1855      	adds	r5, r2, r1
 8006628:	42a5      	cmp	r5, r4
 800662a:	d10b      	bne.n	8006644 <_free_r+0x70>
 800662c:	6824      	ldr	r4, [r4, #0]
 800662e:	4421      	add	r1, r4
 8006630:	1854      	adds	r4, r2, r1
 8006632:	42a3      	cmp	r3, r4
 8006634:	6011      	str	r1, [r2, #0]
 8006636:	d1e0      	bne.n	80065fa <_free_r+0x26>
 8006638:	681c      	ldr	r4, [r3, #0]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	6053      	str	r3, [r2, #4]
 800663e:	440c      	add	r4, r1
 8006640:	6014      	str	r4, [r2, #0]
 8006642:	e7da      	b.n	80065fa <_free_r+0x26>
 8006644:	d902      	bls.n	800664c <_free_r+0x78>
 8006646:	230c      	movs	r3, #12
 8006648:	6003      	str	r3, [r0, #0]
 800664a:	e7d6      	b.n	80065fa <_free_r+0x26>
 800664c:	6825      	ldr	r5, [r4, #0]
 800664e:	1961      	adds	r1, r4, r5
 8006650:	428b      	cmp	r3, r1
 8006652:	bf04      	itt	eq
 8006654:	6819      	ldreq	r1, [r3, #0]
 8006656:	685b      	ldreq	r3, [r3, #4]
 8006658:	6063      	str	r3, [r4, #4]
 800665a:	bf04      	itt	eq
 800665c:	1949      	addeq	r1, r1, r5
 800665e:	6021      	streq	r1, [r4, #0]
 8006660:	6054      	str	r4, [r2, #4]
 8006662:	e7ca      	b.n	80065fa <_free_r+0x26>
 8006664:	b003      	add	sp, #12
 8006666:	bd30      	pop	{r4, r5, pc}
 8006668:	20000454 	.word	0x20000454

0800666c <malloc>:
 800666c:	4b02      	ldr	r3, [pc, #8]	; (8006678 <malloc+0xc>)
 800666e:	4601      	mov	r1, r0
 8006670:	6818      	ldr	r0, [r3, #0]
 8006672:	f000 b823 	b.w	80066bc <_malloc_r>
 8006676:	bf00      	nop
 8006678:	20000064 	.word	0x20000064

0800667c <sbrk_aligned>:
 800667c:	b570      	push	{r4, r5, r6, lr}
 800667e:	4e0e      	ldr	r6, [pc, #56]	; (80066b8 <sbrk_aligned+0x3c>)
 8006680:	460c      	mov	r4, r1
 8006682:	6831      	ldr	r1, [r6, #0]
 8006684:	4605      	mov	r5, r0
 8006686:	b911      	cbnz	r1, 800668e <sbrk_aligned+0x12>
 8006688:	f001 fff4 	bl	8008674 <_sbrk_r>
 800668c:	6030      	str	r0, [r6, #0]
 800668e:	4621      	mov	r1, r4
 8006690:	4628      	mov	r0, r5
 8006692:	f001 ffef 	bl	8008674 <_sbrk_r>
 8006696:	1c43      	adds	r3, r0, #1
 8006698:	d00a      	beq.n	80066b0 <sbrk_aligned+0x34>
 800669a:	1cc4      	adds	r4, r0, #3
 800669c:	f024 0403 	bic.w	r4, r4, #3
 80066a0:	42a0      	cmp	r0, r4
 80066a2:	d007      	beq.n	80066b4 <sbrk_aligned+0x38>
 80066a4:	1a21      	subs	r1, r4, r0
 80066a6:	4628      	mov	r0, r5
 80066a8:	f001 ffe4 	bl	8008674 <_sbrk_r>
 80066ac:	3001      	adds	r0, #1
 80066ae:	d101      	bne.n	80066b4 <sbrk_aligned+0x38>
 80066b0:	f04f 34ff 	mov.w	r4, #4294967295
 80066b4:	4620      	mov	r0, r4
 80066b6:	bd70      	pop	{r4, r5, r6, pc}
 80066b8:	20000458 	.word	0x20000458

080066bc <_malloc_r>:
 80066bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80066c0:	1ccd      	adds	r5, r1, #3
 80066c2:	f025 0503 	bic.w	r5, r5, #3
 80066c6:	3508      	adds	r5, #8
 80066c8:	2d0c      	cmp	r5, #12
 80066ca:	bf38      	it	cc
 80066cc:	250c      	movcc	r5, #12
 80066ce:	2d00      	cmp	r5, #0
 80066d0:	4607      	mov	r7, r0
 80066d2:	db01      	blt.n	80066d8 <_malloc_r+0x1c>
 80066d4:	42a9      	cmp	r1, r5
 80066d6:	d905      	bls.n	80066e4 <_malloc_r+0x28>
 80066d8:	230c      	movs	r3, #12
 80066da:	603b      	str	r3, [r7, #0]
 80066dc:	2600      	movs	r6, #0
 80066de:	4630      	mov	r0, r6
 80066e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80067b8 <_malloc_r+0xfc>
 80066e8:	f000 f868 	bl	80067bc <__malloc_lock>
 80066ec:	f8d8 3000 	ldr.w	r3, [r8]
 80066f0:	461c      	mov	r4, r3
 80066f2:	bb5c      	cbnz	r4, 800674c <_malloc_r+0x90>
 80066f4:	4629      	mov	r1, r5
 80066f6:	4638      	mov	r0, r7
 80066f8:	f7ff ffc0 	bl	800667c <sbrk_aligned>
 80066fc:	1c43      	adds	r3, r0, #1
 80066fe:	4604      	mov	r4, r0
 8006700:	d155      	bne.n	80067ae <_malloc_r+0xf2>
 8006702:	f8d8 4000 	ldr.w	r4, [r8]
 8006706:	4626      	mov	r6, r4
 8006708:	2e00      	cmp	r6, #0
 800670a:	d145      	bne.n	8006798 <_malloc_r+0xdc>
 800670c:	2c00      	cmp	r4, #0
 800670e:	d048      	beq.n	80067a2 <_malloc_r+0xe6>
 8006710:	6823      	ldr	r3, [r4, #0]
 8006712:	4631      	mov	r1, r6
 8006714:	4638      	mov	r0, r7
 8006716:	eb04 0903 	add.w	r9, r4, r3
 800671a:	f001 ffab 	bl	8008674 <_sbrk_r>
 800671e:	4581      	cmp	r9, r0
 8006720:	d13f      	bne.n	80067a2 <_malloc_r+0xe6>
 8006722:	6821      	ldr	r1, [r4, #0]
 8006724:	1a6d      	subs	r5, r5, r1
 8006726:	4629      	mov	r1, r5
 8006728:	4638      	mov	r0, r7
 800672a:	f7ff ffa7 	bl	800667c <sbrk_aligned>
 800672e:	3001      	adds	r0, #1
 8006730:	d037      	beq.n	80067a2 <_malloc_r+0xe6>
 8006732:	6823      	ldr	r3, [r4, #0]
 8006734:	442b      	add	r3, r5
 8006736:	6023      	str	r3, [r4, #0]
 8006738:	f8d8 3000 	ldr.w	r3, [r8]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d038      	beq.n	80067b2 <_malloc_r+0xf6>
 8006740:	685a      	ldr	r2, [r3, #4]
 8006742:	42a2      	cmp	r2, r4
 8006744:	d12b      	bne.n	800679e <_malloc_r+0xe2>
 8006746:	2200      	movs	r2, #0
 8006748:	605a      	str	r2, [r3, #4]
 800674a:	e00f      	b.n	800676c <_malloc_r+0xb0>
 800674c:	6822      	ldr	r2, [r4, #0]
 800674e:	1b52      	subs	r2, r2, r5
 8006750:	d41f      	bmi.n	8006792 <_malloc_r+0xd6>
 8006752:	2a0b      	cmp	r2, #11
 8006754:	d917      	bls.n	8006786 <_malloc_r+0xca>
 8006756:	1961      	adds	r1, r4, r5
 8006758:	42a3      	cmp	r3, r4
 800675a:	6025      	str	r5, [r4, #0]
 800675c:	bf18      	it	ne
 800675e:	6059      	strne	r1, [r3, #4]
 8006760:	6863      	ldr	r3, [r4, #4]
 8006762:	bf08      	it	eq
 8006764:	f8c8 1000 	streq.w	r1, [r8]
 8006768:	5162      	str	r2, [r4, r5]
 800676a:	604b      	str	r3, [r1, #4]
 800676c:	4638      	mov	r0, r7
 800676e:	f104 060b 	add.w	r6, r4, #11
 8006772:	f000 f829 	bl	80067c8 <__malloc_unlock>
 8006776:	f026 0607 	bic.w	r6, r6, #7
 800677a:	1d23      	adds	r3, r4, #4
 800677c:	1af2      	subs	r2, r6, r3
 800677e:	d0ae      	beq.n	80066de <_malloc_r+0x22>
 8006780:	1b9b      	subs	r3, r3, r6
 8006782:	50a3      	str	r3, [r4, r2]
 8006784:	e7ab      	b.n	80066de <_malloc_r+0x22>
 8006786:	42a3      	cmp	r3, r4
 8006788:	6862      	ldr	r2, [r4, #4]
 800678a:	d1dd      	bne.n	8006748 <_malloc_r+0x8c>
 800678c:	f8c8 2000 	str.w	r2, [r8]
 8006790:	e7ec      	b.n	800676c <_malloc_r+0xb0>
 8006792:	4623      	mov	r3, r4
 8006794:	6864      	ldr	r4, [r4, #4]
 8006796:	e7ac      	b.n	80066f2 <_malloc_r+0x36>
 8006798:	4634      	mov	r4, r6
 800679a:	6876      	ldr	r6, [r6, #4]
 800679c:	e7b4      	b.n	8006708 <_malloc_r+0x4c>
 800679e:	4613      	mov	r3, r2
 80067a0:	e7cc      	b.n	800673c <_malloc_r+0x80>
 80067a2:	230c      	movs	r3, #12
 80067a4:	603b      	str	r3, [r7, #0]
 80067a6:	4638      	mov	r0, r7
 80067a8:	f000 f80e 	bl	80067c8 <__malloc_unlock>
 80067ac:	e797      	b.n	80066de <_malloc_r+0x22>
 80067ae:	6025      	str	r5, [r4, #0]
 80067b0:	e7dc      	b.n	800676c <_malloc_r+0xb0>
 80067b2:	605b      	str	r3, [r3, #4]
 80067b4:	deff      	udf	#255	; 0xff
 80067b6:	bf00      	nop
 80067b8:	20000454 	.word	0x20000454

080067bc <__malloc_lock>:
 80067bc:	4801      	ldr	r0, [pc, #4]	; (80067c4 <__malloc_lock+0x8>)
 80067be:	f7ff b886 	b.w	80058ce <__retarget_lock_acquire_recursive>
 80067c2:	bf00      	nop
 80067c4:	20000450 	.word	0x20000450

080067c8 <__malloc_unlock>:
 80067c8:	4801      	ldr	r0, [pc, #4]	; (80067d0 <__malloc_unlock+0x8>)
 80067ca:	f7ff b881 	b.w	80058d0 <__retarget_lock_release_recursive>
 80067ce:	bf00      	nop
 80067d0:	20000450 	.word	0x20000450

080067d4 <_Balloc>:
 80067d4:	b570      	push	{r4, r5, r6, lr}
 80067d6:	69c6      	ldr	r6, [r0, #28]
 80067d8:	4604      	mov	r4, r0
 80067da:	460d      	mov	r5, r1
 80067dc:	b976      	cbnz	r6, 80067fc <_Balloc+0x28>
 80067de:	2010      	movs	r0, #16
 80067e0:	f7ff ff44 	bl	800666c <malloc>
 80067e4:	4602      	mov	r2, r0
 80067e6:	61e0      	str	r0, [r4, #28]
 80067e8:	b920      	cbnz	r0, 80067f4 <_Balloc+0x20>
 80067ea:	4b18      	ldr	r3, [pc, #96]	; (800684c <_Balloc+0x78>)
 80067ec:	4818      	ldr	r0, [pc, #96]	; (8006850 <_Balloc+0x7c>)
 80067ee:	216b      	movs	r1, #107	; 0x6b
 80067f0:	f001 ff66 	bl	80086c0 <__assert_func>
 80067f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80067f8:	6006      	str	r6, [r0, #0]
 80067fa:	60c6      	str	r6, [r0, #12]
 80067fc:	69e6      	ldr	r6, [r4, #28]
 80067fe:	68f3      	ldr	r3, [r6, #12]
 8006800:	b183      	cbz	r3, 8006824 <_Balloc+0x50>
 8006802:	69e3      	ldr	r3, [r4, #28]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800680a:	b9b8      	cbnz	r0, 800683c <_Balloc+0x68>
 800680c:	2101      	movs	r1, #1
 800680e:	fa01 f605 	lsl.w	r6, r1, r5
 8006812:	1d72      	adds	r2, r6, #5
 8006814:	0092      	lsls	r2, r2, #2
 8006816:	4620      	mov	r0, r4
 8006818:	f001 ff70 	bl	80086fc <_calloc_r>
 800681c:	b160      	cbz	r0, 8006838 <_Balloc+0x64>
 800681e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006822:	e00e      	b.n	8006842 <_Balloc+0x6e>
 8006824:	2221      	movs	r2, #33	; 0x21
 8006826:	2104      	movs	r1, #4
 8006828:	4620      	mov	r0, r4
 800682a:	f001 ff67 	bl	80086fc <_calloc_r>
 800682e:	69e3      	ldr	r3, [r4, #28]
 8006830:	60f0      	str	r0, [r6, #12]
 8006832:	68db      	ldr	r3, [r3, #12]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d1e4      	bne.n	8006802 <_Balloc+0x2e>
 8006838:	2000      	movs	r0, #0
 800683a:	bd70      	pop	{r4, r5, r6, pc}
 800683c:	6802      	ldr	r2, [r0, #0]
 800683e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006842:	2300      	movs	r3, #0
 8006844:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006848:	e7f7      	b.n	800683a <_Balloc+0x66>
 800684a:	bf00      	nop
 800684c:	08009112 	.word	0x08009112
 8006850:	08009192 	.word	0x08009192

08006854 <_Bfree>:
 8006854:	b570      	push	{r4, r5, r6, lr}
 8006856:	69c6      	ldr	r6, [r0, #28]
 8006858:	4605      	mov	r5, r0
 800685a:	460c      	mov	r4, r1
 800685c:	b976      	cbnz	r6, 800687c <_Bfree+0x28>
 800685e:	2010      	movs	r0, #16
 8006860:	f7ff ff04 	bl	800666c <malloc>
 8006864:	4602      	mov	r2, r0
 8006866:	61e8      	str	r0, [r5, #28]
 8006868:	b920      	cbnz	r0, 8006874 <_Bfree+0x20>
 800686a:	4b09      	ldr	r3, [pc, #36]	; (8006890 <_Bfree+0x3c>)
 800686c:	4809      	ldr	r0, [pc, #36]	; (8006894 <_Bfree+0x40>)
 800686e:	218f      	movs	r1, #143	; 0x8f
 8006870:	f001 ff26 	bl	80086c0 <__assert_func>
 8006874:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006878:	6006      	str	r6, [r0, #0]
 800687a:	60c6      	str	r6, [r0, #12]
 800687c:	b13c      	cbz	r4, 800688e <_Bfree+0x3a>
 800687e:	69eb      	ldr	r3, [r5, #28]
 8006880:	6862      	ldr	r2, [r4, #4]
 8006882:	68db      	ldr	r3, [r3, #12]
 8006884:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006888:	6021      	str	r1, [r4, #0]
 800688a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800688e:	bd70      	pop	{r4, r5, r6, pc}
 8006890:	08009112 	.word	0x08009112
 8006894:	08009192 	.word	0x08009192

08006898 <__multadd>:
 8006898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800689c:	690d      	ldr	r5, [r1, #16]
 800689e:	4607      	mov	r7, r0
 80068a0:	460c      	mov	r4, r1
 80068a2:	461e      	mov	r6, r3
 80068a4:	f101 0c14 	add.w	ip, r1, #20
 80068a8:	2000      	movs	r0, #0
 80068aa:	f8dc 3000 	ldr.w	r3, [ip]
 80068ae:	b299      	uxth	r1, r3
 80068b0:	fb02 6101 	mla	r1, r2, r1, r6
 80068b4:	0c1e      	lsrs	r6, r3, #16
 80068b6:	0c0b      	lsrs	r3, r1, #16
 80068b8:	fb02 3306 	mla	r3, r2, r6, r3
 80068bc:	b289      	uxth	r1, r1
 80068be:	3001      	adds	r0, #1
 80068c0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80068c4:	4285      	cmp	r5, r0
 80068c6:	f84c 1b04 	str.w	r1, [ip], #4
 80068ca:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80068ce:	dcec      	bgt.n	80068aa <__multadd+0x12>
 80068d0:	b30e      	cbz	r6, 8006916 <__multadd+0x7e>
 80068d2:	68a3      	ldr	r3, [r4, #8]
 80068d4:	42ab      	cmp	r3, r5
 80068d6:	dc19      	bgt.n	800690c <__multadd+0x74>
 80068d8:	6861      	ldr	r1, [r4, #4]
 80068da:	4638      	mov	r0, r7
 80068dc:	3101      	adds	r1, #1
 80068de:	f7ff ff79 	bl	80067d4 <_Balloc>
 80068e2:	4680      	mov	r8, r0
 80068e4:	b928      	cbnz	r0, 80068f2 <__multadd+0x5a>
 80068e6:	4602      	mov	r2, r0
 80068e8:	4b0c      	ldr	r3, [pc, #48]	; (800691c <__multadd+0x84>)
 80068ea:	480d      	ldr	r0, [pc, #52]	; (8006920 <__multadd+0x88>)
 80068ec:	21ba      	movs	r1, #186	; 0xba
 80068ee:	f001 fee7 	bl	80086c0 <__assert_func>
 80068f2:	6922      	ldr	r2, [r4, #16]
 80068f4:	3202      	adds	r2, #2
 80068f6:	f104 010c 	add.w	r1, r4, #12
 80068fa:	0092      	lsls	r2, r2, #2
 80068fc:	300c      	adds	r0, #12
 80068fe:	f001 fec9 	bl	8008694 <memcpy>
 8006902:	4621      	mov	r1, r4
 8006904:	4638      	mov	r0, r7
 8006906:	f7ff ffa5 	bl	8006854 <_Bfree>
 800690a:	4644      	mov	r4, r8
 800690c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006910:	3501      	adds	r5, #1
 8006912:	615e      	str	r6, [r3, #20]
 8006914:	6125      	str	r5, [r4, #16]
 8006916:	4620      	mov	r0, r4
 8006918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800691c:	08009181 	.word	0x08009181
 8006920:	08009192 	.word	0x08009192

08006924 <__s2b>:
 8006924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006928:	460c      	mov	r4, r1
 800692a:	4615      	mov	r5, r2
 800692c:	461f      	mov	r7, r3
 800692e:	2209      	movs	r2, #9
 8006930:	3308      	adds	r3, #8
 8006932:	4606      	mov	r6, r0
 8006934:	fb93 f3f2 	sdiv	r3, r3, r2
 8006938:	2100      	movs	r1, #0
 800693a:	2201      	movs	r2, #1
 800693c:	429a      	cmp	r2, r3
 800693e:	db09      	blt.n	8006954 <__s2b+0x30>
 8006940:	4630      	mov	r0, r6
 8006942:	f7ff ff47 	bl	80067d4 <_Balloc>
 8006946:	b940      	cbnz	r0, 800695a <__s2b+0x36>
 8006948:	4602      	mov	r2, r0
 800694a:	4b19      	ldr	r3, [pc, #100]	; (80069b0 <__s2b+0x8c>)
 800694c:	4819      	ldr	r0, [pc, #100]	; (80069b4 <__s2b+0x90>)
 800694e:	21d3      	movs	r1, #211	; 0xd3
 8006950:	f001 feb6 	bl	80086c0 <__assert_func>
 8006954:	0052      	lsls	r2, r2, #1
 8006956:	3101      	adds	r1, #1
 8006958:	e7f0      	b.n	800693c <__s2b+0x18>
 800695a:	9b08      	ldr	r3, [sp, #32]
 800695c:	6143      	str	r3, [r0, #20]
 800695e:	2d09      	cmp	r5, #9
 8006960:	f04f 0301 	mov.w	r3, #1
 8006964:	6103      	str	r3, [r0, #16]
 8006966:	dd16      	ble.n	8006996 <__s2b+0x72>
 8006968:	f104 0909 	add.w	r9, r4, #9
 800696c:	46c8      	mov	r8, r9
 800696e:	442c      	add	r4, r5
 8006970:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006974:	4601      	mov	r1, r0
 8006976:	3b30      	subs	r3, #48	; 0x30
 8006978:	220a      	movs	r2, #10
 800697a:	4630      	mov	r0, r6
 800697c:	f7ff ff8c 	bl	8006898 <__multadd>
 8006980:	45a0      	cmp	r8, r4
 8006982:	d1f5      	bne.n	8006970 <__s2b+0x4c>
 8006984:	f1a5 0408 	sub.w	r4, r5, #8
 8006988:	444c      	add	r4, r9
 800698a:	1b2d      	subs	r5, r5, r4
 800698c:	1963      	adds	r3, r4, r5
 800698e:	42bb      	cmp	r3, r7
 8006990:	db04      	blt.n	800699c <__s2b+0x78>
 8006992:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006996:	340a      	adds	r4, #10
 8006998:	2509      	movs	r5, #9
 800699a:	e7f6      	b.n	800698a <__s2b+0x66>
 800699c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80069a0:	4601      	mov	r1, r0
 80069a2:	3b30      	subs	r3, #48	; 0x30
 80069a4:	220a      	movs	r2, #10
 80069a6:	4630      	mov	r0, r6
 80069a8:	f7ff ff76 	bl	8006898 <__multadd>
 80069ac:	e7ee      	b.n	800698c <__s2b+0x68>
 80069ae:	bf00      	nop
 80069b0:	08009181 	.word	0x08009181
 80069b4:	08009192 	.word	0x08009192

080069b8 <__hi0bits>:
 80069b8:	0c03      	lsrs	r3, r0, #16
 80069ba:	041b      	lsls	r3, r3, #16
 80069bc:	b9d3      	cbnz	r3, 80069f4 <__hi0bits+0x3c>
 80069be:	0400      	lsls	r0, r0, #16
 80069c0:	2310      	movs	r3, #16
 80069c2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 80069c6:	bf04      	itt	eq
 80069c8:	0200      	lsleq	r0, r0, #8
 80069ca:	3308      	addeq	r3, #8
 80069cc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 80069d0:	bf04      	itt	eq
 80069d2:	0100      	lsleq	r0, r0, #4
 80069d4:	3304      	addeq	r3, #4
 80069d6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80069da:	bf04      	itt	eq
 80069dc:	0080      	lsleq	r0, r0, #2
 80069de:	3302      	addeq	r3, #2
 80069e0:	2800      	cmp	r0, #0
 80069e2:	db05      	blt.n	80069f0 <__hi0bits+0x38>
 80069e4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80069e8:	f103 0301 	add.w	r3, r3, #1
 80069ec:	bf08      	it	eq
 80069ee:	2320      	moveq	r3, #32
 80069f0:	4618      	mov	r0, r3
 80069f2:	4770      	bx	lr
 80069f4:	2300      	movs	r3, #0
 80069f6:	e7e4      	b.n	80069c2 <__hi0bits+0xa>

080069f8 <__lo0bits>:
 80069f8:	6803      	ldr	r3, [r0, #0]
 80069fa:	f013 0207 	ands.w	r2, r3, #7
 80069fe:	d00c      	beq.n	8006a1a <__lo0bits+0x22>
 8006a00:	07d9      	lsls	r1, r3, #31
 8006a02:	d422      	bmi.n	8006a4a <__lo0bits+0x52>
 8006a04:	079a      	lsls	r2, r3, #30
 8006a06:	bf49      	itett	mi
 8006a08:	085b      	lsrmi	r3, r3, #1
 8006a0a:	089b      	lsrpl	r3, r3, #2
 8006a0c:	6003      	strmi	r3, [r0, #0]
 8006a0e:	2201      	movmi	r2, #1
 8006a10:	bf5c      	itt	pl
 8006a12:	6003      	strpl	r3, [r0, #0]
 8006a14:	2202      	movpl	r2, #2
 8006a16:	4610      	mov	r0, r2
 8006a18:	4770      	bx	lr
 8006a1a:	b299      	uxth	r1, r3
 8006a1c:	b909      	cbnz	r1, 8006a22 <__lo0bits+0x2a>
 8006a1e:	0c1b      	lsrs	r3, r3, #16
 8006a20:	2210      	movs	r2, #16
 8006a22:	b2d9      	uxtb	r1, r3
 8006a24:	b909      	cbnz	r1, 8006a2a <__lo0bits+0x32>
 8006a26:	3208      	adds	r2, #8
 8006a28:	0a1b      	lsrs	r3, r3, #8
 8006a2a:	0719      	lsls	r1, r3, #28
 8006a2c:	bf04      	itt	eq
 8006a2e:	091b      	lsreq	r3, r3, #4
 8006a30:	3204      	addeq	r2, #4
 8006a32:	0799      	lsls	r1, r3, #30
 8006a34:	bf04      	itt	eq
 8006a36:	089b      	lsreq	r3, r3, #2
 8006a38:	3202      	addeq	r2, #2
 8006a3a:	07d9      	lsls	r1, r3, #31
 8006a3c:	d403      	bmi.n	8006a46 <__lo0bits+0x4e>
 8006a3e:	085b      	lsrs	r3, r3, #1
 8006a40:	f102 0201 	add.w	r2, r2, #1
 8006a44:	d003      	beq.n	8006a4e <__lo0bits+0x56>
 8006a46:	6003      	str	r3, [r0, #0]
 8006a48:	e7e5      	b.n	8006a16 <__lo0bits+0x1e>
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	e7e3      	b.n	8006a16 <__lo0bits+0x1e>
 8006a4e:	2220      	movs	r2, #32
 8006a50:	e7e1      	b.n	8006a16 <__lo0bits+0x1e>
	...

08006a54 <__i2b>:
 8006a54:	b510      	push	{r4, lr}
 8006a56:	460c      	mov	r4, r1
 8006a58:	2101      	movs	r1, #1
 8006a5a:	f7ff febb 	bl	80067d4 <_Balloc>
 8006a5e:	4602      	mov	r2, r0
 8006a60:	b928      	cbnz	r0, 8006a6e <__i2b+0x1a>
 8006a62:	4b05      	ldr	r3, [pc, #20]	; (8006a78 <__i2b+0x24>)
 8006a64:	4805      	ldr	r0, [pc, #20]	; (8006a7c <__i2b+0x28>)
 8006a66:	f240 1145 	movw	r1, #325	; 0x145
 8006a6a:	f001 fe29 	bl	80086c0 <__assert_func>
 8006a6e:	2301      	movs	r3, #1
 8006a70:	6144      	str	r4, [r0, #20]
 8006a72:	6103      	str	r3, [r0, #16]
 8006a74:	bd10      	pop	{r4, pc}
 8006a76:	bf00      	nop
 8006a78:	08009181 	.word	0x08009181
 8006a7c:	08009192 	.word	0x08009192

08006a80 <__multiply>:
 8006a80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a84:	4691      	mov	r9, r2
 8006a86:	690a      	ldr	r2, [r1, #16]
 8006a88:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006a8c:	429a      	cmp	r2, r3
 8006a8e:	bfb8      	it	lt
 8006a90:	460b      	movlt	r3, r1
 8006a92:	460c      	mov	r4, r1
 8006a94:	bfbc      	itt	lt
 8006a96:	464c      	movlt	r4, r9
 8006a98:	4699      	movlt	r9, r3
 8006a9a:	6927      	ldr	r7, [r4, #16]
 8006a9c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006aa0:	68a3      	ldr	r3, [r4, #8]
 8006aa2:	6861      	ldr	r1, [r4, #4]
 8006aa4:	eb07 060a 	add.w	r6, r7, sl
 8006aa8:	42b3      	cmp	r3, r6
 8006aaa:	b085      	sub	sp, #20
 8006aac:	bfb8      	it	lt
 8006aae:	3101      	addlt	r1, #1
 8006ab0:	f7ff fe90 	bl	80067d4 <_Balloc>
 8006ab4:	b930      	cbnz	r0, 8006ac4 <__multiply+0x44>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	4b44      	ldr	r3, [pc, #272]	; (8006bcc <__multiply+0x14c>)
 8006aba:	4845      	ldr	r0, [pc, #276]	; (8006bd0 <__multiply+0x150>)
 8006abc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006ac0:	f001 fdfe 	bl	80086c0 <__assert_func>
 8006ac4:	f100 0514 	add.w	r5, r0, #20
 8006ac8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006acc:	462b      	mov	r3, r5
 8006ace:	2200      	movs	r2, #0
 8006ad0:	4543      	cmp	r3, r8
 8006ad2:	d321      	bcc.n	8006b18 <__multiply+0x98>
 8006ad4:	f104 0314 	add.w	r3, r4, #20
 8006ad8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006adc:	f109 0314 	add.w	r3, r9, #20
 8006ae0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006ae4:	9202      	str	r2, [sp, #8]
 8006ae6:	1b3a      	subs	r2, r7, r4
 8006ae8:	3a15      	subs	r2, #21
 8006aea:	f022 0203 	bic.w	r2, r2, #3
 8006aee:	3204      	adds	r2, #4
 8006af0:	f104 0115 	add.w	r1, r4, #21
 8006af4:	428f      	cmp	r7, r1
 8006af6:	bf38      	it	cc
 8006af8:	2204      	movcc	r2, #4
 8006afa:	9201      	str	r2, [sp, #4]
 8006afc:	9a02      	ldr	r2, [sp, #8]
 8006afe:	9303      	str	r3, [sp, #12]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d80c      	bhi.n	8006b1e <__multiply+0x9e>
 8006b04:	2e00      	cmp	r6, #0
 8006b06:	dd03      	ble.n	8006b10 <__multiply+0x90>
 8006b08:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d05b      	beq.n	8006bc8 <__multiply+0x148>
 8006b10:	6106      	str	r6, [r0, #16]
 8006b12:	b005      	add	sp, #20
 8006b14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b18:	f843 2b04 	str.w	r2, [r3], #4
 8006b1c:	e7d8      	b.n	8006ad0 <__multiply+0x50>
 8006b1e:	f8b3 a000 	ldrh.w	sl, [r3]
 8006b22:	f1ba 0f00 	cmp.w	sl, #0
 8006b26:	d024      	beq.n	8006b72 <__multiply+0xf2>
 8006b28:	f104 0e14 	add.w	lr, r4, #20
 8006b2c:	46a9      	mov	r9, r5
 8006b2e:	f04f 0c00 	mov.w	ip, #0
 8006b32:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006b36:	f8d9 1000 	ldr.w	r1, [r9]
 8006b3a:	fa1f fb82 	uxth.w	fp, r2
 8006b3e:	b289      	uxth	r1, r1
 8006b40:	fb0a 110b 	mla	r1, sl, fp, r1
 8006b44:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8006b48:	f8d9 2000 	ldr.w	r2, [r9]
 8006b4c:	4461      	add	r1, ip
 8006b4e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006b52:	fb0a c20b 	mla	r2, sl, fp, ip
 8006b56:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8006b5a:	b289      	uxth	r1, r1
 8006b5c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006b60:	4577      	cmp	r7, lr
 8006b62:	f849 1b04 	str.w	r1, [r9], #4
 8006b66:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8006b6a:	d8e2      	bhi.n	8006b32 <__multiply+0xb2>
 8006b6c:	9a01      	ldr	r2, [sp, #4]
 8006b6e:	f845 c002 	str.w	ip, [r5, r2]
 8006b72:	9a03      	ldr	r2, [sp, #12]
 8006b74:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8006b78:	3304      	adds	r3, #4
 8006b7a:	f1b9 0f00 	cmp.w	r9, #0
 8006b7e:	d021      	beq.n	8006bc4 <__multiply+0x144>
 8006b80:	6829      	ldr	r1, [r5, #0]
 8006b82:	f104 0c14 	add.w	ip, r4, #20
 8006b86:	46ae      	mov	lr, r5
 8006b88:	f04f 0a00 	mov.w	sl, #0
 8006b8c:	f8bc b000 	ldrh.w	fp, [ip]
 8006b90:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006b94:	fb09 220b 	mla	r2, r9, fp, r2
 8006b98:	4452      	add	r2, sl
 8006b9a:	b289      	uxth	r1, r1
 8006b9c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006ba0:	f84e 1b04 	str.w	r1, [lr], #4
 8006ba4:	f85c 1b04 	ldr.w	r1, [ip], #4
 8006ba8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006bac:	f8be 1000 	ldrh.w	r1, [lr]
 8006bb0:	fb09 110a 	mla	r1, r9, sl, r1
 8006bb4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8006bb8:	4567      	cmp	r7, ip
 8006bba:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006bbe:	d8e5      	bhi.n	8006b8c <__multiply+0x10c>
 8006bc0:	9a01      	ldr	r2, [sp, #4]
 8006bc2:	50a9      	str	r1, [r5, r2]
 8006bc4:	3504      	adds	r5, #4
 8006bc6:	e799      	b.n	8006afc <__multiply+0x7c>
 8006bc8:	3e01      	subs	r6, #1
 8006bca:	e79b      	b.n	8006b04 <__multiply+0x84>
 8006bcc:	08009181 	.word	0x08009181
 8006bd0:	08009192 	.word	0x08009192

08006bd4 <__pow5mult>:
 8006bd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bd8:	4615      	mov	r5, r2
 8006bda:	f012 0203 	ands.w	r2, r2, #3
 8006bde:	4606      	mov	r6, r0
 8006be0:	460f      	mov	r7, r1
 8006be2:	d007      	beq.n	8006bf4 <__pow5mult+0x20>
 8006be4:	4c25      	ldr	r4, [pc, #148]	; (8006c7c <__pow5mult+0xa8>)
 8006be6:	3a01      	subs	r2, #1
 8006be8:	2300      	movs	r3, #0
 8006bea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006bee:	f7ff fe53 	bl	8006898 <__multadd>
 8006bf2:	4607      	mov	r7, r0
 8006bf4:	10ad      	asrs	r5, r5, #2
 8006bf6:	d03d      	beq.n	8006c74 <__pow5mult+0xa0>
 8006bf8:	69f4      	ldr	r4, [r6, #28]
 8006bfa:	b97c      	cbnz	r4, 8006c1c <__pow5mult+0x48>
 8006bfc:	2010      	movs	r0, #16
 8006bfe:	f7ff fd35 	bl	800666c <malloc>
 8006c02:	4602      	mov	r2, r0
 8006c04:	61f0      	str	r0, [r6, #28]
 8006c06:	b928      	cbnz	r0, 8006c14 <__pow5mult+0x40>
 8006c08:	4b1d      	ldr	r3, [pc, #116]	; (8006c80 <__pow5mult+0xac>)
 8006c0a:	481e      	ldr	r0, [pc, #120]	; (8006c84 <__pow5mult+0xb0>)
 8006c0c:	f240 11b3 	movw	r1, #435	; 0x1b3
 8006c10:	f001 fd56 	bl	80086c0 <__assert_func>
 8006c14:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006c18:	6004      	str	r4, [r0, #0]
 8006c1a:	60c4      	str	r4, [r0, #12]
 8006c1c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8006c20:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006c24:	b94c      	cbnz	r4, 8006c3a <__pow5mult+0x66>
 8006c26:	f240 2171 	movw	r1, #625	; 0x271
 8006c2a:	4630      	mov	r0, r6
 8006c2c:	f7ff ff12 	bl	8006a54 <__i2b>
 8006c30:	2300      	movs	r3, #0
 8006c32:	f8c8 0008 	str.w	r0, [r8, #8]
 8006c36:	4604      	mov	r4, r0
 8006c38:	6003      	str	r3, [r0, #0]
 8006c3a:	f04f 0900 	mov.w	r9, #0
 8006c3e:	07eb      	lsls	r3, r5, #31
 8006c40:	d50a      	bpl.n	8006c58 <__pow5mult+0x84>
 8006c42:	4639      	mov	r1, r7
 8006c44:	4622      	mov	r2, r4
 8006c46:	4630      	mov	r0, r6
 8006c48:	f7ff ff1a 	bl	8006a80 <__multiply>
 8006c4c:	4639      	mov	r1, r7
 8006c4e:	4680      	mov	r8, r0
 8006c50:	4630      	mov	r0, r6
 8006c52:	f7ff fdff 	bl	8006854 <_Bfree>
 8006c56:	4647      	mov	r7, r8
 8006c58:	106d      	asrs	r5, r5, #1
 8006c5a:	d00b      	beq.n	8006c74 <__pow5mult+0xa0>
 8006c5c:	6820      	ldr	r0, [r4, #0]
 8006c5e:	b938      	cbnz	r0, 8006c70 <__pow5mult+0x9c>
 8006c60:	4622      	mov	r2, r4
 8006c62:	4621      	mov	r1, r4
 8006c64:	4630      	mov	r0, r6
 8006c66:	f7ff ff0b 	bl	8006a80 <__multiply>
 8006c6a:	6020      	str	r0, [r4, #0]
 8006c6c:	f8c0 9000 	str.w	r9, [r0]
 8006c70:	4604      	mov	r4, r0
 8006c72:	e7e4      	b.n	8006c3e <__pow5mult+0x6a>
 8006c74:	4638      	mov	r0, r7
 8006c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c7a:	bf00      	nop
 8006c7c:	080092e0 	.word	0x080092e0
 8006c80:	08009112 	.word	0x08009112
 8006c84:	08009192 	.word	0x08009192

08006c88 <__lshift>:
 8006c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c8c:	460c      	mov	r4, r1
 8006c8e:	6849      	ldr	r1, [r1, #4]
 8006c90:	6923      	ldr	r3, [r4, #16]
 8006c92:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006c96:	68a3      	ldr	r3, [r4, #8]
 8006c98:	4607      	mov	r7, r0
 8006c9a:	4691      	mov	r9, r2
 8006c9c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ca0:	f108 0601 	add.w	r6, r8, #1
 8006ca4:	42b3      	cmp	r3, r6
 8006ca6:	db0b      	blt.n	8006cc0 <__lshift+0x38>
 8006ca8:	4638      	mov	r0, r7
 8006caa:	f7ff fd93 	bl	80067d4 <_Balloc>
 8006cae:	4605      	mov	r5, r0
 8006cb0:	b948      	cbnz	r0, 8006cc6 <__lshift+0x3e>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	4b28      	ldr	r3, [pc, #160]	; (8006d58 <__lshift+0xd0>)
 8006cb6:	4829      	ldr	r0, [pc, #164]	; (8006d5c <__lshift+0xd4>)
 8006cb8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 8006cbc:	f001 fd00 	bl	80086c0 <__assert_func>
 8006cc0:	3101      	adds	r1, #1
 8006cc2:	005b      	lsls	r3, r3, #1
 8006cc4:	e7ee      	b.n	8006ca4 <__lshift+0x1c>
 8006cc6:	2300      	movs	r3, #0
 8006cc8:	f100 0114 	add.w	r1, r0, #20
 8006ccc:	f100 0210 	add.w	r2, r0, #16
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	4553      	cmp	r3, sl
 8006cd4:	db33      	blt.n	8006d3e <__lshift+0xb6>
 8006cd6:	6920      	ldr	r0, [r4, #16]
 8006cd8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006cdc:	f104 0314 	add.w	r3, r4, #20
 8006ce0:	f019 091f 	ands.w	r9, r9, #31
 8006ce4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006ce8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006cec:	d02b      	beq.n	8006d46 <__lshift+0xbe>
 8006cee:	f1c9 0e20 	rsb	lr, r9, #32
 8006cf2:	468a      	mov	sl, r1
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	6818      	ldr	r0, [r3, #0]
 8006cf8:	fa00 f009 	lsl.w	r0, r0, r9
 8006cfc:	4310      	orrs	r0, r2
 8006cfe:	f84a 0b04 	str.w	r0, [sl], #4
 8006d02:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d06:	459c      	cmp	ip, r3
 8006d08:	fa22 f20e 	lsr.w	r2, r2, lr
 8006d0c:	d8f3      	bhi.n	8006cf6 <__lshift+0x6e>
 8006d0e:	ebac 0304 	sub.w	r3, ip, r4
 8006d12:	3b15      	subs	r3, #21
 8006d14:	f023 0303 	bic.w	r3, r3, #3
 8006d18:	3304      	adds	r3, #4
 8006d1a:	f104 0015 	add.w	r0, r4, #21
 8006d1e:	4584      	cmp	ip, r0
 8006d20:	bf38      	it	cc
 8006d22:	2304      	movcc	r3, #4
 8006d24:	50ca      	str	r2, [r1, r3]
 8006d26:	b10a      	cbz	r2, 8006d2c <__lshift+0xa4>
 8006d28:	f108 0602 	add.w	r6, r8, #2
 8006d2c:	3e01      	subs	r6, #1
 8006d2e:	4638      	mov	r0, r7
 8006d30:	612e      	str	r6, [r5, #16]
 8006d32:	4621      	mov	r1, r4
 8006d34:	f7ff fd8e 	bl	8006854 <_Bfree>
 8006d38:	4628      	mov	r0, r5
 8006d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d3e:	f842 0f04 	str.w	r0, [r2, #4]!
 8006d42:	3301      	adds	r3, #1
 8006d44:	e7c5      	b.n	8006cd2 <__lshift+0x4a>
 8006d46:	3904      	subs	r1, #4
 8006d48:	f853 2b04 	ldr.w	r2, [r3], #4
 8006d4c:	f841 2f04 	str.w	r2, [r1, #4]!
 8006d50:	459c      	cmp	ip, r3
 8006d52:	d8f9      	bhi.n	8006d48 <__lshift+0xc0>
 8006d54:	e7ea      	b.n	8006d2c <__lshift+0xa4>
 8006d56:	bf00      	nop
 8006d58:	08009181 	.word	0x08009181
 8006d5c:	08009192 	.word	0x08009192

08006d60 <__mcmp>:
 8006d60:	b530      	push	{r4, r5, lr}
 8006d62:	6902      	ldr	r2, [r0, #16]
 8006d64:	690c      	ldr	r4, [r1, #16]
 8006d66:	1b12      	subs	r2, r2, r4
 8006d68:	d10e      	bne.n	8006d88 <__mcmp+0x28>
 8006d6a:	f100 0314 	add.w	r3, r0, #20
 8006d6e:	3114      	adds	r1, #20
 8006d70:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8006d74:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8006d78:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8006d7c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8006d80:	42a5      	cmp	r5, r4
 8006d82:	d003      	beq.n	8006d8c <__mcmp+0x2c>
 8006d84:	d305      	bcc.n	8006d92 <__mcmp+0x32>
 8006d86:	2201      	movs	r2, #1
 8006d88:	4610      	mov	r0, r2
 8006d8a:	bd30      	pop	{r4, r5, pc}
 8006d8c:	4283      	cmp	r3, r0
 8006d8e:	d3f3      	bcc.n	8006d78 <__mcmp+0x18>
 8006d90:	e7fa      	b.n	8006d88 <__mcmp+0x28>
 8006d92:	f04f 32ff 	mov.w	r2, #4294967295
 8006d96:	e7f7      	b.n	8006d88 <__mcmp+0x28>

08006d98 <__mdiff>:
 8006d98:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d9c:	460c      	mov	r4, r1
 8006d9e:	4606      	mov	r6, r0
 8006da0:	4611      	mov	r1, r2
 8006da2:	4620      	mov	r0, r4
 8006da4:	4690      	mov	r8, r2
 8006da6:	f7ff ffdb 	bl	8006d60 <__mcmp>
 8006daa:	1e05      	subs	r5, r0, #0
 8006dac:	d110      	bne.n	8006dd0 <__mdiff+0x38>
 8006dae:	4629      	mov	r1, r5
 8006db0:	4630      	mov	r0, r6
 8006db2:	f7ff fd0f 	bl	80067d4 <_Balloc>
 8006db6:	b930      	cbnz	r0, 8006dc6 <__mdiff+0x2e>
 8006db8:	4b3a      	ldr	r3, [pc, #232]	; (8006ea4 <__mdiff+0x10c>)
 8006dba:	4602      	mov	r2, r0
 8006dbc:	f240 2137 	movw	r1, #567	; 0x237
 8006dc0:	4839      	ldr	r0, [pc, #228]	; (8006ea8 <__mdiff+0x110>)
 8006dc2:	f001 fc7d 	bl	80086c0 <__assert_func>
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006dcc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dd0:	bfa4      	itt	ge
 8006dd2:	4643      	movge	r3, r8
 8006dd4:	46a0      	movge	r8, r4
 8006dd6:	4630      	mov	r0, r6
 8006dd8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006ddc:	bfa6      	itte	ge
 8006dde:	461c      	movge	r4, r3
 8006de0:	2500      	movge	r5, #0
 8006de2:	2501      	movlt	r5, #1
 8006de4:	f7ff fcf6 	bl	80067d4 <_Balloc>
 8006de8:	b920      	cbnz	r0, 8006df4 <__mdiff+0x5c>
 8006dea:	4b2e      	ldr	r3, [pc, #184]	; (8006ea4 <__mdiff+0x10c>)
 8006dec:	4602      	mov	r2, r0
 8006dee:	f240 2145 	movw	r1, #581	; 0x245
 8006df2:	e7e5      	b.n	8006dc0 <__mdiff+0x28>
 8006df4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8006df8:	6926      	ldr	r6, [r4, #16]
 8006dfa:	60c5      	str	r5, [r0, #12]
 8006dfc:	f104 0914 	add.w	r9, r4, #20
 8006e00:	f108 0514 	add.w	r5, r8, #20
 8006e04:	f100 0e14 	add.w	lr, r0, #20
 8006e08:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8006e0c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006e10:	f108 0210 	add.w	r2, r8, #16
 8006e14:	46f2      	mov	sl, lr
 8006e16:	2100      	movs	r1, #0
 8006e18:	f859 3b04 	ldr.w	r3, [r9], #4
 8006e1c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8006e20:	fa11 f88b 	uxtah	r8, r1, fp
 8006e24:	b299      	uxth	r1, r3
 8006e26:	0c1b      	lsrs	r3, r3, #16
 8006e28:	eba8 0801 	sub.w	r8, r8, r1
 8006e2c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006e30:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8006e34:	fa1f f888 	uxth.w	r8, r8
 8006e38:	1419      	asrs	r1, r3, #16
 8006e3a:	454e      	cmp	r6, r9
 8006e3c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8006e40:	f84a 3b04 	str.w	r3, [sl], #4
 8006e44:	d8e8      	bhi.n	8006e18 <__mdiff+0x80>
 8006e46:	1b33      	subs	r3, r6, r4
 8006e48:	3b15      	subs	r3, #21
 8006e4a:	f023 0303 	bic.w	r3, r3, #3
 8006e4e:	3304      	adds	r3, #4
 8006e50:	3415      	adds	r4, #21
 8006e52:	42a6      	cmp	r6, r4
 8006e54:	bf38      	it	cc
 8006e56:	2304      	movcc	r3, #4
 8006e58:	441d      	add	r5, r3
 8006e5a:	4473      	add	r3, lr
 8006e5c:	469e      	mov	lr, r3
 8006e5e:	462e      	mov	r6, r5
 8006e60:	4566      	cmp	r6, ip
 8006e62:	d30e      	bcc.n	8006e82 <__mdiff+0xea>
 8006e64:	f10c 0203 	add.w	r2, ip, #3
 8006e68:	1b52      	subs	r2, r2, r5
 8006e6a:	f022 0203 	bic.w	r2, r2, #3
 8006e6e:	3d03      	subs	r5, #3
 8006e70:	45ac      	cmp	ip, r5
 8006e72:	bf38      	it	cc
 8006e74:	2200      	movcc	r2, #0
 8006e76:	4413      	add	r3, r2
 8006e78:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8006e7c:	b17a      	cbz	r2, 8006e9e <__mdiff+0x106>
 8006e7e:	6107      	str	r7, [r0, #16]
 8006e80:	e7a4      	b.n	8006dcc <__mdiff+0x34>
 8006e82:	f856 8b04 	ldr.w	r8, [r6], #4
 8006e86:	fa11 f288 	uxtah	r2, r1, r8
 8006e8a:	1414      	asrs	r4, r2, #16
 8006e8c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006e90:	b292      	uxth	r2, r2
 8006e92:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8006e96:	f84e 2b04 	str.w	r2, [lr], #4
 8006e9a:	1421      	asrs	r1, r4, #16
 8006e9c:	e7e0      	b.n	8006e60 <__mdiff+0xc8>
 8006e9e:	3f01      	subs	r7, #1
 8006ea0:	e7ea      	b.n	8006e78 <__mdiff+0xe0>
 8006ea2:	bf00      	nop
 8006ea4:	08009181 	.word	0x08009181
 8006ea8:	08009192 	.word	0x08009192

08006eac <__ulp>:
 8006eac:	b082      	sub	sp, #8
 8006eae:	ed8d 0b00 	vstr	d0, [sp]
 8006eb2:	9a01      	ldr	r2, [sp, #4]
 8006eb4:	4b0f      	ldr	r3, [pc, #60]	; (8006ef4 <__ulp+0x48>)
 8006eb6:	4013      	ands	r3, r2
 8006eb8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	dc08      	bgt.n	8006ed2 <__ulp+0x26>
 8006ec0:	425b      	negs	r3, r3
 8006ec2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006ec6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006eca:	da04      	bge.n	8006ed6 <__ulp+0x2a>
 8006ecc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006ed0:	4113      	asrs	r3, r2
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	e008      	b.n	8006ee8 <__ulp+0x3c>
 8006ed6:	f1a2 0314 	sub.w	r3, r2, #20
 8006eda:	2b1e      	cmp	r3, #30
 8006edc:	bfda      	itte	le
 8006ede:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006ee2:	40da      	lsrle	r2, r3
 8006ee4:	2201      	movgt	r2, #1
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	4619      	mov	r1, r3
 8006eea:	4610      	mov	r0, r2
 8006eec:	ec41 0b10 	vmov	d0, r0, r1
 8006ef0:	b002      	add	sp, #8
 8006ef2:	4770      	bx	lr
 8006ef4:	7ff00000 	.word	0x7ff00000

08006ef8 <__b2d>:
 8006ef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006efc:	6906      	ldr	r6, [r0, #16]
 8006efe:	f100 0814 	add.w	r8, r0, #20
 8006f02:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8006f06:	1f37      	subs	r7, r6, #4
 8006f08:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8006f0c:	4610      	mov	r0, r2
 8006f0e:	f7ff fd53 	bl	80069b8 <__hi0bits>
 8006f12:	f1c0 0320 	rsb	r3, r0, #32
 8006f16:	280a      	cmp	r0, #10
 8006f18:	600b      	str	r3, [r1, #0]
 8006f1a:	491b      	ldr	r1, [pc, #108]	; (8006f88 <__b2d+0x90>)
 8006f1c:	dc15      	bgt.n	8006f4a <__b2d+0x52>
 8006f1e:	f1c0 0c0b 	rsb	ip, r0, #11
 8006f22:	fa22 f30c 	lsr.w	r3, r2, ip
 8006f26:	45b8      	cmp	r8, r7
 8006f28:	ea43 0501 	orr.w	r5, r3, r1
 8006f2c:	bf34      	ite	cc
 8006f2e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006f32:	2300      	movcs	r3, #0
 8006f34:	3015      	adds	r0, #21
 8006f36:	fa02 f000 	lsl.w	r0, r2, r0
 8006f3a:	fa23 f30c 	lsr.w	r3, r3, ip
 8006f3e:	4303      	orrs	r3, r0
 8006f40:	461c      	mov	r4, r3
 8006f42:	ec45 4b10 	vmov	d0, r4, r5
 8006f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f4a:	45b8      	cmp	r8, r7
 8006f4c:	bf3a      	itte	cc
 8006f4e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8006f52:	f1a6 0708 	subcc.w	r7, r6, #8
 8006f56:	2300      	movcs	r3, #0
 8006f58:	380b      	subs	r0, #11
 8006f5a:	d012      	beq.n	8006f82 <__b2d+0x8a>
 8006f5c:	f1c0 0120 	rsb	r1, r0, #32
 8006f60:	fa23 f401 	lsr.w	r4, r3, r1
 8006f64:	4082      	lsls	r2, r0
 8006f66:	4322      	orrs	r2, r4
 8006f68:	4547      	cmp	r7, r8
 8006f6a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 8006f6e:	bf8c      	ite	hi
 8006f70:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8006f74:	2200      	movls	r2, #0
 8006f76:	4083      	lsls	r3, r0
 8006f78:	40ca      	lsrs	r2, r1
 8006f7a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006f7e:	4313      	orrs	r3, r2
 8006f80:	e7de      	b.n	8006f40 <__b2d+0x48>
 8006f82:	ea42 0501 	orr.w	r5, r2, r1
 8006f86:	e7db      	b.n	8006f40 <__b2d+0x48>
 8006f88:	3ff00000 	.word	0x3ff00000

08006f8c <__d2b>:
 8006f8c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006f90:	460f      	mov	r7, r1
 8006f92:	2101      	movs	r1, #1
 8006f94:	ec59 8b10 	vmov	r8, r9, d0
 8006f98:	4616      	mov	r6, r2
 8006f9a:	f7ff fc1b 	bl	80067d4 <_Balloc>
 8006f9e:	4604      	mov	r4, r0
 8006fa0:	b930      	cbnz	r0, 8006fb0 <__d2b+0x24>
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	4b24      	ldr	r3, [pc, #144]	; (8007038 <__d2b+0xac>)
 8006fa6:	4825      	ldr	r0, [pc, #148]	; (800703c <__d2b+0xb0>)
 8006fa8:	f240 310f 	movw	r1, #783	; 0x30f
 8006fac:	f001 fb88 	bl	80086c0 <__assert_func>
 8006fb0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006fb4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006fb8:	bb2d      	cbnz	r5, 8007006 <__d2b+0x7a>
 8006fba:	9301      	str	r3, [sp, #4]
 8006fbc:	f1b8 0300 	subs.w	r3, r8, #0
 8006fc0:	d026      	beq.n	8007010 <__d2b+0x84>
 8006fc2:	4668      	mov	r0, sp
 8006fc4:	9300      	str	r3, [sp, #0]
 8006fc6:	f7ff fd17 	bl	80069f8 <__lo0bits>
 8006fca:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006fce:	b1e8      	cbz	r0, 800700c <__d2b+0x80>
 8006fd0:	f1c0 0320 	rsb	r3, r0, #32
 8006fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8006fd8:	430b      	orrs	r3, r1
 8006fda:	40c2      	lsrs	r2, r0
 8006fdc:	6163      	str	r3, [r4, #20]
 8006fde:	9201      	str	r2, [sp, #4]
 8006fe0:	9b01      	ldr	r3, [sp, #4]
 8006fe2:	61a3      	str	r3, [r4, #24]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	bf14      	ite	ne
 8006fe8:	2202      	movne	r2, #2
 8006fea:	2201      	moveq	r2, #1
 8006fec:	6122      	str	r2, [r4, #16]
 8006fee:	b1bd      	cbz	r5, 8007020 <__d2b+0x94>
 8006ff0:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006ff4:	4405      	add	r5, r0
 8006ff6:	603d      	str	r5, [r7, #0]
 8006ff8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006ffc:	6030      	str	r0, [r6, #0]
 8006ffe:	4620      	mov	r0, r4
 8007000:	b003      	add	sp, #12
 8007002:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007006:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800700a:	e7d6      	b.n	8006fba <__d2b+0x2e>
 800700c:	6161      	str	r1, [r4, #20]
 800700e:	e7e7      	b.n	8006fe0 <__d2b+0x54>
 8007010:	a801      	add	r0, sp, #4
 8007012:	f7ff fcf1 	bl	80069f8 <__lo0bits>
 8007016:	9b01      	ldr	r3, [sp, #4]
 8007018:	6163      	str	r3, [r4, #20]
 800701a:	3020      	adds	r0, #32
 800701c:	2201      	movs	r2, #1
 800701e:	e7e5      	b.n	8006fec <__d2b+0x60>
 8007020:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007024:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8007028:	6038      	str	r0, [r7, #0]
 800702a:	6918      	ldr	r0, [r3, #16]
 800702c:	f7ff fcc4 	bl	80069b8 <__hi0bits>
 8007030:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007034:	e7e2      	b.n	8006ffc <__d2b+0x70>
 8007036:	bf00      	nop
 8007038:	08009181 	.word	0x08009181
 800703c:	08009192 	.word	0x08009192

08007040 <__ratio>:
 8007040:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007044:	4688      	mov	r8, r1
 8007046:	4669      	mov	r1, sp
 8007048:	4681      	mov	r9, r0
 800704a:	f7ff ff55 	bl	8006ef8 <__b2d>
 800704e:	a901      	add	r1, sp, #4
 8007050:	4640      	mov	r0, r8
 8007052:	ec55 4b10 	vmov	r4, r5, d0
 8007056:	f7ff ff4f 	bl	8006ef8 <__b2d>
 800705a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800705e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8007062:	eba3 0c02 	sub.w	ip, r3, r2
 8007066:	e9dd 3200 	ldrd	r3, r2, [sp]
 800706a:	1a9b      	subs	r3, r3, r2
 800706c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8007070:	ec51 0b10 	vmov	r0, r1, d0
 8007074:	2b00      	cmp	r3, #0
 8007076:	bfd6      	itet	le
 8007078:	460a      	movle	r2, r1
 800707a:	462a      	movgt	r2, r5
 800707c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007080:	468b      	mov	fp, r1
 8007082:	462f      	mov	r7, r5
 8007084:	bfd4      	ite	le
 8007086:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800708a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800708e:	4620      	mov	r0, r4
 8007090:	ee10 2a10 	vmov	r2, s0
 8007094:	465b      	mov	r3, fp
 8007096:	4639      	mov	r1, r7
 8007098:	f7f9 fc00 	bl	800089c <__aeabi_ddiv>
 800709c:	ec41 0b10 	vmov	d0, r0, r1
 80070a0:	b003      	add	sp, #12
 80070a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080070a6 <__copybits>:
 80070a6:	3901      	subs	r1, #1
 80070a8:	b570      	push	{r4, r5, r6, lr}
 80070aa:	1149      	asrs	r1, r1, #5
 80070ac:	6914      	ldr	r4, [r2, #16]
 80070ae:	3101      	adds	r1, #1
 80070b0:	f102 0314 	add.w	r3, r2, #20
 80070b4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80070b8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80070bc:	1f05      	subs	r5, r0, #4
 80070be:	42a3      	cmp	r3, r4
 80070c0:	d30c      	bcc.n	80070dc <__copybits+0x36>
 80070c2:	1aa3      	subs	r3, r4, r2
 80070c4:	3b11      	subs	r3, #17
 80070c6:	f023 0303 	bic.w	r3, r3, #3
 80070ca:	3211      	adds	r2, #17
 80070cc:	42a2      	cmp	r2, r4
 80070ce:	bf88      	it	hi
 80070d0:	2300      	movhi	r3, #0
 80070d2:	4418      	add	r0, r3
 80070d4:	2300      	movs	r3, #0
 80070d6:	4288      	cmp	r0, r1
 80070d8:	d305      	bcc.n	80070e6 <__copybits+0x40>
 80070da:	bd70      	pop	{r4, r5, r6, pc}
 80070dc:	f853 6b04 	ldr.w	r6, [r3], #4
 80070e0:	f845 6f04 	str.w	r6, [r5, #4]!
 80070e4:	e7eb      	b.n	80070be <__copybits+0x18>
 80070e6:	f840 3b04 	str.w	r3, [r0], #4
 80070ea:	e7f4      	b.n	80070d6 <__copybits+0x30>

080070ec <__any_on>:
 80070ec:	f100 0214 	add.w	r2, r0, #20
 80070f0:	6900      	ldr	r0, [r0, #16]
 80070f2:	114b      	asrs	r3, r1, #5
 80070f4:	4298      	cmp	r0, r3
 80070f6:	b510      	push	{r4, lr}
 80070f8:	db11      	blt.n	800711e <__any_on+0x32>
 80070fa:	dd0a      	ble.n	8007112 <__any_on+0x26>
 80070fc:	f011 011f 	ands.w	r1, r1, #31
 8007100:	d007      	beq.n	8007112 <__any_on+0x26>
 8007102:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8007106:	fa24 f001 	lsr.w	r0, r4, r1
 800710a:	fa00 f101 	lsl.w	r1, r0, r1
 800710e:	428c      	cmp	r4, r1
 8007110:	d10b      	bne.n	800712a <__any_on+0x3e>
 8007112:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007116:	4293      	cmp	r3, r2
 8007118:	d803      	bhi.n	8007122 <__any_on+0x36>
 800711a:	2000      	movs	r0, #0
 800711c:	bd10      	pop	{r4, pc}
 800711e:	4603      	mov	r3, r0
 8007120:	e7f7      	b.n	8007112 <__any_on+0x26>
 8007122:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007126:	2900      	cmp	r1, #0
 8007128:	d0f5      	beq.n	8007116 <__any_on+0x2a>
 800712a:	2001      	movs	r0, #1
 800712c:	e7f6      	b.n	800711c <__any_on+0x30>

0800712e <sulp>:
 800712e:	b570      	push	{r4, r5, r6, lr}
 8007130:	4604      	mov	r4, r0
 8007132:	460d      	mov	r5, r1
 8007134:	ec45 4b10 	vmov	d0, r4, r5
 8007138:	4616      	mov	r6, r2
 800713a:	f7ff feb7 	bl	8006eac <__ulp>
 800713e:	ec51 0b10 	vmov	r0, r1, d0
 8007142:	b17e      	cbz	r6, 8007164 <sulp+0x36>
 8007144:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8007148:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800714c:	2b00      	cmp	r3, #0
 800714e:	dd09      	ble.n	8007164 <sulp+0x36>
 8007150:	051b      	lsls	r3, r3, #20
 8007152:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8007156:	2400      	movs	r4, #0
 8007158:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800715c:	4622      	mov	r2, r4
 800715e:	462b      	mov	r3, r5
 8007160:	f7f9 fa72 	bl	8000648 <__aeabi_dmul>
 8007164:	bd70      	pop	{r4, r5, r6, pc}
	...

08007168 <_strtod_l>:
 8007168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800716c:	ed2d 8b02 	vpush	{d8}
 8007170:	b09b      	sub	sp, #108	; 0x6c
 8007172:	4604      	mov	r4, r0
 8007174:	9213      	str	r2, [sp, #76]	; 0x4c
 8007176:	2200      	movs	r2, #0
 8007178:	9216      	str	r2, [sp, #88]	; 0x58
 800717a:	460d      	mov	r5, r1
 800717c:	f04f 0800 	mov.w	r8, #0
 8007180:	f04f 0900 	mov.w	r9, #0
 8007184:	460a      	mov	r2, r1
 8007186:	9215      	str	r2, [sp, #84]	; 0x54
 8007188:	7811      	ldrb	r1, [r2, #0]
 800718a:	292b      	cmp	r1, #43	; 0x2b
 800718c:	d04c      	beq.n	8007228 <_strtod_l+0xc0>
 800718e:	d83a      	bhi.n	8007206 <_strtod_l+0x9e>
 8007190:	290d      	cmp	r1, #13
 8007192:	d834      	bhi.n	80071fe <_strtod_l+0x96>
 8007194:	2908      	cmp	r1, #8
 8007196:	d834      	bhi.n	8007202 <_strtod_l+0x9a>
 8007198:	2900      	cmp	r1, #0
 800719a:	d03d      	beq.n	8007218 <_strtod_l+0xb0>
 800719c:	2200      	movs	r2, #0
 800719e:	920a      	str	r2, [sp, #40]	; 0x28
 80071a0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80071a2:	7832      	ldrb	r2, [r6, #0]
 80071a4:	2a30      	cmp	r2, #48	; 0x30
 80071a6:	f040 80b4 	bne.w	8007312 <_strtod_l+0x1aa>
 80071aa:	7872      	ldrb	r2, [r6, #1]
 80071ac:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80071b0:	2a58      	cmp	r2, #88	; 0x58
 80071b2:	d170      	bne.n	8007296 <_strtod_l+0x12e>
 80071b4:	9302      	str	r3, [sp, #8]
 80071b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071b8:	9301      	str	r3, [sp, #4]
 80071ba:	ab16      	add	r3, sp, #88	; 0x58
 80071bc:	9300      	str	r3, [sp, #0]
 80071be:	4a8e      	ldr	r2, [pc, #568]	; (80073f8 <_strtod_l+0x290>)
 80071c0:	ab17      	add	r3, sp, #92	; 0x5c
 80071c2:	a915      	add	r1, sp, #84	; 0x54
 80071c4:	4620      	mov	r0, r4
 80071c6:	f001 fb17 	bl	80087f8 <__gethex>
 80071ca:	f010 070f 	ands.w	r7, r0, #15
 80071ce:	4605      	mov	r5, r0
 80071d0:	d005      	beq.n	80071de <_strtod_l+0x76>
 80071d2:	2f06      	cmp	r7, #6
 80071d4:	d12a      	bne.n	800722c <_strtod_l+0xc4>
 80071d6:	3601      	adds	r6, #1
 80071d8:	2300      	movs	r3, #0
 80071da:	9615      	str	r6, [sp, #84]	; 0x54
 80071dc:	930a      	str	r3, [sp, #40]	; 0x28
 80071de:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	f040 857f 	bne.w	8007ce4 <_strtod_l+0xb7c>
 80071e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071e8:	b1db      	cbz	r3, 8007222 <_strtod_l+0xba>
 80071ea:	4642      	mov	r2, r8
 80071ec:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80071f0:	ec43 2b10 	vmov	d0, r2, r3
 80071f4:	b01b      	add	sp, #108	; 0x6c
 80071f6:	ecbd 8b02 	vpop	{d8}
 80071fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071fe:	2920      	cmp	r1, #32
 8007200:	d1cc      	bne.n	800719c <_strtod_l+0x34>
 8007202:	3201      	adds	r2, #1
 8007204:	e7bf      	b.n	8007186 <_strtod_l+0x1e>
 8007206:	292d      	cmp	r1, #45	; 0x2d
 8007208:	d1c8      	bne.n	800719c <_strtod_l+0x34>
 800720a:	2101      	movs	r1, #1
 800720c:	910a      	str	r1, [sp, #40]	; 0x28
 800720e:	1c51      	adds	r1, r2, #1
 8007210:	9115      	str	r1, [sp, #84]	; 0x54
 8007212:	7852      	ldrb	r2, [r2, #1]
 8007214:	2a00      	cmp	r2, #0
 8007216:	d1c3      	bne.n	80071a0 <_strtod_l+0x38>
 8007218:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800721a:	9515      	str	r5, [sp, #84]	; 0x54
 800721c:	2b00      	cmp	r3, #0
 800721e:	f040 855f 	bne.w	8007ce0 <_strtod_l+0xb78>
 8007222:	4642      	mov	r2, r8
 8007224:	464b      	mov	r3, r9
 8007226:	e7e3      	b.n	80071f0 <_strtod_l+0x88>
 8007228:	2100      	movs	r1, #0
 800722a:	e7ef      	b.n	800720c <_strtod_l+0xa4>
 800722c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800722e:	b13a      	cbz	r2, 8007240 <_strtod_l+0xd8>
 8007230:	2135      	movs	r1, #53	; 0x35
 8007232:	a818      	add	r0, sp, #96	; 0x60
 8007234:	f7ff ff37 	bl	80070a6 <__copybits>
 8007238:	9916      	ldr	r1, [sp, #88]	; 0x58
 800723a:	4620      	mov	r0, r4
 800723c:	f7ff fb0a 	bl	8006854 <_Bfree>
 8007240:	3f01      	subs	r7, #1
 8007242:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007244:	2f04      	cmp	r7, #4
 8007246:	d806      	bhi.n	8007256 <_strtod_l+0xee>
 8007248:	e8df f007 	tbb	[pc, r7]
 800724c:	201d0314 	.word	0x201d0314
 8007250:	14          	.byte	0x14
 8007251:	00          	.byte	0x00
 8007252:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8007256:	05e9      	lsls	r1, r5, #23
 8007258:	bf48      	it	mi
 800725a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800725e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007262:	0d1b      	lsrs	r3, r3, #20
 8007264:	051b      	lsls	r3, r3, #20
 8007266:	2b00      	cmp	r3, #0
 8007268:	d1b9      	bne.n	80071de <_strtod_l+0x76>
 800726a:	f7fe fb05 	bl	8005878 <__errno>
 800726e:	2322      	movs	r3, #34	; 0x22
 8007270:	6003      	str	r3, [r0, #0]
 8007272:	e7b4      	b.n	80071de <_strtod_l+0x76>
 8007274:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8007278:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800727c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007280:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8007284:	e7e7      	b.n	8007256 <_strtod_l+0xee>
 8007286:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8007400 <_strtod_l+0x298>
 800728a:	e7e4      	b.n	8007256 <_strtod_l+0xee>
 800728c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8007290:	f04f 38ff 	mov.w	r8, #4294967295
 8007294:	e7df      	b.n	8007256 <_strtod_l+0xee>
 8007296:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007298:	1c5a      	adds	r2, r3, #1
 800729a:	9215      	str	r2, [sp, #84]	; 0x54
 800729c:	785b      	ldrb	r3, [r3, #1]
 800729e:	2b30      	cmp	r3, #48	; 0x30
 80072a0:	d0f9      	beq.n	8007296 <_strtod_l+0x12e>
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d09b      	beq.n	80071de <_strtod_l+0x76>
 80072a6:	2301      	movs	r3, #1
 80072a8:	f04f 0a00 	mov.w	sl, #0
 80072ac:	9304      	str	r3, [sp, #16]
 80072ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80072b0:	930b      	str	r3, [sp, #44]	; 0x2c
 80072b2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80072b6:	46d3      	mov	fp, sl
 80072b8:	220a      	movs	r2, #10
 80072ba:	9815      	ldr	r0, [sp, #84]	; 0x54
 80072bc:	7806      	ldrb	r6, [r0, #0]
 80072be:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80072c2:	b2d9      	uxtb	r1, r3
 80072c4:	2909      	cmp	r1, #9
 80072c6:	d926      	bls.n	8007316 <_strtod_l+0x1ae>
 80072c8:	494c      	ldr	r1, [pc, #304]	; (80073fc <_strtod_l+0x294>)
 80072ca:	2201      	movs	r2, #1
 80072cc:	f001 f9c0 	bl	8008650 <strncmp>
 80072d0:	2800      	cmp	r0, #0
 80072d2:	d030      	beq.n	8007336 <_strtod_l+0x1ce>
 80072d4:	2000      	movs	r0, #0
 80072d6:	4632      	mov	r2, r6
 80072d8:	9005      	str	r0, [sp, #20]
 80072da:	465e      	mov	r6, fp
 80072dc:	4603      	mov	r3, r0
 80072de:	2a65      	cmp	r2, #101	; 0x65
 80072e0:	d001      	beq.n	80072e6 <_strtod_l+0x17e>
 80072e2:	2a45      	cmp	r2, #69	; 0x45
 80072e4:	d113      	bne.n	800730e <_strtod_l+0x1a6>
 80072e6:	b91e      	cbnz	r6, 80072f0 <_strtod_l+0x188>
 80072e8:	9a04      	ldr	r2, [sp, #16]
 80072ea:	4302      	orrs	r2, r0
 80072ec:	d094      	beq.n	8007218 <_strtod_l+0xb0>
 80072ee:	2600      	movs	r6, #0
 80072f0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80072f2:	1c6a      	adds	r2, r5, #1
 80072f4:	9215      	str	r2, [sp, #84]	; 0x54
 80072f6:	786a      	ldrb	r2, [r5, #1]
 80072f8:	2a2b      	cmp	r2, #43	; 0x2b
 80072fa:	d074      	beq.n	80073e6 <_strtod_l+0x27e>
 80072fc:	2a2d      	cmp	r2, #45	; 0x2d
 80072fe:	d078      	beq.n	80073f2 <_strtod_l+0x28a>
 8007300:	f04f 0c00 	mov.w	ip, #0
 8007304:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8007308:	2909      	cmp	r1, #9
 800730a:	d97f      	bls.n	800740c <_strtod_l+0x2a4>
 800730c:	9515      	str	r5, [sp, #84]	; 0x54
 800730e:	2700      	movs	r7, #0
 8007310:	e09e      	b.n	8007450 <_strtod_l+0x2e8>
 8007312:	2300      	movs	r3, #0
 8007314:	e7c8      	b.n	80072a8 <_strtod_l+0x140>
 8007316:	f1bb 0f08 	cmp.w	fp, #8
 800731a:	bfd8      	it	le
 800731c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800731e:	f100 0001 	add.w	r0, r0, #1
 8007322:	bfda      	itte	le
 8007324:	fb02 3301 	mlale	r3, r2, r1, r3
 8007328:	9309      	strle	r3, [sp, #36]	; 0x24
 800732a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800732e:	f10b 0b01 	add.w	fp, fp, #1
 8007332:	9015      	str	r0, [sp, #84]	; 0x54
 8007334:	e7c1      	b.n	80072ba <_strtod_l+0x152>
 8007336:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007338:	1c5a      	adds	r2, r3, #1
 800733a:	9215      	str	r2, [sp, #84]	; 0x54
 800733c:	785a      	ldrb	r2, [r3, #1]
 800733e:	f1bb 0f00 	cmp.w	fp, #0
 8007342:	d037      	beq.n	80073b4 <_strtod_l+0x24c>
 8007344:	9005      	str	r0, [sp, #20]
 8007346:	465e      	mov	r6, fp
 8007348:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800734c:	2b09      	cmp	r3, #9
 800734e:	d912      	bls.n	8007376 <_strtod_l+0x20e>
 8007350:	2301      	movs	r3, #1
 8007352:	e7c4      	b.n	80072de <_strtod_l+0x176>
 8007354:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007356:	1c5a      	adds	r2, r3, #1
 8007358:	9215      	str	r2, [sp, #84]	; 0x54
 800735a:	785a      	ldrb	r2, [r3, #1]
 800735c:	3001      	adds	r0, #1
 800735e:	2a30      	cmp	r2, #48	; 0x30
 8007360:	d0f8      	beq.n	8007354 <_strtod_l+0x1ec>
 8007362:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8007366:	2b08      	cmp	r3, #8
 8007368:	f200 84c1 	bhi.w	8007cee <_strtod_l+0xb86>
 800736c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800736e:	9005      	str	r0, [sp, #20]
 8007370:	2000      	movs	r0, #0
 8007372:	930b      	str	r3, [sp, #44]	; 0x2c
 8007374:	4606      	mov	r6, r0
 8007376:	3a30      	subs	r2, #48	; 0x30
 8007378:	f100 0301 	add.w	r3, r0, #1
 800737c:	d014      	beq.n	80073a8 <_strtod_l+0x240>
 800737e:	9905      	ldr	r1, [sp, #20]
 8007380:	4419      	add	r1, r3
 8007382:	9105      	str	r1, [sp, #20]
 8007384:	4633      	mov	r3, r6
 8007386:	eb00 0c06 	add.w	ip, r0, r6
 800738a:	210a      	movs	r1, #10
 800738c:	4563      	cmp	r3, ip
 800738e:	d113      	bne.n	80073b8 <_strtod_l+0x250>
 8007390:	1833      	adds	r3, r6, r0
 8007392:	2b08      	cmp	r3, #8
 8007394:	f106 0601 	add.w	r6, r6, #1
 8007398:	4406      	add	r6, r0
 800739a:	dc1a      	bgt.n	80073d2 <_strtod_l+0x26a>
 800739c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800739e:	230a      	movs	r3, #10
 80073a0:	fb03 2301 	mla	r3, r3, r1, r2
 80073a4:	9309      	str	r3, [sp, #36]	; 0x24
 80073a6:	2300      	movs	r3, #0
 80073a8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80073aa:	1c51      	adds	r1, r2, #1
 80073ac:	9115      	str	r1, [sp, #84]	; 0x54
 80073ae:	7852      	ldrb	r2, [r2, #1]
 80073b0:	4618      	mov	r0, r3
 80073b2:	e7c9      	b.n	8007348 <_strtod_l+0x1e0>
 80073b4:	4658      	mov	r0, fp
 80073b6:	e7d2      	b.n	800735e <_strtod_l+0x1f6>
 80073b8:	2b08      	cmp	r3, #8
 80073ba:	f103 0301 	add.w	r3, r3, #1
 80073be:	dc03      	bgt.n	80073c8 <_strtod_l+0x260>
 80073c0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80073c2:	434f      	muls	r7, r1
 80073c4:	9709      	str	r7, [sp, #36]	; 0x24
 80073c6:	e7e1      	b.n	800738c <_strtod_l+0x224>
 80073c8:	2b10      	cmp	r3, #16
 80073ca:	bfd8      	it	le
 80073cc:	fb01 fa0a 	mulle.w	sl, r1, sl
 80073d0:	e7dc      	b.n	800738c <_strtod_l+0x224>
 80073d2:	2e10      	cmp	r6, #16
 80073d4:	bfdc      	itt	le
 80073d6:	230a      	movle	r3, #10
 80073d8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80073dc:	e7e3      	b.n	80073a6 <_strtod_l+0x23e>
 80073de:	2300      	movs	r3, #0
 80073e0:	9305      	str	r3, [sp, #20]
 80073e2:	2301      	movs	r3, #1
 80073e4:	e780      	b.n	80072e8 <_strtod_l+0x180>
 80073e6:	f04f 0c00 	mov.w	ip, #0
 80073ea:	1caa      	adds	r2, r5, #2
 80073ec:	9215      	str	r2, [sp, #84]	; 0x54
 80073ee:	78aa      	ldrb	r2, [r5, #2]
 80073f0:	e788      	b.n	8007304 <_strtod_l+0x19c>
 80073f2:	f04f 0c01 	mov.w	ip, #1
 80073f6:	e7f8      	b.n	80073ea <_strtod_l+0x282>
 80073f8:	080092f0 	.word	0x080092f0
 80073fc:	080092ec 	.word	0x080092ec
 8007400:	7ff00000 	.word	0x7ff00000
 8007404:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007406:	1c51      	adds	r1, r2, #1
 8007408:	9115      	str	r1, [sp, #84]	; 0x54
 800740a:	7852      	ldrb	r2, [r2, #1]
 800740c:	2a30      	cmp	r2, #48	; 0x30
 800740e:	d0f9      	beq.n	8007404 <_strtod_l+0x29c>
 8007410:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8007414:	2908      	cmp	r1, #8
 8007416:	f63f af7a 	bhi.w	800730e <_strtod_l+0x1a6>
 800741a:	3a30      	subs	r2, #48	; 0x30
 800741c:	9208      	str	r2, [sp, #32]
 800741e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007420:	920c      	str	r2, [sp, #48]	; 0x30
 8007422:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8007424:	1c57      	adds	r7, r2, #1
 8007426:	9715      	str	r7, [sp, #84]	; 0x54
 8007428:	7852      	ldrb	r2, [r2, #1]
 800742a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800742e:	f1be 0f09 	cmp.w	lr, #9
 8007432:	d938      	bls.n	80074a6 <_strtod_l+0x33e>
 8007434:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007436:	1a7f      	subs	r7, r7, r1
 8007438:	2f08      	cmp	r7, #8
 800743a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800743e:	dc03      	bgt.n	8007448 <_strtod_l+0x2e0>
 8007440:	9908      	ldr	r1, [sp, #32]
 8007442:	428f      	cmp	r7, r1
 8007444:	bfa8      	it	ge
 8007446:	460f      	movge	r7, r1
 8007448:	f1bc 0f00 	cmp.w	ip, #0
 800744c:	d000      	beq.n	8007450 <_strtod_l+0x2e8>
 800744e:	427f      	negs	r7, r7
 8007450:	2e00      	cmp	r6, #0
 8007452:	d14f      	bne.n	80074f4 <_strtod_l+0x38c>
 8007454:	9904      	ldr	r1, [sp, #16]
 8007456:	4301      	orrs	r1, r0
 8007458:	f47f aec1 	bne.w	80071de <_strtod_l+0x76>
 800745c:	2b00      	cmp	r3, #0
 800745e:	f47f aedb 	bne.w	8007218 <_strtod_l+0xb0>
 8007462:	2a69      	cmp	r2, #105	; 0x69
 8007464:	d029      	beq.n	80074ba <_strtod_l+0x352>
 8007466:	dc26      	bgt.n	80074b6 <_strtod_l+0x34e>
 8007468:	2a49      	cmp	r2, #73	; 0x49
 800746a:	d026      	beq.n	80074ba <_strtod_l+0x352>
 800746c:	2a4e      	cmp	r2, #78	; 0x4e
 800746e:	f47f aed3 	bne.w	8007218 <_strtod_l+0xb0>
 8007472:	499b      	ldr	r1, [pc, #620]	; (80076e0 <_strtod_l+0x578>)
 8007474:	a815      	add	r0, sp, #84	; 0x54
 8007476:	f001 fbff 	bl	8008c78 <__match>
 800747a:	2800      	cmp	r0, #0
 800747c:	f43f aecc 	beq.w	8007218 <_strtod_l+0xb0>
 8007480:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	2b28      	cmp	r3, #40	; 0x28
 8007486:	d12f      	bne.n	80074e8 <_strtod_l+0x380>
 8007488:	4996      	ldr	r1, [pc, #600]	; (80076e4 <_strtod_l+0x57c>)
 800748a:	aa18      	add	r2, sp, #96	; 0x60
 800748c:	a815      	add	r0, sp, #84	; 0x54
 800748e:	f001 fc07 	bl	8008ca0 <__hexnan>
 8007492:	2805      	cmp	r0, #5
 8007494:	d128      	bne.n	80074e8 <_strtod_l+0x380>
 8007496:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007498:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800749c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 80074a0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 80074a4:	e69b      	b.n	80071de <_strtod_l+0x76>
 80074a6:	9f08      	ldr	r7, [sp, #32]
 80074a8:	210a      	movs	r1, #10
 80074aa:	fb01 2107 	mla	r1, r1, r7, r2
 80074ae:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 80074b2:	9208      	str	r2, [sp, #32]
 80074b4:	e7b5      	b.n	8007422 <_strtod_l+0x2ba>
 80074b6:	2a6e      	cmp	r2, #110	; 0x6e
 80074b8:	e7d9      	b.n	800746e <_strtod_l+0x306>
 80074ba:	498b      	ldr	r1, [pc, #556]	; (80076e8 <_strtod_l+0x580>)
 80074bc:	a815      	add	r0, sp, #84	; 0x54
 80074be:	f001 fbdb 	bl	8008c78 <__match>
 80074c2:	2800      	cmp	r0, #0
 80074c4:	f43f aea8 	beq.w	8007218 <_strtod_l+0xb0>
 80074c8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80074ca:	4988      	ldr	r1, [pc, #544]	; (80076ec <_strtod_l+0x584>)
 80074cc:	3b01      	subs	r3, #1
 80074ce:	a815      	add	r0, sp, #84	; 0x54
 80074d0:	9315      	str	r3, [sp, #84]	; 0x54
 80074d2:	f001 fbd1 	bl	8008c78 <__match>
 80074d6:	b910      	cbnz	r0, 80074de <_strtod_l+0x376>
 80074d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80074da:	3301      	adds	r3, #1
 80074dc:	9315      	str	r3, [sp, #84]	; 0x54
 80074de:	f8df 921c 	ldr.w	r9, [pc, #540]	; 80076fc <_strtod_l+0x594>
 80074e2:	f04f 0800 	mov.w	r8, #0
 80074e6:	e67a      	b.n	80071de <_strtod_l+0x76>
 80074e8:	4881      	ldr	r0, [pc, #516]	; (80076f0 <_strtod_l+0x588>)
 80074ea:	f001 f8e1 	bl	80086b0 <nan>
 80074ee:	ec59 8b10 	vmov	r8, r9, d0
 80074f2:	e674      	b.n	80071de <_strtod_l+0x76>
 80074f4:	9b05      	ldr	r3, [sp, #20]
 80074f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80074f8:	1afb      	subs	r3, r7, r3
 80074fa:	f1bb 0f00 	cmp.w	fp, #0
 80074fe:	bf08      	it	eq
 8007500:	46b3      	moveq	fp, r6
 8007502:	2e10      	cmp	r6, #16
 8007504:	9308      	str	r3, [sp, #32]
 8007506:	4635      	mov	r5, r6
 8007508:	bfa8      	it	ge
 800750a:	2510      	movge	r5, #16
 800750c:	f7f9 f822 	bl	8000554 <__aeabi_ui2d>
 8007510:	2e09      	cmp	r6, #9
 8007512:	4680      	mov	r8, r0
 8007514:	4689      	mov	r9, r1
 8007516:	dd13      	ble.n	8007540 <_strtod_l+0x3d8>
 8007518:	4b76      	ldr	r3, [pc, #472]	; (80076f4 <_strtod_l+0x58c>)
 800751a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800751e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8007522:	f7f9 f891 	bl	8000648 <__aeabi_dmul>
 8007526:	4680      	mov	r8, r0
 8007528:	4650      	mov	r0, sl
 800752a:	4689      	mov	r9, r1
 800752c:	f7f9 f812 	bl	8000554 <__aeabi_ui2d>
 8007530:	4602      	mov	r2, r0
 8007532:	460b      	mov	r3, r1
 8007534:	4640      	mov	r0, r8
 8007536:	4649      	mov	r1, r9
 8007538:	f7f8 fed0 	bl	80002dc <__adddf3>
 800753c:	4680      	mov	r8, r0
 800753e:	4689      	mov	r9, r1
 8007540:	2e0f      	cmp	r6, #15
 8007542:	dc38      	bgt.n	80075b6 <_strtod_l+0x44e>
 8007544:	9b08      	ldr	r3, [sp, #32]
 8007546:	2b00      	cmp	r3, #0
 8007548:	f43f ae49 	beq.w	80071de <_strtod_l+0x76>
 800754c:	dd24      	ble.n	8007598 <_strtod_l+0x430>
 800754e:	2b16      	cmp	r3, #22
 8007550:	dc0b      	bgt.n	800756a <_strtod_l+0x402>
 8007552:	4968      	ldr	r1, [pc, #416]	; (80076f4 <_strtod_l+0x58c>)
 8007554:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007558:	e9d1 0100 	ldrd	r0, r1, [r1]
 800755c:	4642      	mov	r2, r8
 800755e:	464b      	mov	r3, r9
 8007560:	f7f9 f872 	bl	8000648 <__aeabi_dmul>
 8007564:	4680      	mov	r8, r0
 8007566:	4689      	mov	r9, r1
 8007568:	e639      	b.n	80071de <_strtod_l+0x76>
 800756a:	9a08      	ldr	r2, [sp, #32]
 800756c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8007570:	4293      	cmp	r3, r2
 8007572:	db20      	blt.n	80075b6 <_strtod_l+0x44e>
 8007574:	4c5f      	ldr	r4, [pc, #380]	; (80076f4 <_strtod_l+0x58c>)
 8007576:	f1c6 060f 	rsb	r6, r6, #15
 800757a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800757e:	4642      	mov	r2, r8
 8007580:	464b      	mov	r3, r9
 8007582:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007586:	f7f9 f85f 	bl	8000648 <__aeabi_dmul>
 800758a:	9b08      	ldr	r3, [sp, #32]
 800758c:	1b9e      	subs	r6, r3, r6
 800758e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8007592:	e9d4 2300 	ldrd	r2, r3, [r4]
 8007596:	e7e3      	b.n	8007560 <_strtod_l+0x3f8>
 8007598:	9b08      	ldr	r3, [sp, #32]
 800759a:	3316      	adds	r3, #22
 800759c:	db0b      	blt.n	80075b6 <_strtod_l+0x44e>
 800759e:	9b05      	ldr	r3, [sp, #20]
 80075a0:	1bdf      	subs	r7, r3, r7
 80075a2:	4b54      	ldr	r3, [pc, #336]	; (80076f4 <_strtod_l+0x58c>)
 80075a4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80075a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80075ac:	4640      	mov	r0, r8
 80075ae:	4649      	mov	r1, r9
 80075b0:	f7f9 f974 	bl	800089c <__aeabi_ddiv>
 80075b4:	e7d6      	b.n	8007564 <_strtod_l+0x3fc>
 80075b6:	9b08      	ldr	r3, [sp, #32]
 80075b8:	1b75      	subs	r5, r6, r5
 80075ba:	441d      	add	r5, r3
 80075bc:	2d00      	cmp	r5, #0
 80075be:	dd70      	ble.n	80076a2 <_strtod_l+0x53a>
 80075c0:	f015 030f 	ands.w	r3, r5, #15
 80075c4:	d00a      	beq.n	80075dc <_strtod_l+0x474>
 80075c6:	494b      	ldr	r1, [pc, #300]	; (80076f4 <_strtod_l+0x58c>)
 80075c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80075cc:	4642      	mov	r2, r8
 80075ce:	464b      	mov	r3, r9
 80075d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80075d4:	f7f9 f838 	bl	8000648 <__aeabi_dmul>
 80075d8:	4680      	mov	r8, r0
 80075da:	4689      	mov	r9, r1
 80075dc:	f035 050f 	bics.w	r5, r5, #15
 80075e0:	d04d      	beq.n	800767e <_strtod_l+0x516>
 80075e2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 80075e6:	dd22      	ble.n	800762e <_strtod_l+0x4c6>
 80075e8:	2500      	movs	r5, #0
 80075ea:	46ab      	mov	fp, r5
 80075ec:	9509      	str	r5, [sp, #36]	; 0x24
 80075ee:	9505      	str	r5, [sp, #20]
 80075f0:	2322      	movs	r3, #34	; 0x22
 80075f2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 80076fc <_strtod_l+0x594>
 80075f6:	6023      	str	r3, [r4, #0]
 80075f8:	f04f 0800 	mov.w	r8, #0
 80075fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075fe:	2b00      	cmp	r3, #0
 8007600:	f43f aded 	beq.w	80071de <_strtod_l+0x76>
 8007604:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007606:	4620      	mov	r0, r4
 8007608:	f7ff f924 	bl	8006854 <_Bfree>
 800760c:	9905      	ldr	r1, [sp, #20]
 800760e:	4620      	mov	r0, r4
 8007610:	f7ff f920 	bl	8006854 <_Bfree>
 8007614:	4659      	mov	r1, fp
 8007616:	4620      	mov	r0, r4
 8007618:	f7ff f91c 	bl	8006854 <_Bfree>
 800761c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800761e:	4620      	mov	r0, r4
 8007620:	f7ff f918 	bl	8006854 <_Bfree>
 8007624:	4629      	mov	r1, r5
 8007626:	4620      	mov	r0, r4
 8007628:	f7ff f914 	bl	8006854 <_Bfree>
 800762c:	e5d7      	b.n	80071de <_strtod_l+0x76>
 800762e:	4b32      	ldr	r3, [pc, #200]	; (80076f8 <_strtod_l+0x590>)
 8007630:	9304      	str	r3, [sp, #16]
 8007632:	2300      	movs	r3, #0
 8007634:	112d      	asrs	r5, r5, #4
 8007636:	4640      	mov	r0, r8
 8007638:	4649      	mov	r1, r9
 800763a:	469a      	mov	sl, r3
 800763c:	2d01      	cmp	r5, #1
 800763e:	dc21      	bgt.n	8007684 <_strtod_l+0x51c>
 8007640:	b10b      	cbz	r3, 8007646 <_strtod_l+0x4de>
 8007642:	4680      	mov	r8, r0
 8007644:	4689      	mov	r9, r1
 8007646:	492c      	ldr	r1, [pc, #176]	; (80076f8 <_strtod_l+0x590>)
 8007648:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800764c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8007650:	4642      	mov	r2, r8
 8007652:	464b      	mov	r3, r9
 8007654:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007658:	f7f8 fff6 	bl	8000648 <__aeabi_dmul>
 800765c:	4b27      	ldr	r3, [pc, #156]	; (80076fc <_strtod_l+0x594>)
 800765e:	460a      	mov	r2, r1
 8007660:	400b      	ands	r3, r1
 8007662:	4927      	ldr	r1, [pc, #156]	; (8007700 <_strtod_l+0x598>)
 8007664:	428b      	cmp	r3, r1
 8007666:	4680      	mov	r8, r0
 8007668:	d8be      	bhi.n	80075e8 <_strtod_l+0x480>
 800766a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800766e:	428b      	cmp	r3, r1
 8007670:	bf86      	itte	hi
 8007672:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8007704 <_strtod_l+0x59c>
 8007676:	f04f 38ff 	movhi.w	r8, #4294967295
 800767a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800767e:	2300      	movs	r3, #0
 8007680:	9304      	str	r3, [sp, #16]
 8007682:	e07b      	b.n	800777c <_strtod_l+0x614>
 8007684:	07ea      	lsls	r2, r5, #31
 8007686:	d505      	bpl.n	8007694 <_strtod_l+0x52c>
 8007688:	9b04      	ldr	r3, [sp, #16]
 800768a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768e:	f7f8 ffdb 	bl	8000648 <__aeabi_dmul>
 8007692:	2301      	movs	r3, #1
 8007694:	9a04      	ldr	r2, [sp, #16]
 8007696:	3208      	adds	r2, #8
 8007698:	f10a 0a01 	add.w	sl, sl, #1
 800769c:	106d      	asrs	r5, r5, #1
 800769e:	9204      	str	r2, [sp, #16]
 80076a0:	e7cc      	b.n	800763c <_strtod_l+0x4d4>
 80076a2:	d0ec      	beq.n	800767e <_strtod_l+0x516>
 80076a4:	426d      	negs	r5, r5
 80076a6:	f015 020f 	ands.w	r2, r5, #15
 80076aa:	d00a      	beq.n	80076c2 <_strtod_l+0x55a>
 80076ac:	4b11      	ldr	r3, [pc, #68]	; (80076f4 <_strtod_l+0x58c>)
 80076ae:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80076b2:	4640      	mov	r0, r8
 80076b4:	4649      	mov	r1, r9
 80076b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ba:	f7f9 f8ef 	bl	800089c <__aeabi_ddiv>
 80076be:	4680      	mov	r8, r0
 80076c0:	4689      	mov	r9, r1
 80076c2:	112d      	asrs	r5, r5, #4
 80076c4:	d0db      	beq.n	800767e <_strtod_l+0x516>
 80076c6:	2d1f      	cmp	r5, #31
 80076c8:	dd1e      	ble.n	8007708 <_strtod_l+0x5a0>
 80076ca:	2500      	movs	r5, #0
 80076cc:	46ab      	mov	fp, r5
 80076ce:	9509      	str	r5, [sp, #36]	; 0x24
 80076d0:	9505      	str	r5, [sp, #20]
 80076d2:	2322      	movs	r3, #34	; 0x22
 80076d4:	f04f 0800 	mov.w	r8, #0
 80076d8:	f04f 0900 	mov.w	r9, #0
 80076dc:	6023      	str	r3, [r4, #0]
 80076de:	e78d      	b.n	80075fc <_strtod_l+0x494>
 80076e0:	080090d9 	.word	0x080090d9
 80076e4:	08009304 	.word	0x08009304
 80076e8:	080090d1 	.word	0x080090d1
 80076ec:	08009108 	.word	0x08009108
 80076f0:	08009495 	.word	0x08009495
 80076f4:	08009218 	.word	0x08009218
 80076f8:	080091f0 	.word	0x080091f0
 80076fc:	7ff00000 	.word	0x7ff00000
 8007700:	7ca00000 	.word	0x7ca00000
 8007704:	7fefffff 	.word	0x7fefffff
 8007708:	f015 0310 	ands.w	r3, r5, #16
 800770c:	bf18      	it	ne
 800770e:	236a      	movne	r3, #106	; 0x6a
 8007710:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 8007ab4 <_strtod_l+0x94c>
 8007714:	9304      	str	r3, [sp, #16]
 8007716:	4640      	mov	r0, r8
 8007718:	4649      	mov	r1, r9
 800771a:	2300      	movs	r3, #0
 800771c:	07ea      	lsls	r2, r5, #31
 800771e:	d504      	bpl.n	800772a <_strtod_l+0x5c2>
 8007720:	e9da 2300 	ldrd	r2, r3, [sl]
 8007724:	f7f8 ff90 	bl	8000648 <__aeabi_dmul>
 8007728:	2301      	movs	r3, #1
 800772a:	106d      	asrs	r5, r5, #1
 800772c:	f10a 0a08 	add.w	sl, sl, #8
 8007730:	d1f4      	bne.n	800771c <_strtod_l+0x5b4>
 8007732:	b10b      	cbz	r3, 8007738 <_strtod_l+0x5d0>
 8007734:	4680      	mov	r8, r0
 8007736:	4689      	mov	r9, r1
 8007738:	9b04      	ldr	r3, [sp, #16]
 800773a:	b1bb      	cbz	r3, 800776c <_strtod_l+0x604>
 800773c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8007740:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8007744:	2b00      	cmp	r3, #0
 8007746:	4649      	mov	r1, r9
 8007748:	dd10      	ble.n	800776c <_strtod_l+0x604>
 800774a:	2b1f      	cmp	r3, #31
 800774c:	f340 811e 	ble.w	800798c <_strtod_l+0x824>
 8007750:	2b34      	cmp	r3, #52	; 0x34
 8007752:	bfde      	ittt	le
 8007754:	f04f 33ff 	movle.w	r3, #4294967295
 8007758:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800775c:	4093      	lslle	r3, r2
 800775e:	f04f 0800 	mov.w	r8, #0
 8007762:	bfcc      	ite	gt
 8007764:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8007768:	ea03 0901 	andle.w	r9, r3, r1
 800776c:	2200      	movs	r2, #0
 800776e:	2300      	movs	r3, #0
 8007770:	4640      	mov	r0, r8
 8007772:	4649      	mov	r1, r9
 8007774:	f7f9 f9d0 	bl	8000b18 <__aeabi_dcmpeq>
 8007778:	2800      	cmp	r0, #0
 800777a:	d1a6      	bne.n	80076ca <_strtod_l+0x562>
 800777c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800777e:	9300      	str	r3, [sp, #0]
 8007780:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007782:	4633      	mov	r3, r6
 8007784:	465a      	mov	r2, fp
 8007786:	4620      	mov	r0, r4
 8007788:	f7ff f8cc 	bl	8006924 <__s2b>
 800778c:	9009      	str	r0, [sp, #36]	; 0x24
 800778e:	2800      	cmp	r0, #0
 8007790:	f43f af2a 	beq.w	80075e8 <_strtod_l+0x480>
 8007794:	9a08      	ldr	r2, [sp, #32]
 8007796:	9b05      	ldr	r3, [sp, #20]
 8007798:	2a00      	cmp	r2, #0
 800779a:	eba3 0307 	sub.w	r3, r3, r7
 800779e:	bfa8      	it	ge
 80077a0:	2300      	movge	r3, #0
 80077a2:	930c      	str	r3, [sp, #48]	; 0x30
 80077a4:	2500      	movs	r5, #0
 80077a6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80077aa:	9312      	str	r3, [sp, #72]	; 0x48
 80077ac:	46ab      	mov	fp, r5
 80077ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077b0:	4620      	mov	r0, r4
 80077b2:	6859      	ldr	r1, [r3, #4]
 80077b4:	f7ff f80e 	bl	80067d4 <_Balloc>
 80077b8:	9005      	str	r0, [sp, #20]
 80077ba:	2800      	cmp	r0, #0
 80077bc:	f43f af18 	beq.w	80075f0 <_strtod_l+0x488>
 80077c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077c2:	691a      	ldr	r2, [r3, #16]
 80077c4:	3202      	adds	r2, #2
 80077c6:	f103 010c 	add.w	r1, r3, #12
 80077ca:	0092      	lsls	r2, r2, #2
 80077cc:	300c      	adds	r0, #12
 80077ce:	f000 ff61 	bl	8008694 <memcpy>
 80077d2:	ec49 8b10 	vmov	d0, r8, r9
 80077d6:	aa18      	add	r2, sp, #96	; 0x60
 80077d8:	a917      	add	r1, sp, #92	; 0x5c
 80077da:	4620      	mov	r0, r4
 80077dc:	f7ff fbd6 	bl	8006f8c <__d2b>
 80077e0:	ec49 8b18 	vmov	d8, r8, r9
 80077e4:	9016      	str	r0, [sp, #88]	; 0x58
 80077e6:	2800      	cmp	r0, #0
 80077e8:	f43f af02 	beq.w	80075f0 <_strtod_l+0x488>
 80077ec:	2101      	movs	r1, #1
 80077ee:	4620      	mov	r0, r4
 80077f0:	f7ff f930 	bl	8006a54 <__i2b>
 80077f4:	4683      	mov	fp, r0
 80077f6:	2800      	cmp	r0, #0
 80077f8:	f43f aefa 	beq.w	80075f0 <_strtod_l+0x488>
 80077fc:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80077fe:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007800:	2e00      	cmp	r6, #0
 8007802:	bfab      	itete	ge
 8007804:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8007806:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8007808:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800780a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800780e:	bfac      	ite	ge
 8007810:	eb06 0a03 	addge.w	sl, r6, r3
 8007814:	1b9f      	sublt	r7, r3, r6
 8007816:	9b04      	ldr	r3, [sp, #16]
 8007818:	1af6      	subs	r6, r6, r3
 800781a:	4416      	add	r6, r2
 800781c:	4ba0      	ldr	r3, [pc, #640]	; (8007aa0 <_strtod_l+0x938>)
 800781e:	3e01      	subs	r6, #1
 8007820:	429e      	cmp	r6, r3
 8007822:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8007826:	f280 80c4 	bge.w	80079b2 <_strtod_l+0x84a>
 800782a:	1b9b      	subs	r3, r3, r6
 800782c:	2b1f      	cmp	r3, #31
 800782e:	eba2 0203 	sub.w	r2, r2, r3
 8007832:	f04f 0101 	mov.w	r1, #1
 8007836:	f300 80b0 	bgt.w	800799a <_strtod_l+0x832>
 800783a:	fa01 f303 	lsl.w	r3, r1, r3
 800783e:	930e      	str	r3, [sp, #56]	; 0x38
 8007840:	2300      	movs	r3, #0
 8007842:	930d      	str	r3, [sp, #52]	; 0x34
 8007844:	eb0a 0602 	add.w	r6, sl, r2
 8007848:	9b04      	ldr	r3, [sp, #16]
 800784a:	45b2      	cmp	sl, r6
 800784c:	4417      	add	r7, r2
 800784e:	441f      	add	r7, r3
 8007850:	4653      	mov	r3, sl
 8007852:	bfa8      	it	ge
 8007854:	4633      	movge	r3, r6
 8007856:	42bb      	cmp	r3, r7
 8007858:	bfa8      	it	ge
 800785a:	463b      	movge	r3, r7
 800785c:	2b00      	cmp	r3, #0
 800785e:	bfc2      	ittt	gt
 8007860:	1af6      	subgt	r6, r6, r3
 8007862:	1aff      	subgt	r7, r7, r3
 8007864:	ebaa 0a03 	subgt.w	sl, sl, r3
 8007868:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800786a:	2b00      	cmp	r3, #0
 800786c:	dd17      	ble.n	800789e <_strtod_l+0x736>
 800786e:	4659      	mov	r1, fp
 8007870:	461a      	mov	r2, r3
 8007872:	4620      	mov	r0, r4
 8007874:	f7ff f9ae 	bl	8006bd4 <__pow5mult>
 8007878:	4683      	mov	fp, r0
 800787a:	2800      	cmp	r0, #0
 800787c:	f43f aeb8 	beq.w	80075f0 <_strtod_l+0x488>
 8007880:	4601      	mov	r1, r0
 8007882:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8007884:	4620      	mov	r0, r4
 8007886:	f7ff f8fb 	bl	8006a80 <__multiply>
 800788a:	900b      	str	r0, [sp, #44]	; 0x2c
 800788c:	2800      	cmp	r0, #0
 800788e:	f43f aeaf 	beq.w	80075f0 <_strtod_l+0x488>
 8007892:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007894:	4620      	mov	r0, r4
 8007896:	f7fe ffdd 	bl	8006854 <_Bfree>
 800789a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800789c:	9316      	str	r3, [sp, #88]	; 0x58
 800789e:	2e00      	cmp	r6, #0
 80078a0:	f300 808c 	bgt.w	80079bc <_strtod_l+0x854>
 80078a4:	9b08      	ldr	r3, [sp, #32]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	dd08      	ble.n	80078bc <_strtod_l+0x754>
 80078aa:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80078ac:	9905      	ldr	r1, [sp, #20]
 80078ae:	4620      	mov	r0, r4
 80078b0:	f7ff f990 	bl	8006bd4 <__pow5mult>
 80078b4:	9005      	str	r0, [sp, #20]
 80078b6:	2800      	cmp	r0, #0
 80078b8:	f43f ae9a 	beq.w	80075f0 <_strtod_l+0x488>
 80078bc:	2f00      	cmp	r7, #0
 80078be:	dd08      	ble.n	80078d2 <_strtod_l+0x76a>
 80078c0:	9905      	ldr	r1, [sp, #20]
 80078c2:	463a      	mov	r2, r7
 80078c4:	4620      	mov	r0, r4
 80078c6:	f7ff f9df 	bl	8006c88 <__lshift>
 80078ca:	9005      	str	r0, [sp, #20]
 80078cc:	2800      	cmp	r0, #0
 80078ce:	f43f ae8f 	beq.w	80075f0 <_strtod_l+0x488>
 80078d2:	f1ba 0f00 	cmp.w	sl, #0
 80078d6:	dd08      	ble.n	80078ea <_strtod_l+0x782>
 80078d8:	4659      	mov	r1, fp
 80078da:	4652      	mov	r2, sl
 80078dc:	4620      	mov	r0, r4
 80078de:	f7ff f9d3 	bl	8006c88 <__lshift>
 80078e2:	4683      	mov	fp, r0
 80078e4:	2800      	cmp	r0, #0
 80078e6:	f43f ae83 	beq.w	80075f0 <_strtod_l+0x488>
 80078ea:	9a05      	ldr	r2, [sp, #20]
 80078ec:	9916      	ldr	r1, [sp, #88]	; 0x58
 80078ee:	4620      	mov	r0, r4
 80078f0:	f7ff fa52 	bl	8006d98 <__mdiff>
 80078f4:	4605      	mov	r5, r0
 80078f6:	2800      	cmp	r0, #0
 80078f8:	f43f ae7a 	beq.w	80075f0 <_strtod_l+0x488>
 80078fc:	68c3      	ldr	r3, [r0, #12]
 80078fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8007900:	2300      	movs	r3, #0
 8007902:	60c3      	str	r3, [r0, #12]
 8007904:	4659      	mov	r1, fp
 8007906:	f7ff fa2b 	bl	8006d60 <__mcmp>
 800790a:	2800      	cmp	r0, #0
 800790c:	da60      	bge.n	80079d0 <_strtod_l+0x868>
 800790e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007910:	ea53 0308 	orrs.w	r3, r3, r8
 8007914:	f040 8084 	bne.w	8007a20 <_strtod_l+0x8b8>
 8007918:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800791c:	2b00      	cmp	r3, #0
 800791e:	d17f      	bne.n	8007a20 <_strtod_l+0x8b8>
 8007920:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007924:	0d1b      	lsrs	r3, r3, #20
 8007926:	051b      	lsls	r3, r3, #20
 8007928:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800792c:	d978      	bls.n	8007a20 <_strtod_l+0x8b8>
 800792e:	696b      	ldr	r3, [r5, #20]
 8007930:	b913      	cbnz	r3, 8007938 <_strtod_l+0x7d0>
 8007932:	692b      	ldr	r3, [r5, #16]
 8007934:	2b01      	cmp	r3, #1
 8007936:	dd73      	ble.n	8007a20 <_strtod_l+0x8b8>
 8007938:	4629      	mov	r1, r5
 800793a:	2201      	movs	r2, #1
 800793c:	4620      	mov	r0, r4
 800793e:	f7ff f9a3 	bl	8006c88 <__lshift>
 8007942:	4659      	mov	r1, fp
 8007944:	4605      	mov	r5, r0
 8007946:	f7ff fa0b 	bl	8006d60 <__mcmp>
 800794a:	2800      	cmp	r0, #0
 800794c:	dd68      	ble.n	8007a20 <_strtod_l+0x8b8>
 800794e:	9904      	ldr	r1, [sp, #16]
 8007950:	4a54      	ldr	r2, [pc, #336]	; (8007aa4 <_strtod_l+0x93c>)
 8007952:	464b      	mov	r3, r9
 8007954:	2900      	cmp	r1, #0
 8007956:	f000 8084 	beq.w	8007a62 <_strtod_l+0x8fa>
 800795a:	ea02 0109 	and.w	r1, r2, r9
 800795e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8007962:	dc7e      	bgt.n	8007a62 <_strtod_l+0x8fa>
 8007964:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8007968:	f77f aeb3 	ble.w	80076d2 <_strtod_l+0x56a>
 800796c:	4b4e      	ldr	r3, [pc, #312]	; (8007aa8 <_strtod_l+0x940>)
 800796e:	4640      	mov	r0, r8
 8007970:	4649      	mov	r1, r9
 8007972:	2200      	movs	r2, #0
 8007974:	f7f8 fe68 	bl	8000648 <__aeabi_dmul>
 8007978:	4b4a      	ldr	r3, [pc, #296]	; (8007aa4 <_strtod_l+0x93c>)
 800797a:	400b      	ands	r3, r1
 800797c:	4680      	mov	r8, r0
 800797e:	4689      	mov	r9, r1
 8007980:	2b00      	cmp	r3, #0
 8007982:	f47f ae3f 	bne.w	8007604 <_strtod_l+0x49c>
 8007986:	2322      	movs	r3, #34	; 0x22
 8007988:	6023      	str	r3, [r4, #0]
 800798a:	e63b      	b.n	8007604 <_strtod_l+0x49c>
 800798c:	f04f 32ff 	mov.w	r2, #4294967295
 8007990:	fa02 f303 	lsl.w	r3, r2, r3
 8007994:	ea03 0808 	and.w	r8, r3, r8
 8007998:	e6e8      	b.n	800776c <_strtod_l+0x604>
 800799a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800799e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 80079a2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 80079a6:	36e2      	adds	r6, #226	; 0xe2
 80079a8:	fa01 f306 	lsl.w	r3, r1, r6
 80079ac:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 80079b0:	e748      	b.n	8007844 <_strtod_l+0x6dc>
 80079b2:	2100      	movs	r1, #0
 80079b4:	2301      	movs	r3, #1
 80079b6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 80079ba:	e743      	b.n	8007844 <_strtod_l+0x6dc>
 80079bc:	9916      	ldr	r1, [sp, #88]	; 0x58
 80079be:	4632      	mov	r2, r6
 80079c0:	4620      	mov	r0, r4
 80079c2:	f7ff f961 	bl	8006c88 <__lshift>
 80079c6:	9016      	str	r0, [sp, #88]	; 0x58
 80079c8:	2800      	cmp	r0, #0
 80079ca:	f47f af6b 	bne.w	80078a4 <_strtod_l+0x73c>
 80079ce:	e60f      	b.n	80075f0 <_strtod_l+0x488>
 80079d0:	46ca      	mov	sl, r9
 80079d2:	d171      	bne.n	8007ab8 <_strtod_l+0x950>
 80079d4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80079d6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80079da:	b352      	cbz	r2, 8007a32 <_strtod_l+0x8ca>
 80079dc:	4a33      	ldr	r2, [pc, #204]	; (8007aac <_strtod_l+0x944>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d12a      	bne.n	8007a38 <_strtod_l+0x8d0>
 80079e2:	9b04      	ldr	r3, [sp, #16]
 80079e4:	4641      	mov	r1, r8
 80079e6:	b1fb      	cbz	r3, 8007a28 <_strtod_l+0x8c0>
 80079e8:	4b2e      	ldr	r3, [pc, #184]	; (8007aa4 <_strtod_l+0x93c>)
 80079ea:	ea09 0303 	and.w	r3, r9, r3
 80079ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80079f2:	f04f 32ff 	mov.w	r2, #4294967295
 80079f6:	d81a      	bhi.n	8007a2e <_strtod_l+0x8c6>
 80079f8:	0d1b      	lsrs	r3, r3, #20
 80079fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80079fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007a02:	4299      	cmp	r1, r3
 8007a04:	d118      	bne.n	8007a38 <_strtod_l+0x8d0>
 8007a06:	4b2a      	ldr	r3, [pc, #168]	; (8007ab0 <_strtod_l+0x948>)
 8007a08:	459a      	cmp	sl, r3
 8007a0a:	d102      	bne.n	8007a12 <_strtod_l+0x8aa>
 8007a0c:	3101      	adds	r1, #1
 8007a0e:	f43f adef 	beq.w	80075f0 <_strtod_l+0x488>
 8007a12:	4b24      	ldr	r3, [pc, #144]	; (8007aa4 <_strtod_l+0x93c>)
 8007a14:	ea0a 0303 	and.w	r3, sl, r3
 8007a18:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8007a1c:	f04f 0800 	mov.w	r8, #0
 8007a20:	9b04      	ldr	r3, [sp, #16]
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d1a2      	bne.n	800796c <_strtod_l+0x804>
 8007a26:	e5ed      	b.n	8007604 <_strtod_l+0x49c>
 8007a28:	f04f 33ff 	mov.w	r3, #4294967295
 8007a2c:	e7e9      	b.n	8007a02 <_strtod_l+0x89a>
 8007a2e:	4613      	mov	r3, r2
 8007a30:	e7e7      	b.n	8007a02 <_strtod_l+0x89a>
 8007a32:	ea53 0308 	orrs.w	r3, r3, r8
 8007a36:	d08a      	beq.n	800794e <_strtod_l+0x7e6>
 8007a38:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a3a:	b1e3      	cbz	r3, 8007a76 <_strtod_l+0x90e>
 8007a3c:	ea13 0f0a 	tst.w	r3, sl
 8007a40:	d0ee      	beq.n	8007a20 <_strtod_l+0x8b8>
 8007a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007a44:	9a04      	ldr	r2, [sp, #16]
 8007a46:	4640      	mov	r0, r8
 8007a48:	4649      	mov	r1, r9
 8007a4a:	b1c3      	cbz	r3, 8007a7e <_strtod_l+0x916>
 8007a4c:	f7ff fb6f 	bl	800712e <sulp>
 8007a50:	4602      	mov	r2, r0
 8007a52:	460b      	mov	r3, r1
 8007a54:	ec51 0b18 	vmov	r0, r1, d8
 8007a58:	f7f8 fc40 	bl	80002dc <__adddf3>
 8007a5c:	4680      	mov	r8, r0
 8007a5e:	4689      	mov	r9, r1
 8007a60:	e7de      	b.n	8007a20 <_strtod_l+0x8b8>
 8007a62:	4013      	ands	r3, r2
 8007a64:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8007a68:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8007a6c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8007a70:	f04f 38ff 	mov.w	r8, #4294967295
 8007a74:	e7d4      	b.n	8007a20 <_strtod_l+0x8b8>
 8007a76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a78:	ea13 0f08 	tst.w	r3, r8
 8007a7c:	e7e0      	b.n	8007a40 <_strtod_l+0x8d8>
 8007a7e:	f7ff fb56 	bl	800712e <sulp>
 8007a82:	4602      	mov	r2, r0
 8007a84:	460b      	mov	r3, r1
 8007a86:	ec51 0b18 	vmov	r0, r1, d8
 8007a8a:	f7f8 fc25 	bl	80002d8 <__aeabi_dsub>
 8007a8e:	2200      	movs	r2, #0
 8007a90:	2300      	movs	r3, #0
 8007a92:	4680      	mov	r8, r0
 8007a94:	4689      	mov	r9, r1
 8007a96:	f7f9 f83f 	bl	8000b18 <__aeabi_dcmpeq>
 8007a9a:	2800      	cmp	r0, #0
 8007a9c:	d0c0      	beq.n	8007a20 <_strtod_l+0x8b8>
 8007a9e:	e618      	b.n	80076d2 <_strtod_l+0x56a>
 8007aa0:	fffffc02 	.word	0xfffffc02
 8007aa4:	7ff00000 	.word	0x7ff00000
 8007aa8:	39500000 	.word	0x39500000
 8007aac:	000fffff 	.word	0x000fffff
 8007ab0:	7fefffff 	.word	0x7fefffff
 8007ab4:	08009318 	.word	0x08009318
 8007ab8:	4659      	mov	r1, fp
 8007aba:	4628      	mov	r0, r5
 8007abc:	f7ff fac0 	bl	8007040 <__ratio>
 8007ac0:	ec57 6b10 	vmov	r6, r7, d0
 8007ac4:	ee10 0a10 	vmov	r0, s0
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007ace:	4639      	mov	r1, r7
 8007ad0:	f7f9 f836 	bl	8000b40 <__aeabi_dcmple>
 8007ad4:	2800      	cmp	r0, #0
 8007ad6:	d071      	beq.n	8007bbc <_strtod_l+0xa54>
 8007ad8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d17c      	bne.n	8007bd8 <_strtod_l+0xa70>
 8007ade:	f1b8 0f00 	cmp.w	r8, #0
 8007ae2:	d15a      	bne.n	8007b9a <_strtod_l+0xa32>
 8007ae4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d15d      	bne.n	8007ba8 <_strtod_l+0xa40>
 8007aec:	4b90      	ldr	r3, [pc, #576]	; (8007d30 <_strtod_l+0xbc8>)
 8007aee:	2200      	movs	r2, #0
 8007af0:	4630      	mov	r0, r6
 8007af2:	4639      	mov	r1, r7
 8007af4:	f7f9 f81a 	bl	8000b2c <__aeabi_dcmplt>
 8007af8:	2800      	cmp	r0, #0
 8007afa:	d15c      	bne.n	8007bb6 <_strtod_l+0xa4e>
 8007afc:	4630      	mov	r0, r6
 8007afe:	4639      	mov	r1, r7
 8007b00:	4b8c      	ldr	r3, [pc, #560]	; (8007d34 <_strtod_l+0xbcc>)
 8007b02:	2200      	movs	r2, #0
 8007b04:	f7f8 fda0 	bl	8000648 <__aeabi_dmul>
 8007b08:	4606      	mov	r6, r0
 8007b0a:	460f      	mov	r7, r1
 8007b0c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8007b10:	9606      	str	r6, [sp, #24]
 8007b12:	9307      	str	r3, [sp, #28]
 8007b14:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b18:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007b1c:	4b86      	ldr	r3, [pc, #536]	; (8007d38 <_strtod_l+0xbd0>)
 8007b1e:	ea0a 0303 	and.w	r3, sl, r3
 8007b22:	930d      	str	r3, [sp, #52]	; 0x34
 8007b24:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007b26:	4b85      	ldr	r3, [pc, #532]	; (8007d3c <_strtod_l+0xbd4>)
 8007b28:	429a      	cmp	r2, r3
 8007b2a:	f040 8090 	bne.w	8007c4e <_strtod_l+0xae6>
 8007b2e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8007b32:	ec49 8b10 	vmov	d0, r8, r9
 8007b36:	f7ff f9b9 	bl	8006eac <__ulp>
 8007b3a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007b3e:	ec51 0b10 	vmov	r0, r1, d0
 8007b42:	f7f8 fd81 	bl	8000648 <__aeabi_dmul>
 8007b46:	4642      	mov	r2, r8
 8007b48:	464b      	mov	r3, r9
 8007b4a:	f7f8 fbc7 	bl	80002dc <__adddf3>
 8007b4e:	460b      	mov	r3, r1
 8007b50:	4979      	ldr	r1, [pc, #484]	; (8007d38 <_strtod_l+0xbd0>)
 8007b52:	4a7b      	ldr	r2, [pc, #492]	; (8007d40 <_strtod_l+0xbd8>)
 8007b54:	4019      	ands	r1, r3
 8007b56:	4291      	cmp	r1, r2
 8007b58:	4680      	mov	r8, r0
 8007b5a:	d944      	bls.n	8007be6 <_strtod_l+0xa7e>
 8007b5c:	ee18 2a90 	vmov	r2, s17
 8007b60:	4b78      	ldr	r3, [pc, #480]	; (8007d44 <_strtod_l+0xbdc>)
 8007b62:	429a      	cmp	r2, r3
 8007b64:	d104      	bne.n	8007b70 <_strtod_l+0xa08>
 8007b66:	ee18 3a10 	vmov	r3, s16
 8007b6a:	3301      	adds	r3, #1
 8007b6c:	f43f ad40 	beq.w	80075f0 <_strtod_l+0x488>
 8007b70:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8007d44 <_strtod_l+0xbdc>
 8007b74:	f04f 38ff 	mov.w	r8, #4294967295
 8007b78:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007b7a:	4620      	mov	r0, r4
 8007b7c:	f7fe fe6a 	bl	8006854 <_Bfree>
 8007b80:	9905      	ldr	r1, [sp, #20]
 8007b82:	4620      	mov	r0, r4
 8007b84:	f7fe fe66 	bl	8006854 <_Bfree>
 8007b88:	4659      	mov	r1, fp
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	f7fe fe62 	bl	8006854 <_Bfree>
 8007b90:	4629      	mov	r1, r5
 8007b92:	4620      	mov	r0, r4
 8007b94:	f7fe fe5e 	bl	8006854 <_Bfree>
 8007b98:	e609      	b.n	80077ae <_strtod_l+0x646>
 8007b9a:	f1b8 0f01 	cmp.w	r8, #1
 8007b9e:	d103      	bne.n	8007ba8 <_strtod_l+0xa40>
 8007ba0:	f1b9 0f00 	cmp.w	r9, #0
 8007ba4:	f43f ad95 	beq.w	80076d2 <_strtod_l+0x56a>
 8007ba8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8007d00 <_strtod_l+0xb98>
 8007bac:	4f60      	ldr	r7, [pc, #384]	; (8007d30 <_strtod_l+0xbc8>)
 8007bae:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007bb2:	2600      	movs	r6, #0
 8007bb4:	e7ae      	b.n	8007b14 <_strtod_l+0x9ac>
 8007bb6:	4f5f      	ldr	r7, [pc, #380]	; (8007d34 <_strtod_l+0xbcc>)
 8007bb8:	2600      	movs	r6, #0
 8007bba:	e7a7      	b.n	8007b0c <_strtod_l+0x9a4>
 8007bbc:	4b5d      	ldr	r3, [pc, #372]	; (8007d34 <_strtod_l+0xbcc>)
 8007bbe:	4630      	mov	r0, r6
 8007bc0:	4639      	mov	r1, r7
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	f7f8 fd40 	bl	8000648 <__aeabi_dmul>
 8007bc8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007bca:	4606      	mov	r6, r0
 8007bcc:	460f      	mov	r7, r1
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d09c      	beq.n	8007b0c <_strtod_l+0x9a4>
 8007bd2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007bd6:	e79d      	b.n	8007b14 <_strtod_l+0x9ac>
 8007bd8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8007d08 <_strtod_l+0xba0>
 8007bdc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007be0:	ec57 6b17 	vmov	r6, r7, d7
 8007be4:	e796      	b.n	8007b14 <_strtod_l+0x9ac>
 8007be6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8007bea:	9b04      	ldr	r3, [sp, #16]
 8007bec:	46ca      	mov	sl, r9
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d1c2      	bne.n	8007b78 <_strtod_l+0xa10>
 8007bf2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007bf6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007bf8:	0d1b      	lsrs	r3, r3, #20
 8007bfa:	051b      	lsls	r3, r3, #20
 8007bfc:	429a      	cmp	r2, r3
 8007bfe:	d1bb      	bne.n	8007b78 <_strtod_l+0xa10>
 8007c00:	4630      	mov	r0, r6
 8007c02:	4639      	mov	r1, r7
 8007c04:	f7f9 f880 	bl	8000d08 <__aeabi_d2lz>
 8007c08:	f7f8 fcf0 	bl	80005ec <__aeabi_l2d>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	460b      	mov	r3, r1
 8007c10:	4630      	mov	r0, r6
 8007c12:	4639      	mov	r1, r7
 8007c14:	f7f8 fb60 	bl	80002d8 <__aeabi_dsub>
 8007c18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007c1a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007c1e:	ea43 0308 	orr.w	r3, r3, r8
 8007c22:	4313      	orrs	r3, r2
 8007c24:	4606      	mov	r6, r0
 8007c26:	460f      	mov	r7, r1
 8007c28:	d054      	beq.n	8007cd4 <_strtod_l+0xb6c>
 8007c2a:	a339      	add	r3, pc, #228	; (adr r3, 8007d10 <_strtod_l+0xba8>)
 8007c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c30:	f7f8 ff7c 	bl	8000b2c <__aeabi_dcmplt>
 8007c34:	2800      	cmp	r0, #0
 8007c36:	f47f ace5 	bne.w	8007604 <_strtod_l+0x49c>
 8007c3a:	a337      	add	r3, pc, #220	; (adr r3, 8007d18 <_strtod_l+0xbb0>)
 8007c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c40:	4630      	mov	r0, r6
 8007c42:	4639      	mov	r1, r7
 8007c44:	f7f8 ff90 	bl	8000b68 <__aeabi_dcmpgt>
 8007c48:	2800      	cmp	r0, #0
 8007c4a:	d095      	beq.n	8007b78 <_strtod_l+0xa10>
 8007c4c:	e4da      	b.n	8007604 <_strtod_l+0x49c>
 8007c4e:	9b04      	ldr	r3, [sp, #16]
 8007c50:	b333      	cbz	r3, 8007ca0 <_strtod_l+0xb38>
 8007c52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007c54:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8007c58:	d822      	bhi.n	8007ca0 <_strtod_l+0xb38>
 8007c5a:	a331      	add	r3, pc, #196	; (adr r3, 8007d20 <_strtod_l+0xbb8>)
 8007c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c60:	4630      	mov	r0, r6
 8007c62:	4639      	mov	r1, r7
 8007c64:	f7f8 ff6c 	bl	8000b40 <__aeabi_dcmple>
 8007c68:	b1a0      	cbz	r0, 8007c94 <_strtod_l+0xb2c>
 8007c6a:	4639      	mov	r1, r7
 8007c6c:	4630      	mov	r0, r6
 8007c6e:	f7f8 ffc3 	bl	8000bf8 <__aeabi_d2uiz>
 8007c72:	2801      	cmp	r0, #1
 8007c74:	bf38      	it	cc
 8007c76:	2001      	movcc	r0, #1
 8007c78:	f7f8 fc6c 	bl	8000554 <__aeabi_ui2d>
 8007c7c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007c7e:	4606      	mov	r6, r0
 8007c80:	460f      	mov	r7, r1
 8007c82:	bb23      	cbnz	r3, 8007cce <_strtod_l+0xb66>
 8007c84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007c88:	9010      	str	r0, [sp, #64]	; 0x40
 8007c8a:	9311      	str	r3, [sp, #68]	; 0x44
 8007c8c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8007c90:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 8007c94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007c96:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007c98:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8007c9c:	1a9b      	subs	r3, r3, r2
 8007c9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007ca0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007ca4:	eeb0 0a48 	vmov.f32	s0, s16
 8007ca8:	eef0 0a68 	vmov.f32	s1, s17
 8007cac:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8007cb0:	f7ff f8fc 	bl	8006eac <__ulp>
 8007cb4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 8007cb8:	ec53 2b10 	vmov	r2, r3, d0
 8007cbc:	f7f8 fcc4 	bl	8000648 <__aeabi_dmul>
 8007cc0:	ec53 2b18 	vmov	r2, r3, d8
 8007cc4:	f7f8 fb0a 	bl	80002dc <__adddf3>
 8007cc8:	4680      	mov	r8, r0
 8007cca:	4689      	mov	r9, r1
 8007ccc:	e78d      	b.n	8007bea <_strtod_l+0xa82>
 8007cce:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 8007cd2:	e7db      	b.n	8007c8c <_strtod_l+0xb24>
 8007cd4:	a314      	add	r3, pc, #80	; (adr r3, 8007d28 <_strtod_l+0xbc0>)
 8007cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cda:	f7f8 ff27 	bl	8000b2c <__aeabi_dcmplt>
 8007cde:	e7b3      	b.n	8007c48 <_strtod_l+0xae0>
 8007ce0:	2300      	movs	r3, #0
 8007ce2:	930a      	str	r3, [sp, #40]	; 0x28
 8007ce4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8007ce6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007ce8:	6013      	str	r3, [r2, #0]
 8007cea:	f7ff ba7c 	b.w	80071e6 <_strtod_l+0x7e>
 8007cee:	2a65      	cmp	r2, #101	; 0x65
 8007cf0:	f43f ab75 	beq.w	80073de <_strtod_l+0x276>
 8007cf4:	2a45      	cmp	r2, #69	; 0x45
 8007cf6:	f43f ab72 	beq.w	80073de <_strtod_l+0x276>
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	f7ff bbaa 	b.w	8007454 <_strtod_l+0x2ec>
 8007d00:	00000000 	.word	0x00000000
 8007d04:	bff00000 	.word	0xbff00000
 8007d08:	00000000 	.word	0x00000000
 8007d0c:	3ff00000 	.word	0x3ff00000
 8007d10:	94a03595 	.word	0x94a03595
 8007d14:	3fdfffff 	.word	0x3fdfffff
 8007d18:	35afe535 	.word	0x35afe535
 8007d1c:	3fe00000 	.word	0x3fe00000
 8007d20:	ffc00000 	.word	0xffc00000
 8007d24:	41dfffff 	.word	0x41dfffff
 8007d28:	94a03595 	.word	0x94a03595
 8007d2c:	3fcfffff 	.word	0x3fcfffff
 8007d30:	3ff00000 	.word	0x3ff00000
 8007d34:	3fe00000 	.word	0x3fe00000
 8007d38:	7ff00000 	.word	0x7ff00000
 8007d3c:	7fe00000 	.word	0x7fe00000
 8007d40:	7c9fffff 	.word	0x7c9fffff
 8007d44:	7fefffff 	.word	0x7fefffff

08007d48 <_strtod_r>:
 8007d48:	4b01      	ldr	r3, [pc, #4]	; (8007d50 <_strtod_r+0x8>)
 8007d4a:	f7ff ba0d 	b.w	8007168 <_strtod_l>
 8007d4e:	bf00      	nop
 8007d50:	20000068 	.word	0x20000068

08007d54 <_strtol_l.constprop.0>:
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d5a:	d001      	beq.n	8007d60 <_strtol_l.constprop.0+0xc>
 8007d5c:	2b24      	cmp	r3, #36	; 0x24
 8007d5e:	d906      	bls.n	8007d6e <_strtol_l.constprop.0+0x1a>
 8007d60:	f7fd fd8a 	bl	8005878 <__errno>
 8007d64:	2316      	movs	r3, #22
 8007d66:	6003      	str	r3, [r0, #0]
 8007d68:	2000      	movs	r0, #0
 8007d6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d6e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007e54 <_strtol_l.constprop.0+0x100>
 8007d72:	460d      	mov	r5, r1
 8007d74:	462e      	mov	r6, r5
 8007d76:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d7a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007d7e:	f017 0708 	ands.w	r7, r7, #8
 8007d82:	d1f7      	bne.n	8007d74 <_strtol_l.constprop.0+0x20>
 8007d84:	2c2d      	cmp	r4, #45	; 0x2d
 8007d86:	d132      	bne.n	8007dee <_strtol_l.constprop.0+0x9a>
 8007d88:	782c      	ldrb	r4, [r5, #0]
 8007d8a:	2701      	movs	r7, #1
 8007d8c:	1cb5      	adds	r5, r6, #2
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d05b      	beq.n	8007e4a <_strtol_l.constprop.0+0xf6>
 8007d92:	2b10      	cmp	r3, #16
 8007d94:	d109      	bne.n	8007daa <_strtol_l.constprop.0+0x56>
 8007d96:	2c30      	cmp	r4, #48	; 0x30
 8007d98:	d107      	bne.n	8007daa <_strtol_l.constprop.0+0x56>
 8007d9a:	782c      	ldrb	r4, [r5, #0]
 8007d9c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007da0:	2c58      	cmp	r4, #88	; 0x58
 8007da2:	d14d      	bne.n	8007e40 <_strtol_l.constprop.0+0xec>
 8007da4:	786c      	ldrb	r4, [r5, #1]
 8007da6:	2310      	movs	r3, #16
 8007da8:	3502      	adds	r5, #2
 8007daa:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007dae:	f108 38ff 	add.w	r8, r8, #4294967295
 8007db2:	f04f 0e00 	mov.w	lr, #0
 8007db6:	fbb8 f9f3 	udiv	r9, r8, r3
 8007dba:	4676      	mov	r6, lr
 8007dbc:	fb03 8a19 	mls	sl, r3, r9, r8
 8007dc0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007dc4:	f1bc 0f09 	cmp.w	ip, #9
 8007dc8:	d816      	bhi.n	8007df8 <_strtol_l.constprop.0+0xa4>
 8007dca:	4664      	mov	r4, ip
 8007dcc:	42a3      	cmp	r3, r4
 8007dce:	dd24      	ble.n	8007e1a <_strtol_l.constprop.0+0xc6>
 8007dd0:	f1be 3fff 	cmp.w	lr, #4294967295
 8007dd4:	d008      	beq.n	8007de8 <_strtol_l.constprop.0+0x94>
 8007dd6:	45b1      	cmp	r9, r6
 8007dd8:	d31c      	bcc.n	8007e14 <_strtol_l.constprop.0+0xc0>
 8007dda:	d101      	bne.n	8007de0 <_strtol_l.constprop.0+0x8c>
 8007ddc:	45a2      	cmp	sl, r4
 8007dde:	db19      	blt.n	8007e14 <_strtol_l.constprop.0+0xc0>
 8007de0:	fb06 4603 	mla	r6, r6, r3, r4
 8007de4:	f04f 0e01 	mov.w	lr, #1
 8007de8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007dec:	e7e8      	b.n	8007dc0 <_strtol_l.constprop.0+0x6c>
 8007dee:	2c2b      	cmp	r4, #43	; 0x2b
 8007df0:	bf04      	itt	eq
 8007df2:	782c      	ldrbeq	r4, [r5, #0]
 8007df4:	1cb5      	addeq	r5, r6, #2
 8007df6:	e7ca      	b.n	8007d8e <_strtol_l.constprop.0+0x3a>
 8007df8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007dfc:	f1bc 0f19 	cmp.w	ip, #25
 8007e00:	d801      	bhi.n	8007e06 <_strtol_l.constprop.0+0xb2>
 8007e02:	3c37      	subs	r4, #55	; 0x37
 8007e04:	e7e2      	b.n	8007dcc <_strtol_l.constprop.0+0x78>
 8007e06:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007e0a:	f1bc 0f19 	cmp.w	ip, #25
 8007e0e:	d804      	bhi.n	8007e1a <_strtol_l.constprop.0+0xc6>
 8007e10:	3c57      	subs	r4, #87	; 0x57
 8007e12:	e7db      	b.n	8007dcc <_strtol_l.constprop.0+0x78>
 8007e14:	f04f 3eff 	mov.w	lr, #4294967295
 8007e18:	e7e6      	b.n	8007de8 <_strtol_l.constprop.0+0x94>
 8007e1a:	f1be 3fff 	cmp.w	lr, #4294967295
 8007e1e:	d105      	bne.n	8007e2c <_strtol_l.constprop.0+0xd8>
 8007e20:	2322      	movs	r3, #34	; 0x22
 8007e22:	6003      	str	r3, [r0, #0]
 8007e24:	4646      	mov	r6, r8
 8007e26:	b942      	cbnz	r2, 8007e3a <_strtol_l.constprop.0+0xe6>
 8007e28:	4630      	mov	r0, r6
 8007e2a:	e79e      	b.n	8007d6a <_strtol_l.constprop.0+0x16>
 8007e2c:	b107      	cbz	r7, 8007e30 <_strtol_l.constprop.0+0xdc>
 8007e2e:	4276      	negs	r6, r6
 8007e30:	2a00      	cmp	r2, #0
 8007e32:	d0f9      	beq.n	8007e28 <_strtol_l.constprop.0+0xd4>
 8007e34:	f1be 0f00 	cmp.w	lr, #0
 8007e38:	d000      	beq.n	8007e3c <_strtol_l.constprop.0+0xe8>
 8007e3a:	1e69      	subs	r1, r5, #1
 8007e3c:	6011      	str	r1, [r2, #0]
 8007e3e:	e7f3      	b.n	8007e28 <_strtol_l.constprop.0+0xd4>
 8007e40:	2430      	movs	r4, #48	; 0x30
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1b1      	bne.n	8007daa <_strtol_l.constprop.0+0x56>
 8007e46:	2308      	movs	r3, #8
 8007e48:	e7af      	b.n	8007daa <_strtol_l.constprop.0+0x56>
 8007e4a:	2c30      	cmp	r4, #48	; 0x30
 8007e4c:	d0a5      	beq.n	8007d9a <_strtol_l.constprop.0+0x46>
 8007e4e:	230a      	movs	r3, #10
 8007e50:	e7ab      	b.n	8007daa <_strtol_l.constprop.0+0x56>
 8007e52:	bf00      	nop
 8007e54:	08009341 	.word	0x08009341

08007e58 <_strtol_r>:
 8007e58:	f7ff bf7c 	b.w	8007d54 <_strtol_l.constprop.0>

08007e5c <__ssputs_r>:
 8007e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e60:	688e      	ldr	r6, [r1, #8]
 8007e62:	461f      	mov	r7, r3
 8007e64:	42be      	cmp	r6, r7
 8007e66:	680b      	ldr	r3, [r1, #0]
 8007e68:	4682      	mov	sl, r0
 8007e6a:	460c      	mov	r4, r1
 8007e6c:	4690      	mov	r8, r2
 8007e6e:	d82c      	bhi.n	8007eca <__ssputs_r+0x6e>
 8007e70:	898a      	ldrh	r2, [r1, #12]
 8007e72:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007e76:	d026      	beq.n	8007ec6 <__ssputs_r+0x6a>
 8007e78:	6965      	ldr	r5, [r4, #20]
 8007e7a:	6909      	ldr	r1, [r1, #16]
 8007e7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007e80:	eba3 0901 	sub.w	r9, r3, r1
 8007e84:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007e88:	1c7b      	adds	r3, r7, #1
 8007e8a:	444b      	add	r3, r9
 8007e8c:	106d      	asrs	r5, r5, #1
 8007e8e:	429d      	cmp	r5, r3
 8007e90:	bf38      	it	cc
 8007e92:	461d      	movcc	r5, r3
 8007e94:	0553      	lsls	r3, r2, #21
 8007e96:	d527      	bpl.n	8007ee8 <__ssputs_r+0x8c>
 8007e98:	4629      	mov	r1, r5
 8007e9a:	f7fe fc0f 	bl	80066bc <_malloc_r>
 8007e9e:	4606      	mov	r6, r0
 8007ea0:	b360      	cbz	r0, 8007efc <__ssputs_r+0xa0>
 8007ea2:	6921      	ldr	r1, [r4, #16]
 8007ea4:	464a      	mov	r2, r9
 8007ea6:	f000 fbf5 	bl	8008694 <memcpy>
 8007eaa:	89a3      	ldrh	r3, [r4, #12]
 8007eac:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007eb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eb4:	81a3      	strh	r3, [r4, #12]
 8007eb6:	6126      	str	r6, [r4, #16]
 8007eb8:	6165      	str	r5, [r4, #20]
 8007eba:	444e      	add	r6, r9
 8007ebc:	eba5 0509 	sub.w	r5, r5, r9
 8007ec0:	6026      	str	r6, [r4, #0]
 8007ec2:	60a5      	str	r5, [r4, #8]
 8007ec4:	463e      	mov	r6, r7
 8007ec6:	42be      	cmp	r6, r7
 8007ec8:	d900      	bls.n	8007ecc <__ssputs_r+0x70>
 8007eca:	463e      	mov	r6, r7
 8007ecc:	6820      	ldr	r0, [r4, #0]
 8007ece:	4632      	mov	r2, r6
 8007ed0:	4641      	mov	r1, r8
 8007ed2:	f000 fba3 	bl	800861c <memmove>
 8007ed6:	68a3      	ldr	r3, [r4, #8]
 8007ed8:	1b9b      	subs	r3, r3, r6
 8007eda:	60a3      	str	r3, [r4, #8]
 8007edc:	6823      	ldr	r3, [r4, #0]
 8007ede:	4433      	add	r3, r6
 8007ee0:	6023      	str	r3, [r4, #0]
 8007ee2:	2000      	movs	r0, #0
 8007ee4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ee8:	462a      	mov	r2, r5
 8007eea:	f000 ff86 	bl	8008dfa <_realloc_r>
 8007eee:	4606      	mov	r6, r0
 8007ef0:	2800      	cmp	r0, #0
 8007ef2:	d1e0      	bne.n	8007eb6 <__ssputs_r+0x5a>
 8007ef4:	6921      	ldr	r1, [r4, #16]
 8007ef6:	4650      	mov	r0, sl
 8007ef8:	f7fe fb6c 	bl	80065d4 <_free_r>
 8007efc:	230c      	movs	r3, #12
 8007efe:	f8ca 3000 	str.w	r3, [sl]
 8007f02:	89a3      	ldrh	r3, [r4, #12]
 8007f04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f08:	81a3      	strh	r3, [r4, #12]
 8007f0a:	f04f 30ff 	mov.w	r0, #4294967295
 8007f0e:	e7e9      	b.n	8007ee4 <__ssputs_r+0x88>

08007f10 <_svfiprintf_r>:
 8007f10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f14:	4698      	mov	r8, r3
 8007f16:	898b      	ldrh	r3, [r1, #12]
 8007f18:	061b      	lsls	r3, r3, #24
 8007f1a:	b09d      	sub	sp, #116	; 0x74
 8007f1c:	4607      	mov	r7, r0
 8007f1e:	460d      	mov	r5, r1
 8007f20:	4614      	mov	r4, r2
 8007f22:	d50e      	bpl.n	8007f42 <_svfiprintf_r+0x32>
 8007f24:	690b      	ldr	r3, [r1, #16]
 8007f26:	b963      	cbnz	r3, 8007f42 <_svfiprintf_r+0x32>
 8007f28:	2140      	movs	r1, #64	; 0x40
 8007f2a:	f7fe fbc7 	bl	80066bc <_malloc_r>
 8007f2e:	6028      	str	r0, [r5, #0]
 8007f30:	6128      	str	r0, [r5, #16]
 8007f32:	b920      	cbnz	r0, 8007f3e <_svfiprintf_r+0x2e>
 8007f34:	230c      	movs	r3, #12
 8007f36:	603b      	str	r3, [r7, #0]
 8007f38:	f04f 30ff 	mov.w	r0, #4294967295
 8007f3c:	e0d0      	b.n	80080e0 <_svfiprintf_r+0x1d0>
 8007f3e:	2340      	movs	r3, #64	; 0x40
 8007f40:	616b      	str	r3, [r5, #20]
 8007f42:	2300      	movs	r3, #0
 8007f44:	9309      	str	r3, [sp, #36]	; 0x24
 8007f46:	2320      	movs	r3, #32
 8007f48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007f4c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007f50:	2330      	movs	r3, #48	; 0x30
 8007f52:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80080f8 <_svfiprintf_r+0x1e8>
 8007f56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007f5a:	f04f 0901 	mov.w	r9, #1
 8007f5e:	4623      	mov	r3, r4
 8007f60:	469a      	mov	sl, r3
 8007f62:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007f66:	b10a      	cbz	r2, 8007f6c <_svfiprintf_r+0x5c>
 8007f68:	2a25      	cmp	r2, #37	; 0x25
 8007f6a:	d1f9      	bne.n	8007f60 <_svfiprintf_r+0x50>
 8007f6c:	ebba 0b04 	subs.w	fp, sl, r4
 8007f70:	d00b      	beq.n	8007f8a <_svfiprintf_r+0x7a>
 8007f72:	465b      	mov	r3, fp
 8007f74:	4622      	mov	r2, r4
 8007f76:	4629      	mov	r1, r5
 8007f78:	4638      	mov	r0, r7
 8007f7a:	f7ff ff6f 	bl	8007e5c <__ssputs_r>
 8007f7e:	3001      	adds	r0, #1
 8007f80:	f000 80a9 	beq.w	80080d6 <_svfiprintf_r+0x1c6>
 8007f84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007f86:	445a      	add	r2, fp
 8007f88:	9209      	str	r2, [sp, #36]	; 0x24
 8007f8a:	f89a 3000 	ldrb.w	r3, [sl]
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f000 80a1 	beq.w	80080d6 <_svfiprintf_r+0x1c6>
 8007f94:	2300      	movs	r3, #0
 8007f96:	f04f 32ff 	mov.w	r2, #4294967295
 8007f9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007f9e:	f10a 0a01 	add.w	sl, sl, #1
 8007fa2:	9304      	str	r3, [sp, #16]
 8007fa4:	9307      	str	r3, [sp, #28]
 8007fa6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007faa:	931a      	str	r3, [sp, #104]	; 0x68
 8007fac:	4654      	mov	r4, sl
 8007fae:	2205      	movs	r2, #5
 8007fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007fb4:	4850      	ldr	r0, [pc, #320]	; (80080f8 <_svfiprintf_r+0x1e8>)
 8007fb6:	f7f8 f933 	bl	8000220 <memchr>
 8007fba:	9a04      	ldr	r2, [sp, #16]
 8007fbc:	b9d8      	cbnz	r0, 8007ff6 <_svfiprintf_r+0xe6>
 8007fbe:	06d0      	lsls	r0, r2, #27
 8007fc0:	bf44      	itt	mi
 8007fc2:	2320      	movmi	r3, #32
 8007fc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fc8:	0711      	lsls	r1, r2, #28
 8007fca:	bf44      	itt	mi
 8007fcc:	232b      	movmi	r3, #43	; 0x2b
 8007fce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007fd2:	f89a 3000 	ldrb.w	r3, [sl]
 8007fd6:	2b2a      	cmp	r3, #42	; 0x2a
 8007fd8:	d015      	beq.n	8008006 <_svfiprintf_r+0xf6>
 8007fda:	9a07      	ldr	r2, [sp, #28]
 8007fdc:	4654      	mov	r4, sl
 8007fde:	2000      	movs	r0, #0
 8007fe0:	f04f 0c0a 	mov.w	ip, #10
 8007fe4:	4621      	mov	r1, r4
 8007fe6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007fea:	3b30      	subs	r3, #48	; 0x30
 8007fec:	2b09      	cmp	r3, #9
 8007fee:	d94d      	bls.n	800808c <_svfiprintf_r+0x17c>
 8007ff0:	b1b0      	cbz	r0, 8008020 <_svfiprintf_r+0x110>
 8007ff2:	9207      	str	r2, [sp, #28]
 8007ff4:	e014      	b.n	8008020 <_svfiprintf_r+0x110>
 8007ff6:	eba0 0308 	sub.w	r3, r0, r8
 8007ffa:	fa09 f303 	lsl.w	r3, r9, r3
 8007ffe:	4313      	orrs	r3, r2
 8008000:	9304      	str	r3, [sp, #16]
 8008002:	46a2      	mov	sl, r4
 8008004:	e7d2      	b.n	8007fac <_svfiprintf_r+0x9c>
 8008006:	9b03      	ldr	r3, [sp, #12]
 8008008:	1d19      	adds	r1, r3, #4
 800800a:	681b      	ldr	r3, [r3, #0]
 800800c:	9103      	str	r1, [sp, #12]
 800800e:	2b00      	cmp	r3, #0
 8008010:	bfbb      	ittet	lt
 8008012:	425b      	neglt	r3, r3
 8008014:	f042 0202 	orrlt.w	r2, r2, #2
 8008018:	9307      	strge	r3, [sp, #28]
 800801a:	9307      	strlt	r3, [sp, #28]
 800801c:	bfb8      	it	lt
 800801e:	9204      	strlt	r2, [sp, #16]
 8008020:	7823      	ldrb	r3, [r4, #0]
 8008022:	2b2e      	cmp	r3, #46	; 0x2e
 8008024:	d10c      	bne.n	8008040 <_svfiprintf_r+0x130>
 8008026:	7863      	ldrb	r3, [r4, #1]
 8008028:	2b2a      	cmp	r3, #42	; 0x2a
 800802a:	d134      	bne.n	8008096 <_svfiprintf_r+0x186>
 800802c:	9b03      	ldr	r3, [sp, #12]
 800802e:	1d1a      	adds	r2, r3, #4
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	9203      	str	r2, [sp, #12]
 8008034:	2b00      	cmp	r3, #0
 8008036:	bfb8      	it	lt
 8008038:	f04f 33ff 	movlt.w	r3, #4294967295
 800803c:	3402      	adds	r4, #2
 800803e:	9305      	str	r3, [sp, #20]
 8008040:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8008108 <_svfiprintf_r+0x1f8>
 8008044:	7821      	ldrb	r1, [r4, #0]
 8008046:	2203      	movs	r2, #3
 8008048:	4650      	mov	r0, sl
 800804a:	f7f8 f8e9 	bl	8000220 <memchr>
 800804e:	b138      	cbz	r0, 8008060 <_svfiprintf_r+0x150>
 8008050:	9b04      	ldr	r3, [sp, #16]
 8008052:	eba0 000a 	sub.w	r0, r0, sl
 8008056:	2240      	movs	r2, #64	; 0x40
 8008058:	4082      	lsls	r2, r0
 800805a:	4313      	orrs	r3, r2
 800805c:	3401      	adds	r4, #1
 800805e:	9304      	str	r3, [sp, #16]
 8008060:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008064:	4825      	ldr	r0, [pc, #148]	; (80080fc <_svfiprintf_r+0x1ec>)
 8008066:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800806a:	2206      	movs	r2, #6
 800806c:	f7f8 f8d8 	bl	8000220 <memchr>
 8008070:	2800      	cmp	r0, #0
 8008072:	d038      	beq.n	80080e6 <_svfiprintf_r+0x1d6>
 8008074:	4b22      	ldr	r3, [pc, #136]	; (8008100 <_svfiprintf_r+0x1f0>)
 8008076:	bb1b      	cbnz	r3, 80080c0 <_svfiprintf_r+0x1b0>
 8008078:	9b03      	ldr	r3, [sp, #12]
 800807a:	3307      	adds	r3, #7
 800807c:	f023 0307 	bic.w	r3, r3, #7
 8008080:	3308      	adds	r3, #8
 8008082:	9303      	str	r3, [sp, #12]
 8008084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008086:	4433      	add	r3, r6
 8008088:	9309      	str	r3, [sp, #36]	; 0x24
 800808a:	e768      	b.n	8007f5e <_svfiprintf_r+0x4e>
 800808c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008090:	460c      	mov	r4, r1
 8008092:	2001      	movs	r0, #1
 8008094:	e7a6      	b.n	8007fe4 <_svfiprintf_r+0xd4>
 8008096:	2300      	movs	r3, #0
 8008098:	3401      	adds	r4, #1
 800809a:	9305      	str	r3, [sp, #20]
 800809c:	4619      	mov	r1, r3
 800809e:	f04f 0c0a 	mov.w	ip, #10
 80080a2:	4620      	mov	r0, r4
 80080a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080a8:	3a30      	subs	r2, #48	; 0x30
 80080aa:	2a09      	cmp	r2, #9
 80080ac:	d903      	bls.n	80080b6 <_svfiprintf_r+0x1a6>
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d0c6      	beq.n	8008040 <_svfiprintf_r+0x130>
 80080b2:	9105      	str	r1, [sp, #20]
 80080b4:	e7c4      	b.n	8008040 <_svfiprintf_r+0x130>
 80080b6:	fb0c 2101 	mla	r1, ip, r1, r2
 80080ba:	4604      	mov	r4, r0
 80080bc:	2301      	movs	r3, #1
 80080be:	e7f0      	b.n	80080a2 <_svfiprintf_r+0x192>
 80080c0:	ab03      	add	r3, sp, #12
 80080c2:	9300      	str	r3, [sp, #0]
 80080c4:	462a      	mov	r2, r5
 80080c6:	4b0f      	ldr	r3, [pc, #60]	; (8008104 <_svfiprintf_r+0x1f4>)
 80080c8:	a904      	add	r1, sp, #16
 80080ca:	4638      	mov	r0, r7
 80080cc:	f7fc fc74 	bl	80049b8 <_printf_float>
 80080d0:	1c42      	adds	r2, r0, #1
 80080d2:	4606      	mov	r6, r0
 80080d4:	d1d6      	bne.n	8008084 <_svfiprintf_r+0x174>
 80080d6:	89ab      	ldrh	r3, [r5, #12]
 80080d8:	065b      	lsls	r3, r3, #25
 80080da:	f53f af2d 	bmi.w	8007f38 <_svfiprintf_r+0x28>
 80080de:	9809      	ldr	r0, [sp, #36]	; 0x24
 80080e0:	b01d      	add	sp, #116	; 0x74
 80080e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080e6:	ab03      	add	r3, sp, #12
 80080e8:	9300      	str	r3, [sp, #0]
 80080ea:	462a      	mov	r2, r5
 80080ec:	4b05      	ldr	r3, [pc, #20]	; (8008104 <_svfiprintf_r+0x1f4>)
 80080ee:	a904      	add	r1, sp, #16
 80080f0:	4638      	mov	r0, r7
 80080f2:	f7fc ff05 	bl	8004f00 <_printf_i>
 80080f6:	e7eb      	b.n	80080d0 <_svfiprintf_r+0x1c0>
 80080f8:	08009441 	.word	0x08009441
 80080fc:	0800944b 	.word	0x0800944b
 8008100:	080049b9 	.word	0x080049b9
 8008104:	08007e5d 	.word	0x08007e5d
 8008108:	08009447 	.word	0x08009447

0800810c <__sfputc_r>:
 800810c:	6893      	ldr	r3, [r2, #8]
 800810e:	3b01      	subs	r3, #1
 8008110:	2b00      	cmp	r3, #0
 8008112:	b410      	push	{r4}
 8008114:	6093      	str	r3, [r2, #8]
 8008116:	da08      	bge.n	800812a <__sfputc_r+0x1e>
 8008118:	6994      	ldr	r4, [r2, #24]
 800811a:	42a3      	cmp	r3, r4
 800811c:	db01      	blt.n	8008122 <__sfputc_r+0x16>
 800811e:	290a      	cmp	r1, #10
 8008120:	d103      	bne.n	800812a <__sfputc_r+0x1e>
 8008122:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008126:	f000 b9e3 	b.w	80084f0 <__swbuf_r>
 800812a:	6813      	ldr	r3, [r2, #0]
 800812c:	1c58      	adds	r0, r3, #1
 800812e:	6010      	str	r0, [r2, #0]
 8008130:	7019      	strb	r1, [r3, #0]
 8008132:	4608      	mov	r0, r1
 8008134:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008138:	4770      	bx	lr

0800813a <__sfputs_r>:
 800813a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813c:	4606      	mov	r6, r0
 800813e:	460f      	mov	r7, r1
 8008140:	4614      	mov	r4, r2
 8008142:	18d5      	adds	r5, r2, r3
 8008144:	42ac      	cmp	r4, r5
 8008146:	d101      	bne.n	800814c <__sfputs_r+0x12>
 8008148:	2000      	movs	r0, #0
 800814a:	e007      	b.n	800815c <__sfputs_r+0x22>
 800814c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008150:	463a      	mov	r2, r7
 8008152:	4630      	mov	r0, r6
 8008154:	f7ff ffda 	bl	800810c <__sfputc_r>
 8008158:	1c43      	adds	r3, r0, #1
 800815a:	d1f3      	bne.n	8008144 <__sfputs_r+0xa>
 800815c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008160 <_vfiprintf_r>:
 8008160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008164:	460d      	mov	r5, r1
 8008166:	b09d      	sub	sp, #116	; 0x74
 8008168:	4614      	mov	r4, r2
 800816a:	4698      	mov	r8, r3
 800816c:	4606      	mov	r6, r0
 800816e:	b118      	cbz	r0, 8008178 <_vfiprintf_r+0x18>
 8008170:	6a03      	ldr	r3, [r0, #32]
 8008172:	b90b      	cbnz	r3, 8008178 <_vfiprintf_r+0x18>
 8008174:	f7fd fa82 	bl	800567c <__sinit>
 8008178:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800817a:	07d9      	lsls	r1, r3, #31
 800817c:	d405      	bmi.n	800818a <_vfiprintf_r+0x2a>
 800817e:	89ab      	ldrh	r3, [r5, #12]
 8008180:	059a      	lsls	r2, r3, #22
 8008182:	d402      	bmi.n	800818a <_vfiprintf_r+0x2a>
 8008184:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008186:	f7fd fba2 	bl	80058ce <__retarget_lock_acquire_recursive>
 800818a:	89ab      	ldrh	r3, [r5, #12]
 800818c:	071b      	lsls	r3, r3, #28
 800818e:	d501      	bpl.n	8008194 <_vfiprintf_r+0x34>
 8008190:	692b      	ldr	r3, [r5, #16]
 8008192:	b99b      	cbnz	r3, 80081bc <_vfiprintf_r+0x5c>
 8008194:	4629      	mov	r1, r5
 8008196:	4630      	mov	r0, r6
 8008198:	f000 f9e8 	bl	800856c <__swsetup_r>
 800819c:	b170      	cbz	r0, 80081bc <_vfiprintf_r+0x5c>
 800819e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80081a0:	07dc      	lsls	r4, r3, #31
 80081a2:	d504      	bpl.n	80081ae <_vfiprintf_r+0x4e>
 80081a4:	f04f 30ff 	mov.w	r0, #4294967295
 80081a8:	b01d      	add	sp, #116	; 0x74
 80081aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081ae:	89ab      	ldrh	r3, [r5, #12]
 80081b0:	0598      	lsls	r0, r3, #22
 80081b2:	d4f7      	bmi.n	80081a4 <_vfiprintf_r+0x44>
 80081b4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80081b6:	f7fd fb8b 	bl	80058d0 <__retarget_lock_release_recursive>
 80081ba:	e7f3      	b.n	80081a4 <_vfiprintf_r+0x44>
 80081bc:	2300      	movs	r3, #0
 80081be:	9309      	str	r3, [sp, #36]	; 0x24
 80081c0:	2320      	movs	r3, #32
 80081c2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80081c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80081ca:	2330      	movs	r3, #48	; 0x30
 80081cc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008380 <_vfiprintf_r+0x220>
 80081d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80081d4:	f04f 0901 	mov.w	r9, #1
 80081d8:	4623      	mov	r3, r4
 80081da:	469a      	mov	sl, r3
 80081dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081e0:	b10a      	cbz	r2, 80081e6 <_vfiprintf_r+0x86>
 80081e2:	2a25      	cmp	r2, #37	; 0x25
 80081e4:	d1f9      	bne.n	80081da <_vfiprintf_r+0x7a>
 80081e6:	ebba 0b04 	subs.w	fp, sl, r4
 80081ea:	d00b      	beq.n	8008204 <_vfiprintf_r+0xa4>
 80081ec:	465b      	mov	r3, fp
 80081ee:	4622      	mov	r2, r4
 80081f0:	4629      	mov	r1, r5
 80081f2:	4630      	mov	r0, r6
 80081f4:	f7ff ffa1 	bl	800813a <__sfputs_r>
 80081f8:	3001      	adds	r0, #1
 80081fa:	f000 80a9 	beq.w	8008350 <_vfiprintf_r+0x1f0>
 80081fe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008200:	445a      	add	r2, fp
 8008202:	9209      	str	r2, [sp, #36]	; 0x24
 8008204:	f89a 3000 	ldrb.w	r3, [sl]
 8008208:	2b00      	cmp	r3, #0
 800820a:	f000 80a1 	beq.w	8008350 <_vfiprintf_r+0x1f0>
 800820e:	2300      	movs	r3, #0
 8008210:	f04f 32ff 	mov.w	r2, #4294967295
 8008214:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008218:	f10a 0a01 	add.w	sl, sl, #1
 800821c:	9304      	str	r3, [sp, #16]
 800821e:	9307      	str	r3, [sp, #28]
 8008220:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008224:	931a      	str	r3, [sp, #104]	; 0x68
 8008226:	4654      	mov	r4, sl
 8008228:	2205      	movs	r2, #5
 800822a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800822e:	4854      	ldr	r0, [pc, #336]	; (8008380 <_vfiprintf_r+0x220>)
 8008230:	f7f7 fff6 	bl	8000220 <memchr>
 8008234:	9a04      	ldr	r2, [sp, #16]
 8008236:	b9d8      	cbnz	r0, 8008270 <_vfiprintf_r+0x110>
 8008238:	06d1      	lsls	r1, r2, #27
 800823a:	bf44      	itt	mi
 800823c:	2320      	movmi	r3, #32
 800823e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008242:	0713      	lsls	r3, r2, #28
 8008244:	bf44      	itt	mi
 8008246:	232b      	movmi	r3, #43	; 0x2b
 8008248:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800824c:	f89a 3000 	ldrb.w	r3, [sl]
 8008250:	2b2a      	cmp	r3, #42	; 0x2a
 8008252:	d015      	beq.n	8008280 <_vfiprintf_r+0x120>
 8008254:	9a07      	ldr	r2, [sp, #28]
 8008256:	4654      	mov	r4, sl
 8008258:	2000      	movs	r0, #0
 800825a:	f04f 0c0a 	mov.w	ip, #10
 800825e:	4621      	mov	r1, r4
 8008260:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008264:	3b30      	subs	r3, #48	; 0x30
 8008266:	2b09      	cmp	r3, #9
 8008268:	d94d      	bls.n	8008306 <_vfiprintf_r+0x1a6>
 800826a:	b1b0      	cbz	r0, 800829a <_vfiprintf_r+0x13a>
 800826c:	9207      	str	r2, [sp, #28]
 800826e:	e014      	b.n	800829a <_vfiprintf_r+0x13a>
 8008270:	eba0 0308 	sub.w	r3, r0, r8
 8008274:	fa09 f303 	lsl.w	r3, r9, r3
 8008278:	4313      	orrs	r3, r2
 800827a:	9304      	str	r3, [sp, #16]
 800827c:	46a2      	mov	sl, r4
 800827e:	e7d2      	b.n	8008226 <_vfiprintf_r+0xc6>
 8008280:	9b03      	ldr	r3, [sp, #12]
 8008282:	1d19      	adds	r1, r3, #4
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	9103      	str	r1, [sp, #12]
 8008288:	2b00      	cmp	r3, #0
 800828a:	bfbb      	ittet	lt
 800828c:	425b      	neglt	r3, r3
 800828e:	f042 0202 	orrlt.w	r2, r2, #2
 8008292:	9307      	strge	r3, [sp, #28]
 8008294:	9307      	strlt	r3, [sp, #28]
 8008296:	bfb8      	it	lt
 8008298:	9204      	strlt	r2, [sp, #16]
 800829a:	7823      	ldrb	r3, [r4, #0]
 800829c:	2b2e      	cmp	r3, #46	; 0x2e
 800829e:	d10c      	bne.n	80082ba <_vfiprintf_r+0x15a>
 80082a0:	7863      	ldrb	r3, [r4, #1]
 80082a2:	2b2a      	cmp	r3, #42	; 0x2a
 80082a4:	d134      	bne.n	8008310 <_vfiprintf_r+0x1b0>
 80082a6:	9b03      	ldr	r3, [sp, #12]
 80082a8:	1d1a      	adds	r2, r3, #4
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	9203      	str	r2, [sp, #12]
 80082ae:	2b00      	cmp	r3, #0
 80082b0:	bfb8      	it	lt
 80082b2:	f04f 33ff 	movlt.w	r3, #4294967295
 80082b6:	3402      	adds	r4, #2
 80082b8:	9305      	str	r3, [sp, #20]
 80082ba:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008390 <_vfiprintf_r+0x230>
 80082be:	7821      	ldrb	r1, [r4, #0]
 80082c0:	2203      	movs	r2, #3
 80082c2:	4650      	mov	r0, sl
 80082c4:	f7f7 ffac 	bl	8000220 <memchr>
 80082c8:	b138      	cbz	r0, 80082da <_vfiprintf_r+0x17a>
 80082ca:	9b04      	ldr	r3, [sp, #16]
 80082cc:	eba0 000a 	sub.w	r0, r0, sl
 80082d0:	2240      	movs	r2, #64	; 0x40
 80082d2:	4082      	lsls	r2, r0
 80082d4:	4313      	orrs	r3, r2
 80082d6:	3401      	adds	r4, #1
 80082d8:	9304      	str	r3, [sp, #16]
 80082da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082de:	4829      	ldr	r0, [pc, #164]	; (8008384 <_vfiprintf_r+0x224>)
 80082e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80082e4:	2206      	movs	r2, #6
 80082e6:	f7f7 ff9b 	bl	8000220 <memchr>
 80082ea:	2800      	cmp	r0, #0
 80082ec:	d03f      	beq.n	800836e <_vfiprintf_r+0x20e>
 80082ee:	4b26      	ldr	r3, [pc, #152]	; (8008388 <_vfiprintf_r+0x228>)
 80082f0:	bb1b      	cbnz	r3, 800833a <_vfiprintf_r+0x1da>
 80082f2:	9b03      	ldr	r3, [sp, #12]
 80082f4:	3307      	adds	r3, #7
 80082f6:	f023 0307 	bic.w	r3, r3, #7
 80082fa:	3308      	adds	r3, #8
 80082fc:	9303      	str	r3, [sp, #12]
 80082fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008300:	443b      	add	r3, r7
 8008302:	9309      	str	r3, [sp, #36]	; 0x24
 8008304:	e768      	b.n	80081d8 <_vfiprintf_r+0x78>
 8008306:	fb0c 3202 	mla	r2, ip, r2, r3
 800830a:	460c      	mov	r4, r1
 800830c:	2001      	movs	r0, #1
 800830e:	e7a6      	b.n	800825e <_vfiprintf_r+0xfe>
 8008310:	2300      	movs	r3, #0
 8008312:	3401      	adds	r4, #1
 8008314:	9305      	str	r3, [sp, #20]
 8008316:	4619      	mov	r1, r3
 8008318:	f04f 0c0a 	mov.w	ip, #10
 800831c:	4620      	mov	r0, r4
 800831e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008322:	3a30      	subs	r2, #48	; 0x30
 8008324:	2a09      	cmp	r2, #9
 8008326:	d903      	bls.n	8008330 <_vfiprintf_r+0x1d0>
 8008328:	2b00      	cmp	r3, #0
 800832a:	d0c6      	beq.n	80082ba <_vfiprintf_r+0x15a>
 800832c:	9105      	str	r1, [sp, #20]
 800832e:	e7c4      	b.n	80082ba <_vfiprintf_r+0x15a>
 8008330:	fb0c 2101 	mla	r1, ip, r1, r2
 8008334:	4604      	mov	r4, r0
 8008336:	2301      	movs	r3, #1
 8008338:	e7f0      	b.n	800831c <_vfiprintf_r+0x1bc>
 800833a:	ab03      	add	r3, sp, #12
 800833c:	9300      	str	r3, [sp, #0]
 800833e:	462a      	mov	r2, r5
 8008340:	4b12      	ldr	r3, [pc, #72]	; (800838c <_vfiprintf_r+0x22c>)
 8008342:	a904      	add	r1, sp, #16
 8008344:	4630      	mov	r0, r6
 8008346:	f7fc fb37 	bl	80049b8 <_printf_float>
 800834a:	4607      	mov	r7, r0
 800834c:	1c78      	adds	r0, r7, #1
 800834e:	d1d6      	bne.n	80082fe <_vfiprintf_r+0x19e>
 8008350:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008352:	07d9      	lsls	r1, r3, #31
 8008354:	d405      	bmi.n	8008362 <_vfiprintf_r+0x202>
 8008356:	89ab      	ldrh	r3, [r5, #12]
 8008358:	059a      	lsls	r2, r3, #22
 800835a:	d402      	bmi.n	8008362 <_vfiprintf_r+0x202>
 800835c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800835e:	f7fd fab7 	bl	80058d0 <__retarget_lock_release_recursive>
 8008362:	89ab      	ldrh	r3, [r5, #12]
 8008364:	065b      	lsls	r3, r3, #25
 8008366:	f53f af1d 	bmi.w	80081a4 <_vfiprintf_r+0x44>
 800836a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800836c:	e71c      	b.n	80081a8 <_vfiprintf_r+0x48>
 800836e:	ab03      	add	r3, sp, #12
 8008370:	9300      	str	r3, [sp, #0]
 8008372:	462a      	mov	r2, r5
 8008374:	4b05      	ldr	r3, [pc, #20]	; (800838c <_vfiprintf_r+0x22c>)
 8008376:	a904      	add	r1, sp, #16
 8008378:	4630      	mov	r0, r6
 800837a:	f7fc fdc1 	bl	8004f00 <_printf_i>
 800837e:	e7e4      	b.n	800834a <_vfiprintf_r+0x1ea>
 8008380:	08009441 	.word	0x08009441
 8008384:	0800944b 	.word	0x0800944b
 8008388:	080049b9 	.word	0x080049b9
 800838c:	0800813b 	.word	0x0800813b
 8008390:	08009447 	.word	0x08009447

08008394 <__sflush_r>:
 8008394:	898a      	ldrh	r2, [r1, #12]
 8008396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800839a:	4605      	mov	r5, r0
 800839c:	0710      	lsls	r0, r2, #28
 800839e:	460c      	mov	r4, r1
 80083a0:	d458      	bmi.n	8008454 <__sflush_r+0xc0>
 80083a2:	684b      	ldr	r3, [r1, #4]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	dc05      	bgt.n	80083b4 <__sflush_r+0x20>
 80083a8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	dc02      	bgt.n	80083b4 <__sflush_r+0x20>
 80083ae:	2000      	movs	r0, #0
 80083b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80083b4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083b6:	2e00      	cmp	r6, #0
 80083b8:	d0f9      	beq.n	80083ae <__sflush_r+0x1a>
 80083ba:	2300      	movs	r3, #0
 80083bc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80083c0:	682f      	ldr	r7, [r5, #0]
 80083c2:	6a21      	ldr	r1, [r4, #32]
 80083c4:	602b      	str	r3, [r5, #0]
 80083c6:	d032      	beq.n	800842e <__sflush_r+0x9a>
 80083c8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80083ca:	89a3      	ldrh	r3, [r4, #12]
 80083cc:	075a      	lsls	r2, r3, #29
 80083ce:	d505      	bpl.n	80083dc <__sflush_r+0x48>
 80083d0:	6863      	ldr	r3, [r4, #4]
 80083d2:	1ac0      	subs	r0, r0, r3
 80083d4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80083d6:	b10b      	cbz	r3, 80083dc <__sflush_r+0x48>
 80083d8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80083da:	1ac0      	subs	r0, r0, r3
 80083dc:	2300      	movs	r3, #0
 80083de:	4602      	mov	r2, r0
 80083e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80083e2:	6a21      	ldr	r1, [r4, #32]
 80083e4:	4628      	mov	r0, r5
 80083e6:	47b0      	blx	r6
 80083e8:	1c43      	adds	r3, r0, #1
 80083ea:	89a3      	ldrh	r3, [r4, #12]
 80083ec:	d106      	bne.n	80083fc <__sflush_r+0x68>
 80083ee:	6829      	ldr	r1, [r5, #0]
 80083f0:	291d      	cmp	r1, #29
 80083f2:	d82b      	bhi.n	800844c <__sflush_r+0xb8>
 80083f4:	4a29      	ldr	r2, [pc, #164]	; (800849c <__sflush_r+0x108>)
 80083f6:	410a      	asrs	r2, r1
 80083f8:	07d6      	lsls	r6, r2, #31
 80083fa:	d427      	bmi.n	800844c <__sflush_r+0xb8>
 80083fc:	2200      	movs	r2, #0
 80083fe:	6062      	str	r2, [r4, #4]
 8008400:	04d9      	lsls	r1, r3, #19
 8008402:	6922      	ldr	r2, [r4, #16]
 8008404:	6022      	str	r2, [r4, #0]
 8008406:	d504      	bpl.n	8008412 <__sflush_r+0x7e>
 8008408:	1c42      	adds	r2, r0, #1
 800840a:	d101      	bne.n	8008410 <__sflush_r+0x7c>
 800840c:	682b      	ldr	r3, [r5, #0]
 800840e:	b903      	cbnz	r3, 8008412 <__sflush_r+0x7e>
 8008410:	6560      	str	r0, [r4, #84]	; 0x54
 8008412:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008414:	602f      	str	r7, [r5, #0]
 8008416:	2900      	cmp	r1, #0
 8008418:	d0c9      	beq.n	80083ae <__sflush_r+0x1a>
 800841a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800841e:	4299      	cmp	r1, r3
 8008420:	d002      	beq.n	8008428 <__sflush_r+0x94>
 8008422:	4628      	mov	r0, r5
 8008424:	f7fe f8d6 	bl	80065d4 <_free_r>
 8008428:	2000      	movs	r0, #0
 800842a:	6360      	str	r0, [r4, #52]	; 0x34
 800842c:	e7c0      	b.n	80083b0 <__sflush_r+0x1c>
 800842e:	2301      	movs	r3, #1
 8008430:	4628      	mov	r0, r5
 8008432:	47b0      	blx	r6
 8008434:	1c41      	adds	r1, r0, #1
 8008436:	d1c8      	bne.n	80083ca <__sflush_r+0x36>
 8008438:	682b      	ldr	r3, [r5, #0]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d0c5      	beq.n	80083ca <__sflush_r+0x36>
 800843e:	2b1d      	cmp	r3, #29
 8008440:	d001      	beq.n	8008446 <__sflush_r+0xb2>
 8008442:	2b16      	cmp	r3, #22
 8008444:	d101      	bne.n	800844a <__sflush_r+0xb6>
 8008446:	602f      	str	r7, [r5, #0]
 8008448:	e7b1      	b.n	80083ae <__sflush_r+0x1a>
 800844a:	89a3      	ldrh	r3, [r4, #12]
 800844c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008450:	81a3      	strh	r3, [r4, #12]
 8008452:	e7ad      	b.n	80083b0 <__sflush_r+0x1c>
 8008454:	690f      	ldr	r7, [r1, #16]
 8008456:	2f00      	cmp	r7, #0
 8008458:	d0a9      	beq.n	80083ae <__sflush_r+0x1a>
 800845a:	0793      	lsls	r3, r2, #30
 800845c:	680e      	ldr	r6, [r1, #0]
 800845e:	bf08      	it	eq
 8008460:	694b      	ldreq	r3, [r1, #20]
 8008462:	600f      	str	r7, [r1, #0]
 8008464:	bf18      	it	ne
 8008466:	2300      	movne	r3, #0
 8008468:	eba6 0807 	sub.w	r8, r6, r7
 800846c:	608b      	str	r3, [r1, #8]
 800846e:	f1b8 0f00 	cmp.w	r8, #0
 8008472:	dd9c      	ble.n	80083ae <__sflush_r+0x1a>
 8008474:	6a21      	ldr	r1, [r4, #32]
 8008476:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008478:	4643      	mov	r3, r8
 800847a:	463a      	mov	r2, r7
 800847c:	4628      	mov	r0, r5
 800847e:	47b0      	blx	r6
 8008480:	2800      	cmp	r0, #0
 8008482:	dc06      	bgt.n	8008492 <__sflush_r+0xfe>
 8008484:	89a3      	ldrh	r3, [r4, #12]
 8008486:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800848a:	81a3      	strh	r3, [r4, #12]
 800848c:	f04f 30ff 	mov.w	r0, #4294967295
 8008490:	e78e      	b.n	80083b0 <__sflush_r+0x1c>
 8008492:	4407      	add	r7, r0
 8008494:	eba8 0800 	sub.w	r8, r8, r0
 8008498:	e7e9      	b.n	800846e <__sflush_r+0xda>
 800849a:	bf00      	nop
 800849c:	dfbffffe 	.word	0xdfbffffe

080084a0 <_fflush_r>:
 80084a0:	b538      	push	{r3, r4, r5, lr}
 80084a2:	690b      	ldr	r3, [r1, #16]
 80084a4:	4605      	mov	r5, r0
 80084a6:	460c      	mov	r4, r1
 80084a8:	b913      	cbnz	r3, 80084b0 <_fflush_r+0x10>
 80084aa:	2500      	movs	r5, #0
 80084ac:	4628      	mov	r0, r5
 80084ae:	bd38      	pop	{r3, r4, r5, pc}
 80084b0:	b118      	cbz	r0, 80084ba <_fflush_r+0x1a>
 80084b2:	6a03      	ldr	r3, [r0, #32]
 80084b4:	b90b      	cbnz	r3, 80084ba <_fflush_r+0x1a>
 80084b6:	f7fd f8e1 	bl	800567c <__sinit>
 80084ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d0f3      	beq.n	80084aa <_fflush_r+0xa>
 80084c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80084c4:	07d0      	lsls	r0, r2, #31
 80084c6:	d404      	bmi.n	80084d2 <_fflush_r+0x32>
 80084c8:	0599      	lsls	r1, r3, #22
 80084ca:	d402      	bmi.n	80084d2 <_fflush_r+0x32>
 80084cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084ce:	f7fd f9fe 	bl	80058ce <__retarget_lock_acquire_recursive>
 80084d2:	4628      	mov	r0, r5
 80084d4:	4621      	mov	r1, r4
 80084d6:	f7ff ff5d 	bl	8008394 <__sflush_r>
 80084da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80084dc:	07da      	lsls	r2, r3, #31
 80084de:	4605      	mov	r5, r0
 80084e0:	d4e4      	bmi.n	80084ac <_fflush_r+0xc>
 80084e2:	89a3      	ldrh	r3, [r4, #12]
 80084e4:	059b      	lsls	r3, r3, #22
 80084e6:	d4e1      	bmi.n	80084ac <_fflush_r+0xc>
 80084e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80084ea:	f7fd f9f1 	bl	80058d0 <__retarget_lock_release_recursive>
 80084ee:	e7dd      	b.n	80084ac <_fflush_r+0xc>

080084f0 <__swbuf_r>:
 80084f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084f2:	460e      	mov	r6, r1
 80084f4:	4614      	mov	r4, r2
 80084f6:	4605      	mov	r5, r0
 80084f8:	b118      	cbz	r0, 8008502 <__swbuf_r+0x12>
 80084fa:	6a03      	ldr	r3, [r0, #32]
 80084fc:	b90b      	cbnz	r3, 8008502 <__swbuf_r+0x12>
 80084fe:	f7fd f8bd 	bl	800567c <__sinit>
 8008502:	69a3      	ldr	r3, [r4, #24]
 8008504:	60a3      	str	r3, [r4, #8]
 8008506:	89a3      	ldrh	r3, [r4, #12]
 8008508:	071a      	lsls	r2, r3, #28
 800850a:	d525      	bpl.n	8008558 <__swbuf_r+0x68>
 800850c:	6923      	ldr	r3, [r4, #16]
 800850e:	b31b      	cbz	r3, 8008558 <__swbuf_r+0x68>
 8008510:	6823      	ldr	r3, [r4, #0]
 8008512:	6922      	ldr	r2, [r4, #16]
 8008514:	1a98      	subs	r0, r3, r2
 8008516:	6963      	ldr	r3, [r4, #20]
 8008518:	b2f6      	uxtb	r6, r6
 800851a:	4283      	cmp	r3, r0
 800851c:	4637      	mov	r7, r6
 800851e:	dc04      	bgt.n	800852a <__swbuf_r+0x3a>
 8008520:	4621      	mov	r1, r4
 8008522:	4628      	mov	r0, r5
 8008524:	f7ff ffbc 	bl	80084a0 <_fflush_r>
 8008528:	b9e0      	cbnz	r0, 8008564 <__swbuf_r+0x74>
 800852a:	68a3      	ldr	r3, [r4, #8]
 800852c:	3b01      	subs	r3, #1
 800852e:	60a3      	str	r3, [r4, #8]
 8008530:	6823      	ldr	r3, [r4, #0]
 8008532:	1c5a      	adds	r2, r3, #1
 8008534:	6022      	str	r2, [r4, #0]
 8008536:	701e      	strb	r6, [r3, #0]
 8008538:	6962      	ldr	r2, [r4, #20]
 800853a:	1c43      	adds	r3, r0, #1
 800853c:	429a      	cmp	r2, r3
 800853e:	d004      	beq.n	800854a <__swbuf_r+0x5a>
 8008540:	89a3      	ldrh	r3, [r4, #12]
 8008542:	07db      	lsls	r3, r3, #31
 8008544:	d506      	bpl.n	8008554 <__swbuf_r+0x64>
 8008546:	2e0a      	cmp	r6, #10
 8008548:	d104      	bne.n	8008554 <__swbuf_r+0x64>
 800854a:	4621      	mov	r1, r4
 800854c:	4628      	mov	r0, r5
 800854e:	f7ff ffa7 	bl	80084a0 <_fflush_r>
 8008552:	b938      	cbnz	r0, 8008564 <__swbuf_r+0x74>
 8008554:	4638      	mov	r0, r7
 8008556:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008558:	4621      	mov	r1, r4
 800855a:	4628      	mov	r0, r5
 800855c:	f000 f806 	bl	800856c <__swsetup_r>
 8008560:	2800      	cmp	r0, #0
 8008562:	d0d5      	beq.n	8008510 <__swbuf_r+0x20>
 8008564:	f04f 37ff 	mov.w	r7, #4294967295
 8008568:	e7f4      	b.n	8008554 <__swbuf_r+0x64>
	...

0800856c <__swsetup_r>:
 800856c:	b538      	push	{r3, r4, r5, lr}
 800856e:	4b2a      	ldr	r3, [pc, #168]	; (8008618 <__swsetup_r+0xac>)
 8008570:	4605      	mov	r5, r0
 8008572:	6818      	ldr	r0, [r3, #0]
 8008574:	460c      	mov	r4, r1
 8008576:	b118      	cbz	r0, 8008580 <__swsetup_r+0x14>
 8008578:	6a03      	ldr	r3, [r0, #32]
 800857a:	b90b      	cbnz	r3, 8008580 <__swsetup_r+0x14>
 800857c:	f7fd f87e 	bl	800567c <__sinit>
 8008580:	89a3      	ldrh	r3, [r4, #12]
 8008582:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008586:	0718      	lsls	r0, r3, #28
 8008588:	d422      	bmi.n	80085d0 <__swsetup_r+0x64>
 800858a:	06d9      	lsls	r1, r3, #27
 800858c:	d407      	bmi.n	800859e <__swsetup_r+0x32>
 800858e:	2309      	movs	r3, #9
 8008590:	602b      	str	r3, [r5, #0]
 8008592:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008596:	81a3      	strh	r3, [r4, #12]
 8008598:	f04f 30ff 	mov.w	r0, #4294967295
 800859c:	e034      	b.n	8008608 <__swsetup_r+0x9c>
 800859e:	0758      	lsls	r0, r3, #29
 80085a0:	d512      	bpl.n	80085c8 <__swsetup_r+0x5c>
 80085a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80085a4:	b141      	cbz	r1, 80085b8 <__swsetup_r+0x4c>
 80085a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80085aa:	4299      	cmp	r1, r3
 80085ac:	d002      	beq.n	80085b4 <__swsetup_r+0x48>
 80085ae:	4628      	mov	r0, r5
 80085b0:	f7fe f810 	bl	80065d4 <_free_r>
 80085b4:	2300      	movs	r3, #0
 80085b6:	6363      	str	r3, [r4, #52]	; 0x34
 80085b8:	89a3      	ldrh	r3, [r4, #12]
 80085ba:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80085be:	81a3      	strh	r3, [r4, #12]
 80085c0:	2300      	movs	r3, #0
 80085c2:	6063      	str	r3, [r4, #4]
 80085c4:	6923      	ldr	r3, [r4, #16]
 80085c6:	6023      	str	r3, [r4, #0]
 80085c8:	89a3      	ldrh	r3, [r4, #12]
 80085ca:	f043 0308 	orr.w	r3, r3, #8
 80085ce:	81a3      	strh	r3, [r4, #12]
 80085d0:	6923      	ldr	r3, [r4, #16]
 80085d2:	b94b      	cbnz	r3, 80085e8 <__swsetup_r+0x7c>
 80085d4:	89a3      	ldrh	r3, [r4, #12]
 80085d6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80085da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80085de:	d003      	beq.n	80085e8 <__swsetup_r+0x7c>
 80085e0:	4621      	mov	r1, r4
 80085e2:	4628      	mov	r0, r5
 80085e4:	f000 fc7e 	bl	8008ee4 <__smakebuf_r>
 80085e8:	89a0      	ldrh	r0, [r4, #12]
 80085ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80085ee:	f010 0301 	ands.w	r3, r0, #1
 80085f2:	d00a      	beq.n	800860a <__swsetup_r+0x9e>
 80085f4:	2300      	movs	r3, #0
 80085f6:	60a3      	str	r3, [r4, #8]
 80085f8:	6963      	ldr	r3, [r4, #20]
 80085fa:	425b      	negs	r3, r3
 80085fc:	61a3      	str	r3, [r4, #24]
 80085fe:	6923      	ldr	r3, [r4, #16]
 8008600:	b943      	cbnz	r3, 8008614 <__swsetup_r+0xa8>
 8008602:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008606:	d1c4      	bne.n	8008592 <__swsetup_r+0x26>
 8008608:	bd38      	pop	{r3, r4, r5, pc}
 800860a:	0781      	lsls	r1, r0, #30
 800860c:	bf58      	it	pl
 800860e:	6963      	ldrpl	r3, [r4, #20]
 8008610:	60a3      	str	r3, [r4, #8]
 8008612:	e7f4      	b.n	80085fe <__swsetup_r+0x92>
 8008614:	2000      	movs	r0, #0
 8008616:	e7f7      	b.n	8008608 <__swsetup_r+0x9c>
 8008618:	20000064 	.word	0x20000064

0800861c <memmove>:
 800861c:	4288      	cmp	r0, r1
 800861e:	b510      	push	{r4, lr}
 8008620:	eb01 0402 	add.w	r4, r1, r2
 8008624:	d902      	bls.n	800862c <memmove+0x10>
 8008626:	4284      	cmp	r4, r0
 8008628:	4623      	mov	r3, r4
 800862a:	d807      	bhi.n	800863c <memmove+0x20>
 800862c:	1e43      	subs	r3, r0, #1
 800862e:	42a1      	cmp	r1, r4
 8008630:	d008      	beq.n	8008644 <memmove+0x28>
 8008632:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008636:	f803 2f01 	strb.w	r2, [r3, #1]!
 800863a:	e7f8      	b.n	800862e <memmove+0x12>
 800863c:	4402      	add	r2, r0
 800863e:	4601      	mov	r1, r0
 8008640:	428a      	cmp	r2, r1
 8008642:	d100      	bne.n	8008646 <memmove+0x2a>
 8008644:	bd10      	pop	{r4, pc}
 8008646:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800864a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800864e:	e7f7      	b.n	8008640 <memmove+0x24>

08008650 <strncmp>:
 8008650:	b510      	push	{r4, lr}
 8008652:	b16a      	cbz	r2, 8008670 <strncmp+0x20>
 8008654:	3901      	subs	r1, #1
 8008656:	1884      	adds	r4, r0, r2
 8008658:	f810 2b01 	ldrb.w	r2, [r0], #1
 800865c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008660:	429a      	cmp	r2, r3
 8008662:	d103      	bne.n	800866c <strncmp+0x1c>
 8008664:	42a0      	cmp	r0, r4
 8008666:	d001      	beq.n	800866c <strncmp+0x1c>
 8008668:	2a00      	cmp	r2, #0
 800866a:	d1f5      	bne.n	8008658 <strncmp+0x8>
 800866c:	1ad0      	subs	r0, r2, r3
 800866e:	bd10      	pop	{r4, pc}
 8008670:	4610      	mov	r0, r2
 8008672:	e7fc      	b.n	800866e <strncmp+0x1e>

08008674 <_sbrk_r>:
 8008674:	b538      	push	{r3, r4, r5, lr}
 8008676:	4d06      	ldr	r5, [pc, #24]	; (8008690 <_sbrk_r+0x1c>)
 8008678:	2300      	movs	r3, #0
 800867a:	4604      	mov	r4, r0
 800867c:	4608      	mov	r0, r1
 800867e:	602b      	str	r3, [r5, #0]
 8008680:	f7f8 fff8 	bl	8001674 <_sbrk>
 8008684:	1c43      	adds	r3, r0, #1
 8008686:	d102      	bne.n	800868e <_sbrk_r+0x1a>
 8008688:	682b      	ldr	r3, [r5, #0]
 800868a:	b103      	cbz	r3, 800868e <_sbrk_r+0x1a>
 800868c:	6023      	str	r3, [r4, #0]
 800868e:	bd38      	pop	{r3, r4, r5, pc}
 8008690:	2000044c 	.word	0x2000044c

08008694 <memcpy>:
 8008694:	440a      	add	r2, r1
 8008696:	4291      	cmp	r1, r2
 8008698:	f100 33ff 	add.w	r3, r0, #4294967295
 800869c:	d100      	bne.n	80086a0 <memcpy+0xc>
 800869e:	4770      	bx	lr
 80086a0:	b510      	push	{r4, lr}
 80086a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80086a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80086aa:	4291      	cmp	r1, r2
 80086ac:	d1f9      	bne.n	80086a2 <memcpy+0xe>
 80086ae:	bd10      	pop	{r4, pc}

080086b0 <nan>:
 80086b0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80086b8 <nan+0x8>
 80086b4:	4770      	bx	lr
 80086b6:	bf00      	nop
 80086b8:	00000000 	.word	0x00000000
 80086bc:	7ff80000 	.word	0x7ff80000

080086c0 <__assert_func>:
 80086c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80086c2:	4614      	mov	r4, r2
 80086c4:	461a      	mov	r2, r3
 80086c6:	4b09      	ldr	r3, [pc, #36]	; (80086ec <__assert_func+0x2c>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4605      	mov	r5, r0
 80086cc:	68d8      	ldr	r0, [r3, #12]
 80086ce:	b14c      	cbz	r4, 80086e4 <__assert_func+0x24>
 80086d0:	4b07      	ldr	r3, [pc, #28]	; (80086f0 <__assert_func+0x30>)
 80086d2:	9100      	str	r1, [sp, #0]
 80086d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80086d8:	4906      	ldr	r1, [pc, #24]	; (80086f4 <__assert_func+0x34>)
 80086da:	462b      	mov	r3, r5
 80086dc:	f000 fbca 	bl	8008e74 <fiprintf>
 80086e0:	f000 fc5e 	bl	8008fa0 <abort>
 80086e4:	4b04      	ldr	r3, [pc, #16]	; (80086f8 <__assert_func+0x38>)
 80086e6:	461c      	mov	r4, r3
 80086e8:	e7f3      	b.n	80086d2 <__assert_func+0x12>
 80086ea:	bf00      	nop
 80086ec:	20000064 	.word	0x20000064
 80086f0:	0800945a 	.word	0x0800945a
 80086f4:	08009467 	.word	0x08009467
 80086f8:	08009495 	.word	0x08009495

080086fc <_calloc_r>:
 80086fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086fe:	fba1 2402 	umull	r2, r4, r1, r2
 8008702:	b94c      	cbnz	r4, 8008718 <_calloc_r+0x1c>
 8008704:	4611      	mov	r1, r2
 8008706:	9201      	str	r2, [sp, #4]
 8008708:	f7fd ffd8 	bl	80066bc <_malloc_r>
 800870c:	9a01      	ldr	r2, [sp, #4]
 800870e:	4605      	mov	r5, r0
 8008710:	b930      	cbnz	r0, 8008720 <_calloc_r+0x24>
 8008712:	4628      	mov	r0, r5
 8008714:	b003      	add	sp, #12
 8008716:	bd30      	pop	{r4, r5, pc}
 8008718:	220c      	movs	r2, #12
 800871a:	6002      	str	r2, [r0, #0]
 800871c:	2500      	movs	r5, #0
 800871e:	e7f8      	b.n	8008712 <_calloc_r+0x16>
 8008720:	4621      	mov	r1, r4
 8008722:	f7fd f856 	bl	80057d2 <memset>
 8008726:	e7f4      	b.n	8008712 <_calloc_r+0x16>

08008728 <rshift>:
 8008728:	6903      	ldr	r3, [r0, #16]
 800872a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800872e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008732:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008736:	f100 0414 	add.w	r4, r0, #20
 800873a:	dd45      	ble.n	80087c8 <rshift+0xa0>
 800873c:	f011 011f 	ands.w	r1, r1, #31
 8008740:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008744:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008748:	d10c      	bne.n	8008764 <rshift+0x3c>
 800874a:	f100 0710 	add.w	r7, r0, #16
 800874e:	4629      	mov	r1, r5
 8008750:	42b1      	cmp	r1, r6
 8008752:	d334      	bcc.n	80087be <rshift+0x96>
 8008754:	1a9b      	subs	r3, r3, r2
 8008756:	009b      	lsls	r3, r3, #2
 8008758:	1eea      	subs	r2, r5, #3
 800875a:	4296      	cmp	r6, r2
 800875c:	bf38      	it	cc
 800875e:	2300      	movcc	r3, #0
 8008760:	4423      	add	r3, r4
 8008762:	e015      	b.n	8008790 <rshift+0x68>
 8008764:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008768:	f1c1 0820 	rsb	r8, r1, #32
 800876c:	40cf      	lsrs	r7, r1
 800876e:	f105 0e04 	add.w	lr, r5, #4
 8008772:	46a1      	mov	r9, r4
 8008774:	4576      	cmp	r6, lr
 8008776:	46f4      	mov	ip, lr
 8008778:	d815      	bhi.n	80087a6 <rshift+0x7e>
 800877a:	1a9a      	subs	r2, r3, r2
 800877c:	0092      	lsls	r2, r2, #2
 800877e:	3a04      	subs	r2, #4
 8008780:	3501      	adds	r5, #1
 8008782:	42ae      	cmp	r6, r5
 8008784:	bf38      	it	cc
 8008786:	2200      	movcc	r2, #0
 8008788:	18a3      	adds	r3, r4, r2
 800878a:	50a7      	str	r7, [r4, r2]
 800878c:	b107      	cbz	r7, 8008790 <rshift+0x68>
 800878e:	3304      	adds	r3, #4
 8008790:	1b1a      	subs	r2, r3, r4
 8008792:	42a3      	cmp	r3, r4
 8008794:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008798:	bf08      	it	eq
 800879a:	2300      	moveq	r3, #0
 800879c:	6102      	str	r2, [r0, #16]
 800879e:	bf08      	it	eq
 80087a0:	6143      	streq	r3, [r0, #20]
 80087a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80087a6:	f8dc c000 	ldr.w	ip, [ip]
 80087aa:	fa0c fc08 	lsl.w	ip, ip, r8
 80087ae:	ea4c 0707 	orr.w	r7, ip, r7
 80087b2:	f849 7b04 	str.w	r7, [r9], #4
 80087b6:	f85e 7b04 	ldr.w	r7, [lr], #4
 80087ba:	40cf      	lsrs	r7, r1
 80087bc:	e7da      	b.n	8008774 <rshift+0x4c>
 80087be:	f851 cb04 	ldr.w	ip, [r1], #4
 80087c2:	f847 cf04 	str.w	ip, [r7, #4]!
 80087c6:	e7c3      	b.n	8008750 <rshift+0x28>
 80087c8:	4623      	mov	r3, r4
 80087ca:	e7e1      	b.n	8008790 <rshift+0x68>

080087cc <__hexdig_fun>:
 80087cc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80087d0:	2b09      	cmp	r3, #9
 80087d2:	d802      	bhi.n	80087da <__hexdig_fun+0xe>
 80087d4:	3820      	subs	r0, #32
 80087d6:	b2c0      	uxtb	r0, r0
 80087d8:	4770      	bx	lr
 80087da:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80087de:	2b05      	cmp	r3, #5
 80087e0:	d801      	bhi.n	80087e6 <__hexdig_fun+0x1a>
 80087e2:	3847      	subs	r0, #71	; 0x47
 80087e4:	e7f7      	b.n	80087d6 <__hexdig_fun+0xa>
 80087e6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80087ea:	2b05      	cmp	r3, #5
 80087ec:	d801      	bhi.n	80087f2 <__hexdig_fun+0x26>
 80087ee:	3827      	subs	r0, #39	; 0x27
 80087f0:	e7f1      	b.n	80087d6 <__hexdig_fun+0xa>
 80087f2:	2000      	movs	r0, #0
 80087f4:	4770      	bx	lr
	...

080087f8 <__gethex>:
 80087f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087fc:	4617      	mov	r7, r2
 80087fe:	680a      	ldr	r2, [r1, #0]
 8008800:	b085      	sub	sp, #20
 8008802:	f102 0b02 	add.w	fp, r2, #2
 8008806:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800880a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800880e:	4681      	mov	r9, r0
 8008810:	468a      	mov	sl, r1
 8008812:	9302      	str	r3, [sp, #8]
 8008814:	32fe      	adds	r2, #254	; 0xfe
 8008816:	eb02 030b 	add.w	r3, r2, fp
 800881a:	46d8      	mov	r8, fp
 800881c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 8008820:	9301      	str	r3, [sp, #4]
 8008822:	2830      	cmp	r0, #48	; 0x30
 8008824:	d0f7      	beq.n	8008816 <__gethex+0x1e>
 8008826:	f7ff ffd1 	bl	80087cc <__hexdig_fun>
 800882a:	4604      	mov	r4, r0
 800882c:	2800      	cmp	r0, #0
 800882e:	d138      	bne.n	80088a2 <__gethex+0xaa>
 8008830:	49a7      	ldr	r1, [pc, #668]	; (8008ad0 <__gethex+0x2d8>)
 8008832:	2201      	movs	r2, #1
 8008834:	4640      	mov	r0, r8
 8008836:	f7ff ff0b 	bl	8008650 <strncmp>
 800883a:	4606      	mov	r6, r0
 800883c:	2800      	cmp	r0, #0
 800883e:	d169      	bne.n	8008914 <__gethex+0x11c>
 8008840:	f898 0001 	ldrb.w	r0, [r8, #1]
 8008844:	465d      	mov	r5, fp
 8008846:	f7ff ffc1 	bl	80087cc <__hexdig_fun>
 800884a:	2800      	cmp	r0, #0
 800884c:	d064      	beq.n	8008918 <__gethex+0x120>
 800884e:	465a      	mov	r2, fp
 8008850:	7810      	ldrb	r0, [r2, #0]
 8008852:	2830      	cmp	r0, #48	; 0x30
 8008854:	4690      	mov	r8, r2
 8008856:	f102 0201 	add.w	r2, r2, #1
 800885a:	d0f9      	beq.n	8008850 <__gethex+0x58>
 800885c:	f7ff ffb6 	bl	80087cc <__hexdig_fun>
 8008860:	2301      	movs	r3, #1
 8008862:	fab0 f480 	clz	r4, r0
 8008866:	0964      	lsrs	r4, r4, #5
 8008868:	465e      	mov	r6, fp
 800886a:	9301      	str	r3, [sp, #4]
 800886c:	4642      	mov	r2, r8
 800886e:	4615      	mov	r5, r2
 8008870:	3201      	adds	r2, #1
 8008872:	7828      	ldrb	r0, [r5, #0]
 8008874:	f7ff ffaa 	bl	80087cc <__hexdig_fun>
 8008878:	2800      	cmp	r0, #0
 800887a:	d1f8      	bne.n	800886e <__gethex+0x76>
 800887c:	4994      	ldr	r1, [pc, #592]	; (8008ad0 <__gethex+0x2d8>)
 800887e:	2201      	movs	r2, #1
 8008880:	4628      	mov	r0, r5
 8008882:	f7ff fee5 	bl	8008650 <strncmp>
 8008886:	b978      	cbnz	r0, 80088a8 <__gethex+0xb0>
 8008888:	b946      	cbnz	r6, 800889c <__gethex+0xa4>
 800888a:	1c6e      	adds	r6, r5, #1
 800888c:	4632      	mov	r2, r6
 800888e:	4615      	mov	r5, r2
 8008890:	3201      	adds	r2, #1
 8008892:	7828      	ldrb	r0, [r5, #0]
 8008894:	f7ff ff9a 	bl	80087cc <__hexdig_fun>
 8008898:	2800      	cmp	r0, #0
 800889a:	d1f8      	bne.n	800888e <__gethex+0x96>
 800889c:	1b73      	subs	r3, r6, r5
 800889e:	009e      	lsls	r6, r3, #2
 80088a0:	e004      	b.n	80088ac <__gethex+0xb4>
 80088a2:	2400      	movs	r4, #0
 80088a4:	4626      	mov	r6, r4
 80088a6:	e7e1      	b.n	800886c <__gethex+0x74>
 80088a8:	2e00      	cmp	r6, #0
 80088aa:	d1f7      	bne.n	800889c <__gethex+0xa4>
 80088ac:	782b      	ldrb	r3, [r5, #0]
 80088ae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80088b2:	2b50      	cmp	r3, #80	; 0x50
 80088b4:	d13d      	bne.n	8008932 <__gethex+0x13a>
 80088b6:	786b      	ldrb	r3, [r5, #1]
 80088b8:	2b2b      	cmp	r3, #43	; 0x2b
 80088ba:	d02f      	beq.n	800891c <__gethex+0x124>
 80088bc:	2b2d      	cmp	r3, #45	; 0x2d
 80088be:	d031      	beq.n	8008924 <__gethex+0x12c>
 80088c0:	1c69      	adds	r1, r5, #1
 80088c2:	f04f 0b00 	mov.w	fp, #0
 80088c6:	7808      	ldrb	r0, [r1, #0]
 80088c8:	f7ff ff80 	bl	80087cc <__hexdig_fun>
 80088cc:	1e42      	subs	r2, r0, #1
 80088ce:	b2d2      	uxtb	r2, r2
 80088d0:	2a18      	cmp	r2, #24
 80088d2:	d82e      	bhi.n	8008932 <__gethex+0x13a>
 80088d4:	f1a0 0210 	sub.w	r2, r0, #16
 80088d8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80088dc:	f7ff ff76 	bl	80087cc <__hexdig_fun>
 80088e0:	f100 3cff 	add.w	ip, r0, #4294967295
 80088e4:	fa5f fc8c 	uxtb.w	ip, ip
 80088e8:	f1bc 0f18 	cmp.w	ip, #24
 80088ec:	d91d      	bls.n	800892a <__gethex+0x132>
 80088ee:	f1bb 0f00 	cmp.w	fp, #0
 80088f2:	d000      	beq.n	80088f6 <__gethex+0xfe>
 80088f4:	4252      	negs	r2, r2
 80088f6:	4416      	add	r6, r2
 80088f8:	f8ca 1000 	str.w	r1, [sl]
 80088fc:	b1dc      	cbz	r4, 8008936 <__gethex+0x13e>
 80088fe:	9b01      	ldr	r3, [sp, #4]
 8008900:	2b00      	cmp	r3, #0
 8008902:	bf14      	ite	ne
 8008904:	f04f 0800 	movne.w	r8, #0
 8008908:	f04f 0806 	moveq.w	r8, #6
 800890c:	4640      	mov	r0, r8
 800890e:	b005      	add	sp, #20
 8008910:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008914:	4645      	mov	r5, r8
 8008916:	4626      	mov	r6, r4
 8008918:	2401      	movs	r4, #1
 800891a:	e7c7      	b.n	80088ac <__gethex+0xb4>
 800891c:	f04f 0b00 	mov.w	fp, #0
 8008920:	1ca9      	adds	r1, r5, #2
 8008922:	e7d0      	b.n	80088c6 <__gethex+0xce>
 8008924:	f04f 0b01 	mov.w	fp, #1
 8008928:	e7fa      	b.n	8008920 <__gethex+0x128>
 800892a:	230a      	movs	r3, #10
 800892c:	fb03 0002 	mla	r0, r3, r2, r0
 8008930:	e7d0      	b.n	80088d4 <__gethex+0xdc>
 8008932:	4629      	mov	r1, r5
 8008934:	e7e0      	b.n	80088f8 <__gethex+0x100>
 8008936:	eba5 0308 	sub.w	r3, r5, r8
 800893a:	3b01      	subs	r3, #1
 800893c:	4621      	mov	r1, r4
 800893e:	2b07      	cmp	r3, #7
 8008940:	dc0a      	bgt.n	8008958 <__gethex+0x160>
 8008942:	4648      	mov	r0, r9
 8008944:	f7fd ff46 	bl	80067d4 <_Balloc>
 8008948:	4604      	mov	r4, r0
 800894a:	b940      	cbnz	r0, 800895e <__gethex+0x166>
 800894c:	4b61      	ldr	r3, [pc, #388]	; (8008ad4 <__gethex+0x2dc>)
 800894e:	4602      	mov	r2, r0
 8008950:	21e4      	movs	r1, #228	; 0xe4
 8008952:	4861      	ldr	r0, [pc, #388]	; (8008ad8 <__gethex+0x2e0>)
 8008954:	f7ff feb4 	bl	80086c0 <__assert_func>
 8008958:	3101      	adds	r1, #1
 800895a:	105b      	asrs	r3, r3, #1
 800895c:	e7ef      	b.n	800893e <__gethex+0x146>
 800895e:	f100 0a14 	add.w	sl, r0, #20
 8008962:	2300      	movs	r3, #0
 8008964:	495a      	ldr	r1, [pc, #360]	; (8008ad0 <__gethex+0x2d8>)
 8008966:	f8cd a004 	str.w	sl, [sp, #4]
 800896a:	469b      	mov	fp, r3
 800896c:	45a8      	cmp	r8, r5
 800896e:	d342      	bcc.n	80089f6 <__gethex+0x1fe>
 8008970:	9801      	ldr	r0, [sp, #4]
 8008972:	f840 bb04 	str.w	fp, [r0], #4
 8008976:	eba0 000a 	sub.w	r0, r0, sl
 800897a:	1080      	asrs	r0, r0, #2
 800897c:	6120      	str	r0, [r4, #16]
 800897e:	ea4f 1840 	mov.w	r8, r0, lsl #5
 8008982:	4658      	mov	r0, fp
 8008984:	f7fe f818 	bl	80069b8 <__hi0bits>
 8008988:	683d      	ldr	r5, [r7, #0]
 800898a:	eba8 0000 	sub.w	r0, r8, r0
 800898e:	42a8      	cmp	r0, r5
 8008990:	dd59      	ble.n	8008a46 <__gethex+0x24e>
 8008992:	eba0 0805 	sub.w	r8, r0, r5
 8008996:	4641      	mov	r1, r8
 8008998:	4620      	mov	r0, r4
 800899a:	f7fe fba7 	bl	80070ec <__any_on>
 800899e:	4683      	mov	fp, r0
 80089a0:	b1b8      	cbz	r0, 80089d2 <__gethex+0x1da>
 80089a2:	f108 33ff 	add.w	r3, r8, #4294967295
 80089a6:	1159      	asrs	r1, r3, #5
 80089a8:	f003 021f 	and.w	r2, r3, #31
 80089ac:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 80089b0:	f04f 0b01 	mov.w	fp, #1
 80089b4:	fa0b f202 	lsl.w	r2, fp, r2
 80089b8:	420a      	tst	r2, r1
 80089ba:	d00a      	beq.n	80089d2 <__gethex+0x1da>
 80089bc:	455b      	cmp	r3, fp
 80089be:	dd06      	ble.n	80089ce <__gethex+0x1d6>
 80089c0:	f1a8 0102 	sub.w	r1, r8, #2
 80089c4:	4620      	mov	r0, r4
 80089c6:	f7fe fb91 	bl	80070ec <__any_on>
 80089ca:	2800      	cmp	r0, #0
 80089cc:	d138      	bne.n	8008a40 <__gethex+0x248>
 80089ce:	f04f 0b02 	mov.w	fp, #2
 80089d2:	4641      	mov	r1, r8
 80089d4:	4620      	mov	r0, r4
 80089d6:	f7ff fea7 	bl	8008728 <rshift>
 80089da:	4446      	add	r6, r8
 80089dc:	68bb      	ldr	r3, [r7, #8]
 80089de:	42b3      	cmp	r3, r6
 80089e0:	da41      	bge.n	8008a66 <__gethex+0x26e>
 80089e2:	4621      	mov	r1, r4
 80089e4:	4648      	mov	r0, r9
 80089e6:	f7fd ff35 	bl	8006854 <_Bfree>
 80089ea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80089ec:	2300      	movs	r3, #0
 80089ee:	6013      	str	r3, [r2, #0]
 80089f0:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 80089f4:	e78a      	b.n	800890c <__gethex+0x114>
 80089f6:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 80089fa:	2a2e      	cmp	r2, #46	; 0x2e
 80089fc:	d014      	beq.n	8008a28 <__gethex+0x230>
 80089fe:	2b20      	cmp	r3, #32
 8008a00:	d106      	bne.n	8008a10 <__gethex+0x218>
 8008a02:	9b01      	ldr	r3, [sp, #4]
 8008a04:	f843 bb04 	str.w	fp, [r3], #4
 8008a08:	f04f 0b00 	mov.w	fp, #0
 8008a0c:	9301      	str	r3, [sp, #4]
 8008a0e:	465b      	mov	r3, fp
 8008a10:	7828      	ldrb	r0, [r5, #0]
 8008a12:	9303      	str	r3, [sp, #12]
 8008a14:	f7ff feda 	bl	80087cc <__hexdig_fun>
 8008a18:	9b03      	ldr	r3, [sp, #12]
 8008a1a:	f000 000f 	and.w	r0, r0, #15
 8008a1e:	4098      	lsls	r0, r3
 8008a20:	ea4b 0b00 	orr.w	fp, fp, r0
 8008a24:	3304      	adds	r3, #4
 8008a26:	e7a1      	b.n	800896c <__gethex+0x174>
 8008a28:	45a8      	cmp	r8, r5
 8008a2a:	d8e8      	bhi.n	80089fe <__gethex+0x206>
 8008a2c:	2201      	movs	r2, #1
 8008a2e:	4628      	mov	r0, r5
 8008a30:	9303      	str	r3, [sp, #12]
 8008a32:	f7ff fe0d 	bl	8008650 <strncmp>
 8008a36:	4926      	ldr	r1, [pc, #152]	; (8008ad0 <__gethex+0x2d8>)
 8008a38:	9b03      	ldr	r3, [sp, #12]
 8008a3a:	2800      	cmp	r0, #0
 8008a3c:	d1df      	bne.n	80089fe <__gethex+0x206>
 8008a3e:	e795      	b.n	800896c <__gethex+0x174>
 8008a40:	f04f 0b03 	mov.w	fp, #3
 8008a44:	e7c5      	b.n	80089d2 <__gethex+0x1da>
 8008a46:	da0b      	bge.n	8008a60 <__gethex+0x268>
 8008a48:	eba5 0800 	sub.w	r8, r5, r0
 8008a4c:	4621      	mov	r1, r4
 8008a4e:	4642      	mov	r2, r8
 8008a50:	4648      	mov	r0, r9
 8008a52:	f7fe f919 	bl	8006c88 <__lshift>
 8008a56:	eba6 0608 	sub.w	r6, r6, r8
 8008a5a:	4604      	mov	r4, r0
 8008a5c:	f100 0a14 	add.w	sl, r0, #20
 8008a60:	f04f 0b00 	mov.w	fp, #0
 8008a64:	e7ba      	b.n	80089dc <__gethex+0x1e4>
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	42b3      	cmp	r3, r6
 8008a6a:	dd73      	ble.n	8008b54 <__gethex+0x35c>
 8008a6c:	1b9e      	subs	r6, r3, r6
 8008a6e:	42b5      	cmp	r5, r6
 8008a70:	dc34      	bgt.n	8008adc <__gethex+0x2e4>
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2b02      	cmp	r3, #2
 8008a76:	d023      	beq.n	8008ac0 <__gethex+0x2c8>
 8008a78:	2b03      	cmp	r3, #3
 8008a7a:	d025      	beq.n	8008ac8 <__gethex+0x2d0>
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d115      	bne.n	8008aac <__gethex+0x2b4>
 8008a80:	42b5      	cmp	r5, r6
 8008a82:	d113      	bne.n	8008aac <__gethex+0x2b4>
 8008a84:	2d01      	cmp	r5, #1
 8008a86:	d10b      	bne.n	8008aa0 <__gethex+0x2a8>
 8008a88:	9a02      	ldr	r2, [sp, #8]
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	6013      	str	r3, [r2, #0]
 8008a8e:	2301      	movs	r3, #1
 8008a90:	6123      	str	r3, [r4, #16]
 8008a92:	f8ca 3000 	str.w	r3, [sl]
 8008a96:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008a98:	f04f 0862 	mov.w	r8, #98	; 0x62
 8008a9c:	601c      	str	r4, [r3, #0]
 8008a9e:	e735      	b.n	800890c <__gethex+0x114>
 8008aa0:	1e69      	subs	r1, r5, #1
 8008aa2:	4620      	mov	r0, r4
 8008aa4:	f7fe fb22 	bl	80070ec <__any_on>
 8008aa8:	2800      	cmp	r0, #0
 8008aaa:	d1ed      	bne.n	8008a88 <__gethex+0x290>
 8008aac:	4621      	mov	r1, r4
 8008aae:	4648      	mov	r0, r9
 8008ab0:	f7fd fed0 	bl	8006854 <_Bfree>
 8008ab4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	6013      	str	r3, [r2, #0]
 8008aba:	f04f 0850 	mov.w	r8, #80	; 0x50
 8008abe:	e725      	b.n	800890c <__gethex+0x114>
 8008ac0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d1f2      	bne.n	8008aac <__gethex+0x2b4>
 8008ac6:	e7df      	b.n	8008a88 <__gethex+0x290>
 8008ac8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d1dc      	bne.n	8008a88 <__gethex+0x290>
 8008ace:	e7ed      	b.n	8008aac <__gethex+0x2b4>
 8008ad0:	080092ec 	.word	0x080092ec
 8008ad4:	08009181 	.word	0x08009181
 8008ad8:	08009496 	.word	0x08009496
 8008adc:	f106 38ff 	add.w	r8, r6, #4294967295
 8008ae0:	f1bb 0f00 	cmp.w	fp, #0
 8008ae4:	d133      	bne.n	8008b4e <__gethex+0x356>
 8008ae6:	f1b8 0f00 	cmp.w	r8, #0
 8008aea:	d004      	beq.n	8008af6 <__gethex+0x2fe>
 8008aec:	4641      	mov	r1, r8
 8008aee:	4620      	mov	r0, r4
 8008af0:	f7fe fafc 	bl	80070ec <__any_on>
 8008af4:	4683      	mov	fp, r0
 8008af6:	ea4f 1268 	mov.w	r2, r8, asr #5
 8008afa:	2301      	movs	r3, #1
 8008afc:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8008b00:	f008 081f 	and.w	r8, r8, #31
 8008b04:	fa03 f308 	lsl.w	r3, r3, r8
 8008b08:	4213      	tst	r3, r2
 8008b0a:	4631      	mov	r1, r6
 8008b0c:	4620      	mov	r0, r4
 8008b0e:	bf18      	it	ne
 8008b10:	f04b 0b02 	orrne.w	fp, fp, #2
 8008b14:	1bad      	subs	r5, r5, r6
 8008b16:	f7ff fe07 	bl	8008728 <rshift>
 8008b1a:	687e      	ldr	r6, [r7, #4]
 8008b1c:	f04f 0802 	mov.w	r8, #2
 8008b20:	f1bb 0f00 	cmp.w	fp, #0
 8008b24:	d04a      	beq.n	8008bbc <__gethex+0x3c4>
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2b02      	cmp	r3, #2
 8008b2a:	d016      	beq.n	8008b5a <__gethex+0x362>
 8008b2c:	2b03      	cmp	r3, #3
 8008b2e:	d018      	beq.n	8008b62 <__gethex+0x36a>
 8008b30:	2b01      	cmp	r3, #1
 8008b32:	d109      	bne.n	8008b48 <__gethex+0x350>
 8008b34:	f01b 0f02 	tst.w	fp, #2
 8008b38:	d006      	beq.n	8008b48 <__gethex+0x350>
 8008b3a:	f8da 3000 	ldr.w	r3, [sl]
 8008b3e:	ea4b 0b03 	orr.w	fp, fp, r3
 8008b42:	f01b 0f01 	tst.w	fp, #1
 8008b46:	d10f      	bne.n	8008b68 <__gethex+0x370>
 8008b48:	f048 0810 	orr.w	r8, r8, #16
 8008b4c:	e036      	b.n	8008bbc <__gethex+0x3c4>
 8008b4e:	f04f 0b01 	mov.w	fp, #1
 8008b52:	e7d0      	b.n	8008af6 <__gethex+0x2fe>
 8008b54:	f04f 0801 	mov.w	r8, #1
 8008b58:	e7e2      	b.n	8008b20 <__gethex+0x328>
 8008b5a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b5c:	f1c3 0301 	rsb	r3, r3, #1
 8008b60:	930f      	str	r3, [sp, #60]	; 0x3c
 8008b62:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d0ef      	beq.n	8008b48 <__gethex+0x350>
 8008b68:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008b6c:	f104 0214 	add.w	r2, r4, #20
 8008b70:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8008b74:	9301      	str	r3, [sp, #4]
 8008b76:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8008b7a:	2300      	movs	r3, #0
 8008b7c:	4694      	mov	ip, r2
 8008b7e:	f852 1b04 	ldr.w	r1, [r2], #4
 8008b82:	f1b1 3fff 	cmp.w	r1, #4294967295
 8008b86:	d01e      	beq.n	8008bc6 <__gethex+0x3ce>
 8008b88:	3101      	adds	r1, #1
 8008b8a:	f8cc 1000 	str.w	r1, [ip]
 8008b8e:	f1b8 0f02 	cmp.w	r8, #2
 8008b92:	f104 0214 	add.w	r2, r4, #20
 8008b96:	d13d      	bne.n	8008c14 <__gethex+0x41c>
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	3b01      	subs	r3, #1
 8008b9c:	42ab      	cmp	r3, r5
 8008b9e:	d10b      	bne.n	8008bb8 <__gethex+0x3c0>
 8008ba0:	1169      	asrs	r1, r5, #5
 8008ba2:	2301      	movs	r3, #1
 8008ba4:	f005 051f 	and.w	r5, r5, #31
 8008ba8:	fa03 f505 	lsl.w	r5, r3, r5
 8008bac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008bb0:	421d      	tst	r5, r3
 8008bb2:	bf18      	it	ne
 8008bb4:	f04f 0801 	movne.w	r8, #1
 8008bb8:	f048 0820 	orr.w	r8, r8, #32
 8008bbc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008bbe:	601c      	str	r4, [r3, #0]
 8008bc0:	9b02      	ldr	r3, [sp, #8]
 8008bc2:	601e      	str	r6, [r3, #0]
 8008bc4:	e6a2      	b.n	800890c <__gethex+0x114>
 8008bc6:	4290      	cmp	r0, r2
 8008bc8:	f842 3c04 	str.w	r3, [r2, #-4]
 8008bcc:	d8d6      	bhi.n	8008b7c <__gethex+0x384>
 8008bce:	68a2      	ldr	r2, [r4, #8]
 8008bd0:	4593      	cmp	fp, r2
 8008bd2:	db17      	blt.n	8008c04 <__gethex+0x40c>
 8008bd4:	6861      	ldr	r1, [r4, #4]
 8008bd6:	4648      	mov	r0, r9
 8008bd8:	3101      	adds	r1, #1
 8008bda:	f7fd fdfb 	bl	80067d4 <_Balloc>
 8008bde:	4682      	mov	sl, r0
 8008be0:	b918      	cbnz	r0, 8008bea <__gethex+0x3f2>
 8008be2:	4b1b      	ldr	r3, [pc, #108]	; (8008c50 <__gethex+0x458>)
 8008be4:	4602      	mov	r2, r0
 8008be6:	2184      	movs	r1, #132	; 0x84
 8008be8:	e6b3      	b.n	8008952 <__gethex+0x15a>
 8008bea:	6922      	ldr	r2, [r4, #16]
 8008bec:	3202      	adds	r2, #2
 8008bee:	f104 010c 	add.w	r1, r4, #12
 8008bf2:	0092      	lsls	r2, r2, #2
 8008bf4:	300c      	adds	r0, #12
 8008bf6:	f7ff fd4d 	bl	8008694 <memcpy>
 8008bfa:	4621      	mov	r1, r4
 8008bfc:	4648      	mov	r0, r9
 8008bfe:	f7fd fe29 	bl	8006854 <_Bfree>
 8008c02:	4654      	mov	r4, sl
 8008c04:	6922      	ldr	r2, [r4, #16]
 8008c06:	1c51      	adds	r1, r2, #1
 8008c08:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008c0c:	6121      	str	r1, [r4, #16]
 8008c0e:	2101      	movs	r1, #1
 8008c10:	6151      	str	r1, [r2, #20]
 8008c12:	e7bc      	b.n	8008b8e <__gethex+0x396>
 8008c14:	6921      	ldr	r1, [r4, #16]
 8008c16:	4559      	cmp	r1, fp
 8008c18:	dd0b      	ble.n	8008c32 <__gethex+0x43a>
 8008c1a:	2101      	movs	r1, #1
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	f7ff fd83 	bl	8008728 <rshift>
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	3601      	adds	r6, #1
 8008c26:	42b3      	cmp	r3, r6
 8008c28:	f6ff aedb 	blt.w	80089e2 <__gethex+0x1ea>
 8008c2c:	f04f 0801 	mov.w	r8, #1
 8008c30:	e7c2      	b.n	8008bb8 <__gethex+0x3c0>
 8008c32:	f015 051f 	ands.w	r5, r5, #31
 8008c36:	d0f9      	beq.n	8008c2c <__gethex+0x434>
 8008c38:	9b01      	ldr	r3, [sp, #4]
 8008c3a:	441a      	add	r2, r3
 8008c3c:	f1c5 0520 	rsb	r5, r5, #32
 8008c40:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8008c44:	f7fd feb8 	bl	80069b8 <__hi0bits>
 8008c48:	42a8      	cmp	r0, r5
 8008c4a:	dbe6      	blt.n	8008c1a <__gethex+0x422>
 8008c4c:	e7ee      	b.n	8008c2c <__gethex+0x434>
 8008c4e:	bf00      	nop
 8008c50:	08009181 	.word	0x08009181

08008c54 <L_shift>:
 8008c54:	f1c2 0208 	rsb	r2, r2, #8
 8008c58:	0092      	lsls	r2, r2, #2
 8008c5a:	b570      	push	{r4, r5, r6, lr}
 8008c5c:	f1c2 0620 	rsb	r6, r2, #32
 8008c60:	6843      	ldr	r3, [r0, #4]
 8008c62:	6804      	ldr	r4, [r0, #0]
 8008c64:	fa03 f506 	lsl.w	r5, r3, r6
 8008c68:	432c      	orrs	r4, r5
 8008c6a:	40d3      	lsrs	r3, r2
 8008c6c:	6004      	str	r4, [r0, #0]
 8008c6e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008c72:	4288      	cmp	r0, r1
 8008c74:	d3f4      	bcc.n	8008c60 <L_shift+0xc>
 8008c76:	bd70      	pop	{r4, r5, r6, pc}

08008c78 <__match>:
 8008c78:	b530      	push	{r4, r5, lr}
 8008c7a:	6803      	ldr	r3, [r0, #0]
 8008c7c:	3301      	adds	r3, #1
 8008c7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c82:	b914      	cbnz	r4, 8008c8a <__match+0x12>
 8008c84:	6003      	str	r3, [r0, #0]
 8008c86:	2001      	movs	r0, #1
 8008c88:	bd30      	pop	{r4, r5, pc}
 8008c8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c8e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8008c92:	2d19      	cmp	r5, #25
 8008c94:	bf98      	it	ls
 8008c96:	3220      	addls	r2, #32
 8008c98:	42a2      	cmp	r2, r4
 8008c9a:	d0f0      	beq.n	8008c7e <__match+0x6>
 8008c9c:	2000      	movs	r0, #0
 8008c9e:	e7f3      	b.n	8008c88 <__match+0x10>

08008ca0 <__hexnan>:
 8008ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ca4:	680b      	ldr	r3, [r1, #0]
 8008ca6:	6801      	ldr	r1, [r0, #0]
 8008ca8:	115e      	asrs	r6, r3, #5
 8008caa:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008cae:	f013 031f 	ands.w	r3, r3, #31
 8008cb2:	b087      	sub	sp, #28
 8008cb4:	bf18      	it	ne
 8008cb6:	3604      	addne	r6, #4
 8008cb8:	2500      	movs	r5, #0
 8008cba:	1f37      	subs	r7, r6, #4
 8008cbc:	4682      	mov	sl, r0
 8008cbe:	4690      	mov	r8, r2
 8008cc0:	9301      	str	r3, [sp, #4]
 8008cc2:	f846 5c04 	str.w	r5, [r6, #-4]
 8008cc6:	46b9      	mov	r9, r7
 8008cc8:	463c      	mov	r4, r7
 8008cca:	9502      	str	r5, [sp, #8]
 8008ccc:	46ab      	mov	fp, r5
 8008cce:	784a      	ldrb	r2, [r1, #1]
 8008cd0:	1c4b      	adds	r3, r1, #1
 8008cd2:	9303      	str	r3, [sp, #12]
 8008cd4:	b342      	cbz	r2, 8008d28 <__hexnan+0x88>
 8008cd6:	4610      	mov	r0, r2
 8008cd8:	9105      	str	r1, [sp, #20]
 8008cda:	9204      	str	r2, [sp, #16]
 8008cdc:	f7ff fd76 	bl	80087cc <__hexdig_fun>
 8008ce0:	2800      	cmp	r0, #0
 8008ce2:	d14f      	bne.n	8008d84 <__hexnan+0xe4>
 8008ce4:	9a04      	ldr	r2, [sp, #16]
 8008ce6:	9905      	ldr	r1, [sp, #20]
 8008ce8:	2a20      	cmp	r2, #32
 8008cea:	d818      	bhi.n	8008d1e <__hexnan+0x7e>
 8008cec:	9b02      	ldr	r3, [sp, #8]
 8008cee:	459b      	cmp	fp, r3
 8008cf0:	dd13      	ble.n	8008d1a <__hexnan+0x7a>
 8008cf2:	454c      	cmp	r4, r9
 8008cf4:	d206      	bcs.n	8008d04 <__hexnan+0x64>
 8008cf6:	2d07      	cmp	r5, #7
 8008cf8:	dc04      	bgt.n	8008d04 <__hexnan+0x64>
 8008cfa:	462a      	mov	r2, r5
 8008cfc:	4649      	mov	r1, r9
 8008cfe:	4620      	mov	r0, r4
 8008d00:	f7ff ffa8 	bl	8008c54 <L_shift>
 8008d04:	4544      	cmp	r4, r8
 8008d06:	d950      	bls.n	8008daa <__hexnan+0x10a>
 8008d08:	2300      	movs	r3, #0
 8008d0a:	f1a4 0904 	sub.w	r9, r4, #4
 8008d0e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d12:	f8cd b008 	str.w	fp, [sp, #8]
 8008d16:	464c      	mov	r4, r9
 8008d18:	461d      	mov	r5, r3
 8008d1a:	9903      	ldr	r1, [sp, #12]
 8008d1c:	e7d7      	b.n	8008cce <__hexnan+0x2e>
 8008d1e:	2a29      	cmp	r2, #41	; 0x29
 8008d20:	d155      	bne.n	8008dce <__hexnan+0x12e>
 8008d22:	3102      	adds	r1, #2
 8008d24:	f8ca 1000 	str.w	r1, [sl]
 8008d28:	f1bb 0f00 	cmp.w	fp, #0
 8008d2c:	d04f      	beq.n	8008dce <__hexnan+0x12e>
 8008d2e:	454c      	cmp	r4, r9
 8008d30:	d206      	bcs.n	8008d40 <__hexnan+0xa0>
 8008d32:	2d07      	cmp	r5, #7
 8008d34:	dc04      	bgt.n	8008d40 <__hexnan+0xa0>
 8008d36:	462a      	mov	r2, r5
 8008d38:	4649      	mov	r1, r9
 8008d3a:	4620      	mov	r0, r4
 8008d3c:	f7ff ff8a 	bl	8008c54 <L_shift>
 8008d40:	4544      	cmp	r4, r8
 8008d42:	d934      	bls.n	8008dae <__hexnan+0x10e>
 8008d44:	f1a8 0204 	sub.w	r2, r8, #4
 8008d48:	4623      	mov	r3, r4
 8008d4a:	f853 1b04 	ldr.w	r1, [r3], #4
 8008d4e:	f842 1f04 	str.w	r1, [r2, #4]!
 8008d52:	429f      	cmp	r7, r3
 8008d54:	d2f9      	bcs.n	8008d4a <__hexnan+0xaa>
 8008d56:	1b3b      	subs	r3, r7, r4
 8008d58:	f023 0303 	bic.w	r3, r3, #3
 8008d5c:	3304      	adds	r3, #4
 8008d5e:	3e03      	subs	r6, #3
 8008d60:	3401      	adds	r4, #1
 8008d62:	42a6      	cmp	r6, r4
 8008d64:	bf38      	it	cc
 8008d66:	2304      	movcc	r3, #4
 8008d68:	4443      	add	r3, r8
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	f843 2b04 	str.w	r2, [r3], #4
 8008d70:	429f      	cmp	r7, r3
 8008d72:	d2fb      	bcs.n	8008d6c <__hexnan+0xcc>
 8008d74:	683b      	ldr	r3, [r7, #0]
 8008d76:	b91b      	cbnz	r3, 8008d80 <__hexnan+0xe0>
 8008d78:	4547      	cmp	r7, r8
 8008d7a:	d126      	bne.n	8008dca <__hexnan+0x12a>
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	603b      	str	r3, [r7, #0]
 8008d80:	2005      	movs	r0, #5
 8008d82:	e025      	b.n	8008dd0 <__hexnan+0x130>
 8008d84:	3501      	adds	r5, #1
 8008d86:	2d08      	cmp	r5, #8
 8008d88:	f10b 0b01 	add.w	fp, fp, #1
 8008d8c:	dd06      	ble.n	8008d9c <__hexnan+0xfc>
 8008d8e:	4544      	cmp	r4, r8
 8008d90:	d9c3      	bls.n	8008d1a <__hexnan+0x7a>
 8008d92:	2300      	movs	r3, #0
 8008d94:	f844 3c04 	str.w	r3, [r4, #-4]
 8008d98:	2501      	movs	r5, #1
 8008d9a:	3c04      	subs	r4, #4
 8008d9c:	6822      	ldr	r2, [r4, #0]
 8008d9e:	f000 000f 	and.w	r0, r0, #15
 8008da2:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008da6:	6020      	str	r0, [r4, #0]
 8008da8:	e7b7      	b.n	8008d1a <__hexnan+0x7a>
 8008daa:	2508      	movs	r5, #8
 8008dac:	e7b5      	b.n	8008d1a <__hexnan+0x7a>
 8008dae:	9b01      	ldr	r3, [sp, #4]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d0df      	beq.n	8008d74 <__hexnan+0xd4>
 8008db4:	f1c3 0320 	rsb	r3, r3, #32
 8008db8:	f04f 32ff 	mov.w	r2, #4294967295
 8008dbc:	40da      	lsrs	r2, r3
 8008dbe:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008dc2:	4013      	ands	r3, r2
 8008dc4:	f846 3c04 	str.w	r3, [r6, #-4]
 8008dc8:	e7d4      	b.n	8008d74 <__hexnan+0xd4>
 8008dca:	3f04      	subs	r7, #4
 8008dcc:	e7d2      	b.n	8008d74 <__hexnan+0xd4>
 8008dce:	2004      	movs	r0, #4
 8008dd0:	b007      	add	sp, #28
 8008dd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008dd6 <__ascii_mbtowc>:
 8008dd6:	b082      	sub	sp, #8
 8008dd8:	b901      	cbnz	r1, 8008ddc <__ascii_mbtowc+0x6>
 8008dda:	a901      	add	r1, sp, #4
 8008ddc:	b142      	cbz	r2, 8008df0 <__ascii_mbtowc+0x1a>
 8008dde:	b14b      	cbz	r3, 8008df4 <__ascii_mbtowc+0x1e>
 8008de0:	7813      	ldrb	r3, [r2, #0]
 8008de2:	600b      	str	r3, [r1, #0]
 8008de4:	7812      	ldrb	r2, [r2, #0]
 8008de6:	1e10      	subs	r0, r2, #0
 8008de8:	bf18      	it	ne
 8008dea:	2001      	movne	r0, #1
 8008dec:	b002      	add	sp, #8
 8008dee:	4770      	bx	lr
 8008df0:	4610      	mov	r0, r2
 8008df2:	e7fb      	b.n	8008dec <__ascii_mbtowc+0x16>
 8008df4:	f06f 0001 	mvn.w	r0, #1
 8008df8:	e7f8      	b.n	8008dec <__ascii_mbtowc+0x16>

08008dfa <_realloc_r>:
 8008dfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dfe:	4680      	mov	r8, r0
 8008e00:	4614      	mov	r4, r2
 8008e02:	460e      	mov	r6, r1
 8008e04:	b921      	cbnz	r1, 8008e10 <_realloc_r+0x16>
 8008e06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008e0a:	4611      	mov	r1, r2
 8008e0c:	f7fd bc56 	b.w	80066bc <_malloc_r>
 8008e10:	b92a      	cbnz	r2, 8008e1e <_realloc_r+0x24>
 8008e12:	f7fd fbdf 	bl	80065d4 <_free_r>
 8008e16:	4625      	mov	r5, r4
 8008e18:	4628      	mov	r0, r5
 8008e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e1e:	f000 f8c6 	bl	8008fae <_malloc_usable_size_r>
 8008e22:	4284      	cmp	r4, r0
 8008e24:	4607      	mov	r7, r0
 8008e26:	d802      	bhi.n	8008e2e <_realloc_r+0x34>
 8008e28:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008e2c:	d812      	bhi.n	8008e54 <_realloc_r+0x5a>
 8008e2e:	4621      	mov	r1, r4
 8008e30:	4640      	mov	r0, r8
 8008e32:	f7fd fc43 	bl	80066bc <_malloc_r>
 8008e36:	4605      	mov	r5, r0
 8008e38:	2800      	cmp	r0, #0
 8008e3a:	d0ed      	beq.n	8008e18 <_realloc_r+0x1e>
 8008e3c:	42bc      	cmp	r4, r7
 8008e3e:	4622      	mov	r2, r4
 8008e40:	4631      	mov	r1, r6
 8008e42:	bf28      	it	cs
 8008e44:	463a      	movcs	r2, r7
 8008e46:	f7ff fc25 	bl	8008694 <memcpy>
 8008e4a:	4631      	mov	r1, r6
 8008e4c:	4640      	mov	r0, r8
 8008e4e:	f7fd fbc1 	bl	80065d4 <_free_r>
 8008e52:	e7e1      	b.n	8008e18 <_realloc_r+0x1e>
 8008e54:	4635      	mov	r5, r6
 8008e56:	e7df      	b.n	8008e18 <_realloc_r+0x1e>

08008e58 <__ascii_wctomb>:
 8008e58:	b149      	cbz	r1, 8008e6e <__ascii_wctomb+0x16>
 8008e5a:	2aff      	cmp	r2, #255	; 0xff
 8008e5c:	bf85      	ittet	hi
 8008e5e:	238a      	movhi	r3, #138	; 0x8a
 8008e60:	6003      	strhi	r3, [r0, #0]
 8008e62:	700a      	strbls	r2, [r1, #0]
 8008e64:	f04f 30ff 	movhi.w	r0, #4294967295
 8008e68:	bf98      	it	ls
 8008e6a:	2001      	movls	r0, #1
 8008e6c:	4770      	bx	lr
 8008e6e:	4608      	mov	r0, r1
 8008e70:	4770      	bx	lr
	...

08008e74 <fiprintf>:
 8008e74:	b40e      	push	{r1, r2, r3}
 8008e76:	b503      	push	{r0, r1, lr}
 8008e78:	4601      	mov	r1, r0
 8008e7a:	ab03      	add	r3, sp, #12
 8008e7c:	4805      	ldr	r0, [pc, #20]	; (8008e94 <fiprintf+0x20>)
 8008e7e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e82:	6800      	ldr	r0, [r0, #0]
 8008e84:	9301      	str	r3, [sp, #4]
 8008e86:	f7ff f96b 	bl	8008160 <_vfiprintf_r>
 8008e8a:	b002      	add	sp, #8
 8008e8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e90:	b003      	add	sp, #12
 8008e92:	4770      	bx	lr
 8008e94:	20000064 	.word	0x20000064

08008e98 <__swhatbuf_r>:
 8008e98:	b570      	push	{r4, r5, r6, lr}
 8008e9a:	460c      	mov	r4, r1
 8008e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ea0:	2900      	cmp	r1, #0
 8008ea2:	b096      	sub	sp, #88	; 0x58
 8008ea4:	4615      	mov	r5, r2
 8008ea6:	461e      	mov	r6, r3
 8008ea8:	da0d      	bge.n	8008ec6 <__swhatbuf_r+0x2e>
 8008eaa:	89a3      	ldrh	r3, [r4, #12]
 8008eac:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008eb0:	f04f 0100 	mov.w	r1, #0
 8008eb4:	bf0c      	ite	eq
 8008eb6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008eba:	2340      	movne	r3, #64	; 0x40
 8008ebc:	2000      	movs	r0, #0
 8008ebe:	6031      	str	r1, [r6, #0]
 8008ec0:	602b      	str	r3, [r5, #0]
 8008ec2:	b016      	add	sp, #88	; 0x58
 8008ec4:	bd70      	pop	{r4, r5, r6, pc}
 8008ec6:	466a      	mov	r2, sp
 8008ec8:	f000 f848 	bl	8008f5c <_fstat_r>
 8008ecc:	2800      	cmp	r0, #0
 8008ece:	dbec      	blt.n	8008eaa <__swhatbuf_r+0x12>
 8008ed0:	9901      	ldr	r1, [sp, #4]
 8008ed2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8008ed6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008eda:	4259      	negs	r1, r3
 8008edc:	4159      	adcs	r1, r3
 8008ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ee2:	e7eb      	b.n	8008ebc <__swhatbuf_r+0x24>

08008ee4 <__smakebuf_r>:
 8008ee4:	898b      	ldrh	r3, [r1, #12]
 8008ee6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008ee8:	079d      	lsls	r5, r3, #30
 8008eea:	4606      	mov	r6, r0
 8008eec:	460c      	mov	r4, r1
 8008eee:	d507      	bpl.n	8008f00 <__smakebuf_r+0x1c>
 8008ef0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008ef4:	6023      	str	r3, [r4, #0]
 8008ef6:	6123      	str	r3, [r4, #16]
 8008ef8:	2301      	movs	r3, #1
 8008efa:	6163      	str	r3, [r4, #20]
 8008efc:	b002      	add	sp, #8
 8008efe:	bd70      	pop	{r4, r5, r6, pc}
 8008f00:	ab01      	add	r3, sp, #4
 8008f02:	466a      	mov	r2, sp
 8008f04:	f7ff ffc8 	bl	8008e98 <__swhatbuf_r>
 8008f08:	9900      	ldr	r1, [sp, #0]
 8008f0a:	4605      	mov	r5, r0
 8008f0c:	4630      	mov	r0, r6
 8008f0e:	f7fd fbd5 	bl	80066bc <_malloc_r>
 8008f12:	b948      	cbnz	r0, 8008f28 <__smakebuf_r+0x44>
 8008f14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f18:	059a      	lsls	r2, r3, #22
 8008f1a:	d4ef      	bmi.n	8008efc <__smakebuf_r+0x18>
 8008f1c:	f023 0303 	bic.w	r3, r3, #3
 8008f20:	f043 0302 	orr.w	r3, r3, #2
 8008f24:	81a3      	strh	r3, [r4, #12]
 8008f26:	e7e3      	b.n	8008ef0 <__smakebuf_r+0xc>
 8008f28:	89a3      	ldrh	r3, [r4, #12]
 8008f2a:	6020      	str	r0, [r4, #0]
 8008f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008f30:	81a3      	strh	r3, [r4, #12]
 8008f32:	9b00      	ldr	r3, [sp, #0]
 8008f34:	6163      	str	r3, [r4, #20]
 8008f36:	9b01      	ldr	r3, [sp, #4]
 8008f38:	6120      	str	r0, [r4, #16]
 8008f3a:	b15b      	cbz	r3, 8008f54 <__smakebuf_r+0x70>
 8008f3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f40:	4630      	mov	r0, r6
 8008f42:	f000 f81d 	bl	8008f80 <_isatty_r>
 8008f46:	b128      	cbz	r0, 8008f54 <__smakebuf_r+0x70>
 8008f48:	89a3      	ldrh	r3, [r4, #12]
 8008f4a:	f023 0303 	bic.w	r3, r3, #3
 8008f4e:	f043 0301 	orr.w	r3, r3, #1
 8008f52:	81a3      	strh	r3, [r4, #12]
 8008f54:	89a3      	ldrh	r3, [r4, #12]
 8008f56:	431d      	orrs	r5, r3
 8008f58:	81a5      	strh	r5, [r4, #12]
 8008f5a:	e7cf      	b.n	8008efc <__smakebuf_r+0x18>

08008f5c <_fstat_r>:
 8008f5c:	b538      	push	{r3, r4, r5, lr}
 8008f5e:	4d07      	ldr	r5, [pc, #28]	; (8008f7c <_fstat_r+0x20>)
 8008f60:	2300      	movs	r3, #0
 8008f62:	4604      	mov	r4, r0
 8008f64:	4608      	mov	r0, r1
 8008f66:	4611      	mov	r1, r2
 8008f68:	602b      	str	r3, [r5, #0]
 8008f6a:	f7f8 fb5a 	bl	8001622 <_fstat>
 8008f6e:	1c43      	adds	r3, r0, #1
 8008f70:	d102      	bne.n	8008f78 <_fstat_r+0x1c>
 8008f72:	682b      	ldr	r3, [r5, #0]
 8008f74:	b103      	cbz	r3, 8008f78 <_fstat_r+0x1c>
 8008f76:	6023      	str	r3, [r4, #0]
 8008f78:	bd38      	pop	{r3, r4, r5, pc}
 8008f7a:	bf00      	nop
 8008f7c:	2000044c 	.word	0x2000044c

08008f80 <_isatty_r>:
 8008f80:	b538      	push	{r3, r4, r5, lr}
 8008f82:	4d06      	ldr	r5, [pc, #24]	; (8008f9c <_isatty_r+0x1c>)
 8008f84:	2300      	movs	r3, #0
 8008f86:	4604      	mov	r4, r0
 8008f88:	4608      	mov	r0, r1
 8008f8a:	602b      	str	r3, [r5, #0]
 8008f8c:	f7f8 fb59 	bl	8001642 <_isatty>
 8008f90:	1c43      	adds	r3, r0, #1
 8008f92:	d102      	bne.n	8008f9a <_isatty_r+0x1a>
 8008f94:	682b      	ldr	r3, [r5, #0]
 8008f96:	b103      	cbz	r3, 8008f9a <_isatty_r+0x1a>
 8008f98:	6023      	str	r3, [r4, #0]
 8008f9a:	bd38      	pop	{r3, r4, r5, pc}
 8008f9c:	2000044c 	.word	0x2000044c

08008fa0 <abort>:
 8008fa0:	b508      	push	{r3, lr}
 8008fa2:	2006      	movs	r0, #6
 8008fa4:	f000 f834 	bl	8009010 <raise>
 8008fa8:	2001      	movs	r0, #1
 8008faa:	f7f8 faeb 	bl	8001584 <_exit>

08008fae <_malloc_usable_size_r>:
 8008fae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fb2:	1f18      	subs	r0, r3, #4
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	bfbc      	itt	lt
 8008fb8:	580b      	ldrlt	r3, [r1, r0]
 8008fba:	18c0      	addlt	r0, r0, r3
 8008fbc:	4770      	bx	lr

08008fbe <_raise_r>:
 8008fbe:	291f      	cmp	r1, #31
 8008fc0:	b538      	push	{r3, r4, r5, lr}
 8008fc2:	4604      	mov	r4, r0
 8008fc4:	460d      	mov	r5, r1
 8008fc6:	d904      	bls.n	8008fd2 <_raise_r+0x14>
 8008fc8:	2316      	movs	r3, #22
 8008fca:	6003      	str	r3, [r0, #0]
 8008fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd0:	bd38      	pop	{r3, r4, r5, pc}
 8008fd2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8008fd4:	b112      	cbz	r2, 8008fdc <_raise_r+0x1e>
 8008fd6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008fda:	b94b      	cbnz	r3, 8008ff0 <_raise_r+0x32>
 8008fdc:	4620      	mov	r0, r4
 8008fde:	f000 f831 	bl	8009044 <_getpid_r>
 8008fe2:	462a      	mov	r2, r5
 8008fe4:	4601      	mov	r1, r0
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008fec:	f000 b818 	b.w	8009020 <_kill_r>
 8008ff0:	2b01      	cmp	r3, #1
 8008ff2:	d00a      	beq.n	800900a <_raise_r+0x4c>
 8008ff4:	1c59      	adds	r1, r3, #1
 8008ff6:	d103      	bne.n	8009000 <_raise_r+0x42>
 8008ff8:	2316      	movs	r3, #22
 8008ffa:	6003      	str	r3, [r0, #0]
 8008ffc:	2001      	movs	r0, #1
 8008ffe:	e7e7      	b.n	8008fd0 <_raise_r+0x12>
 8009000:	2400      	movs	r4, #0
 8009002:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009006:	4628      	mov	r0, r5
 8009008:	4798      	blx	r3
 800900a:	2000      	movs	r0, #0
 800900c:	e7e0      	b.n	8008fd0 <_raise_r+0x12>
	...

08009010 <raise>:
 8009010:	4b02      	ldr	r3, [pc, #8]	; (800901c <raise+0xc>)
 8009012:	4601      	mov	r1, r0
 8009014:	6818      	ldr	r0, [r3, #0]
 8009016:	f7ff bfd2 	b.w	8008fbe <_raise_r>
 800901a:	bf00      	nop
 800901c:	20000064 	.word	0x20000064

08009020 <_kill_r>:
 8009020:	b538      	push	{r3, r4, r5, lr}
 8009022:	4d07      	ldr	r5, [pc, #28]	; (8009040 <_kill_r+0x20>)
 8009024:	2300      	movs	r3, #0
 8009026:	4604      	mov	r4, r0
 8009028:	4608      	mov	r0, r1
 800902a:	4611      	mov	r1, r2
 800902c:	602b      	str	r3, [r5, #0]
 800902e:	f7f8 fa99 	bl	8001564 <_kill>
 8009032:	1c43      	adds	r3, r0, #1
 8009034:	d102      	bne.n	800903c <_kill_r+0x1c>
 8009036:	682b      	ldr	r3, [r5, #0]
 8009038:	b103      	cbz	r3, 800903c <_kill_r+0x1c>
 800903a:	6023      	str	r3, [r4, #0]
 800903c:	bd38      	pop	{r3, r4, r5, pc}
 800903e:	bf00      	nop
 8009040:	2000044c 	.word	0x2000044c

08009044 <_getpid_r>:
 8009044:	f7f8 ba86 	b.w	8001554 <_getpid>

08009048 <_init>:
 8009048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800904a:	bf00      	nop
 800904c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800904e:	bc08      	pop	{r3}
 8009050:	469e      	mov	lr, r3
 8009052:	4770      	bx	lr

08009054 <_fini>:
 8009054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009056:	bf00      	nop
 8009058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800905a:	bc08      	pop	{r3}
 800905c:	469e      	mov	lr, r3
 800905e:	4770      	bx	lr
